name: ButtonsHud - Dimencia and Archaegeo v4.855 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        ResolutionY = 1080 --export: Default is 1080, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}local a=system.print;local b=math.floor;local c=string.format;local d=json.decode;local e=json.encode;local f=core.getElementMaxHitPointsById;local g=unit.getAtmosphereDensity;local h=core.getElementHitPointsById;local j=core.getElementTypeById;local k=core.getElementMassById;local l=core.getConstructMass;local m=Nav.control.isRemoteControlled;function script.onStart()VERSION_NUMBER=4.855;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})InAtmo=g()>0;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;SpaceLand=false;SpaceLaunch=false;FinalLand=false;HovGndDet=-1;clearAllCheck=false;LockPitch=nil;LastStartTime=0;local n={}local o=0;local p=0;local q=""local r=true;local s={}local t=1;local u=0.001;local v=2560;local w=1440;local x=nil;local y=nil;local z=nil;local A=nil;local B=false;local C=false;local D=0;local E=nil;local F={}local G={}local H={}local I=0;local J=false;local K={}local L={}local M=b(1/apTickRate)*2;local N={}local O={}local P={}local Q={}local R=false;local S=16;local T=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY"}AutoVariables={"brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}if dbHud then local U=dbHud.hasKey;if not useTheseSettings then for V,W in pairs(SaveableVariables)do if U(W)then local X=d(dbHud.getStringValue(W))if X~=nil then a(W.." "..dbHud.getStringValue(W))_G[W]=X;B=true end end end end;coroutine.yield()for V,W in pairs(AutoVariables)do if U(W)then local X=d(dbHud.getStringValue(W))if X~=nil then a(W.." "..dbHud.getStringValue(W))_G[W]=X;B=true end end end;if useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif B then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;coroutine.yield()local Y=system.getTime()if LastStartTime+180<Y then LastMaxBrakeInAtmo=0 end;LastStartTime=Y;brakeToggle=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then MsgText="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..b(PrimaryR+0.5)..","..b(PrimaryG+0.5)..","..b(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..b(PrimaryR*0.9+0.5)..","..b(PrimaryG*0.9+0.5)..","..b(PrimaryB*0.9+0.5)..[[)]]local a0=0;for V in pairs(ElementsID)do local type=j(ElementsID[V])if type=="landing gear"then HasGear=true end;if type=="dynamic core"then local a1=f(ElementsID[V])if a1>10000 then S=128 elseif a1>1000 then S=64 elseif a1>150 then S=32 end end;I=I+f(ElementsID[V])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local a1=f(ElementsID[V])local a2=k(ElementsID[V])local a3=0;local a4=system.getTime()if type=="Atmospheric Fuel Tank"then local a5=400;local a6=35.03;if a1>10000 then a5=51200;a6=5480 elseif a1>1300 then a5=6400;a6=988.67 elseif a1>150 then a5=1600;a6=182.67 end;a3=a2-a6;if fuelTankHandlingAtmo>0 then a5=a5+a5*fuelTankHandlingAtmo*0.2 end;if a3>a5 then a5=a3 end;F[#F+1]={ElementsID[V],core.getElementNameById(ElementsID[V]),a5,a6,a3,a4}end;if type=="Rocket Fuel Tank"then local a5=320;local a6=173.42;if a1>65000 then a5=40000;a6=25740 elseif a1>6000 then a5=5120;a6=4720 elseif a1>700 then a5=640;a6=886.72 end;a3=a2-a6;if fuelTankHandlingRocket>0 then a5=a5+a5*fuelTankHandlingRocket*0.2 end;if a3>a5 then a5=a3 end;H[#H+1]={ElementsID[V],core.getElementNameById(ElementsID[V]),a5,a6,a3,a4}end;if type=="Space Fuel Tank"then local a5=2400;local a6=182.67;if a1>10000 then a5=76800;a6=5480 elseif a1>1300 then a5=9600;a6=988.67 end;a3=a2-a6;if fuelTankHandlingSpace>0 then a5=a5+a5*fuelTankHandlingSpace*0.2 end;if a3>a5 then a5=a3 end;G[#G+1]={ElementsID[V],core.getElementNameById(ElementsID[V]),a5,a6,a3,a4}end end end;if a0==250 then a0=0;coroutine.yield()end end;coroutine.yield()if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if InAtmo then BrakeIsOn=true end;if radar_1 then if j(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,W in pairs(door)do W.toggle()end end;if switch then for _,W in pairs(switch)do W.toggle()end end;if forcefield then for _,W in pairs(forcefield)do W.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if m()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if InAtmo and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=InAtmo;unit.hide()function refreshLastMaxBrake(a7,a8)if a7==nil then a7=core.g()end;a7=round(a7,5)local a9=g()if a8~=nil and a8 or(E==nil or E~=a7)then local velocity=core.getVelocity()local aa=vec3(velocity):len()local ab=d(unit.getData()).maxBrake;if ab~=nil and ab>0 and InAtmo then ab=ab/utils.clamp(aa/100,0.1,1)ab=ab/a9;if ab>LastMaxBrakeInAtmo and a9>0.10 then LastMaxBrakeInAtmo=ab end end;if ab~=nil and ab>0 then LastMaxBrake=ab end;E=a7 end end;function MakeButton(ac,ad,ae,af,ag,ah,ai,aj,ak)local al={enableName=ac,disableName=ad,width=ae,height=af,x=ag,y=ah,toggleVar=ai,toggleFunction=aj,drawCondition=ak,hovered=false}table.insert(s,al)return al end;function UpdateAtlasLocationsList()AtlasOrdered={}for V,W in pairs(atlas[0])do table.insert(AtlasOrdered,{name=W.name,index=V})end;local function am(an,ao)return an.name<ao.name end;table.sort(AtlasOrdered,am)end;function AddLocationsToAtlas()for V,W in pairs(SavedLocations)do table.insert(atlas[0],W)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local ap=planet.name..". "..#SavedLocations;if radar_1 then local aq,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if aq~=nil and aq~=""then ap=ap.." "..radar_1.getConstructName(aq)end end;local ar={position=position,name=ap,atmosphere=g(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=ar;table.insert(atlas[0],ar)UpdateAtlasLocationsList()MsgText="Location saved as "..ap else MsgText="Databank must be installed to save locations"end end;function UpdatePosition()local as=-1;local ar;for V,W in pairs(SavedLocations)do if W.name and W.name==CustomTarget.name then as=V;break end end;if as~=-1 then ar={position=vec3(core.getConstructWorldPos()),name=SavedLocations[as].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[as]=ar;as=-1;for V,W in pairs(atlas[0])do if W.name and W.name==CustomTarget.name then as=V end end;if as>-1 then atlas[0][as]=ar end;UpdateAtlasLocationsList()MsgText=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local as=-1;for V,W in pairs(atlas[0])do if W.name and W.name==CustomTarget.name then as=V end end;if as>-1 then table.remove(atlas[0],as)end;as=-1;for V,W in pairs(SavedLocations)do if W.name and W.name==CustomTarget.name then MsgText=W.name.." saved location cleared"as=V;break end end;if as~=-1 then table.remove(SavedLocations,as)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(at)at[#at+1]=c([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if r then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;r=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;r=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(au,av,ag,ah,ae,af)if au>ag and au<ag+ae and av>ah and av<ah+af then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local aw=vec3(core.getConstructWorldOrientationForward())local ax=vec3(core.getConstructWorldOrientationRight())local ay=vec3(core.getWorldVertical())local az=getPitch(ay,aw,ax)LockPitch=az;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not InAtmo then AutoTakeoff=false;HoldAltitude=CoreAltitude;if not SpaceLaunch and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if SpaceLaunch then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if m()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if g()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else SpaceLand=true end else SpaceLaunch=true;RetrogradeIsOn=false;ProgradeIsOn=false;if g()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif g()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;APThrottleSet=false;LockPitch=nil else SpaceLaunch=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;APThrottleSet=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function checkDamage(at)local aA=0;q=""local aB=I;local aC=0;local aD=0;local aE=0;local aF=0;local aG=""for V in pairs(ElementsID)do local a1=0;local aH=0;aH=f(ElementsID[V])a1=h(ElementsID[V])aC=aC+a1;if a1<aH then if a1==0 then aE=aE+1 else aD=aD+1 end;if J and#n==0 then position=vec3(core.getElementPositionById(ElementsID[V]))local ag=position.x-S;local ah=position.y-S;local aI=position.z-S;table.insert(n,core.spawnArrowSticker(ag,ah,aI+1,"down"))table.insert(n,core.spawnArrowSticker(ag,ah,aI+1,"down"))core.rotateSticker(n[2],0,0,90)table.insert(n,core.spawnArrowSticker(ag+1,ah,aI,"north"))table.insert(n,core.spawnArrowSticker(ag+1,ah,aI,"north"))core.rotateSticker(n[4],90,90,0)table.insert(n,core.spawnArrowSticker(ag-1,ah,aI,"south"))table.insert(n,core.spawnArrowSticker(ag-1,ah,aI,"south"))core.rotateSticker(n[6],90,-90,0)table.insert(n,core.spawnArrowSticker(ag,ah-1,aI,"east"))table.insert(n,core.spawnArrowSticker(ag,ah-1,aI,"east"))core.rotateSticker(n[8],90,0,90)table.insert(n,core.spawnArrowSticker(ag,ah+1,aI,"west"))table.insert(n,core.spawnArrowSticker(ag,ah+1,aI,"west"))core.rotateSticker(n[10],-90,0,90)table.insert(n,ElementsID[V])end elseif J and#n>0 and n[11]==ElementsID[V]then for aJ in pairs(n)do core.deleteSticker(n[aJ])end;n={}end end;aA=b(aC/aB*100)if aA<100 then at[#at+1]=[[<g class="pbright txt">]]aF=b(aA*2.55)aG=c("rgb(%d,%d,%d)",255-aF,aF,0)if aA<100 then at[#at+1]=c([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aG,aA)if aE>0 then at[#at+1]=c([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aG,aE,aD)elseif aD>0 then at[#at+1]=c([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aG,aD)end end;at[#at+1]=[[<\g>]]end end;function DrawCursorLine(at)local aK=b(utils.clamp(Distance/(v/4)*255,0,255))at[#at+1]=c("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,b(PrimaryR+0.5)+aK,b(PrimaryG+0.5)-aK,b(PrimaryB+0.5)-aK)end;function getPitch(aL,aM,ao)local aN=aL:cross(ao):normalize_inplace()local az=math.acos(utils.clamp(aN:dot(-aM),-1,1))*constants.rad2deg;if aN:cross(-aM):dot(ao)<0 then az=-az end;return az end;function clearAll()if clearAllCheck then clearAllCheck=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;FollowMode=false;APThrottleSet=false;SpaceLand=false;SpaceLaunch=false;ReentryMode=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;GyroIsOn=false;LockPitch=nil else clearAllCheck=true end end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 else if C then for V,W in pairs(SaveableVariables)do dbHud.setStringValue(W,e(nil))end;for V,W in pairs(AutoVariables)do if W~="SavedLocations"then dbHud.setStringValue(W,e(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;C=false;B=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe of ALL data"C=true end end end;function CheckButtons()for _,W in pairs(s)do if W.hovered then if not W.drawCondition or W.drawCondition()then W.toggleFunction()end;W.hovered=false end end end;function SetButtonContains()local ag=SimulatedX+v/2;local ah=SimulatedY+w/2;for _,W in pairs(s)do W.hovered=Contains(ag,ah,W.x,W.y,W.width,W.height)end end;function DrawButton(at,aO,hover,ag,ah,aP,aQ,aR,aS,aT,aU)if type(aT)=="function"then aT=aT()end;if type(aU)=="function"then aU=aU()end;at[#at+1]=c("<rect x='%f' y='%f' width='%f' height='%f' fill='",ag,ah,aP,aQ)if aO then at[#at+1]=c("%s'",aR)else at[#at+1]=aS end;if hover then at[#at+1]=" style='stroke:white; stroke-width:2'"else at[#at+1]=" style='stroke:black; stroke-width:1'"end;at[#at+1]="></rect>"at[#at+1]=c("<text x='%f' y='%f' font-size='24' fill='",ag+aP/2,ah+aQ/2+5)if aO then at[#at+1]="black"else at[#at+1]="white"end;at[#at+1]="' text-anchor='middle' font-family='Montserrat'>"if aO then at[#at+1]=c("%s</text>",aT)else at[#at+1]=c("%s</text>",aU)end end;function DrawButtons(at)local aV="rgb(50,50,50)'"local aW="rgb(210,200,200)"local aX=DrawButton;for _,W in pairs(s)do local ad=W.disableName;local ac=W.enableName;if type(ad)=="function"then ad=ad()end;if type(ac)=="function"then ac=ac()end;if not W.drawCondition or W.drawCondition()then aX(at,W.toggleVar(),W.hovered,W.x,W.y,W.width,W.height,aW,aV,ad,ac)end end end;function DrawTank(at,R,ag,aY,aZ,a_,b0,b1)local b2=1;local b3=2;local b4=3;local b5=4;local b6=5;local b7=6;local b8=""local b9=0;local ba=fuelY;local bb=fuelY+10;if m()==1 and not RemoteHud then ba=ba-50;bb=bb-50 end;at[#at+1]=[[<g class="pdim txtfuel">]]if aZ=="ATMO"then b8="atmofueltank"elseif aZ=="SPACE"then b8="spacefueltank"else b8="rocketfueltank"end;b9=_G[b8 .."_size"]if#a_>0 then for i=1,#a_ do local ap=string.sub(a_[i][b3],1,12)local bc=0;for aJ=1,b9 do if a_[i][b3]==d(unit[b8 .."_"..aJ].getData()).name then bc=aJ;break end end;if R or b0[i]==nil or b1[i]==nil then local bd=0;local be=0;local bf=0;local bg=0;local a4=system.getTime()if bc~=0 then b1[i]=d(unit[b8 .."_"..bc].getData()).percentage;b0[i]=d(unit[b8 .."_"..bc].getData()).timeLeft;if b0[i]=="n/a"then b0[i]=0 end else bf=k(a_[i][b2])-a_[i][b5]bd=a_[i][b4]b1[i]=b(0.5+bf*100/bd)be=a_[i][b6]bg=a_[i][b7]if be<=bf then b0[i]=0 else b0[i]=b(0.5+bf/((be-bf)/(a4-bg)))end;a_[i][b6]=bf;a_[i][b7]=a4 end end;if ap==aY then ap=c("%s %d",aZ,i)end;if bc==0 then ap=ap.." *"end;local bh;if b0[i]==0 then bh="n/a"else bh=FormatTimeString(b0[i])end;if b1[i]~=nil then local aF=b(b1[i]*2.55)local aG=c("rgb(%d,%d,%d)",255-aF,aF,0)local bi=""if bh~="n/a"and b0[i]<120 or b1[i]<5 then if R then bi=[[class="red"]]end end;at[#at+1]=c([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ag,ba,bi,ap,ag,bb,aG,b1[i],bh)ba=ba+30;bb=bb+30 end end end;at[#at+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local az=-math.deg(math.atan(velocity.y,velocity.z))+180;az=az-90;if az<0 then az=360+az end;if az>180 then az=-180+az-180 end;return-az end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bj=math.deg(math.atan(velocity.y,velocity.x))-90;if bj<-180 then bj=360+bj end;return bj end;function AlignToWorldVector(bk,bl)if not InAtmo or RateOfChange>MinimumRateOfChange+0.08 or HovGndDet~=-1 then if bl==nil then bl=u end;bk=vec3(bk):normalize()local bm=vec3(core.getConstructWorldOrientationForward())-bk;local bn=-getMagnitudeInDirection(bm,core.getConstructWorldOrientationRight())*t;local bo=-getMagnitudeInDirection(bm,core.getConstructWorldOrientationUp())*t;if o==0 then o=bn/2 end;if p==0 then p=bo/2 end;YawInput2=YawInput2-(bn+(bn-o)*DampingMultiplier)PitchInput2=PitchInput2+bo+(bo-p)*DampingMultiplier;o=bn;p=bo;if math.abs(bn)<bl and math.abs(bo)<bl then return true end;return false end end;function getAPEnableName()local ap=AutopilotTargetName;if ap==nil then ap=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if ap==nil then ap="None"end;return"Engage Autopilot: "..ap end;function getAPDisableName()local ap=AutopilotTargetName;if ap==nil then ap=CustomTarget.name end;if ap==nil then ap="None"end;return"Disable Autopilot: "..ap end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif g()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bp=50;local bq=260;local br=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bq,bp,v/2-bq/2,w/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bq,bp,v/2-bq/2-50-br.width,w/2-bp+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bq,bp,v/2-bq/2+br.width+50,w/2-bp+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return g()==0 end)local bs=MakeButton(getAPEnableName,getAPDisableName,600,60,v/2-600/2,w/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bs.height,bs.x+bs.width+30,bs.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,bs.height,bs.x+bs.width+30,bs.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,bs.height,bs.x-200-30,bs.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bp=60;bq=300;local ag=10;local ah=w/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bq,bp,ag,ah,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bq,bp,ag+bq+20,ah,function()return AltitudeHold end,ToggleAltitudeHold)ah=ah+bp+20;MakeButton("Engage Autoland","Disable Autoland",bq,bp,ag,ah,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bq,bp,ag+bq+20,ah,function()return AutoTakeoff end,ToggleAutoTakeoff)ah=ah+bp+20;MakeButton("Show Orbit Display","Hide Orbit Display",bq,bp,ag,ah,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)ah=ah+bp+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bq,bp,ag,ah,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bq,bp,ag+bq+20,ah,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)ah=ah+bp+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bq,bp,ag,ah,function()return FollowMode end,ToggleFollowMode,function()return m()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bq,bp,ag+bq+20,ah,function()return J end,function()J=not J;if J then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return m()==1 end)ah=ah+bp+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",bq,bp,ag,ah,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;ah=ah+bp+20;MakeButton(function()return c("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return c("Control Scheme: %s",userControlScheme)end,bq*2,bp,ag,ah,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function GetFlightStyle()local bt=Nav.axisCommandManager:getAxisCommandType(0)local bu="TRAVEL"if bt==1 then bu="CRUISE"end;if Autopilot then bu="AUTOPILOT"end;return bu end;function updateHud(at)local bv=CoreAltitude;local velocity=core.getVelocity()local aa=vec3(velocity):len()local ay=vec3(core.getWorldVertical())local aw=vec3(core.getConstructWorldOrientationForward())local ax=vec3(core.getConstructWorldOrientationRight())local bw=vec3(core.getConstructWorldOrientationUp())local bx=getRoll(ay,aw,ax)local by=bx/180*math.pi;local bz=math.cos(by)local bA=math.sin(by)local az=getPitch(ay,aw,ax*bz+bw*bA)local bB=bx;local bC=az;local bD=g()local bE=b(unit.getThrottle())local bF=aa*3.6;local bG=unit.getAxisCommandValue(0)local bu=GetFlightStyle()local bH="ROLL"local bI=unit.getClosestPlanetInfluence()>0;if bE==nil then bE=0 end;if not bI then if aa>5 then az=getRelativePitch(velocity)bx=getRelativeYaw(velocity)else az=0;bx=0 end;bH="YAW"end;at[#at+1]=LastOdometerOutput;at[#at+1]=q;at[#at+1]=RadarMessage;if T%M==0 then R=true end;if fuelX~=0 and fuelY~=0 then DrawTank(at,R,fuelX,"Atmospheric ","ATMO",F,P,Q)DrawTank(at,R,fuelX+100,"Space fuel t","SPACE",G,N,O)DrawTank(at,R,fuelX+200,"Rocket fuel ","ROCKET",H,K,L)end;if R then R=false;T=0 end;T=T+1;DrawVerticalSpeed(at,bv)if m()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if bI then DrawRollLines(at,centerX,centerY,bB,bH,bI)DrawArtificialHorizon(at,bC,bB,centerX,centerY,bI,b(getRelativeYaw(velocity)),aa)DrawAltitudeDisplay(at,bv)else DrawRollLines(at,centerX,centerY,bx,bH,bI)DrawArtificialHorizon(at,az,bx,centerX,centerY,bI,b(bx),aa)end;DrawPrograde(at,velocity,aa,centerX,centerY)end end;DrawThrottle(at,bu,bE,bG)DrawSpeed(at,bF)DrawWarnings(at)DisplayOrbitScreen(at)if screen_2 then local bJ=vec3(core.getConstructWorldPos())local ag=960+bJ.x/MapXRatio;local ah=450+bJ.y/MapYRatio;screen_2.moveContent(YouAreHere,(ag-80)/19.2,(ah-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and m()==0 end;function HUDPrologue(at)local bK=rgb;local bL=Z;local bM=rgb;local bN=Z;if IsInFreeLook()and not brightHud then bK=[[rgb(]]..b(PrimaryR*0.4+0.5)..","..b(PrimaryG*0.4+0.5)..","..b(PrimaryB*0.3+0.5)..[[)]]bL=[[rgb(]]..b(PrimaryR*0.3+0.5)..","..b(PrimaryG*0.3+0.5)..","..b(PrimaryB*0.2+0.5)..[[)]]end;at[#at+1]=c([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],bK,bK,bM,bM,bL,bL,bN,bN,ResolutionX,ResolutionY)end;function HUDEpilogue(at)at[#at+1]="</svg>"end;function DrawSpeed(at,bF)local bO=throtPosY-10;local bP=throtPosX+10;at[#at+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then bO=75 end;at[#at+1]=c([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bP,bO,b(bF))end;function DrawOdometer(at,TotalDistanceTrip,TotalDistanceTravelled,bu,bQ,bD)local bR=1240;local bS=55;local bT=65;local bD=g()local a7=core.g()local bU=0;local bV=0;local bW=0;refreshLastMaxBrake(a7)if InAtmo then bW=LastMaxBrakeInAtmo else bW=LastMaxBrake end;maxThrust=Nav:maxForceForward()D=l()if not ShowOdometer then return end;local bX=vec3(core.getWorldAcceleration()):len()/9.80665;if a7>0.1 then bV=D*a7;bU=maxThrust/a7 end;at[#at+1]=[[<g class="pdim txt txtend">]]if m()==1 and not RemoteHud then bR=1120;bS=55;bT=65 elseif InAtmo then at[#at+1]=c([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bD)end;at[#at+1]=c([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bR,bS,bR,bT,a7/9.80665,bR,bS+20,bR,bT+20,bX)at[#at+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if m()==0 or RemoteHud then at[#at+1]=c([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="180">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bQ),FormatTimeString(TotalFlightTime),D/1000,bW/1000,maxThrust/1000,bu)if a7>0.1 then at[#at+1]=c([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bU/1000,bV/1000)else at[#at+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else at[#at+1]=c([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bu)end;at[#at+1]="</g>"end;function DrawThrottle(at,bu,bE,bG)local ba=throtPosY+10;local bb=throtPosY+20;if m()==1 and not RemoteHud then ba=55;bb=65 end;local bY="CRUISE"local unit="km/h"local bZ=bG;if bu=="TRAVEL"or bu=="AUTOPILOT"then bY="THROT"unit="%"bZ=bE;local b_="dim"if bE<0 then b_="red"end;at[#at+1]=c([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],b_,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(bE),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;at[#at+1]=c([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,ba,bY,throtPosX+10,bb,bZ,unit)end;function DrawVerticalSpeed(at,bv)if bv<200000 and not InAtmo or bv and InAtmo then local c0=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local c1=0;if math.abs(c0)>1 then c1=45*math.log(math.abs(c0),10)if c0<0 then c1=-c1 end end;at[#at+1]=c([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,b(c0),b(c1))end end;function getHeading(aM)local c2=-vec3(core.getWorldVertical())aM=aM-aM:project_on(c2)local c3=vec3(0,0,1)c3=c3-c3:project_on(c2)local c4=c3:cross(c2)local c1=c3:angle_between(aM)*constants.rad2deg;if aM:dot(c4)<0 then c1=360-c1 end;return c1 end;function DrawRollLines(at,centerX,centerY,bB,bH,bI)local c5=circleRad;local c6=20;c6=b(c6)local c7=b(bB)if bI then for i=-45,45,5 do local c8=i;at[#at+1]=c([[<g transform="rotate(%f,%d,%d)">]],c8,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;at[#at+1]=c([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+c5+c6-len,centerX,centerY+c5+c6)end;at[#at+1]=c([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+c5+c6-35,bH,centerX,centerY+c5+c6-25,c7)at[#at+1]=c([[<g transform="rotate(%f,%d,%d)">]],-bB,centerX,centerY)at[#at+1]=c([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+c5+c6-20,centerX+5,centerY+c5+c6-20,centerX,centerY+c5+c6-15)at[#at+1]="</g>"end;local bj=c7;if bI then bj=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local c9=20;local ca=b(bj)local cb=0;local cc=centerY+c5+c6+20;local cd=centerX;if bH~="YAW"then cc=130;cd=960 end;local ce=[[<path class="txttick line" d="]]for i=b(ca-(c9+10)-ca%5+0.5),b(ca+c9+10+ca%5+0.5),5 do local ag=cd+-i*5+bj*5;if i%10==0 then cb=10;local cf=i;if cf==360 then cf=0 elseif cf>360 then cf=cf-360 elseif cf<0 then cf=cf+360 end;at[#at+1]=c([[
                                    <text x="%f" y="%f">%d</text>]],ag+5,cc-12,cf)elseif i%5==0 then cb=5 end;if cb==10 then ce=c([[%s M %f %f v %d]],ce,ag,cc-5,cb)else ce=c([[%s M %f %f v %d]],ce,ag,cc-2.5,cb)end end;at[#at+1]=ce..[["/>]]at[#at+1]=c([[<<polygon points="%d,%d %d,%d %d,%d"/>]],cd-5,cc+10,cd+5,cc+10,cd,cc+5)if bI then bH="HDG"end;at[#at+1]=c([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],cd,cc+25,ca,cd,cc+35,bH)end;function DrawArtificialHorizon(at,bC,bB,centerX,centerY,bI,cg,aa)local c5=circleRad;local ch=b(c5*3/5)if c5>0 then local ci=b(bC)local len=0;local ce=c([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bB,centerX,centerY)if not InAtmo then ce=c([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;at[#at+1]=c([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],c5-1,centerX,centerY)at[#at+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=b(ci-30-ci%5+0.5),b(ci+30+ci%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ah=centerY+-i*5+bC*5;if len==30 then ce=c([[%s M %d %f h %d]],ce,centerX-ch-len,ah,len)if InAtmo then at[#at+1]=c([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bB,centerX,centerY,centerX-ch+10,ah,i)at[#at+1]=c([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bB,centerX,centerY,centerX+ch-10,ah,i)if i==0 or i==180 or i==-180 then at[#at+1]=c([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bB,centerX,centerY,centerX-ch+20,ah,ch*2-40)end else at[#at+1]=c([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-ch+10,ah,i)at[#at+1]=c([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+ch-10,ah,i)end;ce=c([[%s M %d %f h %d]],ce,centerX+ch,ah,len)else ce=c([[%s M %d %f h %d]],ce,centerX-ch-len,ah,len)ce=c([[%s M %d %f h %d]],ce,centerX+ch,ah,len)end end;at[#at+1]=ce..[["/>]]local cj="PITCH"if not bI then cj="REL PITCH"end;if bC>90 and not InAtmo then bC=90-(bC-90)elseif bC<-90 and not InAtmo then bC=-90-(bC+90)end;if c5>200 then if InAtmo then if aa>MinAutopilotSpeed then at[#at+1]=c([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,cg)end;at[#at+1]=c([[<g transform="rotate(%f,%d,%d)">]],-bB,centerX,centerY)else at[#at+1]=c([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;at[#at+1]=c([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-ch+25,centerY-5,centerX-ch+20,centerY,centerX-ch+25,centerY+5,centerX-ch+50,centerY+4,ci)at[#at+1]=c([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+ch-25,centerY-5,centerX+ch-20,centerY,centerX+ch-25,centerY+5,centerX+ch-30,centerY+4,ci)at[#at+1]="</g>"end;local ck=b(c5/3)at[#at+1]=c([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ck,centerY,c5-ck)if not InAtmo and bI then at[#at+1]=c([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bB,centerX,centerY,centerX-ch+10,centerY,ch*2-20)end;at[#at+1]="</g>"if c5<200 then if InAtmo and aa>MinAutopilotSpeed then at[#at+1]=c([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-c5,cj,centerX,centerY-c5+10,ci,centerX,centerY-15,"Yaw",centerX,centerY+20,cg)else at[#at+1]=c([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-c5,cj,centerX,centerY-c5+15,ci)end end end end;function DrawAltitudeDisplay(at,bv)if bv<200000 and not InAtmo or bv and InAtmo then local cl=altMeterX;local cm=altMeterY;local cn=78;local co=19;table.insert(at,c([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],cl-1,cm-4,cn+2,co+6,cl+1,cm-1,cn-4,co))local as=0;local cp=1;local cq=0;local cr=bv<0;local cs=9;if cr then cs=0 end;local bv=math.abs(bv)while as<6 do local ct=11;local cu=16;local cv=9;local cw=14;local bi="altsm"if as>2 then cu=cu+3;ct=ct+2;cw=cw+2;cv=cv-6;bi="altbig"end;if cr then bi=bi.." red"end;local cx=bv/cp%10;local cy=b(cx)local cz=b((cy+1)%10)local cA=cq;if as==0 then cA=cx-cy;if cr then cA=1-cA end end;if cr and(as==0 or cq~=0)then local cB=cz;cz=cy;cy=cB end;local cC=cu*(cA-1)local cD=cC+cu;local ag=cl+cv+(6-as)*ct;local ah=cm+cw;table.insert(at,c([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bi,ag,ah+cC,cz,ag,ah+cD,cy))as=as+1;cp=cp*10;if cy==cs then cq=cA else cq=0 end end;table.insert(at,[[</g></g>]])end end;function DrawPrograde(at,velocity,aa,centerX,centerY)if aa>5 and not InAtmo or aa>MinAutopilotSpeed then local c5=circleRad;local cE=20;local cF=20;local cG=vec3(velocity)local cH=getRelativePitch(cG)local cI=getRelativeYaw(cG)local cJ=-cI/cF*c5;local cK=cH/cE*c5;local ag=centerX+cJ;local ah=centerY+cK;local cL=math.sqrt(cJ^2+cK^2)if cL<c5 then at[#at+1]=c('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ag,ah)else local c1=math.atan(cK,cJ)local cM=centerX+c5*math.cos(c1)local cN=centerY+c5*math.sin(c1)at[#at+1]=c('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cM,cN)end;cH=getRelativePitch(-cG)cI=getRelativeYaw(-cG)cJ=-cI/cF*c5;cK=cH/cE*c5;ag=centerX+cJ;ah=centerY+cK;cL=math.sqrt(cJ^2+cK^2)if not InAtmo then if cL<c5 then at[#at+1]=c('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ag,ah)else local c1=math.atan(cK,cJ)local cM=centerX+c5*math.cos(c1)local cN=centerY+c5*math.sin(c1)at[#at+1]=c('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cM,cN)end end end end;function DrawWarnings(at)at[#at+1]=c([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)at[#at+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then at[#at+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]at[#at+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]at[#at+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cO=960;local cP=860;local cQ=880;local cR=900;local cS=960;local cT=200;local cU=150;local cV=960;if m()==1 and not RemoteHud then cP=135;cQ=155;cR=175;cT=115;cU=95 end;if BrakeIsOn then at[#at+1]=c([[<text x="%d" y="%d">Brake Engaged</text>]],cO,cP)end;if InAtmo and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then at[#at+1]=c([[<text x="%d" y="%d">** STALL WARNING **</text>]],cO,cT+50)end;if GyroIsOn then at[#at+1]=c([[<text x="%d" y="%d">Gyro Enabled</text>]],cO,cV)end;if GearExtended then if HasGear then at[#at+1]=c([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cO,cQ)else at[#at+1]=c([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cO,cQ)end;at[#at+1]=c([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cO,cR,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if IsBoosting then at[#at+1]=c([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cO,cS+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then at[#at+1]=c([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cO,cT+20,b(AntigravTargetAltitude),b(antigrav.getBaseAltitude()))else at[#at+1]=c([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cO,cT+20,b(AntigravTargetAltitude),b(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then at[#at+1]=c([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cO,cT+20,AutopilotStatus)elseif LockPitch~=nil then at[#at+1]=c([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],cO,cT+20,b(LockPitch))elseif FollowMode then at[#at+1]=c([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cO,cT+20)elseif Reentry then at[#at+1]=c([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cO,cT+20)end;if AltitudeHold then if AutoTakeoff then at[#at+1]=c([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cO,cT,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then at[#at+1]=c([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cO,cT+50)end else at[#at+1]=c([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cO,cT,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then at[#at+1]=c([[<text x="%d" y="%d">Brake-Landing</text>]],cO,cT)else at[#at+1]=c([[<text x="%d" y="%d">Coast-Landing</text>]],cO,cT)end end;if ProgradeIsOn then at[#at+1]=c([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],cO,cT)end;if RetrogradeIsOn then at[#at+1]=c([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],cO,cT)end;if TurnBurn then at[#at+1]=c([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cO,cU)end;if VectorToTarget then at[#at+1]=c([[<text class="warn" x="%d" y="%d">%s</text>]],cO,cT+30,VectorStatus)end;at[#at+1]="</g>"end;function DisplayOrbitScreen(at)if orbit~=nil and g()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cW=75;local cX=0;local cY=250;local cZ=4;cX=cX+cZ;local c_=15;local ag=cW+cY+cW/2+cZ;local ah=cX+cY/2+5+cZ;local d0,d1,d2,d3;d0=cY/4;d3=0;at[#at+1]=[[<g class="pbright txtorb txtmid">]]at[#at+1]=c('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cY+cW*2,cY+cX,cZ,cZ)if orbit.periapsis~=nil and orbit.apoapsis~=nil then d2=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(d0*2)d1=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/d2*(1-orbit.eccentricity)d3=d0-orbit.periapsis.altitude/d2-planet.radius/d2;local d4=""if orbit.periapsis.altitude<=0 then d4='redout'end;at[#at+1]=c([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],d4,cW+cY/2+d3+cZ,cX+cY/2+cZ,d0,d1)at[#at+1]=c('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cW+cY/2+cZ,cX+cY/2+cZ,planet.radius/d2)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then at[#at+1]=c([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ag-35,ah-5,cW+cY/2+d0+d3,ah-5)at[#at+1]=c([[<text x="%f" y="%f">Apoapsis</text>]],ag,ah)ah=ah+c_;at[#at+1]=c([[<text x="%f" y="%f">%s</text>]],ag,ah,getDistanceDisplayString(orbit.apoapsis.altitude))ah=ah+c_;at[#at+1]=c([[<text x="%f" y="%f">%s</text>]],ag,ah,FormatTimeString(orbit.timeToApoapsis))ah=ah+c_;at[#at+1]=c([[<text x="%f" y="%f">%s</text>]],ag,ah,getSpeedDisplayString(orbit.apoapsis.speed))end;ah=cX+cY/2+5+cZ;ag=cW-cW/2+10+cZ;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then at[#at+1]=c([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ag+35,ah-5,cW+cY/2-d0+d3,ah-5)at[#at+1]=c([[<text x="%f" y="%f">Periapsis</text>]],ag,ah)ah=ah+c_;at[#at+1]=c([[<text x="%f" y="%f">%s</text>]],ag,ah,getDistanceDisplayString(orbit.periapsis.altitude))ah=ah+c_;at[#at+1]=c([[<text x="%f" y="%f">%s</text>]],ag,ah,FormatTimeString(orbit.timeToPeriapsis))ah=ah+c_;at[#at+1]=c([[<text x="%f" y="%f">%s</text>]],ag,ah,getSpeedDisplayString(orbit.periapsis.speed))end;at[#at+1]=c([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cW+cY/2+cZ,20+cZ,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local d5=orbit.timeToApoapsis/orbit.period*2*math.pi;local d6=d0*math.cos(d5)local d7=d1*math.sin(d5)at[#at+1]=c('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cW+cY/2+d6+d3+cZ,cX+cY/2+d7+cZ)end;at[#at+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for V,W in pairs(atlas[0])do if x==nil or W.center.x<x then x=W.center.x end;if y==nil or W.center.x>y then y=W.center.x end;if z==nil or W.center.y<z then z=W.center.y end;if A==nil or W.center.y>A then A=W.center.y end end;GalaxyMapHTML=""local d8=1.1*(y-x)/1920;local d9=1.4*(A-z)/1080;for V,W in pairs(atlas[0])do local ag=960+W.center.x/d8;local ah=540+W.center.y/d9;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ag..'" cy="'..ah..'" r="'..W.radius/d8*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(W.name,"Moon")and not string.match(W.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ag.."' y='"..ah+W.radius/d8*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..W.name.."</text>"end end;local bJ=vec3(core.getConstructWorldPos())local ag=960+bJ.x/d8;local ah=540+bJ.y/d9;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ag..'" cy="'..ah..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ag.."' y='"..ah-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=d8;MapYRatio=d9;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bJ=vec3(core.getConstructWorldPos())local ag=960+bJ.x/d8;local ah=540+bJ.y/d9;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ag-80)/19.20,(ah-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function da(db)return type(db)=='number'end;local function dc(db)return type(tonumber(db))=='number'end;local function dd(de)return type(de)=='table'end;local function df(dg)return type(dg)=='string'end;local function dh(W)return dd(W)and da(W.x and W.y and W.z)end;local function di(dj)return dd(dj)and da(dj.latitude and dj.longitude and dj.altitude and dj.bodyId and dj.systemId)end;local dk=math.pi/180;local dl=180/math.pi;local dm=1e-10;local cf=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dn='::pos{'..cf..','..cf..','..cf..','..cf..','..cf..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dp=utils.clamp;local function dq(dr,ds)if dr==0 then return math.abs(ds)<1e-09 end;if ds==0 then return math.abs(dr)<1e-09 end;return math.abs(dr-ds)<math.max(math.abs(dr),math.abs(ds))*dm end;local function dt(db)local X=string.gsub(string.reverse(c('%.4f',db)),'^0*%.?','')return X==''and'0'or string.reverse(X)end;local function du(dv)if dh(dv)then return c('{x=%.3f,y=%.3f,z=%.3f}',dv.x,dv.y,dv.z)end;if dd(dv)and not getmetatable(dv)then local dw={}local dx=next(dv)if type(dx)=='nil'or dx==1 then dw=dv else for V,W in pairs(dv)do local bZ=du(W)if type(V)=='number'then table.insert(dw,c('[%s]=%s',V,bZ))else table.insert(dw,c('%s=%s',V,bZ))end end end;return c('{%s}',table.concat(dw,','))end;if df(dv)then return c("'%s'",dv:gsub("'",[[\']]))end;return tostring(dv)end;local dy={}dy.__index=dy;dy.__tostring=function(dv,dz)local dA={}for V in pairs(dv)do table.insert(dA,V)end;table.sort(dA)local dw={}for _,V in ipairs(dA)do local bZ=du(dv[V])if type(V)=='number'then table.insert(dw,c('[%s]=%s',V,bZ))else table.insert(dw,c('%s=%s',V,bZ))end end;if dz then return c('%s%s',dz,table.concat(dw,',\n'..dz))end;return c('{%s}',table.concat(dw,','))end;dy.__eq=function(dB,dC)return dB.planetarySystemId==dC.planetarySystemId and dB.bodyId==dC.bodyId and dq(dB.radius,dC.radius)and dq(dB.center.x,dC.center.x)and dq(dB.center.y,dC.center.y)and dq(dB.center.z,dC.center.z)and dq(dB.GM,dC.GM)end;local function dD(dE,dF,dG,dH,dI)assert(dc(dE),'Argument 1 (planetarySystemId) must be a number:'..type(dE))assert(dc(dF),'Argument 2 (bodyId) must be a number:'..type(dF))assert(dc(dG),'Argument 3 (radius) must be a number:'..type(dG))assert(dd(dH),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dH))assert(dc(dI),'Argument 5 (GM) must be a number:'..type(dI))return setmetatable({planetarySystemId=tonumber(dE),bodyId=tonumber(dF),radius=tonumber(dG),center=vec3(dH),GM=tonumber(dI)},dy)end;local dJ={}dJ.__index=dJ;dJ.__tostring=function(dK)return c('::pos{%d,%d,%s,%s,%s}',dK.systemId,dK.bodyId,dt(dK.latitude*dl),dt(dK.longitude*dl),dt(dK.altitude))end;dJ.__eq=function(dB,dC)return dB.bodyId==dC.bodyId and dB.systemId==dC.systemId and dq(dB.latitude,dC.latitude)and dq(dB.altitude,dC.altitude)and(dq(dB.longitude,dC.longitude)or dq(dB.latitude,math.pi/2)or dq(dB.latitude,-math.pi/2))end;local function dL(dM,dF,dN,dO,bv)local dE=dM;if df(dM)and not dO and not bv and not dF and not dN then dE,dF,dN,dO,bv=string.match(dM,dn)assert(dE,'Argument 1 (position string) is malformed.')else assert(dc(dE),'Argument 1 (systemId) must be a number:'..type(dE))assert(dc(dF),'Argument 2 (bodyId) must be a number:'..type(dF))assert(dc(dN),'Argument 3 (latitude) must be in degrees:'..type(dN))assert(dc(dO),'Argument 4 (longitude) must be in degrees:'..type(dO))assert(dc(bv),'Argument 5 (altitude) must be in meters:'..type(bv))end;dE=tonumber(dE)dF=tonumber(dF)dN=tonumber(dN)dO=tonumber(dO)bv=tonumber(bv)if dF==0 then return setmetatable({latitude=dN,longitude=dO,altitude=bv,bodyId=dF,systemId=dE},dJ)end;return setmetatable({latitude=dk*dp(dN,-90,90),longitude=dk*(dO%360),altitude=bv,bodyId=dF,systemId=dE},dJ)end;local dP={}dP.__index=dP;dP.__tostring=function(dv,dz)local dQ=dz and dz..'  'local dR={}local dA={}for V in pairs(dv)do table.insert(dA,V)end;table.sort(dA)for _,dS in ipairs(dA)do bdy=dv[dS]local dT=dy.__tostring(bdy,dQ)if dz then table.insert(dR,c('[%s]={\n%s\n%s}',dS,dT,dz))else table.insert(dR,c('  [%s]=%s',dS,dT))end end;if dz then return c('\n%s%s%s',dz,table.concat(dR,',\n'..dz),dz)end;return c('{\n%s\n}',table.concat(dR,',\n'))end;local function dU(dV)local atlas={}local pid;for _,W in pairs(dV)do local aq=W.planetarySystemId;if type(aq)~='number'then error('Invalid planetary system ID: '..tostring(aq))elseif pid and aq~=pid then error('Mismatch planetary system IDs: '..aq..' and '..pid)end;local dW=W.bodyId;if type(dW)~='number'then error('Invalid body ID: '..tostring(dW))elseif atlas[dW]then error('Duplicate body ID: '..tostring(dW))end;setmetatable(W.center,getmetatable(vec3.unit_x))atlas[dW]=setmetatable(W,dy)pid=aq end;return setmetatable(atlas,dP)end;PlanetaryReference={}local function dX(dV)return setmetatable({galaxyAtlas=dV or{}},PlanetaryReference)end;PlanetaryReference.__index=function(de,i)if type(i)=='number'then local system=de.galaxyAtlas[i]return dU(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(dv)return function(de,V)local dY,nv=next(de,V)return dY,nv and dU(nv)end,dv.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(dv)local dZ={}for _,d_ in pairs(dv or{})do local e0=d_:getPlanetarySystemId()local e1=dP.__tostring(d_,'    ')table.insert(dZ,c('  [%s]={%s\n  }',e0,e1))end;return c('{\n%s\n}\n',table.concat(dZ,',\n'))end;PlanetaryReference.BodyParameters=dD;PlanetaryReference.MapPosition=dL;PlanetaryReference.PlanetarySystem=dU;function PlanetaryReference.createBodyParameters(e2,dF,e3,e4,e5,e6,e7)assert(dc(e2),'Argument 1 (planetarySystemId) must be a number:'..type(e2))assert(dc(dF),'Argument 2 (bodyId) must be a number:'..type(dF))assert(dc(e3),'Argument 3 (surfaceArea) must be a number:'..type(e3))assert(dd(e4),'Argument 4 (aPosition) must be an array or vec3:'..type(e4))assert(dd(e5),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(e5))assert(dc(e6),'Argument 6 (altitude) must be in meters:'..type(e6))assert(dc(e7),'Argument 7 (gravityAtPosition) must be number:'..type(e7))local dG=math.sqrt(e3/4/math.pi)local cL=dG+e6;local e8=vec3(e4)+cL*vec3(e5)local dI=e7*cL*cL;return dD(e2,dF,dG,e8,dI)end;PlanetaryReference.isMapPosition=di;function PlanetaryReference:getPlanetarySystem(dM)if i==nil then i=0 end;if nv==nil then nv=0 end;local e2=dM;if di(dM)then e2=dM.systemId end;if type(e2)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dP then system=dU(system)end;return system end end end;function dP:castIntersections(e9,ea,eb,ec)local eb=eb or function(ed)return 1.05*ed.radius end;local ee={}if ec then for _,i in ipairs(ec)do ee[i]=self[i]end else ec={}for V,ed in pairs(self)do table.insert(ec,V)ee[V]=ed end end;local function ef(eg,eh)local ei=ee[eg].center-e9;local ej=ee[eh].center-e9;return ei:len()<ej:len()end;table.sort(ec,ef)local ek=ea:normalize()for i,aq in ipairs(ec)do local ed=ee[aq]local el=ed.center-e9;local dG=eb(ed)local em=el:dot(ek)local en=em^2-(el:len2()-dG^2)if en>=0 then local eo=math.sqrt(en)local ep=em+eo;local eq=em-eo;if eq>0 then return ed,ep,eq elseif ep>0 then return ed,ep,nil end end end;return nil,nil,nil end;function dP:closestBody(er)assert(type(er)=='table','Invalid coordinates.')local es,ed;local et=vec3(er)for _,eu in pairs(self)do local ev=(eu.center-et):len2()if not ed or ev<es then ed=eu;es=ev end end;return ed end;function dP:convertToBodyIdAndWorldCoordinates(dM)local ew=dM;if df(dM)then ew=dL(dM)end;if ew.bodyId==0 then return 0,vec3(ew.latitude,ew.longitude,ew.altitude)end;local eu=self:getBodyParameters(ew)if eu then return ew.bodyId,eu:convertToWorldCoordinates(ew)end end;function dP:getBodyParameters(dM)local dF=dM;if di(dM)then dF=dM.bodyId end;assert(dc(dF),'Argument 1 (bodyId) must be a number:'..type(dF))return self[dF]end;function dP:getPlanetarySystemId()local _,W=next(self)return W and W.planetarySystemId end;function dy:convertToMapPosition(dH)assert(dd(dH),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dH))local ex=vec3(dH)if self.bodyId==0 then return setmetatable({latitude=ex.x,longitude=ex.y,altitude=ex.z,bodyId=0,systemId=self.planetarySystemId},dJ)end;local ey=ex-self.center;local cL=ey:len()local bv=cL-self.radius;local dN=0;local dO=0;if not dq(cL,0)then local ez=math.atan(ey.y,ey.x)dO=ez>=0 and ez or 2*math.pi+ez;dN=math.pi/2-math.acos(ey.z/cL)end;return setmetatable({latitude=dN,longitude=dO,altitude=bv,bodyId=self.bodyId,systemId=self.planetarySystemId},dJ)end;function dy:convertToWorldCoordinates(dM)local ew=df(dM)and dL(dM)or dM;if ew.bodyId==0 then return vec3(ew.latitude,ew.longitude,ew.altitude)end;assert(di(ew),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ew.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ew.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local eA=math.cos(ew.latitude)return self.center+(self.radius+ew.altitude)*vec3(eA*math.cos(ew.longitude),eA*math.sin(ew.longitude),math.sin(ew.latitude))end;function dy:getAltitude(dH)return(vec3(dH)-self.center):len()-self.radius end;function dy:getDistance(dH)return(vec3(dH)-self.center):len()end;function dy:getGravity(dH)local eB=self.center-vec3(dH)local eC=eB:len2()return self.GM/eC*eB/math.sqrt(eC)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dX(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function df(dg)return type(dg)=='string'end;local function dd(de)return type(de)=='table'end;local function dq(dr,ds)if dr==0 then return math.abs(ds)<1e-09 end;if ds==0 then return math.abs(dr)<1e-09 end;return math.abs(dr-ds)<math.max(math.abs(dr),math.abs(ds))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bv)assert(self.body)local cL=bv+self.body.radius;if not dq(cL,0)then local orbit=math.sqrt(self.body.GM/cL)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dM,velocity)assert(self.body)assert(dd(dM)or df(dM))assert(dd(velocity))local bJ=(df(dM)or PlanetRef.isMapPosition(dM))and self.body:convertToWorldCoordinates(dM)or vec3(dM)local W=vec3(velocity)local eD=bJ-self.body.center;local ej=W:len2()local eE=eD:len()local eF=self.body.GM;local eG=((ej-eF/eE)*eD-eD:dot(W)*W)/eF;local dr=eF/(2*eF/eE-ej)local eH=eG:len()local ek=eG:normalize()local eI=dr*(1-eH)local eJ=dr*(1+eH)local eK=eI*ek+self.body.center;local eL=eH<=1 and-eJ*ek+self.body.center or nil;local eM=math.sqrt(dr*eF*(1-eH*eH))local eN=eL and 2*math.pi*math.sqrt(dr^3/eF)local eO=math.acos(eG:dot(eD)/(eH*eE))if eD:dot(W)<0 then eO=-(eO-2*math.pi)end;local eP=math.acos((math.cos(eO)+eH)/(1+eH*math.cos(eO)))local eQ=eP;if eQ<0 then eQ=eQ+2*math.pi end;local eR=eQ-eH*math.sin(eQ)local eS=0;local eT=0;local eU=0;if eN~=nil then eS=eR/(2*math.pi/eN)eT=eN-eS;eU=eT+eN/2;if eO-math.pi>0 then eT=eS;eU=eT+eN/2 end;if eU>eN then eU=eU-eN end end;return{periapsis={position=eK,speed=eM/eI,circularOrbitSpeed=math.sqrt(eF/eI),altitude=eI-self.body.radius},apoapsis=eL and{position=eL,speed=eM/eJ,circularOrbitSpeed=math.sqrt(eF/eJ),altitude=eJ-self.body.radius},currentVelocity=W,currentPosition=bJ,eccentricity=eH,period=eN,eccentricAnomaly=eP,meanAnomaly=eR,timeToPeriapsis=eT,timeToApoapsis=eU}end;local function eV(eW)local eu=PlanetRef.BodyParameters(eW.planetarySystemId,eW.bodyId,eW.radius,eW.center,eW.GM)return setmetatable({body=eu},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eV(...)end})end;function Kinematics()local Kinematic={}local eX=30000000/3600;local eY=eX*eX;local eZ=100;local function e_(W)return 1/math.sqrt(1-W*W/eY)end;function Kinematic.computeAccelerationTime(f0,f1,f2)local f3=eX*math.asin(f0/eX)return(eX*math.asin(f2/eX)-f3)/f1 end;function Kinematic.computeDistanceAndTime(f0,f2,f4,f5,f6,f7)f6=f6 or 0;f7=f7 or 0;local f8=f0<=f2;local f9=f5*(f8 and 1 or-1)/f4;local fa=-f7/f4;local fb=f9+fa;if f8 and fb<=0 or not f8 and fb>=0 then return-1,-1 end;local fc,fd=0,0;if f9~=0 and f6>0 then local f3=math.asin(f0/eX)local fe=math.pi*(f9/2+fa)local ff=f9*f6;local fg=eX*math.pi;local W=function(de)local aP=(fe*de-ff*math.sin(math.pi*de/2/f6)+fg*f3)/fg;local fh=math.tan(aP)return eX*fh/math.sqrt(fh*fh+1)end;local fi=f8 and function(dg)return dg>=f2 end or function(dg)return dg<=f2 end;fd=2*f6;if fi(W(fd))then local fj=0;while math.abs(fd-fj)>0.5 do local de=(fd+fj)/2;if fi(W(de))then fd=de else fj=de end end end;local fk=f0;local fl=fd/eZ;for fm=1,eZ do local aa=W(fm*fl)fc=fc+(aa+fk)*fl/2;fk=aa end;if fd<2*f6 then return fc,fd end;f0=fk end;local f3=eX*math.asin(f0/eX)local Y=(eX*math.asin(f2/eX)-f3)/fb;local fn=eY*math.cos(f3/eX)/fb;local cL=fn-eY*math.cos((fb*Y+f3)/eX)/fb;return cL+fc,Y+fd end;function Kinematic.computeTravelTime(f0,f1,cL)if cL==0 then return 0 end;if f1>0 then local f3=eX*math.asin(f0/eX)local fn=eY*math.cos(f3/eX)/f1;return(eX*math.acos(f1*(fn-cL)/eY)-f3)/f1 end;assert(f0>0,'Acceleration and initial speed are both zero.')return cL/f0 end;function Kinematic.lorentz(W)return e_(W)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cL)local fo=cL>100000;local X=""if fo then X=round(cL/1000/200,1).." SU"elseif cL<1000 then X=round(cL,1).." M"else X=round(cL/1000,1).." KM"end;return X end;function getDistanceDisplayString2(cL)local fo=cL>100000;local X=""if fo then X=round(cL/1000/200,2).." SU"elseif cL<1000 then X=round(cL,2).." M"else X=round(cL/1000,2).." KM"end;return X end;function getSpeedDisplayString(aa)return b(round(aa*3.6,0)+0.5).." km/h"end;function FormatTimeString(fp)local fq=b(fp/86400)local fr=b(fp/3600)local fs=b(fp/60%60)local fp=b(fp%60)if fp<0 or fr<0 or fs<0 then return"0s"end;if fq>0 then return fq.."d "..fr.."h "elseif fr>0 then return fr.."h "..fs.."m "elseif fs>0 then return fs.."m "..fp.."s"else return fp.."s"end end;function getMagnitudeInDirection(bk,ea)bk=vec3(bk)ea=vec3(ea):normalize()local X=bk*ea;return X.x+X.y+X.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local ft=AtlasOrdered[AutopilotTargetIndex].index;local fu=atlas[0][ft]if fu.center then AutopilotTargetName=fu.name;AutopilotTargetPlanet=galaxyReference[0][ft]if CustomTarget~=nil then if g()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=fu;for _,W in pairs(galaxyReference[0])do if W.name==CustomTarget.planetname then AutopilotTargetPlanet=W;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fv=LastMaxBrakeInAtmo/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return fv end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local aa=vec3(velocity):len()local fw,fx=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,l(),Nav:maxForceForward(),warmup,0)local fy,fz;if not TurnBurn then fy,fz=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fy,fz=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fA;if not TurnBurn then _,fA=GetAutopilotBrakeDistanceAndTime(aa)else _,fA=GetAutopilotTBBrakeDistanceAndTime(aa)end;local fB=0;local fC=0;if AutopilotCruising or not Autopilot and aa>5 then fC=Kinematic.computeTravelTime(aa,0,AutopilotDistance)elseif fy+fw<AutopilotDistance then fB=AutopilotDistance-(fy+fw)fC=Kinematic.computeTravelTime(8333.0556,0,fB)else local fD=(AutopilotDistance-fy)/fw;fw=AutopilotDistance-fy;fx=fx*fD end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fC elseif AutopilotBraking then return fA elseif AutopilotCruising then return fC+fA else return fx+fz+fC end end;function GetAutopilotBrakeDistanceAndTime(aa)if not InAtmo then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(aa,AutopilotEndSpeed,l(),0,0,LastMaxBrake-AutopilotPlanetGravity*l())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return Kinematic.computeDistanceAndTime(aa,AutopilotEndSpeed,l(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*l())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(aa)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(aa,AutopilotEndSpeed,l(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*l())end;function hoverDetectGround()local fE=-1;if vBooster then fE=vBooster.distance()elseif hover then fE=hover.distance()end;return fE end;function round(cf,fF)local fG=10^(fF or 0)return b(cf*fG+0.5)/fG end;function tablelength(fH)local a0=0;for _ in pairs(fH)do a0=a0+1 end;return a0 end;function BeginProfile(fI)ProfileTimeStart=system.getTime()end;function EndProfile(fI)local fJ=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fJ;ProfileCount=ProfileCount+1;if fJ>ProfileTimeMax then ProfileTimeMax=fJ end;if fJ<ProfileTimeMin then ProfileTimeMin=fJ end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fK=ProfileTimeSum;local fL=ProfileTimeSum/ProfileCount;local fM=ProfileTimeMin;local fN=ProfileTimeMax;local fO=ProfileCount;a(c("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fK,fL,fM,fN,fO))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fP=radar_1.getEntries()local fQ=radar_1.getData()if#fP>0 then local fR=fQ:find('identifiedConstructs":%[%]')if fR==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fR~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;RadarMessage=c([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fP)local fS={}for V,W in pairs(fP)do if radar_1.hasMatchingTransponder(W)==1 then fS[#fS+1]=W end end;if#fS>0 then local ah=15;RadarMessage=c([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,ah)for V,W in pairs(fS)do ah=ah+20;RadarMessage=c([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,ah,radar_1.getConstructName(W))end end else local fT;fT=fQ:find('worksInEnvironment":false')if fT then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fU=g()if door and(fU>0 or fU==0 and CoreAltitude<10000)then for _,W in pairs(door)do W.toggle()end end;if switch then for _,W in pairs(switch)do W.toggle()end end;if forcefield and(fU>0 or fU==0 and CoreAltitude<10000)then for _,W in pairs(forcefield)do W.toggle()end end;if dbHud then if not WipedDatabank then for V,W in pairs(AutoVariables)do dbHud.setStringValue(W,e(_G[W]))end;for V,W in pairs(SaveableVariables)do dbHud.setStringValue(W,e(_G[W]))end;a("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fV)if fV=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local fW=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if fW then Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..c("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if g()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if g()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if d(warpdrive.getData()).destination~="Unknown"and d(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fV=="oneSecond"then clearAllCheck=false;refreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local at={}local bu=GetFlightStyle()DrawOdometer(at,TotalDistanceTrip,TotalDistanceTravelled,bu,FlightTime)checkDamage(at)LastOdometerOutput=table.concat(at,"")collectgarbage("collect")elseif fV=="msgTick"then local at={}DisplayMessage(at,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fV=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fV=="apTick"then local m=m;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())InAtmo=g()>0;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)HovGndDet=hoverDetectGround()local fX=system.getMouseDeltaX()local fY=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fZ=velMag>8334;if not fZ and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fZ;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local at={}HUDPrologue(at)if showHud then updateHud(at)else DisplayOrbitScreen(at)DrawWarnings(at)end;HUDEpilogue(at)at[#at+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(at,MsgText)end;if m()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(at)end;if m()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(at)if screen_1.getMouseState()==1 then CheckButtons()end;at[#at+1]=c([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if m()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fX;SimulatedY=SimulatedY+fY end;SetButtonContains()DrawButtons(at)if not Animating and not Animated then local f_=table.concat(at,"")at={}at[#at+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"at[#at+1]=GalaxyMapHTML;at[#at+1]=f_;at[#at+1]="</body>"Animating=true;at[#at+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(at,"")system.setScreen(content)elseif Animated then local f_=table.concat(at,"")at={}at[#at+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"at[#at+1]=GalaxyMapHTML;at[#at+1]=f_;at[#at+1]="</body>"end;if not Animating then at[#at+1]=c([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fX;SimulatedY=SimulatedY+fY;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and m()==0 then if userControlScheme=="virtual joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fY,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fX,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(at)end else SetButtonContains()DrawButtons(at)end;at[#at+1]=c([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;at[#at+1]=[[</svg></body>]]content=table.concat(at,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then local g0=AlignToWorldVector(vec3(velocity),0.01)if SpaceLand then autoRoll=true;if g0 then ProgradeIsOn=false;ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if InAtmo then RetrogradeIsOn=false elseif velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and SpaceLand then if g()==0 then ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true else SpaceLand=false;ToggleAutopilot()end end;if FinalLand and CoreAltitude<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()FinalLand=false end;if Autopilot and g()==0 then local fy,fz;if not TurnBurn then fy,fz=GetAutopilotBrakeDistanceAndTime(velMag)else fy,fz=GetAutopilotTBBrakeDistanceAndTime(velMag)end;fy=fy;fz=fz;local g1=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local g2=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local g3=getMagnitudeInDirection(g2,AutopilotShipUp)local g4=getMagnitudeInDirection(g2,AutopilotShipRight)local g5=-g4*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local g6=-g3*AutopilotDistance*velMag*TrajectoryAlignmentStrength;g1=AutopilotTargetCoords+-g5*vec3(AutopilotShipRight)+-g6*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(g1)-vec3(core.getConstructWorldPos())):len()local g7=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(g7)..'", "unit":""}')local g8=true;local g9=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(g9)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then g8=AlignToWorldVector((g1-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then g8=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not g8 or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false elseif not APThrottleSet then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(g9-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and APThrottleSet then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end;if AutopilotDistance<=fy then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"MsgText="Autopilot completed, orbit established"BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false;if CustomTarget~=nil then ProgradeIsOn=true;SpaceLand=true end end end elseif AutopilotCruising then if AutopilotDistance<=fy then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if g8 then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif g8 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not APThrottleSet then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true;BrakeIsOn=false end end end end end;if FollowMode then autoRoll=true;local ga=0;local bJ=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local gb=bJ-vec3(core.getConstructWorldPos())local gc=vec3(gb):project_on(vec3(core.getConstructWorldOrientationForward())):len()local gd=vec3(gb):project_on(vec3(core.getConstructWorldOrientationRight())):len()local cL=math.sqrt(gc*gc+gd*gd)AlignToWorldVector(gb:normalize())local ge=40;local gf=cL<ge;local gg=100;local gh=utils.clamp((cL-ge)/2,10,gg)PitchInput2=0;local g8=math.abs(YawInput2)<0.1;if g8 and velMag<gh and not gf then BrakeIsOn=false;ga=-20 else BrakeIsOn=true;ga=0 end;local aw=vec3(core.getConstructWorldOrientationForward())local ax=vec3(core.getConstructWorldOrientationRight())local ay=vec3(core.getWorldVertical())local az=getPitch(ay,aw,ax)local gi=1.0;if math.abs(ga-az)>gi then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(ga-az)local gj=pitchPID:get()PitchInput2=gj end end;local c2=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local bI=unit.getClosestPlanetInfluence()>0;local bv=CoreAltitude;local gk=HoldAltitude-bv;local gl=500+velMag;local ga=(utils.smoothstep(gk,-gl,gl)-0.5)*2*MaxPitch;if not AltitudeHold then ga=0 end;if LockPitch~=nil then if bI then ga=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local gm=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=gm then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,gm)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then ga=-80;if g()>0.02 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;ga=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false;autoRoll=autoRollPreference end end;local gn=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bm=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bm)local go=bm:len()-bm:project_on(c2):len()local ab=LastMaxBrakeInAtmo;local c0=velocity.x*c2.x+velocity.y*c2.y+velocity.z*c2.z;local gp=velocity:len()-math.abs(c0)local gq=vec3(core.getWorldAirFrictionAcceleration())if ab~=nil then BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gp,0,l(),0,0,ab+(gq:len()-gq:project_on(c2):len())*l())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gp,0,l(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*l())end;StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if go<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and go>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=go end;PitchInput2=gn;local aw=vec3(core.getConstructWorldOrientationForward())local ax=vec3(core.getConstructWorldOrientationRight())local ay=vec3(core.getWorldVertical())local fE=-1;local az=getPitch(ay,aw,ax)local gi=0.1;if BrakeLanding then ga=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local c0=velocity.x*c2.x+velocity.y*c2.y+velocity.z*c2.z;fE=HovGndDet;if fE>-1 then if math.abs(ga-az)<gi then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-c2)<0.99 then BrakeIsOn=true elseif c0<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or SpaceLaunch then if ga<20 then AutoTakeoff=false;if not SpaceLaunch then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;SpaceLaunch=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif SpaceLaunch and g()==0 and CoreAltitude>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(ga-az)>gi then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(ga-az)local gj=pitchPID:get()PitchInput2=PitchInput2+gj end end;LastEccentricity=orbit.eccentricity;if antigrav and not ExternalAGG and CoreAltitude<200000 then if antigrav.getState()==1 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local gr=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)gr=math.max(gr,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local gs=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local gt=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local gu=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local gv=BrakeInput;local gw=vec3(core.getWorldVertical())local gx=vec3(core.getConstructWorldOrientationUp())local gy=vec3(core.getConstructWorldOrientationForward())local gz=vec3(core.getConstructWorldOrientationRight())local gA=vec3(core.getWorldVelocity())local gB=vec3(core.getWorldVelocity()):normalize()local gC=getRoll(gw,gy,gz)local gD=math.abs(gC)local gE=utils.sign(gC)local g=g()local gF=vec3(core.getWorldAngularVelocity())local gG=gs*pitchSpeedFactor*gz+gt*rollSpeedFactor*gy+gu*yawSpeedFactor*gx;if gw:len()>0.01 and g>0.0 or ProgradeIsOn then local gH=1.0;if autoRoll==true and gD>gH and gt==0 then local gI=utils.clamp(0,gD-30,gD+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gI-gC)local gJ=rollPID:get()gG=gG+gJ*gy end end;if gw:len()>0.01 and g>0.0 then local gK=20.0;if turnAssist==true and gD>gK and gs==0 and gu==0 then local gL=turnAssistFactor*0.1;local gM=turnAssistFactor*0.025;local gN=(gD-gK)/(180-gK)*180;local gO=0;if gN<90 then gO=gN/90 elseif gN<180 then gO=(180-gN)/90 end;gO=gO*gO;local gP=-gE*gM*(1.0-gO)local gQ=gL*gO;gG=gG+gQ*gz+gP*gx end end;local gR=1;local gS=0;local gT=1;local gU=gr*(gG-gF)local gV=vec3(core.getWorldAirFrictionAngularAcceleration())gU=gU-gV;Nav:setEngineTorqueCommand('torque',gU,gR,'airfoil','','',gT)local gW=-gv*(brakeSpeedFactor*gA+brakeFlatFactor*gB)Nav:setEngineForceCommand('brake',gW)local gX=''local gY=vec3()local gZ=false;local g_='thrust analog longitudinal'local h0=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if h0==axisCommandType.byThrottle then local h1=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(g_,axisCommandId.longitudinal)Nav:setEngineForceCommand(g_,h1,gR)elseif h0==axisCommandType.byTargetSpeed then local h1=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gX=gX..' , '..g_;gY=gY+h1;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gZ=true end end;local h2='thrust analog lateral'local h3=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if h3==axisCommandType.byThrottle then local h4=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(h2,axisCommandId.lateral)Nav:setEngineForceCommand(h2,h4,gR)elseif h3==axisCommandType.byTargetSpeed then local h5=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gX=gX..' , '..h2;gY=gY+h5 end;local h6='thrust analog vertical'local h7=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if h7==axisCommandType.byThrottle then local h8=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(h6,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(h6,h8,gR,'airfoil','ground','',gT)else Nav:setEngineForceCommand(h6,vec3(),gR)Nav:setEngineForceCommand('airfoil vertical',h8,gR,'airfoil','','',gT)Nav:setEngineForceCommand('ground vertical',h8,gR,'ground','','',gT)end elseif h7==axisCommandType.byTargetSpeed then if UpAmount==0 then Nav:setEngineForceCommand('hover',vec3(),gR)end;local h9=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gX=gX..' , '..h6;gY=gY+h9 end;if gY:len()>constants.epsilon then if BrakeInput~=0 or gZ or math.abs(gB:dot(gy))<0.95 then gX=gX..', brake'end;Nav:setEngineForceCommand(gX,gY,gS,'','','',gT)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting and not VanillaRockets then local aa=vec3(core.getVelocity()):len()local ha=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local hb=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if aa*3.6>hb*(1-ha)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif aa*3.6<hb*(1-ha)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local hc=unit.getThrottle()local gh=hc/100;if g==0 then gh=gh*MaxGameVelocity;if aa>=gh*(1-ha)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif aa<gh*(1-ha)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else gh=gh*ReentrySpeed/3.6;if aa>=gh*(1-ha)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif aa<gh*(1-ha)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,X=coroutine.resume(beginSetup)if X then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(hd)if hd=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and HovGndDet==-1 and(g()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*l()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif hd=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif hd=="forward"then PitchInput=PitchInput-1 elseif hd=="backward"then PitchInput=PitchInput+1 elseif hd=="left"then RollInput=RollInput-1 elseif hd=="right"then RollInput=RollInput+1 elseif hd=="yawright"then YawInput=YawInput-1 elseif hd=="yawleft"then YawInput=YawInput+1 elseif hd=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif hd=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif hd=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif hd=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif hd=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif hd=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif hd=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif hd=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif hd=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif hd=="option4"then ToggleAutopilot()ToggleView=false elseif hd=="option5"then ToggleLockPitch()ToggleView=false elseif hd=="option6"then ToggleAltitudeHold()ToggleView=false elseif hd=="option7"then wipeSaveVariables()ToggleView=false elseif hd=="option8"then ToggleFollowMode()ToggleView=false elseif hd=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif hd=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif m()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif hd=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif hd=="lalt"then if m()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif hd=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not IsBoosting then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;IsBoosting=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;IsBoosting=false end elseif hd=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif hd=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif hd=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif hd=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(hd)if hd=="forward"then PitchInput=0 elseif hd=="backward"then PitchInput=0 elseif hd=="left"then RollInput=0 elseif hd=="right"then RollInput=0 elseif hd=="yawright"then YawInput=0 elseif hd=="yawleft"then YawInput=0 elseif hd=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif hd=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif hd=="up"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif hd=="down"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif hd=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod end;if AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif hd=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod end;if AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif hd=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif m()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif hd=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif hd=="lalt"then if m()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif m()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(hd)if hd=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier end;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif hd=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif hd=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif hd=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(at,he)if he~="empty"then at[#at+1]=[[<text class="msg" x="50%%" y="310" >]]for hf in string.gmatch(he,"([^\n]+)")do at[#at+1]=c([[<tspan x="50%%" dy="35">%s</tspan>]],hf)end;at[#at+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a4=system.getTime()local velocity=vec3(core.getWorldVelocity())local bF=vec3(velocity):len()local hg=a4-LastTravelTime;if bF>1.38889 then bF=bF/1000;local hh=bF*(a4-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+hh;TotalDistanceTrip=TotalDistanceTrip+hh end;FlightTime=FlightTime+hg;TotalFlightTime=TotalFlightTime+hg;LastTravelTime=a4 end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
