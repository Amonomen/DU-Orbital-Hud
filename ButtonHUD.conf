name: ButtonsHud - Dimencia and Archaegeo v4.925 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;local b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b4=vec3(core.getWorldVelocity())local b5=vec3(b4):len()local b6=math.cos(StallAngle*constants.deg2rad)local b7=LandingGearGroundHeight;function LoadVariables()if dbHud_1 then local b8=dbHud_1.hasKey;if not useTheseSettings then for b9,ba in pairs(a)do if b8(ba)then local bb=f(dbHud_1.getStringValue(ba))if bb~=nil then c(ba.." "..dbHud_1.getStringValue(ba))_G[ba]=bb;az=true end end end end;coroutine.yield()for b9,ba in pairs(b)do if b8(ba)then local bb=f(dbHud_1.getStringValue(ba))if bb~=nil then c(ba.." "..dbHud_1.getStringValue(ba))_G[ba]=bb;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bc=system.getTime()if LastStartTime+180<bc then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=bc;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b6=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bd,be)if bd>be then be=bd end;if ContainerOptimization>0 then be=be-be*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then be=be-be*FuelTankOptimization*0.05 end;return be end;function ProcessElements()for b9 in pairs(af)do local type=l(af[b9])if type=="landing gear"then A=true end;if type=="dynamic core"then local bf=h(af[b9])if bf>10000 then aQ=128 elseif bf>1000 then aQ=64 elseif bf>150 then aQ=32 end end;aG=aG+h(af[b9])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local bf=h(af[b9])local bg=m(af[b9])local bd=0;local bh=system.getTime()if type=="Atmospheric Fuel Tank"then local be=400;local bi=35.03;if bf>10000 then be=51200;bi=5480 elseif bf>1300 then be=6400;bi=988.67 elseif bf>150 then be=1600;bi=182.67 end;bd=bg-bi;if fuelTankHandlingAtmo>0 then be=be+be*fuelTankHandlingAtmo*0.2 end;be=CalculateFuelVolume(bd,be)aD[#aD+1]={af[b9],core.getElementNameById(af[b9]),be,bi,bd,bh}end;if type=="Rocket Fuel Tank"then local be=320;local bi=173.42;if bf>65000 then be=40000;bi=25740 elseif bf>6000 then be=5120;bi=4720 elseif bf>700 then be=640;bi=886.72 end;bd=bg-bi;if fuelTankHandlingRocket>0 then be=be+be*fuelTankHandlingRocket*0.2 end;be=CalculateFuelVolume(bd,be)aF[#aF+1]={af[b9],core.getElementNameById(af[b9]),be,bi,bd,bh}end;if type=="Space Fuel Tank"then local be=2400;local bi=182.67;if bf>10000 then be=76800;bi=5480 elseif bf>1300 then be=9600;bi=988.67 end;bd=bg-bi;if fuelTankHandlingSpace>0 then be=be+be*fuelTankHandlingSpace*0.2 end;be=CalculateFuelVolume(bd,be)aE[#aE+1]={af[b9],core.getElementNameById(af[b9]),be,bi,bd,bh}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,ba in pairs(door)do ba.toggle()end end;if switch then for _,ba in pairs(switch)do ba.toggle()end end;if forcefield then for _,ba in pairs(forcefield)do ba.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if b7~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b7)if b7==0 and not A then GearExtended=true end else b7=Nav:getTargetGroundAltitude()if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(ba)if ResolutionX==1920 then return ba else return round(ResolutionX*ba/1920,0)end end;function ConvertResolutionY(ba)if ResolutionY==1080 then return ba else return round(ResolutionY*ba/1080,0)end end;function RefreshLastMaxBrake(bj,bk)if bj==nil then bj=core.g()end;bj=round(bj,5)local bl=j()if bk~=nil and bk or(aC==nil or aC~=bj)then local b4=core.getVelocity()local bm=vec3(b4):len()local bn=f(unit.getData()).maxBrake;if bn~=nil and bn>0 and ad then bn=bn/utils.clamp(bm/100,0.1,1)bn=bn/bl;if bn>LastMaxBrakeInAtmo and bl>0.10 then LastMaxBrakeInAtmo=bn end end;if bn~=nil and bn>0 then LastMaxBrake=bn end;aC=bj end end;function MakeButton(bo,bp,bq,br,bs,bt,bu,bv,bw)local bx={enableName=bo,disableName=bp,width=bq,height=br,x=bs,y=bt,toggleVar=bu,toggleFunction=bv,drawCondition=bw,hovered=false}table.insert(aq,bx)return bx end;function UpdateAtlasLocationsList()AtlasOrdered={}for b9,ba in pairs(aS[0])do table.insert(AtlasOrdered,{name=ba.name,index=b9})end;local function by(bz,bA)return bz.name<bA.name end;table.sort(AtlasOrdered,by)end;function AddLocationsToAtlas()for b9,ba in pairs(SavedLocations)do table.insert(aS[0],ba)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bB)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bC='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bD,bE,bF,bG,bH=string.match(bB,bC)if bD=="0"and bE=="0"then return vec3(tonumber(bF),tonumber(bG),tonumber(bH))end;bG=math.rad(bG)bF=math.rad(bF)local planet=aS[tonumber(bD)][tonumber(bE)]local bI=math.cos(bF)local bJ=vec3(bI*math.cos(bG),bI*math.sin(bG),math.sin(bF))return planet.center+(planet.radius+bH)*bJ end;function AddNewLocationByWaypoint(bK,planet,bB)if dbHud_1 then local bL={}local position=zeroConvertToWorldCoordinates(bB)if planet.name=="Space"then bL={position=position,name=bK,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bM=false;if planet.atmos then bM=true else bM=false end;bL={position=position,name=bK,atmosphere=bM,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bL;table.insert(aS[0],bL)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bN=planet.name..". "..#SavedLocations;if radar_1 then local bO,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bO~=nil and bO~=""then bN=bN.." "..radar_1.getConstructName(bO)end end;local bL={}local bM=false;if planet.atmos then bM=true end;bL={position=position,name=bN,atmosphere=bM,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bL;table.insert(aS[0],bL)UpdateAtlasLocationsList()K="Location saved as "..bN else K="Databank must be installed to save locations"end end;function UpdatePosition(bP)local bQ=-1;local bL;for b9,ba in pairs(SavedLocations)do if ba.name and ba.name==CustomTarget.name then bQ=b9;break end end;if bQ~=-1 then local bR;if bP~=nil then bL={position=SavedLocations[bQ].position,name=bP,atmosphere=SavedLocations[bQ].atmosphere,planetname=SavedLocations[bQ].planetname,gravity=SavedLocations[bQ].gravity}else bL={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bQ].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bQ]=bL;bQ=-1;for b9,ba in pairs(aS[0])do if ba.name and ba.name==CustomTarget.name then bQ=b9 end end;if bQ>-1 then aS[0][bQ]=bL end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bQ=-1;for b9,ba in pairs(aS[0])do if ba.name and ba.name==CustomTarget.name then bQ=b9 end end;if bQ>-1 then table.remove(aS[0],bQ)end;bQ=-1;for b9,ba in pairs(SavedLocations)do if ba.name and ba.name==CustomTarget.name then K=ba.name.." saved location cleared"bQ=b9;break end end;if bQ~=-1 then table.remove(SavedLocations,bQ)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bS)bS[#bS+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bT,bU,bs,bt,bq,br)if bT>bs and bT<bs+bq and bU>bt and bU<bt+br then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bV=vec3(core.getConstructWorldOrientationForward())local bW=vec3(core.getConstructWorldOrientationRight())local bX=vec3(core.getWorldVertical())local bY=getPitch(bX,bV,bW)LockPitch=bY;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bS)local bZ=0;ao=""local b_=aG;local c0=0;local c1=0;local c2=0;local c3=0;local c4=""for b9 in pairs(af)do local bf=0;local c5=0;c5=h(af[b9])bf=k(af[b9])c0=c0+bf;if bf<c5 then if bf==0 then c2=c2+1 else c1=c1+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[b9]))local bs=position.x-aQ;local bt=position.y-aQ;local c6=position.z-aQ;table.insert(al,core.spawnArrowSticker(bs,bt,c6+1,"down"))table.insert(al,core.spawnArrowSticker(bs,bt,c6+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bs+1,bt,c6,"north"))table.insert(al,core.spawnArrowSticker(bs+1,bt,c6,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bs-1,bt,c6,"south"))table.insert(al,core.spawnArrowSticker(bs-1,bt,c6,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bs,bt-1,c6,"east"))table.insert(al,core.spawnArrowSticker(bs,bt-1,c6,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bs,bt+1,c6,"west"))table.insert(al,core.spawnArrowSticker(bs,bt+1,c6,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[b9])end elseif aH and#al>0 and al[11]==af[b9]then for c7 in pairs(al)do core.deleteSticker(al[c7])end;al={}end end;bZ=d(c0/b_*100)if bZ<100 then bS[#bS+1]=[[<g class="pbright txt">]]c3=d(bZ*2.55)c4=e("rgb(%d,%d,%d)",255-c3,c3,0)if bZ<100 then bS[#bS+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],c4,bZ)if c2>0 then bS[#bS+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],c4,c2,c1)elseif c1>0 then bS[#bS+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],c4,c1)end end;bS[#bS+1]=[[<\g>]]end end;function DrawCursorLine(bS)local c8=d(utils.clamp(a3/(at/4)*255,0,255))bS[#bS+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+c8,d(PrimaryG+0.5)-c8,d(PrimaryB+0.5)-c8)end;function getPitch(c9,ca,bA)local cb=c9:cross(bA):normalize_inplace()local bY=math.acos(utils.clamp(cb:dot(-ca),-1,1))*constants.rad2deg;if cb:cross(-ca):dot(bA)<0 then bY=-bY end;return bY end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for b9,ba in pairs(a)do dbHud_1.setStringValue(ba,g(nil))end;for b9,ba in pairs(b)do if ba~="SavedLocations"then dbHud_1.setStringValue(ba,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,ba in pairs(aq)do if ba.hovered then if not ba.drawCondition or ba.drawCondition()then ba.toggleFunction()end;ba.hovered=false end end end;function SetButtonContains()local bs=a0+at/2;local bt=a1+au/2;for _,ba in pairs(aq)do ba.hovered=Contains(bs,bt,ba.x,ba.y,ba.width,ba.height)end end;function DrawButton(bS,cc,hover,bs,bt,cd,ce,cf,cg,ch,ci)if type(ch)=="function"then ch=ch()end;if type(ci)=="function"then ci=ci()end;bS[#bS+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bs,bt,cd,ce)if cc then bS[#bS+1]=e("%s'",cf)else bS[#bS+1]=cg end;if hover then bS[#bS+1]=" style='stroke:white; stroke-width:2'"else bS[#bS+1]=" style='stroke:black; stroke-width:1'"end;bS[#bS+1]="></rect>"bS[#bS+1]=e("<text x='%f' y='%f' font-size='24' fill='",bs+cd/2,bt+ce/2+5)if cc then bS[#bS+1]="black"else bS[#bS+1]="white"end;bS[#bS+1]="' text-anchor='middle' font-family='Montserrat'>"if cc then bS[#bS+1]=e("%s</text>",ch)else bS[#bS+1]=e("%s</text>",ci)end end;function DrawButtons(bS)local cj="rgb(50,50,50)'"local ck="rgb(210,200,200)"local cl=DrawButton;for _,ba in pairs(aq)do local bp=ba.disableName;local bo=ba.enableName;if type(bp)=="function"then bp=bp()end;if type(bo)=="function"then bo=bo()end;if not ba.drawCondition or ba.drawCondition()then cl(bS,ba.toggleVar(),ba.hovered,ba.x,ba.y,ba.width,ba.height,ck,cj,bp,bo)end end end;function DrawTank(bS,aP,bs,cm,cn,co,cp,cq)local cr=1;local cs=2;local ct=3;local cu=4;local cv=5;local cw=6;local cx=""local cy=0;local cz=fuelY;local cA=fuelY+10;if o()==1 and not RemoteHud then cz=cz-50;cA=cA-50 end;bS[#bS+1]=[[<g class="pdim txtfuel">]]if cn=="ATMO"then cx="atmofueltank"elseif cn=="SPACE"then cx="spacefueltank"else cx="rocketfueltank"end;cy=_G[cx.."_size"]if#co>0 then for i=1,#co do local bN=string.sub(co[i][cs],1,12)local cB=0;for c7=1,cy do if co[i][cs]==f(unit[cx.."_"..c7].getData()).name then cB=c7;break end end;if aP or cp[i]==nil or cq[i]==nil then local cC=0;local cD=0;local cE=0;local cF=0;local bh=system.getTime()if cB~=0 then cq[i]=f(unit[cx.."_"..cB].getData()).percentage;cp[i]=f(unit[cx.."_"..cB].getData()).timeLeft;if cp[i]=="n/a"then cp[i]=0 end else cE=m(co[i][cr])-co[i][cu]cC=co[i][ct]cq[i]=d(0.5+cE*100/cC)cD=co[i][cv]cF=co[i][cw]if cD<=cE then cp[i]=0 else cp[i]=d(0.5+cE/((cD-cE)/(bh-cF)))end;co[i][cv]=cE;co[i][cw]=bh end end;if bN==cm then bN=e("%s %d",cn,i)end;if cB==0 then bN=bN.." *"end;local cG;if cp[i]==0 then cG="n/a"else cG=FormatTimeString(cp[i])end;if cq[i]~=nil then local c3=d(cq[i]*2.55)local c4=e("rgb(%d,%d,%d)",255-c3,c3,0)local cH=""if cG~="n/a"and cp[i]<120 or cq[i]<5 then if aP then cH=[[class="red"]]end end;bS[#bS+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bs,cz,cH,bN,bs,cA,c4,cq[i],cG)cz=cz+30;cA=cA+30 end end end;bS[#bS+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b4)b4=vec3(b4)local bY=-math.deg(math.atan(b4.y,b4.z))+180;bY=bY-90;if bY<0 then bY=360+bY end;if bY>180 then bY=-180+bY-180 end;return-bY end;function getRelativeYaw(b4)b4=vec3(b4)local cI=math.deg(math.atan(b4.y,b4.x))-90;if cI<-180 then cI=360+cI end;return cI end;function AlignToWorldVector(cJ,cK)if not ad or b3>b6+0.08 or aa~=-1 then if cK==nil then cK=as end;cJ=vec3(cJ):normalize()local cL=vec3(core.getConstructWorldOrientationForward())-cJ;local cM=-getMagnitudeInDirection(cL,core.getConstructWorldOrientationRight())*ar;local cN=-getMagnitudeInDirection(cL,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cM/2 end;if an==0 then an=cN/2 end;D=D-(cM+(cM-am)*DampingMultiplier)C=C+cN+(cN-an)*DampingMultiplier;am=cM;an=cN;if math.abs(cM)<cK and math.abs(cN)<cK then return true end;return false end end;function getAPEnableName()local bN=AutopilotTargetName;if bN==nil then bN=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bN==nil then bN="None"end;return"Engage Autopilot: "..bN end;function getAPDisableName()local bN=AutopilotTargetName;if bN==nil then bN=CustomTarget.name end;if bN==nil then bN="None"end;return"Disable Autopilot: "..bN end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cO=50;local cP=260;local cQ=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cP,cO,at/2-cP/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cP,cO,at/2-cP/2-50-cQ.width,au/2-cO+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cP,cO,at/2-cP/2+cQ.width+50,au/2-cO+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cR=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cR.height,cR.x+cR.width+30,cR.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cR.height,cR.x+cR.width+30,cR.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cR.height,cR.x-200-30,cR.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cO=60;cP=300;local bs=10;local bt=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cP,cO,bs,bt,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cP,cO,bs+cP+20,bt,function()return AltitudeHold end,ToggleAltitudeHold)bt=bt+cO+20;MakeButton("Engage Autoland","Disable Autoland",cP,cO,bs,bt,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cP,cO,bs+cP+20,bt,function()return AutoTakeoff end,ToggleAutoTakeoff)bt=bt+cO+20;MakeButton("Show Orbit Display","Hide Orbit Display",cP,cO,bs,bt,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bt=bt+cO+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cP,cO,bs,bt,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cP,cO,bs+cP+20,bt,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bt=bt+cO+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cP,cO,bs,bt,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cP,cO,bs+cP+20,bt,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bt=bt+cO+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cP,cO,bs,bt,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bt=bt+cO+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cP*2,cO,bs,bt,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cS=Nav.axisCommandManager:getAxisCommandType(0)local cT="TRAVEL"if cS==1 then cT="CRUISE"end;if Autopilot then cT="AUTOPILOT"end;return cT end;function UpdateHud(bS)local bH=ae;local b4=core.getVelocity()local bm=vec3(b4):len()local bX=vec3(core.getWorldVertical())local bV=vec3(core.getConstructWorldOrientationForward())local bW=vec3(core.getConstructWorldOrientationRight())local cU=vec3(core.getConstructWorldOrientationUp())local cV=getRoll(bX,bV,bW)local cW=cV/180*math.pi;local cX=math.cos(cW)local cY=math.sin(cW)local bY=getPitch(bX,bV,bW*cX+cU*cY)local cZ=cV;local c_=bY;local d0=j()local d1=d(unit.getThrottle())local d2=bm*3.6;local d3=unit.getAxisCommandValue(0)local cT=GetFlightStyle()local d4="ROLL"local d5=unit.getClosestPlanetInfluence()>0;if d1==nil then d1=0 end;if not d5 then if bm>5 then bY=getRelativePitch(b4)cV=getRelativeYaw(b4)else bY=0;cV=0 end;d4="YAW"end;bS[#bS+1]=a5;bS[#bS+1]=ao;bS[#bS+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bS,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bS,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bS,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bS,bH)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d5 then DrawRollLines(bS,centerX,centerY,cZ,d4,d5)DrawArtificialHorizon(bS,c_,cZ,centerX,centerY,d5,d(getRelativeYaw(b4)),bm)else DrawRollLines(bS,centerX,centerY,cV,d4,d5)DrawArtificialHorizon(bS,bY,cV,centerX,centerY,d5,d(cV),bm)end;DrawAltitudeDisplay(bS,bH,d5)DrawPrograde(bS,b4,bm,centerX,centerY)end end;DrawThrottle(bS,cT,d1,d3)DrawSpeed(bS,d2)DrawWarnings(bS)DisplayOrbitScreen(bS)if screen_2 then local bB=vec3(core.getConstructWorldPos())local bs=960+bB.x/aU;local bt=450+bB.y/aV;screen_2.moveContent(aW,(bs-80)/19.2,(bt-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bS)local d6=aj;local d7=ak;local d8=aj;local d9=ak;if IsInFreeLook()and not brightHud then d6=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]d7=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bS[#bS+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],d6,d6,d8,d8,d7,d7,d9,d9,ResolutionX,ResolutionY)end;function HUDEpilogue(bS)bS[#bS+1]="</svg>"end;function DrawSpeed(bS,d2)local da=throtPosY-10;local db=throtPosX+10;bS[#bS+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then da=75 end;bS[#bS+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],db,da,d(d2))end;function DrawOdometer(bS,W,TotalDistanceTravelled,cT,X,d0)local dc=ConvertResolutionX(1240)local dd=ConvertResolutionY(55)local de=dd+10;local d0=j()local bj=core.g()local df=0;local dg=0;local dh=0;RefreshLastMaxBrake(bj)if ad then dh=LastMaxBrakeInAtmo else dh=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local di=vec3(core.getWorldAcceleration()):len()/9.80665;if bj>0.1 then dg=aB*bj;df=maxThrust/bj end;bS[#bS+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dc=ConvertResolutionX(1120)dd=ConvertResolutionY(55)de=dd+10 elseif ad then local dj=ConvertResolutionX(770)bS[#bS+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dj,dd,dj,de,d0)end;bS[#bS+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dc,dd,dc,de,bj/9.80665,dc,dd+20,dc,de+20,di)bS[#bS+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bS[#bS+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dh/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cT)if bj>0.1 then bS[#bS+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),df/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dg/1000)else bS[#bS+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bS[#bS+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cT)end;bS[#bS+1]="</g>"end;function DrawThrottle(bS,cT,d1,d3)local cz=throtPosY+10;local cA=throtPosY+20;if o()==1 and not RemoteHud then cz=55;cA=65 end;local dk="CRUISE"local unit="km/h"local dl=d3;if cT=="TRAVEL"or cT=="AUTOPILOT"then dk="THROT"unit="%"dl=d1;local dm="dim"if d1<0 then dm="red"end;bS[#bS+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dm,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d1),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bS[#bS+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cz,dk,throtPosX+10,cA,dl,unit)end;function DrawVerticalSpeed(bS,bH)if bH<200000 and not ad or bH and ad then local dn=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dp=0;if math.abs(dn)>1 then dp=45*math.log(math.abs(dn),10)if dn<0 then dp=-dp end end;bS[#bS+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dn),d(dp))end end;function getHeading(ca)local dq=-vec3(core.getWorldVertical())ca=ca-ca:project_on(dq)local dr=vec3(0,0,1)dr=dr-dr:project_on(dq)local ds=dr:cross(dq)local dp=dr:angle_between(ca)*constants.rad2deg;if ca:dot(ds)<0 then dp=360-dp end;return dp end;function DrawRollLines(bS,centerX,centerY,cZ,d4,d5)local dt=circleRad;local du=20;du=d(du)local dv=d(cZ)if d5 then for i=-45,45,5 do local dw=i;bS[#bS+1]=e([[<g transform="rotate(%f,%d,%d)">]],dw,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bS[#bS+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dt+du-len,centerX,centerY+dt+du)end;bS[#bS+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dt+du-35,d4,centerX,centerY+dt+du-25,dv)bS[#bS+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cZ,centerX,centerY)bS[#bS+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dt+du-20,centerX+5,centerY+dt+du-20,centerX,centerY+dt+du-15)bS[#bS+1]="</g>"end;local cI=dv;if d5 then cI=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dx=20;local dy=d(cI)local dz=0;local dA=centerY+dt+du+20;local dB=centerX;if d4~="YAW"then dA=ConvertResolutionY(130)dB=ConvertResolutionX(960)end;local dC=[[<path class="txttick line" d="]]for i=d(dy-(dx+10)-dy%5+0.5),d(dy+dx+10+dy%5+0.5),5 do local bs=dB+-i*5+cI*5;if i%10==0 then dz=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bS[#bS+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bs+5,dA-12,p)elseif i%5==0 then dz=5 end;if dz==10 then dC=e([[%s M %f %f v %d]],dC,bs,dA-5,dz)else dC=e([[%s M %f %f v %d]],dC,bs,dA-2.5,dz)end end;bS[#bS+1]=dC..[["/>]]bS[#bS+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dB-5,dA+10,dB+5,dA+10,dB,dA+5)if d5 then d4="HDG"end;bS[#bS+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dB,dA+25,dy,dB,dA+35,d4)end;function DrawArtificialHorizon(bS,c_,cZ,centerX,centerY,d5,dD,bm)local dt=circleRad;local dE=d(dt*3/5)if dt>0 then local dF=d(c_)local len=0;local dC=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cZ,centerX,centerY)if not ad then dC=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bS[#bS+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dt-1,centerX,centerY)bS[#bS+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dF-30-dF%5+0.5),d(dF+30+dF%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bt=centerY+-i*5+c_*5;if len==30 then dC=e([[%s M %d %f h %d]],dC,centerX-dE-len,bt,len)if ad then bS[#bS+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cZ,centerX,centerY,centerX-dE+10,bt,i)bS[#bS+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cZ,centerX,centerY,centerX+dE-10,bt,i)if i==0 or i==180 or i==-180 then bS[#bS+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cZ,centerX,centerY,centerX-dE+20,bt,dE*2-40)end else bS[#bS+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dE+10,bt,i)bS[#bS+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dE-10,bt,i)end;dC=e([[%s M %d %f h %d]],dC,centerX+dE,bt,len)else dC=e([[%s M %d %f h %d]],dC,centerX-dE-len,bt,len)dC=e([[%s M %d %f h %d]],dC,centerX+dE,bt,len)end end;bS[#bS+1]=dC..[["/>]]local dG="PITCH"if not d5 then dG="REL PITCH"end;if c_>90 and not ad then c_=90-(c_-90)elseif c_<-90 and not ad then c_=-90-(c_+90)end;if dt>200 then if ad then if bm>w then bS[#bS+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dD)end;bS[#bS+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cZ,centerX,centerY)else bS[#bS+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bS[#bS+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dE+25,centerY-5,centerX-dE+20,centerY,centerX-dE+25,centerY+5,centerX-dE+50,centerY+4,dF)bS[#bS+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dE-25,centerY-5,centerX+dE-20,centerY,centerX+dE-25,centerY+5,centerX+dE-30,centerY+4,dF)bS[#bS+1]="</g>"end;local dH=d(dt/3)bS[#bS+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dH,centerY,dt-dH)if not ad and d5 then bS[#bS+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cZ,centerX,centerY,centerX-dE+10,centerY,dE*2-20)end;bS[#bS+1]="</g>"if dt<200 then if ad and bm>w then bS[#bS+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dt,dG,centerX,centerY-dt+10,dF,centerX,centerY-15,"Yaw",centerX,centerY+20,dD)else bS[#bS+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dt,dG,centerX,centerY-dt+15,dF)end end end end;function DrawAltitudeDisplay(bS,bH,d5)local dI=altMeterX;local dJ=altMeterY;local dK=78;local dL=19;local dM=AboveGroundLevel()if dM~=-1 then table.insert(bS,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dI+dK,dJ+dL+20,dM))end;if d5 and(bH<200000 and not ad or bH and ad)then table.insert(bS,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dI-1,dJ-4,dK+2,dL+6,dI+1,dJ-1,dK-4,dL))local bQ=0;local dN=1;local dO=0;local dP=bH<0;local dQ=9;if dP then dQ=0 end;local bH=math.abs(bH)while bQ<6 do local dR=11;local dS=16;local dT=9;local dU=14;local cH="altsm"if bQ>2 then dS=dS+3;dR=dR+2;dU=dU+2;dT=dT-6;cH="altbig"end;if dP then cH=cH.." red"end;local dV=bH/dN%10;local dW=d(dV)local dX=d((dW+1)%10)local dY=dO;if bQ==0 then dY=dV-dW;if dP then dY=1-dY end end;if dP and(bQ==0 or dO~=0)then local dZ=dX;dX=dW;dW=dZ end;local d_=dS*(dY-1)local e0=d_+dS;local bs=dI+dT+(6-bQ)*dR;local bt=dJ+dU;table.insert(bS,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cH,bs,bt+d_,dX,bs,bt+e0,dW))bQ=bQ+1;dN=dN*10;if dW==dQ then dO=dY else dO=0 end end;table.insert(bS,[[</g></g>]])end end;function DrawPrograde(bS,b4,bm,centerX,centerY)if bm>5 and not ad or bm>w then local dt=circleRad;local e1=20;local e2=20;local e3=vec3(b4)local e4=getRelativePitch(e3)local e5=getRelativeYaw(e3)local e6=-e5/e2*dt;local e7=e4/e1*dt;local bs=centerX+e6;local bt=centerY+e7;local a3=math.sqrt(e6^2+e7^2)if a3<dt then bS[#bS+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bs,bt)else local dp=math.atan(e7,e6)local e8=centerX+dt*math.cos(dp)local e9=centerY+dt*math.sin(dp)bS[#bS+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',e8,e9)end;e4=getRelativePitch(-e3)e5=getRelativeYaw(-e3)e6=-e5/e2*dt;e7=e4/e1*dt;bs=centerX+e6;bt=centerY+e7;a3=math.sqrt(e6^2+e7^2)if not ad then if a3<dt then bS[#bS+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bs,bt)else local dp=math.atan(e7,e6)local e8=centerX+dt*math.cos(dp)local e9=centerY+dt*math.sin(dp)bS[#bS+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',e8,e9)end end end end;function DrawWarnings(bS)bS[#bS+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bS[#bS+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bS[#bS+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bS[#bS+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bS[#bS+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local ea=ConvertResolutionX(960)local eb=ConvertResolutionY(860)local ec=ConvertResolutionY(880)local ed=ConvertResolutionY(900)local ee=ConvertResolutionY(960)local ef=ConvertResolutionY(200)local eg=ConvertResolutionY(150)local eh=ConvertResolutionY(960)if o()==1 and not RemoteHud then eb=ConvertResolutionY(135)ec=ConvertResolutionY(155)ed=ConvertResolutionY(175)ef=ConvertResolutionY(115)eg=ConvertResolutionY(95)end;if BrakeIsOn then bS[#bS+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],ea,eb)end;if ad and b3<b6 and b5>brakeLandingRate+5 then bS[#bS+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],ea,ef+50)end;if ah then bS[#bS+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],ea,eh)end;if GearExtended then if A then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],ea,ec)else bS[#bS+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],ea,ec)end;bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],ea,ed,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],ea,ee+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],ea,ef+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bS[#bS+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],ea,ef+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],ea,ef+20,AutopilotStatus)elseif LockPitch~=nil then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],ea,ef+20,d(LockPitch))elseif I then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],ea,ef+20)elseif Reentry then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],ea,ef+20)end;if AltitudeHold then if AutoTakeoff then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],ea,ef,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bS[#bS+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],ea,ef+50)end else bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],ea,ef,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bS[#bS+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],ea,ef)else bS[#bS+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],ea,ef)end end;if ProgradeIsOn then bS[#bS+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],ea,ef)end;if RetrogradeIsOn then bS[#bS+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],ea,ef)end;if TurnBurn then bS[#bS+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],ea,eg)end;if VectorToTarget then bS[#bS+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],ea,ef+30,VectorStatus)end;bS[#bS+1]="</g>"end;function DisplayOrbitScreen(bS)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ei=OrbitMapX;local ej=OrbitMapY;local ek=OrbitMapSize;local el=4;ej=ej+el;local em=15;local bs=ei+ek+ei/2+el;local bt=ej+ek/2+5+el;local en,eo,ep,eq;en=ek/4;eq=0;bS[#bS+1]=[[<g class="pbright txtorb txtmid">]]bS[#bS+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ek+ei*2,ek+ej,el,el)if orbit.periapsis~=nil and orbit.apoapsis~=nil then ep=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(en*2)eo=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/ep*(1-orbit.eccentricity)eq=en-orbit.periapsis.altitude/ep-planet.radius/ep;local er=""if orbit.periapsis.altitude<=0 then er='redout'end;bS[#bS+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],er,ei+ek/2+eq+el,ej+ek/2+el,en,eo)bS[#bS+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ei+ek/2+el,ej+ek/2+el,planet.radius/ep)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bS[#bS+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bs-35,bt-5,ei+ek/2+en+eq,bt-5)bS[#bS+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bs,bt)bt=bt+em;bS[#bS+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getDistanceDisplayString(orbit.apoapsis.altitude))bt=bt+em;bS[#bS+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,FormatTimeString(orbit.timeToApoapsis))bt=bt+em;bS[#bS+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getSpeedDisplayString(orbit.apoapsis.speed))end;bt=ej+ek/2+5+el;bs=ei-ei/2+10+el;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bS[#bS+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bs+35,bt-5,ei+ek/2-en+eq,bt-5)bS[#bS+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bs,bt)bt=bt+em;bS[#bS+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getDistanceDisplayString(orbit.periapsis.altitude))bt=bt+em;bS[#bS+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,FormatTimeString(orbit.timeToPeriapsis))bt=bt+em;bS[#bS+1]=e([[<text x="%f" y="%f">%s</text>]],bs,bt,getSpeedDisplayString(orbit.periapsis.speed))end;bS[#bS+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ei+ek/2+el,20+el,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local es=orbit.timeToApoapsis/orbit.period*2*math.pi;local et=en*math.cos(es)local eu=eo*math.sin(es)bS[#bS+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ei+ek/2+et+eq+el,ej+ek/2+eu+el)end;bS[#bS+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local ev=a3>100000;local bb=""if ev then bb=round(a3/1000/200,1).." SU"elseif a3<1000 then bb=round(a3,1).." M"else bb=round(a3/1000,1).." KM"end;return bb end;function getDistanceDisplayString2(a3)local ev=a3>100000;local bb=""if ev then bb=round(a3/1000/200,2).." SU"elseif a3<1000 then bb=round(a3,2).." M"else bb=round(a3/1000,2).." KM"end;return bb end;function getSpeedDisplayString(bm)return d(round(bm*3.6,0)+0.5).." km/h"end;function FormatTimeString(ew)local ex=0;local ey=0;local ez=0;if ew<60 then ew=d(ew)elseif ew<3600 then ex=d(ew/60)ew=d(ew%60)elseif ew<86400 then ey=d(ew/3600)ex=d(ew%3600/60)else ez=d(ew/86400)ey=d(ew%86400/3600)end;if ez>0 then return ez.."d "..ey.."h "elseif ey>0 then return ey.."h "..ex.."m "elseif ex>0 then return ex.."m "..ew.."s"elseif ew>0 then return ew.."s"else return"0s"end end;function getMagnitudeInDirection(cJ,eA)cJ=vec3(cJ)eA=vec3(eA):normalize()local bb=cJ*eA;return bb.x+bb.y+bb.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eB=AtlasOrdered[AutopilotTargetIndex].index;local eC=aS[0][eB]if eC.center then AutopilotTargetName=eC.name;V=aY[0][eB]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eC;for _,ba in pairs(aY[0])do if ba.name==CustomTarget.planetname then V=ba;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eD=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eD end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b4=core.getWorldVelocity()local bm=vec3(b4):len()local eE,eF=aZ.computeDistanceAndTime(vec3(b4):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eG;if not TurnBurn then _,eG=GetAutopilotBrakeDistanceAndTime(bm)else _,eG=GetAutopilotTBBrakeDistanceAndTime(bm)end;local eH=0;local eI=0;if AutopilotCruising or not Autopilot and bm>5 then eI=aZ.computeTravelTime(bm,0,AutopilotDistance)elseif P+eE<AutopilotDistance then eH=AutopilotDistance-(P+eE)eI=aZ.computeTravelTime(8333.0556,0,eH)else local eJ=(AutopilotDistance-P)/eE;eE=AutopilotDistance-P;eF=eF*eJ end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eI elseif AutopilotBraking then return eG elseif AutopilotCruising then return eI+eG else return eF+Q+eI end end;function GetAutopilotBrakeDistanceAndTime(bm)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bm,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bm,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bm)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bm,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eK=-1;local eL=-1;if vBooster then eK=vBooster.distance()end;if hover then eL=hover.distance()end;if eK~=-1 and eL~=-1 then if eK<eL then return eK else return eL end elseif eK~=-1 then return eK elseif eL~=-1 then return eL else return-1 end end;function AboveGroundLevel()local eM=-1;local eN=aa;if telemeter_1 then eM=telemeter_1.getDistance()end;if eN~=-1 and eM~=-1 then if eN<eM then return eN else return eM end elseif eN~=-1 then return eN else return eM end end;function tablelength(eO)local eP=0;for _ in pairs(eO)do eP=eP+1 end;return eP end;function BeginProfile(eQ)ProfileTimeStart=system.getTime()end;function EndProfile(eQ)local eR=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eR;ProfileCount=ProfileCount+1;if eR>ProfileTimeMax then ProfileTimeMax=eR end;if eR<ProfileTimeMin then ProfileTimeMin=eR end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eS=ProfileTimeSum;local eT=ProfileTimeSum/ProfileCount;local eU=ProfileTimeMin;local eV=ProfileTimeMax;local eW=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eS,eT,eU,eV,eW))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eX=radar_1.getEntries()local eY=radar_1.getData()local eZ=ConvertResolutionX(1770)local e_=ConvertResolutionY(330)if#eX>0 then local f0=eY:find('identifiedConstructs":%[%]')if f0==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if f0~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],eZ,e_,#eX)local f1={}for b9,ba in pairs(eX)do if radar_1.hasMatchingTransponder(ba)==1 then table.insert(f1,ba)end end;if#f1>0 then local bt=ConvertResolutionY(15)local bs=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bs,bt)for b9,ba in pairs(f1)do bt=bt+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bs,bt,radar_1.getConstructName(ba))end end else local f2;f2=eY:find('worksInEnvironment":false')if f2 then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],eZ,e_)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],eZ,e_)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bS,f3)if f3~="empty"then bS[#bS+1]=[[<text class="msg" x="50%%" y="310" >]]for f4 in string.gmatch(f3,"([^\n]+)")do bS[#bS+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],f4)end;bS[#bS+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bh=system.getTime()local b4=vec3(core.getWorldVelocity())local d2=vec3(b4):len()local f5=bh-ag;if d2>1.38889 then d2=d2/1000;local f6=d2*(bh-ag)TotalDistanceTravelled=TotalDistanceTravelled+f6;W=W+f6 end;X=X+f5;TotalFlightTime=TotalFlightTime+f5;ag=bh end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,atmos=false,gravity=0},[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for b9,ba in pairs(aS[0])do if av==nil or ba.center.x<av then av=ba.center.x end;if aw==nil or ba.center.x>aw then aw=ba.center.x end;if ax==nil or ba.center.y<ax then ax=ba.center.y end;if ay==nil or ba.center.y>ay then ay=ba.center.y end end;aT=""local f7=1.1*(aw-av)/1920;local f8=1.4*(ay-ax)/1080;for b9,ba in pairs(aS[0])do local bs=960+ba.center.x/f7;local bt=540+ba.center.y/f8;aT=aT..'<circle cx="'..bs..'" cy="'..bt..'" r="'..ba.radius/f7*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(ba.name,"Moon")and not string.match(ba.name,"Sanctuary")and not string.match(ba.name,"Space")then aT=aT.."<text x='"..bs.."' y='"..bt+ba.radius/f7*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..ba.name.."</text>"end end;local bB=vec3(core.getConstructWorldPos())local bs=960+bB.x/f7;local bt=540+bB.y/f8;aT=aT..'<circle cx="'..bs..'" cy="'..bt..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bs.."' y='"..bt-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=f7;aV=f8;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bB=vec3(core.getConstructWorldPos())local bs=960+bB.x/f7;local bt=540+bB.y/f8;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bs-80)/19.20,(bt-80)/10.80,aT)end end;function PlanetRef()local function f9(fa)return type(fa)=='number'end;local function fb(fa)return type(tonumber(fa))=='number'end;local function fc(fd)return type(fd)=='table'end;local function fe(ff)return type(ff)=='string'end;local function fg(ba)return fc(ba)and f9(ba.x and ba.y and ba.z)end;local function fh(fi)return fc(fi)and f9(fi.latitude and fi.longitude and fi.altitude and fi.bodyId and fi.systemId)end;local fj=math.pi/180;local fk=180/math.pi;local fl=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bC='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fm=utils.clamp;local function fn(fo,fp)if fo==0 then return math.abs(fp)<1e-09 end;if fp==0 then return math.abs(fo)<1e-09 end;return math.abs(fo-fp)<math.max(math.abs(fo),math.abs(fp))*fl end;local function fq(fa)local bb=string.gsub(string.reverse(e('%.4f',fa)),'^0*%.?','')return bb==''and'0'or string.reverse(bb)end;local function fr(fs)if fg(fs)then return e('{x=%.3f,y=%.3f,z=%.3f}',fs.x,fs.y,fs.z)end;if fc(fs)and not getmetatable(fs)then local ft={}local fu=next(fs)if type(fu)=='nil'or fu==1 then ft=fs else for b9,ba in pairs(fs)do local dl=fr(ba)if type(b9)=='number'then table.insert(ft,e('[%s]=%s',b9,dl))else table.insert(ft,e('%s=%s',b9,dl))end end end;return e('{%s}',table.concat(ft,','))end;if fe(fs)then return e("'%s'",fs:gsub("'",[[\']]))end;return tostring(fs)end;local fv={}fv.__index=fv;fv.__tostring=function(fs,fw)local fx={}for b9 in pairs(fs)do table.insert(fx,b9)end;table.sort(fx)local ft={}for _,b9 in ipairs(fx)do local dl=fr(fs[b9])if type(b9)=='number'then table.insert(ft,e('[%s]=%s',b9,dl))else table.insert(ft,e('%s=%s',b9,dl))end end;if fw then return e('%s%s',fw,table.concat(ft,',\n'..fw))end;return e('{%s}',table.concat(ft,','))end;fv.__eq=function(fy,fz)return fy.planetarySystemId==fz.planetarySystemId and fy.bodyId==fz.bodyId and fn(fy.radius,fz.radius)and fn(fy.center.x,fz.center.x)and fn(fy.center.y,fz.center.y)and fn(fy.center.z,fz.center.z)and fn(fy.GM,fz.GM)end;local function fA(bD,bE,fB,fC,fD)assert(fb(bD),'Argument 1 (planetarySystemId) must be a number:'..type(bD))assert(fb(bE),'Argument 2 (bodyId) must be a number:'..type(bE))assert(fb(fB),'Argument 3 (radius) must be a number:'..type(fB))assert(fc(fC),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fC))assert(fb(fD),'Argument 5 (GM) must be a number:'..type(fD))return setmetatable({planetarySystemId=tonumber(bD),bodyId=tonumber(bE),radius=tonumber(fB),center=vec3(fC),GM=tonumber(fD)},fv)end;local fE={}fE.__index=fE;fE.__tostring=function(fF)return e('::pos{%d,%d,%s,%s,%s}',fF.systemId,fF.bodyId,fq(fF.latitude*fk),fq(fF.longitude*fk),fq(fF.altitude))end;fE.__eq=function(fy,fz)return fy.bodyId==fz.bodyId and fy.systemId==fz.systemId and fn(fy.latitude,fz.latitude)and fn(fy.altitude,fz.altitude)and(fn(fy.longitude,fz.longitude)or fn(fy.latitude,math.pi/2)or fn(fy.latitude,-math.pi/2))end;local function fG(fH,bE,bF,bG,bH)local bD=fH;if fe(fH)and not bG and not bH and not bE and not bF then bD,bE,bF,bG,bH=string.match(fH,bC)assert(bD,'Argument 1 (position string) is malformed.')else assert(fb(bD),'Argument 1 (systemId) must be a number:'..type(bD))assert(fb(bE),'Argument 2 (bodyId) must be a number:'..type(bE))assert(fb(bF),'Argument 3 (latitude) must be in degrees:'..type(bF))assert(fb(bG),'Argument 4 (longitude) must be in degrees:'..type(bG))assert(fb(bH),'Argument 5 (altitude) must be in meters:'..type(bH))end;bD=tonumber(bD)bE=tonumber(bE)bF=tonumber(bF)bG=tonumber(bG)bH=tonumber(bH)if bE==0 then return setmetatable({latitude=bF,longitude=bG,altitude=bH,bodyId=bE,systemId=bD},fE)end;return setmetatable({latitude=fj*fm(bF,-90,90),longitude=fj*(bG%360),altitude=bH,bodyId=bE,systemId=bD},fE)end;local fI={}fI.__index=fI;fI.__tostring=function(fs,fw)local fJ=fw and fw..'  'local fK={}local fx={}for b9 in pairs(fs)do table.insert(fx,b9)end;table.sort(fx)for _,fL in ipairs(fx)do bdy=fs[fL]local fM=fv.__tostring(bdy,fJ)if fw then table.insert(fK,e('[%s]={\n%s\n%s}',fL,fM,fw))else table.insert(fK,e('  [%s]=%s',fL,fM))end end;if fw then return e('\n%s%s%s',fw,table.concat(fK,',\n'..fw),fw)end;return e('{\n%s\n}',table.concat(fK,',\n'))end;local function fN(fO)local aS={}local pid;for _,ba in pairs(fO)do local bO=ba.planetarySystemId;if type(bO)~='number'then error('Invalid planetary system ID: '..tostring(bO))elseif pid and bO~=pid then error('Mismatch planetary system IDs: '..bO..' and '..pid)end;local fP=ba.bodyId;if type(fP)~='number'then error('Invalid body ID: '..tostring(fP))elseif aS[fP]then error('Duplicate body ID: '..tostring(fP))end;setmetatable(ba.center,getmetatable(vec3.unit_x))aS[fP]=setmetatable(ba,fv)pid=bO end;return setmetatable(aS,fI)end;aX={}local function fQ(fO)return setmetatable({galaxyAtlas=fO or{}},aX)end;aX.__index=function(fd,i)if type(i)=='number'then local system=fd.galaxyAtlas[i]return fN(system)end;return rawget(aX,i)end;aX.__pairs=function(fs)return function(fd,b9)local fR,nv=next(fd,b9)return fR,nv and fN(nv)end,fs.galaxyAtlas,nil end;aX.__tostring=function(fs)local fS={}for _,fT in pairs(fs or{})do local fU=fT:getPlanetarySystemId()local fV=fI.__tostring(fT,'    ')table.insert(fS,e('  [%s]={%s\n  }',fU,fV))end;return e('{\n%s\n}\n',table.concat(fS,',\n'))end;aX.BodyParameters=fA;aX.MapPosition=fG;aX.PlanetarySystem=fN;function aX.createBodyParameters(fW,bE,fX,fY,fZ,f_,g0)assert(fb(fW),'Argument 1 (planetarySystemId) must be a number:'..type(fW))assert(fb(bE),'Argument 2 (bodyId) must be a number:'..type(bE))assert(fb(fX),'Argument 3 (surfaceArea) must be a number:'..type(fX))assert(fc(fY),'Argument 4 (aPosition) must be an array or vec3:'..type(fY))assert(fc(fZ),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(fZ))assert(fb(f_),'Argument 6 (altitude) must be in meters:'..type(f_))assert(fb(g0),'Argument 7 (gravityAtPosition) must be number:'..type(g0))local fB=math.sqrt(fX/4/math.pi)local a3=fB+f_;local g1=vec3(fY)+a3*vec3(fZ)local fD=g0*a3*a3;return fA(fW,bE,fB,g1,fD)end;aX.isMapPosition=fh;function aX:getPlanetarySystem(fH)if i==nil then i=0 end;if nv==nil then nv=0 end;local fW=fH;if fh(fH)then fW=fH.systemId end;if type(fW)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fI then system=fN(system)end;return system end end end;function fI:castIntersections(g2,eA,g3,g4)local g3=g3 or function(g5)return 1.05*g5.radius end;local g6={}if g4 then for _,i in ipairs(g4)do g6[i]=self[i]end else g4={}for b9,g5 in pairs(self)do table.insert(g4,b9)g6[b9]=g5 end end;local function g7(g8,g9)local ga=g6[g8].center-g2;local gb=g6[g9].center-g2;return ga:len()<gb:len()end;table.sort(g4,g7)local gc=eA:normalize()for i,bO in ipairs(g4)do local g5=g6[bO]local gd=g5.center-g2;local fB=g3(g5)local ge=gd:dot(gc)local gf=ge^2-(gd:len2()-fB^2)if gf>=0 then local gg=math.sqrt(gf)local gh=ge+gg;local gi=ge-gg;if gi>0 then return g5,gh,gi elseif gh>0 then return g5,gh,nil end end end;return nil,nil,nil end;function fI:closestBody(gj)assert(type(gj)=='table','Invalid coordinates.')local gk,g5;local gl=vec3(gj)for _,gm in pairs(self)do local gn=(gm.center-gl):len2()if not g5 or gn<gk then g5=gm;gk=gn end end;return g5 end;function fI:convertToBodyIdAndWorldCoordinates(fH)local go=fH;if fe(fH)then go=fG(fH)end;if go.bodyId==0 then return 0,vec3(go.latitude,go.longitude,go.altitude)end;local gm=self:getBodyParameters(go)if gm then return go.bodyId,gm:convertToWorldCoordinates(go)end end;function fI:getBodyParameters(fH)local bE=fH;if fh(fH)then bE=fH.bodyId end;assert(fb(bE),'Argument 1 (bodyId) must be a number:'..type(bE))return self[bE]end;function fI:getPlanetarySystemId()local _,ba=next(self)return ba and ba.planetarySystemId end;function fv:convertToMapPosition(fC)assert(fc(fC),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fC))local gp=vec3(fC)if self.bodyId==0 then return setmetatable({latitude=gp.x,longitude=gp.y,altitude=gp.z,bodyId=0,systemId=self.planetarySystemId},fE)end;local gq=gp-self.center;local a3=gq:len()local bH=a3-self.radius;local bF=0;local bG=0;if not fn(a3,0)then local gr=math.atan(gq.y,gq.x)bG=gr>=0 and gr or 2*math.pi+gr;bF=math.pi/2-math.acos(gq.z/a3)end;return setmetatable({latitude=bF,longitude=bG,altitude=bH,bodyId=self.bodyId,systemId=self.planetarySystemId},fE)end;function fv:convertToWorldCoordinates(fH)local go=fe(fH)and fG(fH)or fH;if go.bodyId==0 then return vec3(go.latitude,go.longitude,go.altitude)end;assert(fh(go),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(go.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(go.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bI=math.cos(go.latitude)return self.center+(self.radius+go.altitude)*vec3(bI*math.cos(go.longitude),bI*math.sin(go.longitude),math.sin(go.latitude))end;function fv:getAltitude(fC)return(vec3(fC)-self.center):len()-self.radius end;function fv:getDistance(fC)return(vec3(fC)-self.center):len()end;function fv:getGravity(fC)local gs=self.center-vec3(fC)local gt=gs:len2()return self.GM/gt*gs/math.sqrt(gt)end;return setmetatable(aX,{__call=function(_,...)return fQ(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fe(ff)return type(ff)=='string'end;local function fc(fd)return type(fd)=='table'end;local function fn(fo,fp)if fo==0 then return math.abs(fp)<1e-09 end;if fp==0 then return math.abs(fo)<1e-09 end;return math.abs(fo-fp)<math.max(math.abs(fo),math.abs(fp))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bH)assert(self.body)local a3=bH+self.body.radius;if not fn(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fH,b4)assert(self.body)assert(fc(fH)or fe(fH))assert(fc(b4))local bB=(fe(fH)or PlanetRef.isMapPosition(fH))and self.body:convertToWorldCoordinates(fH)or vec3(fH)local ba=vec3(b4)local gu=bB-self.body.center;local gb=ba:len2()local gv=gu:len()local gw=self.body.GM;local gx=((gb-gw/gv)*gu-gu:dot(ba)*ba)/gw;local fo=gw/(2*gw/gv-gb)local gy=gx:len()local gc=gx:normalize()local gz=fo*(1-gy)local gA=fo*(1+gy)local gB=gz*gc+self.body.center;local gC=gy<=1 and-gA*gc+self.body.center or nil;local gD=math.sqrt(fo*gw*(1-gy*gy))local gE=gC and 2*math.pi*math.sqrt(fo^3/gw)local gF=math.acos(gx:dot(gu)/(gy*gv))if gu:dot(ba)<0 then gF=-(gF-2*math.pi)end;local gG=math.acos((math.cos(gF)+gy)/(1+gy*math.cos(gF)))local gH=gG;if gH<0 then gH=gH+2*math.pi end;local gI=gH-gy*math.sin(gH)local gJ=0;local gK=0;local gL=0;if gE~=nil then gJ=gI/(2*math.pi/gE)gK=gE-gJ;gL=gK+gE/2;if gF-math.pi>0 then gK=gJ;gL=gK+gE/2 end;if gL>gE then gL=gL-gE end end;return{periapsis={position=gB,speed=gD/gz,circularOrbitSpeed=math.sqrt(gw/gz),altitude=gz-self.body.radius},apoapsis=gC and{position=gC,speed=gD/gA,circularOrbitSpeed=math.sqrt(gw/gA),altitude=gA-self.body.radius},currentVelocity=ba,currentPosition=bB,eccentricity=gy,period=gE,eccentricAnomaly=gG,meanAnomaly=gI,timeToPeriapsis=gK,timeToApoapsis=gL}end;local function gM(gN)local gm=PlanetRef.BodyParameters(gN.planetarySystemId,gN.bodyId,gN.radius,gN.center,gN.GM)return setmetatable({body=gm},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gM(...)end})end;function Kinematics()local aZ={}local gO=30000000/3600;local gP=gO*gO;local gQ=100;local function gR(ba)return 1/math.sqrt(1-ba*ba/gP)end;function aZ.computeAccelerationTime(gS,gT,gU)local gV=gO*math.asin(gS/gO)return(gO*math.asin(gU/gO)-gV)/gT end;function aZ.computeDistanceAndTime(gS,gU,gW,gX,gY,gZ)gY=gY or 0;gZ=gZ or 0;local g_=gS<=gU;local h0=gX*(g_ and 1 or-1)/gW;local h1=-gZ/gW;local h2=h0+h1;if g_ and h2<=0 or not g_ and h2>=0 then return-1,-1 end;local h3,h4=0,0;if h0~=0 and gY>0 then local gV=math.asin(gS/gO)local h5=math.pi*(h0/2+h1)local h6=h0*gY;local h7=gO*math.pi;local ba=function(fd)local cd=(h5*fd-h6*math.sin(math.pi*fd/2/gY)+h7*gV)/h7;local h8=math.tan(cd)return gO*h8/math.sqrt(h8*h8+1)end;local h9=g_ and function(ff)return ff>=gU end or function(ff)return ff<=gU end;h4=2*gY;if h9(ba(h4))then local ha=0;while math.abs(h4-ha)>0.5 do local fd=(h4+ha)/2;if h9(ba(fd))then h4=fd else ha=fd end end end;local hb=gS;local hc=h4/gQ;for hd=1,gQ do local bm=ba(hd*hc)h3=h3+(bm+hb)*hc/2;hb=bm end;if h4<2*gY then return h3,h4 end;gS=hb end;local gV=gO*math.asin(gS/gO)local bc=(gO*math.asin(gU/gO)-gV)/h2;local he=gP*math.cos(gV/gO)/h2;local a3=he-gP*math.cos((h2*bc+gV)/gO)/h2;return a3+h3,bc+h4 end;function aZ.computeTravelTime(gS,gT,a3)if a3==0 then return 0 end;if gT>0 then local gV=gO*math.asin(gS/gO)local he=gP*math.cos(gV/gO)/gT;return(gO*math.acos(gT*(he-a3)/gP)-gV)/gT end;assert(gS>0,'Acceleration and initial speed are both zero.')return a3/gS end;function aZ.lorentz(ba)return gR(ba)end;return aZ end;function script.onStart()VERSION_NUMBER=4.925;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bM=j()if door and(bM>0 or bM==0 and ae<10000)then for _,ba in pairs(door)do ba.toggle()end end;if switch then for _,ba in pairs(switch)do ba.toggle()end end;if forcefield and(bM>0 or bM==0 and ae<10000)then for _,ba in pairs(forcefield)do ba.toggle()end end;if dbHud_1 then if not Y then for b9,ba in pairs(b)do dbHud_1.setStringValue(ba,g(_G[ba]))end;for b9,ba in pairs(a)do dbHud_1.setStringValue(ba,g(_G[ba]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(hf)if hf=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hg=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hg then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hf=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bS={}local cT=GetFlightStyle()DrawOdometer(bS,W,TotalDistanceTravelled,cT,X)CheckDamage(bS)a5=table.concat(bS,"")collectgarbage("collect")elseif hf=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bb=json.decode(dbHud_1.getStringValue("SavedLocations"))if bb~=nil then _G["SavedLocations"]=bb;local bQ=-1;local bL;for b9,ba in pairs(SavedLocations)do if ba.name and ba.name=="SatNav Location"then bQ=b9;break end end;if bQ~=-1 then bL=SavedLocations[bQ]bQ=-1;for b9,ba in pairs(aS[0])do if ba.name and ba.name=="SatNav Location"then bQ=b9;break end end;if bQ>-1 then aS[0][bQ]=bL end;UpdateAtlasLocationsList()K=bL.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hf=="msgTick"then local bS={}DisplayMessage(bS,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hf=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hf=="hudTick"then local hh=system.getMouseDeltaX()local hi=system.getMouseDeltaY()local bS={}HUDPrologue(bS)if showHud then UpdateHud(bS)else DisplayOrbitScreen(bS)DrawWarnings(bS)end;HUDEpilogue(bS)bS[#bS+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bS,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bS)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bS)if screen_1.getMouseState()==1 then CheckButtons()end;bS[#bS+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+hh;a1=a1+hi end;SetButtonContains()DrawButtons(bS)if not b0 and not b1 then local hj=table.concat(bS,"")bS={}bS[#bS+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bS[#bS+1]=aT;bS[#bS+1]=hj;bS[#bS+1]="</body>"b0=true;bS[#bS+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bS,"")system.setScreen(content)elseif b1 then local hj=table.concat(bS,"")bS={}bS[#bS+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bS[#bS+1]=aT;bS[#bS+1]=hj;bS[#bS+1]="</body>"end;if not b0 then bS[#bS+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+hh;a1=a1+hi;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(hi,-100,100)+0.5)*2*y;D=(-utils.smoothstep(hh,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bS)end else SetButtonContains()DrawButtons(bS)end;bS[#bS+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bS[#bS+1]=[[</svg></body>]]content=table.concat(bS,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hf=="apTick"then b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;b4=vec3(core.getWorldVelocity())b5=vec3(b4):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())if planet.name=="Space"then planet=aS[0][2]end;kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b4)aa=hoverDetectGround()local hk=b5>8334;if b5>SpaceSpeedLimit/3.6 and not ad and not Autopilot then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hk and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hk;if ad and j()>0.09 then if not ai then if b5>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b5<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b5>w then local hl=AlignToWorldVector(vec3(b4),0.01)if a7 then b2=true;if b5<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b2=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b5>w then AlignToWorldVector(-vec3(b4))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b5*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)end;P=P;Q=Q;local hm=AutopilotTargetCoords;if orbit.apoapsis==nil and b5>300 and AutopilotAccelerating then local hn=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b4):normalize()local ho=getMagnitudeInDirection(hn,AutopilotShipUp)local hp=getMagnitudeInDirection(hn,AutopilotShipRight)local hq=-hp*AutopilotDistance*b5*TrajectoryAlignmentStrength;local hr=-ho*AutopilotDistance*b5*TrajectoryAlignmentStrength;hm=AutopilotTargetCoords+-hq*vec3(AutopilotShipRight)+-hr*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hm)-vec3(core.getConstructWorldPos())):len()local hs=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hs)..'", "unit":""}')local ht=true;local hu=(V.center-(vec3(core.getConstructWorldPos())+vec3(b4):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hu)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then ht=AlignToWorldVector((hm-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then ht=AlignToWorldVector(-vec3(b4):normalize())end;if AutopilotAccelerating then if not ht or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b4)<0 and b5>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hu-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b5<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if ht then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif ht then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hv=0;local bB=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hw=bB-vec3(core.getConstructWorldPos())local hx=vec3(hw):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hy=vec3(hw):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hx*hx+hy*hy)AlignToWorldVector(hw:normalize())local hz=40;local hA=a3<hz;local hB=100;local hC=utils.clamp((a3-hz)/2,10,hB)C=0;local ht=math.abs(D)<0.1;if ht and b5<hC and not hA then BrakeIsOn=false;hv=-20 else BrakeIsOn=true;hv=0 end;local bV=vec3(core.getConstructWorldOrientationForward())local bW=vec3(core.getConstructWorldOrientationRight())local bX=vec3(core.getWorldVertical())local bY=getPitch(bX,bV,bW)local hD=1.0;if math.abs(hv-bY)>hD then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hv-bY)local hE=pitchPID:get()C=hE end end;local dq=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d5=unit.getClosestPlanetInfluence()>0;local hF=HoldAltitude-ae;local hG=500+b5;local hv=(utils.smoothstep(hF,-hG,hG)-0.5)*2*MaxPitch;if not AltitudeHold then hv=0 end;if LockPitch~=nil then if d5 then hv=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hH=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hH then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hH)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hv=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hv=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hI=C;if b5>w and not a8 then AlignToWorldVector(vec3(b4))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cL=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cL)local hJ=cL:len()-cL:project_on(dq):len()local bn=LastMaxBrakeInAtmo;local dn=b4.x*dq.x+b4.y*dq.y+b4.z*dq.z;local hK=b4:len()-math.abs(dn)local hL=vec3(core.getWorldAirFrictionAcceleration())if bn~=nil then P,Q=aZ.computeDistanceAndTime(hK,0,n(),0,0,bn+(hL:len()-hL:project_on(dq):len())*n())else P,Q=aZ.computeDistanceAndTime(hK,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hJ<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hJ>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hJ end;C=hI;local bV=vec3(core.getConstructWorldOrientationForward())local bW=vec3(core.getConstructWorldOrientationRight())local bX=vec3(core.getWorldVertical())local eM=-1;local bY=getPitch(bX,bV,bW)local hD=0.1;if BrakeLanding then hv=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local dn=b4.x*dq.x+b4.y*dq.y+b4.z*dq.z;eM=aa;if eM>-1 then if math.abs(hv-bY)<hD then b2=autoRollPreference;if b5<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and b4:normalize():dot(-dq)<0.99 then BrakeIsOn=true elseif dn<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hv<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b5<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hv-bY)>hD then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hv-bY)local hE=pitchPID:get()C=C+hE end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hM=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hN=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hO=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hP=G;local hQ=vec3(core.getWorldVertical())local hR=vec3(core.getConstructWorldOrientationUp())local hS=vec3(core.getConstructWorldOrientationForward())local hT=vec3(core.getConstructWorldOrientationRight())local hU=vec3(core.getWorldVelocity())local hV=vec3(core.getWorldVelocity()):normalize()local hW=getRoll(hQ,hS,hT)local hX=math.abs(hW)local hY=utils.sign(hW)local j=j()local hZ=vec3(core.getWorldAngularVelocity())local h_=hM*pitchSpeedFactor*hT+hN*rollSpeedFactor*hS+hO*yawSpeedFactor*hR;if hQ:len()>0.01 and j>0.0 or ProgradeIsOn then local i0=1.0;if b2==true and hX>i0 and hN==0 then local i1=utils.clamp(0,hX-30,hX+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(i1-hW)local i2=rollPID:get()h_=h_+i2*hS end end;if hQ:len()>0.01 and j>0.0 then local i3=20.0;if turnAssist==true and hX>i3 and hM==0 and hO==0 then local i4=turnAssistFactor*0.1;local i5=turnAssistFactor*0.025;local i6=(hX-i3)/(180-i3)*180;local i7=0;if i6<90 then i7=i6/90 elseif i6<180 then i7=(180-i6)/90 end;i7=i7*i7;local i8=-hY*i5*(1.0-i7)local i9=i4*i7;h_=h_+i9*hT+i8*hR end end;local ia=1;local ib=0;local ic=1;local id=torqueFactor*(h_-hZ)local ie=vec3(core.getWorldAirFrictionAngularAcceleration())id=id-ie;Nav:setEngineTorqueCommand('torque',id,ia,'airfoil','','',ic)local ig=-hP*(brakeSpeedFactor*hU+brakeFlatFactor*hV)Nav:setEngineForceCommand('brake',ig)local ih=''local ii=vec3()local ij=false;local ik='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then ik=ik..ExtraLongitudeTags end;local il=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if il==axisCommandType.byThrottle then local im=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ik,axisCommandId.longitudinal)Nav:setEngineForceCommand(ik,im,ia)elseif il==axisCommandType.byTargetSpeed then local im=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ih=ih..' , '..ik;ii=ii+im;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ij=true end end;local io='thrust analog lateral 'if ExtraLateralTags~="none"then io=io..ExtraLateralTags end;local ip=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ip==axisCommandType.byThrottle then local iq=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(io,axisCommandId.lateral)Nav:setEngineForceCommand(io,iq,ia)elseif ip==axisCommandType.byTargetSpeed then local ir=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ih=ih..' , '..io;ii=ii+ir end;local is='thrust analog vertical 'if ExtraVerticalTags~="none"then is=is..ExtraVerticalTags end;local it=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if it==axisCommandType.byThrottle then local iu=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(is,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(is,iu,ia,'airfoil','ground','',ic)else Nav:setEngineForceCommand(is,vec3(),ia)Nav:setEngineForceCommand('airfoil vertical',iu,ia,'airfoil','','',ic)Nav:setEngineForceCommand('ground vertical',iu,ia,'ground','','',ic)end elseif it==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),ia)end;local iv=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ih=ih..' , '..is;ii=ii+iv end;if ii:len()>constants.epsilon then if G~=0 or ij or math.abs(hV:dot(hS))<0.95 then ih=ih..', brake'end;Nav:setEngineForceCommand(ih,ii,ib,'','','',ic)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bm=vec3(core.getVelocity()):len()local iw=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local ix=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bm*3.6>ix*(1-iw)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bm*3.6<ix*(1-iw)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iy=unit.getThrottle()local hC=iy/100;if j==0 then hC=hC*MaxGameVelocity;if bm>=hC*(1-iw)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bm<hC*(1-iw)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hC=hC*ReentrySpeed/3.6;if bm>=hC*(1-iw)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bm<hC*(1-iw)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bb=coroutine.resume(beginSetup)if bb then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iz)if iz=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iz=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iz=="forward"then B=B-1 elseif iz=="backward"then B=B+1 elseif iz=="left"then E=E-1 elseif iz=="right"then E=E+1 elseif iz=="yawright"then F=F-1 elseif iz=="yawleft"then F=F+1 elseif iz=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iz=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iz=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iz=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iz=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iz=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iz=="option1"then IncrementAutopilotTargetIndex()v=false elseif iz=="option2"then DecrementAutopilotTargetIndex()v=false elseif iz=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iz=="option4"then ToggleAutopilot()v=false elseif iz=="option5"then ToggleLockPitch()v=false elseif iz=="option6"then ToggleAltitudeHold()v=false elseif iz=="option7"then wipeSaveVariables()v=false elseif iz=="option8"then ToggleFollowMode()v=false elseif iz=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iz=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iz=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iz=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iz=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iz=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iz=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iz=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iz=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iz)if iz=="forward"then B=0 elseif iz=="backward"then B=0 elseif iz=="left"then E=0 elseif iz=="right"then E=0 elseif iz=="yawright"then F=0 elseif iz=="yawleft"then F=0 elseif iz=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iz=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iz=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iz=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iz=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iz=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iz=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iz=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iz=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iz)if iz=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iz=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iz=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iz=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iA)local i;local iB="/commands /setname /G /agg /addlocation"local iC,iD;local iE="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n/".."addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iA," ")if i~=nil then iC=string.sub(iA,0,i-1)iD=string.sub(iA,i+1)elseif i==nil or not string.find(iB,iC)then for f4 in string.gmatch(iE,"([^\n]+)")do c(f4)end;return end;if iC=="/setname"then if iD==nil or iD==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iD)else K="Select a saved target to rename first"end elseif iC=="/addlocation"then if iD==nil or iD==""or string.find(iD,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iD,"::")local bK=string.sub(iD,1,i-2)local bB=string.sub(iD,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bC='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bD,bE,bF,bG,bH=string.match(bB,bC)local planet=aS[tonumber(bD)][tonumber(bE)]AddNewLocationByWaypoint(bK,planet,bB)K="Added "..bK.." to saved locations,\nplanet "..planet.name.." at "..bB;a2=5 elseif iC=="/agg"then if iD==nil or iD==""then K="Usage: /agg targetheight"return end;iD=tonumber(iD)if iD<1000 then iD=1000 end;AntigravTargetAltitude=iD;K="AGG Target Height set to "..iD elseif iC=="/G"then if iD==nil or iD==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iD=="dump"then for b9,ba in pairs(a)do if type(_G[ba])=="boolean"then if _G[ba]==true then c(ba.." true")else c(ba.." false")end elseif _G[ba]==nil then c(ba.." nil")else c(ba.." ".._G[ba])end end;return end;i=string.find(iD," ")local iF=string.sub(iD,0,i-1)local iG=string.sub(iD,i+1)for b9,ba in pairs(a)do if ba==iF then K="Variable "..iF.." changed to "..iG;local iH=type(_G[ba])if iH=="number"then iG=tonumber(iG)elseif iH=="boolean"then if string.lower(iG)=="true"then iG=true else iG=false end end;_G[ba]=iG;return end end;K="No such global variable: "..iF end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
