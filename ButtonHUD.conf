name: ButtonsHud - Dimencia and Archaegeo v4.691 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        local useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        local BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        local RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        local brightHud = false --export: Enable to prevent hud dimming when in freelook.
        local PrimaryR = 130 --export: Primary HUD color
        local PrimaryG = 224 --export: Primary HUD color
        local PrimaryB = 255 --export: Primary HUD color
        local centerX = 700 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale)
        local centerY = 980 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale)
        local vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        local vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        local altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        local altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        local circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        local AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        local warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        local DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        local fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        local fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        local fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        local apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.691;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;toggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;EmergencyWarp=false;ReentryMode=false;mousePitchFactor=1;mouseYawFactor=1;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;msgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;isBoosting=false;brakeDistance,brakeTime=0;maxBrakeDistance,maxBrakeTime=0;hasDB=false;hasSpaceRadar=false;hasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;totalDistanceTravelled=0.0;totalDistanceTrip=0;emergencyWarp=false;notTriedEmergencyWarp=true;flightTime=0;wipedDatabank=false;LocationIndex=0;upAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;simulatedX=0;simulatedY=0;AutopilotStatus="Aligning"msgTimer=3;targetGroundAltitude=nil;gearExtended=nil;distance=0;radarMessage=""LastOdometerOutput=""peris=0;AntigravTargetAltitude=nil;core_altitude=core.getAltitude()elementsID=core.getElementIdList()lastTravelTime=system.getTime()totalFlightTime=0;local m={}local n=true;local o=0;local p=0;local q=0;local r=""local hasGear=false;local s=0;local t=true;local u={}local v=1;local w=0.001;local x=2560;local y=1440;local z=nil;local A=nil;local B=nil;local C=nil;local D=false;local E=false;local F=0;local G=nil;local H={}local I={}local J={}local K=0;local L=false;local M={}local N={}local O=a(1/apTickRate)*2;local P={}local Q={}local R={}local S={}local T={}local U=false;local V=0;local W=k()SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY"}AutoVariables={"EmergencyWarp","hasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","AutoBrake","Autopilot","TurnBurn","AltitudeHold","displayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","gearExtended","targetGroundAltitude","totalDistanceTravelled","totalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake"}if dbHud then local X=dbHud.hasKey;if not useTheseSettings then for Y,Z in pairs(SaveableVariables)do if X(Z)then local a0=c(dbHud.getStringValue(Z))if a0~=nil then system.print(Z.." "..dbHud.getStringValue(Z))_G[Z]=a0;D=true end end end end;for Y,Z in pairs(AutoVariables)do if X(Z)then local a0=c(dbHud.getStringValue(Z))if a0~=nil then system.print(Z.." "..dbHud.getStringValue(Z))_G[Z]=a0;D=true end end end;if D then msgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then msgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else msgText="No Saved Variables Found - Stand up / leave remote to save settings"end else msgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;V=W-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]UpdateCount=0;titlecolR=rgb;titlecol=rgb;titlecolS=rgb;coroutine.yield()for Y in pairs(elementsID)do local a1=h(elementsID[Y])if a1=="landing gear"then hasGear=true end;if a1=="dynamic core"then local a2=e(elementsID[Y])coreOffset=16;if a2>10000 then coreOffset=128 elseif a2>1000 then coreOffset=64 elseif a2>150 then coreOffset=32 end end;K=K+e(elementsID[Y])if a1=="atmospheric fuel-tank"or a1=="space fuel-tank"or a1=="rocket fuel-tank"then local a2=e(elementsID[Y])local a3=j(elementsID[Y])local a4=0;local a5=system.getTime()if a1=="atmospheric fuel-tank"then local a6=400;local a7=35.03;if a2>10000 then a6=51200;a7=5480 elseif a2>1300 then a6=6400;a7=988.67 elseif a2>150 then a6=1600;a7=182.67 end;a4=a3-a7;if fuelTankOptimizationAtmo>0 then a6=a6+a6*fuelTankOptimizationAtmo*0.2 end;if a4>a6 then a6=a4 end;H[#H+1]={elementsID[Y],core.getElementNameById(elementsID[Y]),a6,a7,a4,a5}end;if a1=="rocket fuel-tank"then local a6=320;local a7=173.42;if a2>65000 then a6=40000;a7=25740 elseif a2>6000 then a6=5120;a7=4720 elseif a2>700 then a6=640;a7=886.72 end;a4=a3-a7;if fuelTankOptimizationRocket>0 then a6=a6+a6*fuelTankOptimizationRocket*0.1 end;if a4>a6 then a6=a4 end;J[#J+1]={elementsID[Y],core.getElementNameById(elementsID[Y]),a6,a7,a4,a5}end;if a1=="space fuel-tank"then local a6=2400;local a7=182.67;if a2>10000 then a6=76800;a7=5480 elseif a2>1300 then a6=9600;a7=988.67 end;a4=a3-a7;if fuelTankOptimizationSpace>0 then a6=a6+a6*fuelTankOptimizationSpace*0.2 end;if a4>a6 then a6=a4 end;I[#I+1]={elementsID[Y],core.getElementNameById(elementsID[Y]),a6,a7,a4,a5}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;if door then for _,Z in pairs(door)do Z.deactivate()end end;if forcefield then for _,Z in pairs(forcefield)do Z.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if targetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(targetGroundAltitude)end;if hasGear then if gearExtended==nil then gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if targetGroundAltitude==nil then if gearExtended then Nav.axisCommandManager:setTargetGroundAltitude(0)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end elseif targetGroundAltitude==nil then if f()==0 then gearExtended=false;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else gearExtended=true;Nav.axisCommandManager:setTargetGroundAltitude(0)end end;if f()>0 and not dbHud and(gearExtended or not hasGear)then BrakeIsOn=true end;unit.hide()function refreshLastMaxBrake(a8,a9)if a8==nil then a8=core.g()end;a8=round(a8,5)if a9~=nil and a9 or(G==nil or G~=a8)then local aa=c(unit.getData()).maxBrake;if aa~=nil then LastMaxBrake=aa end;G=a8 end end;function MakeButton(ab,ac,ad,ae,af,ag,ah,ai,aj)local ak={enableName=ab,disableName=ac,width=ad,height=ae,x=af,y=ag,toggleVar=ah,toggleFunction=ai,drawCondition=aj,hovered=false}table.insert(u,ak)return ak end;function AddLocationsToAtlas()for Y,Z in pairs(T)do table.insert(atlas[0],Z)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a1=#T..". "..planet.name;if radar_1 then local al,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if al~=nil and al~=""then a1=a1 .." "..radar_1.getConstructName(al)end end;local am={position=position,name=a1,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}T[#T+1]=am;table.insert(atlas[0],am)msgText="Location saved as "..a1 else msgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local an=-1;for Y,Z in pairs(atlas[0])do if Z.name and Z.name==CustomTarget.name then an=Y end end;if an>-1 then table.remove(atlas[0],an)end;an=-1;for Y,Z in pairs(T)do if Z.name and Z.name==CustomTarget.name then msgText=Z.name.." saved location cleared"an=Y;break end end;if an~=-1 then table.remove(T,an)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(ao)ao[#ao+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;peris=0 end end;function ToggleWidgets()if t then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;t=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;t=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ap,aq,af,ag,ad,ae)if ap>af and ap<af+ad and aq>ag and aq<ag+ae then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then AutoBrake=false;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not gearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=core_altitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=gearExtended;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;gearExtended=OldGearExtended;if gearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else msgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(ao)local ar=0;r=""currentConstructMass=k()local as=K;local at=0;local au=100;local av=0;local aw=0;local ax=0;local ay=""for Y in pairs(elementsID)do local a2=0;local az=0;az=e(elementsID[Y])a2=g(elementsID[Y])at=at+a2;if a2<az then if a2==0 then aw=aw+1 else av=av+1 end;if L and#m==0 then position=vec3(core.getElementPositionById(elementsID[Y]))local coreOffset=16;local af=position.x-coreOffset;local ag=position.y-coreOffset;local aA=position.z-coreOffset;table.insert(m,core.spawnArrowSticker(af,ag,aA+1,"down"))table.insert(m,core.spawnArrowSticker(af,ag,aA+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(af+1,ag,aA,"north"))table.insert(m,core.spawnArrowSticker(af+1,ag,aA,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(af-1,ag,aA,"south"))table.insert(m,core.spawnArrowSticker(af-1,ag,aA,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(af,ag-1,aA,"east"))table.insert(m,core.spawnArrowSticker(af,ag-1,aA,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(af,ag+1,aA,"west"))table.insert(m,core.spawnArrowSticker(af,ag+1,aA,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,elementsID[Y])end elseif L and#m>0 and m[11]==elementsID[Y]then for aB in pairs(m)do core.deleteSticker(m[aB])end;m={}end end;ar=a(at*100/as)if currentConstructMass<W then au=math.ceil(100*(currentConstructMass-updateMass())/V)W=currentConstructMass end;if au<100 or ar<100 then ao[#ao+1]=[[<g class="pbright txt">]]if au<100 then ax=a(au*2.55)ay=b("rgb(%d,%d,%d)",255-ax,ax,0)ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],ay,au)end;ax=a(ar*2.55)ay=b("rgb(%d,%d,%d)",255-ax,ax,0)if ar<100 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ay,ar)if aw>0 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ay,aw,av)elseif av>0 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ay,av)end end;ao[#ao+1]=[[<\g>]]end end;function DrawCursorLine(ao)local aC=a(utils.clamp(distance/(x/4)*255,0,255))ao[#ao+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",simulatedX,simulatedY,a(PrimaryR+0.5)+aC,a(PrimaryG+0.5)-aC,a(PrimaryB+0.5)-aC)end;function getPitch(aD,aE,aF)local aG=aD:cross(aF):normalize_inplace()local aH=math.acos(utils.clamp(aG:dot(-aE),-1,1))*constants.rad2deg;if aG:cross(-aE):dot(aF)<0 then aH=-aH end;return aH end;function wipeSaveVariables()if not dbHud then msgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"msgTimer=5 elseif D then if E then for Y,Z in pairs(SaveableVariables)do dbHud.setStringValue(Z,d(nil))end;for Y,Z in pairs(AutoVariables)do dbHud.setStringValue(Z,d(nil))end;msgText="Databank wiped. New variables will save after re-enter seat and exit"msgTimer=5;E=false;D=false;wipedDatabank=true else msgText="Press ALT-7 again to confirm wipe"E=true end end end;function CheckButtons()for _,Z in pairs(u)do if Z.hovered then Z.toggleFunction()Z.hovered=false end end end;function SetButtonContains()local af=simulatedX+x/2;local ag=simulatedY+y/2;for _,Z in pairs(u)do Z.hovered=Contains(af,ag,Z.x,Z.y,Z.width,Z.height)end end;function DrawButton(ao,aI,hover,af,ag,aJ,aK,aL,aM,aN,aO)if type(aN)=="function"then aN=aN()end;if type(aO)=="function"then aO=aO()end;ao[#ao+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",af,ag,aJ,aK)if aI then ao[#ao+1]=b("%s'",aL)else ao[#ao+1]=aM end;if hover then ao[#ao+1]=" style='stroke:white; stroke-width:2'"else ao[#ao+1]=" style='stroke:black; stroke-width:1'"end;ao[#ao+1]="></rect>"ao[#ao+1]=b("<text x='%f' y='%f' font-size='24' fill='",af+aJ/2,ag+aK/2+5)if aI then ao[#ao+1]="black"else ao[#ao+1]="white"end;ao[#ao+1]="' text-anchor='middle' font-family='Montserrat'>"if aI then ao[#ao+1]=b("%s</text>",aN)else ao[#ao+1]=b("%s</text>",aO)end end;function DrawButtons(ao)local aP="rgb(50,50,50)'"local aQ="rgb(210,200,200)"local aR=DrawButton;for _,Z in pairs(u)do local ac=Z.disableName;local ab=Z.enableName;if type(ac)=="function"then ac=ac()end;if type(ab)=="function"then ab=ab()end;if not Z.drawCondition or Z.drawCondition()then aR(ao,Z.toggleVar(),Z.hovered,Z.x,Z.y,Z.width,Z.height,aQ,aP,ac,ab)end end end;function DrawTank(ao,U,af,aS,aT,aU,aV,aW)local aX=1;local aY=2;local aZ=3;local a_=4;local b0=5;local b1=6;local b2=""local b3=0;local b4=350;local b5=360;if l()==1 then b4=b4-50;b5=b5-50 end;ao[#ao+1]=[[<g class="pdim txtfuel">]]if aT=="ATMO"then b2="atmofueltank"elseif aT=="SPACE"then b2="spacefueltank"else b2="rocketfueltank"end;b3=_G[b2 .."_size"]if#aU>0 then for i=1,#aU do local a1=string.sub(aU[i][aY],1,12)local b6=0;for aB=1,b3 do if aU[i][aY]==json.decode(unit[b2 .."_"..aB].getData()).name then b6=aB;break end end;if U or aV[i]==nil or aW[i]==nil then local b7=0;local b8=0;local b9=0;local ba=0;local a5=system.getTime()if b6~=0 then aW[i]=json.decode(unit[b2 .."_"..b6].getData()).percentage;aV[i]=json.decode(unit[b2 .."_"..b6].getData()).timeLeft;if aV[i]=="n/a"then aV[i]=0 end else b9=j(aU[i][aX])-aU[i][a_]b7=aU[i][aZ]aW[i]=a(0.5+b9*100/b7)b8=aU[i][b0]ba=aU[i][b1]if b8<=b9 then aV[i]=0 else aV[i]=a(0.5+b9/((b8-b9)/(a5-ba)))end;aU[i][b0]=b9;aU[i][b1]=a5 end end;if a1==aS then a1=b("%s %d",aT,i)end;if b6==0 then a1=a1 .." *"end;local bb;if aV[i]==0 then bb="n/a"else bb=FormatTimeString(aV[i])end;if aW[i]~=nil then local ax=a(aW[i]*2.55)local ay=b("rgb(%d,%d,%d)",255-ax,ax,0)local bc=""if bb~="n/a"and aV[i]<120 or aW[i]<5 then if U then bc=[[class="red"]]end end;ao[#ao+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],af,b4,bc,a1,af,b5,ay,aW[i],bb)b4=b4+30;b5=b5+30 end end end;ao[#ao+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aH=-math.deg(math.atan(velocity.y,velocity.z))+180;aH=aH-90;if aH<0 then aH=360+aH end;if aH>180 then aH=-180+aH-180 end;return-aH end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bd=math.deg(math.atan(velocity.y,velocity.x))-90;if bd<-180 then bd=360+bd end;return bd end;function AlignToWorldVector(be,bf)if bf==nil then bf=w end;be=vec3(be):normalize()local bg=vec3(core.getConstructWorldOrientationForward())-be;local bh=-getMagnitudeInDirection(bg,core.getConstructWorldOrientationRight())*v;local bi=-getMagnitudeInDirection(bg,core.getConstructWorldOrientationUp())*v;yawInput2=yawInput2-(bh+(bh-p)*DampingMultiplier)pitchInput2=pitchInput2+bi+(bi-q)*DampingMultiplier;p=bh;q=bi;if math.abs(bh)<bf and math.abs(bi)<bf then return true end;return false end;function getAPEnableName()local a1=AutopilotTargetName;if a1==nil then a1=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a1==nil then a1="None"end;return"Engage Autopilot: "..a1 end;function getAPDisableName()local a1=AutopilotTargetName;if a1==nil then a1=CustomTarget.name end;if a1==nil then a1="None"end;return"Disable Autopilot: "..a1 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()else AntigravTargetAltitude=core_altitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if unit.getAtmosphereDensity()<0 and unit.getClosestPlanetInfluence()>0 and core_altitude>ReentryAltitude and not Reentry then Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;msgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude else msgText="You do not meet re-entry requirements. (Must be out of atmosphere and close to a planet"Rentry=false end end;local bj=50;local bk=260;local bl=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bk,bj,x/2-bk/2,y/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then msgText="Brakes in Toggle Mode"else msgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bk,bj,x/2-bk/2-50-bl.width,y/2-bj+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bk,bj,x/2-bk/2+bl.width+50,y/2-bj+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bm=MakeButton(getAPEnableName,getAPDisableName,600,60,x/2-600/2,y/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bm.height,bm.x+bm.width+30,bm.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,bm.height,bm.x-200-30,bm.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bj=60;bk=300;local af=10;local ag=y/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bk,bj,af,ag,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bk,bj,af+bk+20,ag,function()return AltitudeHold end,ToggleAltitudeHold)ag=ag+bj+20;MakeButton("Engage Autoland","Disable Autoland",bk,bj,af,ag,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bk,bj,af+bk+20,ag,function()return AutoTakeoff end,ToggleAutoTakeoff)ag=ag+bj+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bk,bj,af,ag,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Begin Glide Reentry","Cancel Glide Reentry",bk,bj,af+bk+20,ag,function()return Reentry end,BeginReentry,function()return core_altitude>ReentryAltitude end)ag=ag+bj+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",bk,bj,af,ag,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then msgText="Emergency Warp Enabled"else msgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",bk,bj,af+bk+20,ag,function()return n end,function()n=not n;if n then msgText="Orbit Display Enabled"else msgText="Orbit Display Disabled"end end)ag=ag+bj+20;MakeButton("Enable AGG","Disable AGG",bk,bj,af,ag,function()return AntigravTargetAltitude==nil end,ToggleAntigrav,function()return antigrav~=nil end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bk,bj,af,ag,function()return L end,function()L=not L;if L then msgText="Repair Arrows Enabled"else msgText="Repair Arrows Diabled"end end,function()return l()==1 end)ag=ag+bj+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bk*2,bj,af,ag,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(ao)local bn=core_altitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local bo=vec3(core.getWorldVertical())local bp=vec3(core.getConstructWorldOrientationForward())local bq=vec3(core.getConstructWorldOrientationRight())local aH=getPitch(bo,bp,bq)local br=getRoll(bo,bp,bq)local bs=br;local bt=aH;local bu=f()local bv=a(unit.getThrottle())local bw=speed*3.6;local bx=unit.getAxisCommandValue(0)local by=GetFlightStyle()if bu==0 then if speed>5 then aH=getRelativePitch(velocity)br=getRelativeYaw(velocity)else aH=0;br=0 end;bottomText="YAW"end;ao[#ao+1]=LastOdometerOutput;ao[#ao+1]=r;ao[#ao+1]=radarMessage;if UpdateCount%O==0 then U=true end;DrawTank(ao,U,100,"Atmospheric ","ATMO",H,R,S)DrawTank(ao,U,200,"Space fuel t","SPACE",I,P,Q)DrawTank(ao,U,300,"Rocket fuel ","ROCKET",J,M,N)if U then U=false;UpdateCount=0 end;UpdateCount=UpdateCount+1;DrawVerticalSpeed(ao,bn,bu)if l()==0 then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(ao,bt,bs,bu,centerX,centerY,"ROLL")DrawPrograde(ao,bt,bs,bu,velocity,speed,centerX,centerY)DrawAltitudeDisplay(ao,bn,bu)else DrawArtificialHorizon(ao,aH,br,bu,centerX,centerY,"YAW")DrawPrograde(ao,bt,bs,bu,velocity,speed,centerX,centerY)end end end;DrawThrottle(ao,by,bv,bx)DrawSpeed(ao,bw)DrawWarnings(ao)DisplayOrbit(ao)if screen_2 then local bz=vec3(core.getConstructWorldPos())local af=960+bz.x/MapXRatio;local ag=450+bz.y/MapYRatio;screen_2.moveContent(YouAreHere,(af-80)/19.2,(ag-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(ao)local bA=rgb;local bB=rgbdim;local bC=rgb;local bD=rgbdim;if IsInFreeLook()and not brightHud then bA=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bB=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;ao[#ao+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bA,bA,bC,bC,bB,bB,bD,bD)end;function HUDEpilogue(ao)ao[#ao+1]="</svg>"end;function DrawSpeed(ao,bw)local bE=altMeterY+40;local bF=altMeterX;ao[#ao+1]=[[<g class="pdim txt txtend">]]if l()==1 then bE=75 end;ao[#ao+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bF,bE,a(bw))end;function DrawOdometer(ao,totalDistanceTrip,totalDistanceTravelled,by,flightTime)local bG=1240;local bH=55;local bI=65;local bu=f()local a8=core.g()local bJ=0;local bK=0;refreshLastMaxBrake(a8)maxThrust=Nav:maxForceForward()F=k()local bL=vec3(core.getWorldAcceleration()):len()/9.80665;if a8>0.1 then bK=F*a8;bJ=maxThrust/a8 end;ao[#ao+1]=[[<g class="pdim txt txtend">]]if l()==1 then bG=1120;bH=55;bI=65 elseif bu>0 then ao[#ao+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bu)end;ao[#ao+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bG,bH,bG,bI,a8/9.80665,bG,bH+20,bG,bI+20,bL)ao[#ao+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then ao[#ao+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],totalDistanceTrip,totalDistanceTravelled/1000,FormatTimeString(flightTime),FormatTimeString(totalFlightTime),F/1000,LastMaxBrake/1000,maxThrust/1000,by)if a8>0.1 then ao[#ao+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bJ/1000,bK/1000)else ao[#ao+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else ao[#ao+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],by)end;ao[#ao+1]="</g>"end;function DrawThrottle(ao,by,bv,bx)local b4=centerY+65;local b5=centerY+75;if l()==1 then b4=55;b5=65 end;local bM="CRUISE"local unit="km/h"local bN=bx;if by=="TRAVEL"or by=="AUTOPILOT"then bM="THROT"unit="%"bN=bv;local bO="dim"if bv<0 then bO="red"end;ao[#ao+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bO,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(bv),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;ao[#ao+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,b4,bM,centerX-150,b5,bN,unit)end;function DrawVerticalSpeed(ao,bn,bu)if bn<200000 and bu==0 or bn and bu>0 then local velocity=vec3(core.getWorldVelocity())local bP=vec3(core.getWorldVertical())*-1;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;local bR=0;if math.abs(bQ)>1 then bR=45*math.log(math.abs(bQ),10)if bQ<0 then bR=-bR end end;ao[#ao+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bQ),a(bR))end end;function DrawArtificialHorizon(ao,bt,bs,bu,centerX,centerY,bottomText)local bS=circleRad;if bS>0 then local bT=a(bt)local bU=0;local bV=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bs,centerX,centerY)ao[#ao+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bS-1,centerX,centerY)ao[#ao+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bT-45-bT%5+0.5),a(bT+45+bT%5+0.5),5 do if i%10==0 then bU=30 elseif i%5==0 then bU=20 end;local ag=centerY+-i*5/3+bt*5/3;if bU==30 then bV=b([[%s M %d %f h %d]],bV,centerX-15,ag,bU)else bV=b([[%s M %d %f h %d]],bV,centerX-10,ag,bU)end end;ao[#ao+1]=bV..[["/>]]local bW="PITCH"if bottomText=="YAW"then bW="REL PITCH"end;if bt>90 and bu==0 then bt=90-(bt-90)elseif bt<-90 and bu==0 then bt=-90-(bt+90)end;ao[#ao+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)ao[#ao+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bS,centerX,centerY,centerX-bS,centerY+bS*bt/90,bS*9,bS*2,-1*bs,centerX,centerY)ao[#ao+1]="</g>"ao[#ao+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-circleRad-20,bW,centerX,centerY-circleRad-10,bT)end end;function DrawAltitudeDisplay(ao,bn,bu)if bn<200000 and bu==0 or bn and bu>0 then local bX=altMeterX;local bY=altMeterY;local bZ=78;local b_=19;table.insert(ao,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],bX-1,bY-4,bZ+2,b_+6,bX+1,bY-1,bZ-4,b_))local an=0;local c0=1;local c1=0;while an<6 do local c2=11;local c3=16;local c4=9;local c5=14;local bc="altsm"if an>2 then c3=c3+3;c2=c2+2;c5=c5+2;c4=c4-6;bc="altbig"end;local c6=bn/c0%10;local c7=a(c6)local c8=a((c7+1)%10)local c9=c1;if an==0 then c9=c6-c7 end;local ca=c3*(c9-1)local cb=ca+c3;local af=bX+c4+(6-an)*c2;local ag=bY+c5;table.insert(ao,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bc,af,ag+ca,c8,af,ag+cb,c7))an=an+1;c0=c0*10;if c7==9 then c1=c9 else c1=0 end end;table.insert(ao,[[</g></g>]])end end;function DrawPrograde(ao,bt,bs,bu,velocity,speed,centerX,centerY)if bu==0 and speed>5 then local bS=circleRad;local cc=20;local cd=20;local ce=getRelativePitch(velocity)local cf=getRelativeYaw(velocity)local cg=-cf/cd*bS;local ch=ce/cc*bS;local af=centerX+cg;local ag=centerY+ch;local distance=math.sqrt(cg^2+ch^2)if distance<bS then ao[#ao+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',af,ag)else local bR=math.atan(ch,cg)local ci=centerX+bS*math.cos(bR)local cj=centerY+bS*math.sin(bR)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ci,cj)end end end;function DrawWarnings(ao)ao[#ao+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)ao[#ao+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ao[#ao+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]ao[#ao+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]ao[#ao+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local ck=960;local cl=860;local cm=900;local cn=930;local co=960;local cp=225;local cq=150;local cr=960;if l()==1 then cl=135;cm=155;cn=175;cp=115;cq=95 end;if BrakeIsOn then ao[#ao+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],ck,cl)end;if GyroIsOn then ao[#ao+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],ck,cr)end;if gearExtended then if hasGear then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],ck,cm)else ao[#ao+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],ck,cm)end;ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],ck,cn,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],ck,co)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],ck,cp,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],ck,cp,AutopilotStatus)elseif FollowMode then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],ck,cp)elseif AltitudeHold then if AutoTakeoff then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],ck,cp,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],ck,cp+50)end else ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],ck,cp,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then ao[#ao+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],ck,cp)else ao[#ao+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],ck,cp)end end;if TurnBurn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],ck,cq)end;if VectorToTarget then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],ck,cq,VectorStatus)end;ao[#ao+1]="</g>"end;function DisplayOrbit(ao)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and n then local cs=75;local ct=0;local cu=250;local cv=4;ct=ct+cv;local cw=15;local af=cs+cu+cs/2+cv;local ag=ct+cu/2+5+cv;local cx,cy,cz,cA;cx=cu/4;cA=0;ao[#ao+1]=[[<g class="pbright txtorb txtmid">]]ao[#ao+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cu+cs*2,cu+ct,cv,cv)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cz=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cx*2)cy=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cz*(1-orbit.eccentricity)cA=cx-orbit.periapsis.altitude/cz-planet.radius/cz;local cB=""if orbit.periapsis.altitude<=0 then cB='redout'end;ao[#ao+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cB,cs+cu/2+cA+cv,ct+cu/2+cv,cx,cy)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cs+cu/2+cv,ct+cu/2+cv,planet.radius/cz)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ao[#ao+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],af-35,ag-5,cs+cu/2+cx+cA,ag-5)ao[#ao+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],af,ag)ag=ag+cw;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],af,ag,getDistanceDisplayString(orbit.apoapsis.altitude))ag=ag+cw;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],af,ag,FormatTimeString(orbit.timeToApoapsis))ag=ag+cw;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],af,ag,getSpeedDisplayString(orbit.apoapsis.speed))end;ag=ct+cu/2+5+cv;af=cs-cs/2+10+cv;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ao[#ao+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],af+35,ag-5,cs+cu/2-cx+cA,ag-5)ao[#ao+1]=b([[<text x="%f" y="%f">Periapsis</text>]],af,ag)ag=ag+cw;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],af,ag,getDistanceDisplayString(orbit.periapsis.altitude))ag=ag+cw;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],af,ag,FormatTimeString(orbit.timeToPeriapsis))ag=ag+cw;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],af,ag,getSpeedDisplayString(orbit.periapsis.speed))end;ao[#ao+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cs+cu/2+cv,20+cv,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cC=orbit.timeToApoapsis/orbit.period*2*math.pi;local cD=cx*math.cos(cC)local cE=cy*math.sin(cC)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cs+cu/2+cD+cA+cv,ct+cu/2+cE+cv)end;ao[#ao+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000}}}end;atlas=Atlas()for Y,Z in pairs(atlas[0])do if z==nil or Z.center.x<z then z=Z.center.x end;if A==nil or Z.center.x>A then A=Z.center.x end;if B==nil or Z.center.y<B then B=Z.center.y end;if C==nil or Z.center.y>C then C=Z.center.y end end;GalaxyMapHTML=""local cF=1.1*(A-z)/1920;local cG=1.4*(C-B)/1080;for Y,Z in pairs(atlas[0])do local af=960+Z.center.x/cF;local ag=540+Z.center.y/cG;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..af..'" cy="'..ag..'" r="'..Z.radius/cF*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(Z.name,"Moon")and not string.match(Z.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..af.."' y='"..ag+Z.radius/cF*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..Z.name.."</text>"end end;local bz=vec3(core.getConstructWorldPos())local af=960+bz.x/cF;local ag=540+bz.y/cG;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..af..'" cy="'..ag..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..af.."' y='"..ag-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cF;MapYRatio=cG;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bz=vec3(core.getConstructWorldPos())local af=960+bz.x/cF;local ag=540+bz.y/cG;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((af-80)/19.20,(ag-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cH(cI)return type(cI)=='number'end;local function cJ(cI)return type(tonumber(cI))=='number'end;local function cK(cL)return type(cL)=='table'end;local function cM(cN)return type(cN)=='string'end;local function cO(Z)return cK(Z)and cH(Z.x and Z.y and Z.z)end;local function cP(cQ)return cK(cQ)and cH(cQ.latitude and cQ.longitude and cQ.altitude and cQ.bodyId and cQ.systemId)end;local cR=math.pi/180;local cS=180/math.pi;local cT=1e-10;local cU=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cV='::pos{'..cU..','..cU..','..cU..','..cU..','..cU..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local cW=utils.clamp;local function cX(cY,cZ)if cY==0 then return math.abs(cZ)<1e-09 end;if cZ==0 then return math.abs(cY)<1e-09 end;return math.abs(cY-cZ)<math.max(math.abs(cY),math.abs(cZ))*cT end;local function c_(cI)local a0=string.gsub(string.reverse(b('%.4f',cI)),'^0*%.?','')return a0==''and'0'or string.reverse(a0)end;local function d0(d1)if cO(d1)then return b('{x=%.3f,y=%.3f,z=%.3f}',d1.x,d1.y,d1.z)end;if cK(d1)and not getmetatable(d1)then local d2={}local d3=next(d1)if type(d3)=='nil'or d3==1 then d2=d1 else for Y,Z in pairs(d1)do local bN=d0(Z)if type(Y)=='number'then table.insert(d2,b('[%s]=%s',Y,bN))else table.insert(d2,b('%s=%s',Y,bN))end end end;return b('{%s}',table.concat(d2,','))end;if cM(d1)then return b("'%s'",d1:gsub("'",[[\']]))end;return tostring(d1)end;local d4={}d4.__index=d4;d4.__tostring=function(d1,d5)local d6={}for Y in pairs(d1)do table.insert(d6,Y)end;table.sort(d6)local d2={}for _,Y in ipairs(d6)do local bN=d0(d1[Y])if type(Y)=='number'then table.insert(d2,b('[%s]=%s',Y,bN))else table.insert(d2,b('%s=%s',Y,bN))end end;if d5 then return b('%s%s',d5,table.concat(d2,',\n'..d5))end;return b('{%s}',table.concat(d2,','))end;d4.__eq=function(d7,d8)return d7.planetarySystemId==d8.planetarySystemId and d7.bodyId==d8.bodyId and cX(d7.radius,d8.radius)and cX(d7.center.x,d8.center.x)and cX(d7.center.y,d8.center.y)and cX(d7.center.z,d8.center.z)and cX(d7.GM,d8.GM)end;local function d9(da,db,dc,dd,de)assert(cJ(da),'Argument 1 (planetarySystemId) must be a number:'..type(da))assert(cJ(db),'Argument 2 (bodyId) must be a number:'..type(db))assert(cJ(dc),'Argument 3 (radius) must be a number:'..type(dc))assert(cK(dd),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dd))assert(cJ(de),'Argument 5 (GM) must be a number:'..type(de))return setmetatable({planetarySystemId=tonumber(da),bodyId=tonumber(db),radius=tonumber(dc),center=vec3(dd),GM=tonumber(de)},d4)end;local df={}df.__index=df;df.__tostring=function(dg)return b('::pos{%d,%d,%s,%s,%s}',dg.systemId,dg.bodyId,c_(dg.latitude*cS),c_(dg.longitude*cS),c_(dg.altitude))end;df.__eq=function(d7,d8)return d7.bodyId==d8.bodyId and d7.systemId==d8.systemId and cX(d7.latitude,d8.latitude)and cX(d7.altitude,d8.altitude)and(cX(d7.longitude,d8.longitude)or cX(d7.latitude,math.pi/2)or cX(d7.latitude,-math.pi/2))end;local function dh(di,db,dj,dk,bn)local da=di;if cM(di)and not dk and not bn and not db and not dj then da,db,dj,dk,bn=string.match(di,cV)assert(da,'Argument 1 (position string) is malformed.')else assert(cJ(da),'Argument 1 (systemId) must be a number:'..type(da))assert(cJ(db),'Argument 2 (bodyId) must be a number:'..type(db))assert(cJ(dj),'Argument 3 (latitude) must be in degrees:'..type(dj))assert(cJ(dk),'Argument 4 (longitude) must be in degrees:'..type(dk))assert(cJ(bn),'Argument 5 (altitude) must be in meters:'..type(bn))end;da=tonumber(da)db=tonumber(db)dj=tonumber(dj)dk=tonumber(dk)bn=tonumber(bn)if db==0 then return setmetatable({latitude=dj,longitude=dk,altitude=bn,bodyId=db,systemId=da},df)end;return setmetatable({latitude=cR*cW(dj,-90,90),longitude=cR*(dk%360),altitude=bn,bodyId=db,systemId=da},df)end;local dl={}dl.__index=dl;dl.__tostring=function(d1,d5)local dm=d5 and d5 ..'  'local dn={}local d6={}for Y in pairs(d1)do table.insert(d6,Y)end;table.sort(d6)for _,dp in ipairs(d6)do bdy=d1[dp]local dq=d4.__tostring(bdy,dm)if d5 then table.insert(dn,b('[%s]={\n%s\n%s}',dp,dq,d5))else table.insert(dn,b('  [%s]=%s',dp,dq))end end;if d5 then return b('\n%s%s%s',d5,table.concat(dn,',\n'..d5),d5)end;return b('{\n%s\n}',table.concat(dn,',\n'))end;local function dr(ds)local atlas={}local pid;for _,Z in pairs(ds)do local al=Z.planetarySystemId;if type(al)~='number'then error('Invalid planetary system ID: '..tostring(al))elseif pid and al~=pid then error('Mismatch planetary system IDs: '..al..' and '..pid)end;local dt=Z.bodyId;if type(dt)~='number'then error('Invalid body ID: '..tostring(dt))elseif atlas[dt]then error('Duplicate body ID: '..tostring(dt))end;setmetatable(Z.center,getmetatable(vec3.unit_x))atlas[dt]=setmetatable(Z,d4)pid=al end;return setmetatable(atlas,dl)end;PlanetaryReference={}local function du(ds)return setmetatable({galaxyAtlas=ds or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cL,i)if type(i)=='number'then local system=cL.galaxyAtlas[i]return dr(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d1)return function(cL,Y)local dv,nv=next(cL,Y)return dv,nv and dr(nv)end,d1.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d1)local dw={}for _,dx in pairs(d1 or{})do local dy=dx:getPlanetarySystemId()local dz=dl.__tostring(dx,'    ')table.insert(dw,b('  [%s]={%s\n  }',dy,dz))end;return b('{\n%s\n}\n',table.concat(dw,',\n'))end;PlanetaryReference.BodyParameters=d9;PlanetaryReference.MapPosition=dh;PlanetaryReference.PlanetarySystem=dr;function PlanetaryReference.createBodyParameters(dA,db,dB,dC,dD,dE,dF)assert(cJ(dA),'Argument 1 (planetarySystemId) must be a number:'..type(dA))assert(cJ(db),'Argument 2 (bodyId) must be a number:'..type(db))assert(cJ(dB),'Argument 3 (surfaceArea) must be a number:'..type(dB))assert(cK(dC),'Argument 4 (aPosition) must be an array or vec3:'..type(dC))assert(cK(dD),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dD))assert(cJ(dE),'Argument 6 (altitude) must be in meters:'..type(dE))assert(cJ(dF),'Argument 7 (gravityAtPosition) must be number:'..type(dF))local dc=math.sqrt(dB/4/math.pi)local distance=dc+dE;local dG=vec3(dC)+distance*vec3(dD)local de=dF*distance*distance;return d9(dA,db,dc,dG,de)end;PlanetaryReference.isMapPosition=cP;function PlanetaryReference:getPlanetarySystem(di)if i==nil then i=0 end;if nv==nil then nv=0 end;local dA=di;if cP(di)then dA=di.systemId end;if type(dA)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dl then system=dr(system)end;return system end end end;function dl:castIntersections(dH,dI,dJ,dK)local dJ=dJ or function(dL)return 1.05*dL.radius end;local dM={}if dK then for _,i in ipairs(dK)do dM[i]=self[i]end else dK={}for Y,dL in pairs(self)do table.insert(dK,Y)dM[Y]=dL end end;local function dN(dO,dP)local dQ=dM[dO].center-dH;local dR=dM[dP].center-dH;return dQ:len()<dR:len()end;table.sort(dK,dN)local dS=dI:normalize()for i,al in ipairs(dK)do local dL=dM[al]local dT=dL.center-dH;local dc=dJ(dL)local dU=dT:dot(dS)local dV=dU^2-(dT:len2()-dc^2)if dV>=0 then local dW=math.sqrt(dV)local dX=dU+dW;local dY=dU-dW;if dY>0 then return dL,dX,dY elseif dX>0 then return dL,dX,nil end end end;return nil,nil,nil end;function dl:closestBody(dZ)assert(type(dZ)=='table','Invalid coordinates.')local d_,dL;local e0=vec3(dZ)for _,e1 in pairs(self)do local e2=(e1.center-e0):len2()if not dL or e2<d_ then dL=e1;d_=e2 end end;return dL end;function dl:convertToBodyIdAndWorldCoordinates(di)local e3=di;if cM(di)then e3=dh(di)end;if e3.bodyId==0 then return 0,vec3(e3.latitude,e3.longitude,e3.altitude)end;local e1=self:getBodyParameters(e3)if e1 then return e3.bodyId,e1:convertToWorldCoordinates(e3)end end;function dl:getBodyParameters(di)local db=di;if cP(di)then db=di.bodyId end;assert(cJ(db),'Argument 1 (bodyId) must be a number:'..type(db))return self[db]end;function dl:getPlanetarySystemId()local _,Z=next(self)return Z and Z.planetarySystemId end;function d4:convertToMapPosition(dd)assert(cK(dd),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dd))local e4=vec3(dd)if self.bodyId==0 then return setmetatable({latitude=e4.x,longitude=e4.y,altitude=e4.z,bodyId=0,systemId=self.planetarySystemId},df)end;local e5=e4-self.center;local distance=e5:len()local bn=distance-self.radius;local dj=0;local dk=0;if not cX(distance,0)then local e6=math.atan(e5.y,e5.x)dk=e6>=0 and e6 or 2*math.pi+e6;dj=math.pi/2-math.acos(e5.z/distance)end;return setmetatable({latitude=dj,longitude=dk,altitude=bn,bodyId=self.bodyId,systemId=self.planetarySystemId},df)end;function d4:convertToWorldCoordinates(di)local e3=cM(di)and dh(di)or di;if e3.bodyId==0 then return vec3(e3.latitude,e3.longitude,e3.altitude)end;assert(cP(e3),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e3.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e3.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e7=math.cos(e3.latitude)return self.center+(self.radius+e3.altitude)*vec3(e7*math.cos(e3.longitude),e7*math.sin(e3.longitude),math.sin(e3.latitude))end;function d4:getAltitude(dd)return(vec3(dd)-self.center):len()-self.radius end;function d4:getDistance(dd)return(vec3(dd)-self.center):len()end;function d4:getGravity(dd)local e8=self.center-vec3(dd)local e9=e8:len2()return self.GM/e9*e8/math.sqrt(e9)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return du(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cM(cN)return type(cN)=='string'end;local function cK(cL)return type(cL)=='table'end;local function cX(cY,cZ)if cY==0 then return math.abs(cZ)<1e-09 end;if cZ==0 then return math.abs(cY)<1e-09 end;return math.abs(cY-cZ)<math.max(math.abs(cY),math.abs(cZ))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bn)assert(self.body)local distance=bn+self.body.radius;if not cX(distance,0)then local orbit=math.sqrt(self.body.GM/distance)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(di,velocity)assert(self.body)assert(cK(di)or cM(di))assert(cK(velocity))local bz=(cM(di)or PlanetRef.isMapPosition(di))and self.body:convertToWorldCoordinates(di)or vec3(di)local Z=vec3(velocity)local ea=bz-self.body.center;local dR=Z:len2()local eb=ea:len()local ec=self.body.GM;local ed=((dR-ec/eb)*ea-ea:dot(Z)*Z)/ec;local cY=ec/(2*ec/eb-dR)local ee=ed:len()local dS=ed:normalize()local ef=cY*(1-ee)local eg=cY*(1+ee)local eh=ef*dS+self.body.center;local ei=ee<=1 and-eg*dS+self.body.center or nil;local ej=math.sqrt(cY*ec*(1-ee*ee))local ek=ei and 2*math.pi*math.sqrt(cY^3/ec)local el=math.acos(ed:dot(ea)/(ee*eb))if ea:dot(Z)<0 then el=-(el-2*math.pi)end;local em=math.acos((math.cos(el)+ee)/(1+ee*math.cos(el)))local en=em;if en<0 then en=en+2*math.pi end;local eo=en-ee*math.sin(en)local ep=0;local eq=0;local er=0;if ek~=nil then ep=eo/(2*math.pi/ek)eq=ek-ep;er=eq+ek/2;if el-math.pi>0 then eq=ep;er=eq+ek/2 end;if er>ek then er=er-ek end end;return{periapsis={position=eh,speed=ej/ef,circularOrbitSpeed=math.sqrt(ec/ef),altitude=ef-self.body.radius},apoapsis=ei and{position=ei,speed=ej/eg,circularOrbitSpeed=math.sqrt(ec/eg),altitude=eg-self.body.radius},currentVelocity=Z,currentPosition=bz,eccentricity=ee,period=ek,eccentricAnomaly=em,meanAnomaly=eo,timeToPeriapsis=eq,timeToApoapsis=er}end;local function es(et)local e1=PlanetRef.BodyParameters(et.planetarySystemId,et.bodyId,et.radius,et.center,et.GM)return setmetatable({body=e1},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return es(...)end})end;function Kinematics()local Kinematic={}local eu=30000000/3600;local ev=eu*eu;local ew=100;local function ex(Z)return 1/math.sqrt(1-Z*Z/ev)end;function Kinematic.computeAccelerationTime(ey,ez,eA)local eB=eu*math.asin(ey/eu)return(eu*math.asin(eA/eu)-eB)/ez end;function Kinematic.computeDistanceAndTime(ey,eA,eC,eD,eE,eF)eE=eE or 0;eF=eF or 0;local eG=ey<=eA;local eH=eD*(eG and 1 or-1)/eC;local eI=-eF/eC;local eJ=eH+eI;if eG and eJ<=0 or not eG and eJ>=0 then return-1,-1 end;local eK,eL=0,0;if eH~=0 and eE>0 then local eB=math.asin(ey/eu)local eM=math.pi*(eH/2+eI)local eN=eH*eE;local eO=eu*math.pi;local Z=function(cL)local aJ=(eM*cL-eN*math.sin(math.pi*cL/2/eE)+eO*eB)/eO;local eP=math.tan(aJ)return eu*eP/math.sqrt(eP*eP+1)end;local eQ=eG and function(cN)return cN>=eA end or function(cN)return cN<=eA end;eL=2*eE;if eQ(Z(eL))then local eR=0;while math.abs(eL-eR)>0.5 do local cL=(eL+eR)/2;if eQ(Z(cL))then eL=cL else eR=cL end end end;local eS=ey;local eT=eL/ew;for eU=1,ew do local speed=Z(eU*eT)eK=eK+(speed+eS)*eT/2;eS=speed end;if eL<2*eE then return eK,eL end;ey=eS end;local eB=eu*math.asin(ey/eu)local eV=(eu*math.asin(eA/eu)-eB)/eJ;local eW=ev*math.cos(eB/eu)/eJ;local distance=eW-ev*math.cos((eJ*eV+eB)/eu)/eJ;return distance+eK,eV+eL end;function Kinematic.computeTravelTime(ey,ez,distance)if distance==0 then return 0 end;if ez>0 then local eB=eu*math.asin(ey/eu)local eW=ev*math.cos(eB/eu)/ez;return(eu*math.acos(ez*(eW-distance)/ev)-eB)/ez end;assert(ey>0,'Acceleration and initial speed are both zero.')return distance/ey end;function Kinematic.lorentz(Z)return ex(Z)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()InAtmo=f()>0;function getDistanceDisplayString(distance)local eX=distance>100000;local a0=""if eX then a0=round(distance/1000/200,1).." SU"elseif distance<1000 then a0=round(distance,1).." M"else a0=round(distance/1000,1).." KM"end;return a0 end;function getDistanceDisplayString2(distance)local eX=distance>100000;local a0=""if eX then a0=round(distance/1000/200,2).." SU"elseif distance<1000 then a0=round(distance,2).." M"else a0=round(distance/1000,2).." KM"end;return a0 end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(eY)local eZ=a(eY/3600)local e_=a(eY/60%60)local eY=a(eY%60)if eY<0 or eZ<0 or e_<0 then return"0s"end;if eZ>0 then return eZ.."h "..e_.."m "..eY.."s"elseif e_>0 then return e_.."m "..eY.."s"else return eY.."s"end end;function getMagnitudeInDirection(be,dI)be=vec3(be)dI=vec3(dI):normalize()local a0=be*dI;return a0.x+a0.y+a0.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f0=0;for Y,Z in pairs(atlas[0])do f0=f0+1;if f0==AutopilotTargetIndex then if Z.center then AutopilotTargetName=Z.name;AutopilotTargetPlanet=galaxyReference[0][Y]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,o=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)s=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;system.addDataToWidget(widgetMaxMassText,widgetMaxMass)system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=Z end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f1=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return f1 end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local f2,f3=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,f4;if not TurnBurn then _,f4=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,f4=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local f5=0;local f6=0;if brakeDistance+f2<AutopilotDistance then f5=AutopilotDistance-(brakeDistance+f2)f6=Kinematic.computeTravelTime(8333.0556,0,f5)else local f7=(AutopilotDistance-brakeDistance)/f2;f2=AutopilotDistance-brakeDistance;f3=f3*f7 end;if AutopilotBraking then return f4 elseif AutopilotCruising then return f6+f4 else return f3+brakeTime+f6 end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,o,k(),0,0,LastMaxBrake-s*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,o,k(),0,0,LastMaxBrake-s*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,o,k(),Nav:maxForceForward(),warmup,LastMaxBrake-s*k())end;function GetFlightStyle()local f8=Nav.axisCommandManager:getAxisCommandType(0)local by="TRAVEL"if f8==1 then by="CRUISE"end;if Autopilot then by="AUTOPILOT"end;return by end;function round(cU,f9)local fa=10^(f9 or 0)return a(cU*fa+0.5)/fa end;function tablelength(fb)local f0=0;for _ in pairs(fb)do f0=f0+1 end;return f0 end;function BeginProfile(fc)ProfileTimeStart=system.getTime()end;function EndProfile(fc)local fd=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fd;ProfileCount=ProfileCount+1;if fd>ProfileTimeMax then ProfileTimeMax=fd end;if fd<ProfileTimeMin then ProfileTimeMin=fd end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fe=ProfileTimeSum;local ff=ProfileTimeSum/ProfileCount;local fg=ProfileTimeMin;local fh=ProfileTimeMax;local fi=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fe,ff,fg,fh,fi))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fj=unit.getAtmosphereDensity()if door and(fj>0 or fj==0 and core_altitude<10000)then for _,Z in pairs(door)do Z.activate()end end;if forcefield and(fj>0 or fj==0 and core_altitude<10000)then for _,Z in pairs(forcefield)do Z.activate()end end;if dbHud then if not wipedDatabank then for Y,Z in pairs(AutoVariables)do dbHud.setStringValue(Z,json.encode(_G[Z]))end;for Y,Z in pairs(SaveableVariables)do dbHud.setStringValue(Z,json.encode(_G[Z]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fk)if fk=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()distance=AutopilotDistance;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(brakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(maxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not InAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=true elseif unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end elseif fk=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fl;fl=radar_1.getData():find('identifiedConstructs":%[%]')if hasSpaceRadar and EmergencyWarp then local al,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if al~=nil and al~=""then if math.floor(distance)<EmergencyWarpDistance and notTriedEmergencyWarp then emergencyWarp=true;notTriedEmergencyWarp=false end end end;if fl==nil and perisPanelID==nil then peris=1;ToggleRadarPanel()end;if fl~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fm=radar_1.getEntries()radarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fm)local fn={}for Y,Z in pairs(fm)do if radar_1.hasMatchingTransponder(Z)==1 then fn[#fn+1]=Z end end;if#fn>0 then local ag=15;radarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],radarMessage,ag)for Y,Z in pairs(fn)do ag=ag+20;radarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],radarMessage,ag,radar_1.getConstructName(Z))end end elseif radar_1 then local fo;fo=radar_1.getData():find('worksInEnvironment":false')if fo then radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then peris=0;ToggleRadarPanel()end end;if warpdrive~=nil then if emergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then msgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"msgTimer=5;unit.setTimer("emergencyWarpTick",5)emergencyWarp=false else msgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;emergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end;local ao={}local by=GetFlightStyle()DrawOdometer(ao,totalDistanceTrip,totalDistanceTravelled,by,flightTime)checkDamage(ao)LastOdometerOutput=table.concat(ao,"")collectgarbage("collect")elseif fk=="reEmergencyWarp"then notTriedEmergencyWarp=true;emergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif fk=="msgTick"then local ao={}DisplayMessage(ao,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif fk=="emergencyWarpTick"then msgText="EMERGENCY WARP ACTIVATED"msgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;unit.stopTimer("emergencyWarpTick")elseif fk=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif fk=="apTick"then local l=Nav.control.isRemoteControlled;yawInput2=0;rollInput2=0;pitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fp=system.getMouseDeltaX()local fq=system.getMouseDeltaY()targetGroundAltitude=Nav:getTargetGroundAltitude()local fr=0.002;local fs=velMag>8334;if not fs and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fs;if antigrav and antigrav.getState()==1 and not desiredBaseAltitude then desiredBaseAltitude=antigrav.getBaseAltitude()end;if BrakeIsOn then brakeInput=1 else brakeInput=0 end;core_altitude=core.getAltitude()if core_altitude==0 then core_altitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local ao={}HUDPrologue(ao)if showHud then updateHud(ao)else DisplayOrbit(ao)DrawWarnings(ao)end;HUDEpilogue(ao)ao[#ao+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if msgText~="empty"then DisplayMessage(ao,msgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(ao)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then simulatedX=screen_1.getMouseX()*2560;simulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(ao)if screen_1.getMouseState()==1 then CheckButtons()end;ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then simulatedX=simulatedX+fp;simulatedY=simulatedY+fq end;SetButtonContains()DrawButtons(ao)if not Animating and not Animated then local ft=table.concat(ao,"")ao={}ao[#ao+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ao[#ao+1]=GalaxyMapHTML;ao[#ao+1]=ft;ao[#ao+1]="</body>"Animating=true;ao[#ao+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ao,"")system.setScreen(content)elseif Animated then local ft=table.concat(ao,"")ao={}ao[#ao+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ao[#ao+1]=GalaxyMapHTML;ao[#ao+1]=ft;ao[#ao+1]="</body>"end;if not Animating then ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end else CheckButtons()simulatedX=0;simulatedY=0 end else simulatedX=simulatedX+fp;simulatedY=simulatedY+fq;distance=math.sqrt(simulatedX*simulatedX+simulatedY*simulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if simulatedX>0 and simulatedX>DeadZone then yawInput2=yawInput2-(simulatedX-DeadZone)*MouseXSensitivity elseif simulatedX<0 and simulatedX<DeadZone*-1 then yawInput2=yawInput2-(simulatedX+DeadZone)*MouseXSensitivity else yawInput2=0 end;if simulatedY>0 and simulatedY>DeadZone then pitchInput2=pitchInput2-(simulatedY-DeadZone)*MouseYSensitivity elseif simulatedY<0 and simulatedY<DeadZone*-1 then pitchInput2=pitchInput2-(simulatedY+DeadZone)*MouseYSensitivity else pitchInput2=0 end elseif userControlScheme=="Mouse"then simulatedX=0;simulatedY=0;pitchInput2=(-utils.smoothstep(fq,-100,100)+0.5)*2*mousePitchFactor;yawInput2=(-utils.smoothstep(fp,-100,100)+0.5)*2*mouseYawFactor else simulatedX=0;simulatedY=0 end;CheckButtons()if distance>DeadZone then DrawCursorLine(ao)end else SetButtonContains()DrawButtons(ao)end;ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end;ao[#ao+1]=[[</svg></body>]]content=table.concat(ao,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if AutoBrake and AutopilotTargetName~="None"and(vec3(core.getConstructWorldPos())-vec3(AutopilotTargetPlanet.center)):len()<=brakeDistance then brakeInput=1;if planet.name==AutopilotTargetPlanet.name and orbit.apoapsis~=nil and orbit.eccentricity<1 then brakeInput=0;AutoBrake=false end end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)end;brakeDistance=brakeDistance;brakeTime=brakeTime;local fu=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fv=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fw=getMagnitudeInDirection(fv,AutopilotShipUp)local fx=getMagnitudeInDirection(fv,AutopilotShipRight)local fy=-fx*AutopilotDistance*velMag*fr;local fz=-fw*AutopilotDistance*velMag*fr;fu=AutopilotTargetCoords+-fy*vec3(AutopilotShipRight)+-fz*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fu)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fA=true;local fB=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fB)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fA=AlignToWorldVector((fu-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fA=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fA then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;brakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(ao,"Autopilot completed, orbit established")brakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fA then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fA then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fC=0;local bz=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fD=bz-vec3(core.getConstructWorldPos())local fE=vec3(fD):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fF=vec3(fD):project_on(vec3(core.getConstructWorldOrientationRight())):len()local distance=math.sqrt(fE*fE+fF*fF)AlignToWorldVector(fD:normalize())local fG=40;local fH=distance<fG;local fI=100;local fJ=utils.clamp((distance-fG)/2,10,fI)pitchInput2=0;local fA=math.abs(yawInput2)<0.1;if fA and velMag<fJ and not fH then BrakeIsOn=false;fC=-10 else BrakeIsOn=true;fC=0 end;local bp=vec3(core.getConstructWorldOrientationForward())local bq=vec3(core.getConstructWorldOrientationRight())local bo=vec3(core.getWorldVertical())local aH=getPitch(bo,bp,bq)local fK=1.0;if math.abs(fC-aH)>fK then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fC-aH)local fL=pitchPID:get()pitchInput2=fL end end;local bP=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then autoRoll=true;if Reentry then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then Reentry=false end end;local bn=core_altitude;local fM=HoldAltitude-bn;local fN=500+velMag;local fC=(utils.smoothstep(fM,-fN,fN)-0.5)*2*MaxPitch;if not AltitudeHold then fC=0 end;local fO=pitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bg=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bg)local fP=bg:len()-bg:project_on(bP):len()local aa=json.decode(unit.getData()).maxBrake;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;local fQ=velocity:len()-math.abs(bQ)local fR=vec3(core.getWorldAirFrictionAcceleration())if aa~=nil then LastMaxBrake=aa;brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fQ,0,core.getConstructMass(),0,0,aa+(fR:len()-fR:project_on(bP):len())*core.getConstructMass())else brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fQ,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if fP<=brakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and fP>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=fP end;pitchInput2=fO;local fS=-1;if BrakeLanding then fC=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)if vBooster then fS=vBooster.distance()elseif hover then fS=hover.distance()end;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;if fS>-1 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;gearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)upAmount=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and velocity:normalize():dot(-bP)<0.99 then BrakeIsOn=true elseif bQ<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fC<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;local bp=vec3(core.getConstructWorldOrientationForward())local bq=vec3(core.getConstructWorldOrientationRight())local bo=vec3(core.getWorldVertical())local aH=getPitch(bo,bp,bq)local fK=0.1;if math.abs(fC-aH)>fK then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fC-aH)local fL=pitchPID:get()pitchInput2=pitchInput2+fL end end;LastEccentricity=orbit.eccentricity;if antigrav and core_altitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local fT=core_altitude-antigrav.getBaseAltitude()if core_altitude>800 and fT<-200 then desiredBaseAltitude=math.max(core_altitude+100,1000)elseif fT>200 then desiredBaseAltitude=core_altitude-100 end else local fT=AntigravTargetAltitude-core_altitude;local velocity=vec3(core.getWorldVelocity())local bP=vec3(core.getWorldVertical())*-1;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;local fU=290;local fV=-290;if unit.getClosestPlanetInfluence()>0.3 then fV=-190 end;fV=math.min(math.max(fV,-math.abs(fT)/20.0),-10)fU=math.max(math.min(fU,math.abs(fT)/20.0),10)if bQ<fV then desiredBaseAltitude=core_altitude+100 elseif bQ>fU then desiredBaseAltitude=math.max(core_altitude-100,1000)elseif math.abs(fT)>150 or math.abs(bQ)>15 then if math.abs(bQ)>10 then desiredBaseAltitude=core_altitude+math.max(math.min(fT-bQ/10.0,100),-100)else desiredBaseAltitude=core_altitude+math.max(math.min(fT,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bQ)<10 and math.abs(fT)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local fW=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fW=math.max(fW,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local fX=pitchInput+pitchInput2+system.getControlDeviceForwardInput()local fY=rollInput+rollInput2+system.getControlDeviceYawInput()local fZ=yawInput+yawInput2-system.getControlDeviceLeftRightInput()local f_=brakeInput;local g0=vec3(core.getWorldVertical())local g1=vec3(core.getConstructWorldOrientationUp())local g2=vec3(core.getConstructWorldOrientationForward())local g3=vec3(core.getConstructWorldOrientationRight())local g4=vec3(core.getWorldVelocity())local g5=vec3(core.getWorldVelocity()):normalize()local g6=getRoll(g0,g2,g3)local g7=math.abs(g6)local g8=utils.sign(g6)local g9=vec3(core.getWorldAngularVelocity())local ga=fX*pitchSpeedFactor*g3+fY*rollSpeedFactor*g2+fZ*yawSpeedFactor*g1;if g0:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local gb=1.0;if autoRoll==true and g7>gb and fY==0 then local gc=utils.clamp(0,g7-30,g7+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gc-g6)local gd=rollPID:get()ga=ga+gd*g2 end;local ge=20.0;if turnAssist==true and g7>ge and fX==0 and fZ==0 then local gf=turnAssistFactor*0.1;local gg=turnAssistFactor*0.025;local gh=(g7-ge)/(180-ge)*180;local gi=0;if gh<90 then gi=gh/90 elseif gh<180 then gi=(180-gh)/90 end;gi=gi*gi;local gj=-g8*gg*(1.0-gi)local gk=gf*gi;ga=ga+gk*g3+gj*g1 end end;local gl=1;local gm=0;local gn=1;local go=fW*(ga-g9)local gp=vec3(core.getWorldAirFrictionAngularAcceleration())go=go-gp;Nav:setEngineTorqueCommand('torque',go,gl,'airfoil','','',gn)local gq=-f_*(brakeSpeedFactor*g4+brakeFlatFactor*g5)Nav:setEngineForceCommand('brake',gq)local gr=''local gs=vec3()local gt=false;local gu='thrust analog longitudinal'local gv=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gv==axisCommandType.byThrottle then local gw=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gu,axisCommandId.longitudinal)Nav:setEngineForceCommand(gu,gw,gl)elseif gv==axisCommandType.byTargetSpeed then local gw=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gr=gr..' , '..gu;gs=gs+gw;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gt=true end end;local gx='thrust analog lateral'local gy=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gy==axisCommandType.byThrottle then local gz=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gx,axisCommandId.lateral)Nav:setEngineForceCommand(gx,gz,gl)elseif gy==axisCommandType.byTargetSpeed then local gA=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gr=gr..' , '..gx;gs=gs+gA end;local gB='thrust analog vertical'local gC=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gC==axisCommandType.byThrottle then local gD=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gB,axisCommandId.vertical)if upAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gB,gD,gl,'airfoil','ground','',gn)else Nav:setEngineForceCommand(gB,vec3(),gl)end elseif gC==axisCommandType.byTargetSpeed then local gE=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gr=gr..' , '..gB;gs=gs+gE end;if gs:len()>constants.epsilon then if brakeInput~=0 or gt or math.abs(g5:dot(g2))<0.95 then gr=gr..', brake'end;Nav:setEngineForceCommand(gr,gs,gm,'','','',gn)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif isboosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,a0=coroutine.resume(beginSetup)if a0 then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gF)if gF=="gear"then gearExtended=not gearExtended;if gearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or core_altitude<ReentryAltitude)then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;gearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gF=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gF=="forward"then pitchInput=pitchInput-1 elseif gF=="backward"then pitchInput=pitchInput+1 elseif gF=="left"then rollInput=rollInput-1 elseif gF=="right"then rollInput=rollInput+1 elseif gF=="yawright"then yawInput=yawInput-1 elseif gF=="yawleft"then yawInput=yawInput+1 elseif gF=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gF=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gF=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gF=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gF=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gF=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gF=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif gF=="option2"then DecrementAutopilotTargetIndex()toggleView=false elseif gF=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;toggleView=false;ToggleWidgets()elseif gF=="option4"then ToggleAutopilot()toggleView=false elseif gF=="option5"then ToggleTurnBurn()toggleView=false elseif gF=="option6"then ToggleAltitudeHold()toggleView=false elseif gF=="option7"then wipeSaveVariables()toggleView=false elseif gF=="option8"then ToggleFollowMode()toggleView=false elseif gF=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;toggleView=false elseif gF=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gF=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gF=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gF=="booster"then isboosting=not isboosting;if isboosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gF=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gF=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gF=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gF=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gF=="warp"then if warpdrive~=nil then if not emergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then msgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")emergencyWarp=false;msgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gF)if gF=="forward"then pitchInput=pitchInput+1 elseif gF=="backward"then pitchInput=pitchInput-1 elseif gF=="left"then rollInput=rollInput+1 elseif gF=="right"then rollInput=rollInput-1 elseif gF=="yawright"then yawInput=yawInput+1 elseif gF=="yawleft"then yawInput=yawInput-1 elseif gF=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gF=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gF=="up"then upAmount=upAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gF=="down"then upAmount=upAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gF=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gF=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gF=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;simulatedX=0;simulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gF=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gF=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gF)if gF=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gF=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gF=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gF=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(ao,gG)if gG~="empty"then ao[#ao+1]=[[<text class="msg" x="50%%" y="310" >]]for gH in string.gmatch(gG,"([^\n]+)")do ao[#ao+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gH)end;ao[#ao+1]=[[</text>]]end;if msgTimer~=0 then unit.setTimer("msgTick",msgTimer)msgTimer=0 end end;function updateDistance()local a5=system.getTime()local velocity=vec3(core.getWorldVelocity())local bw=vec3(velocity):len()local gI=a5-lastTravelTime;if bw>1.38889 then bw=bw/1000;local gJ=bw*(a5-lastTravelTime)totalDistanceTravelled=totalDistanceTravelled+gJ;totalDistanceTrip=totalDistanceTrip+gJ end;flightTime=flightTime+gI;totalFlightTime=totalFlightTime+gI;lastTravelTime=a5 end;function updateMass()local gK=0;for Y in pairs(elementsID)do gK=gK+core.getElementMassById(elementsID[Y])end;return gK end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
