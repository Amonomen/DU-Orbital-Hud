name: ButtonsHud - Dimencia and Archaegeo v4.692 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        local useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        local BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        local RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        local brightHud = false --export: Enable to prevent hud dimming when in freelook.
        local PrimaryR = 130 --export: Primary HUD color
        local PrimaryG = 224 --export: Primary HUD color
        local PrimaryB = 255 --export: Primary HUD color
        local centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement.
        local centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement. 
        local vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        local vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        local altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        local altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        local circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        local AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        local warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        local DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        local fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        local fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        local fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        local apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.692;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;toggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;EmergencyWarp=false;ReentryMode=false;mousePitchFactor=1;mouseYawFactor=1;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;msgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;isBoosting=false;brakeDistance,brakeTime=0;maxBrakeDistance,maxBrakeTime=0;hasDB=false;hasSpaceRadar=false;hasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;totalDistanceTravelled=0.0;totalDistanceTrip=0;emergencyWarp=false;notTriedEmergencyWarp=true;flightTime=0;wipedDatabank=false;LocationIndex=0;upAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;simulatedX=0;simulatedY=0;AutopilotStatus="Aligning"msgTimer=3;targetGroundAltitude=nil;gearExtended=nil;distance=0;radarMessage=""LastOdometerOutput=""peris=0;AntigravTargetAltitude=nil;core_altitude=core.getAltitude()elementsID=core.getElementIdList()lastTravelTime=system.getTime()totalFlightTime=0;local m={}local n=true;local o=0;local p=0;local q=0;local r=""local hasGear=false;local s=0;local t=true;local u={}local v=1;local w=0.001;local x=2560;local y=1440;local z=nil;local A=nil;local B=nil;local C=nil;local D=false;local E=false;local F=0;local G=nil;local H={}local I={}local J={}local K=0;local L=false;local M={}local N={}local O=a(1/apTickRate)*2;local P={}local Q={}local R={}local S={}local T={}local U=false;local V=0;local W=k()local X=16;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY"}AutoVariables={"EmergencyWarp","hasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","AutoBrake","Autopilot","TurnBurn","AltitudeHold","displayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","gearExtended","targetGroundAltitude","totalDistanceTravelled","totalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake"}if dbHud then local Y=dbHud.hasKey;if not useTheseSettings then for Z,a0 in pairs(SaveableVariables)do if Y(a0)then local a1=c(dbHud.getStringValue(a0))if a1~=nil then system.print(a0 .." "..dbHud.getStringValue(a0))_G[a0]=a1;D=true end end end end;for Z,a0 in pairs(AutoVariables)do if Y(a0)then local a1=c(dbHud.getStringValue(a0))if a1~=nil then system.print(a0 .." "..dbHud.getStringValue(a0))_G[a0]=a1;D=true end end end;if D then msgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then msgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else msgText="No Saved Variables Found - Stand up / leave remote to save settings"end else msgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;V=W-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local a2=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]local a3=0;coroutine.yield()for Z in pairs(elementsID)do local a4=h(elementsID[Z])if a4=="landing gear"then hasGear=true end;if a4=="dynamic core"then local a5=e(elementsID[Z])if a5>10000 then X=128 elseif a5>1000 then X=64 elseif a5>150 then X=32 end end;K=K+e(elementsID[Z])if a4=="atmospheric fuel-tank"or a4=="space fuel-tank"or a4=="rocket fuel-tank"then local a5=e(elementsID[Z])local a6=j(elementsID[Z])local a7=0;local a8=system.getTime()if a4=="atmospheric fuel-tank"then local a9=400;local aa=35.03;if a5>10000 then a9=51200;aa=5480 elseif a5>1300 then a9=6400;aa=988.67 elseif a5>150 then a9=1600;aa=182.67 end;a7=a6-aa;if fuelTankOptimizationAtmo>0 then a9=a9+a9*fuelTankOptimizationAtmo*0.2 end;if a7>a9 then a9=a7 end;H[#H+1]={elementsID[Z],core.getElementNameById(elementsID[Z]),a9,aa,a7,a8}end;if a4=="rocket fuel-tank"then local a9=320;local aa=173.42;if a5>65000 then a9=40000;aa=25740 elseif a5>6000 then a9=5120;aa=4720 elseif a5>700 then a9=640;aa=886.72 end;a7=a6-aa;if fuelTankOptimizationRocket>0 then a9=a9+a9*fuelTankOptimizationRocket*0.1 end;if a7>a9 then a9=a7 end;J[#J+1]={elementsID[Z],core.getElementNameById(elementsID[Z]),a9,aa,a7,a8}end;if a4=="space fuel-tank"then local a9=2400;local aa=182.67;if a5>10000 then a9=76800;aa=5480 elseif a5>1300 then a9=9600;aa=988.67 end;a7=a6-aa;if fuelTankOptimizationSpace>0 then a9=a9+a9*fuelTankOptimizationSpace*0.2 end;if a7>a9 then a9=a7 end;I[#I+1]={elementsID[Z],core.getElementNameById(elementsID[Z]),a9,aa,a7,a8}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;if door then for _,a0 in pairs(door)do a0.deactivate()end end;if forcefield then for _,a0 in pairs(forcefield)do a0.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if targetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(targetGroundAltitude)end;if hasGear then if gearExtended==nil then gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if targetGroundAltitude==nil then if gearExtended then Nav.axisCommandManager:setTargetGroundAltitude(0)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end elseif targetGroundAltitude==nil then if f()==0 then gearExtended=false;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else gearExtended=true;Nav.axisCommandManager:setTargetGroundAltitude(0)end end;if f()>0 and not dbHud and(gearExtended or not hasGear)then BrakeIsOn=true end;unit.hide()function refreshLastMaxBrake(ab,ac)if ab==nil then ab=core.g()end;ab=round(ab,5)if ac~=nil and ac or(G==nil or G~=ab)then local ad=c(unit.getData()).maxBrake;if ad~=nil then LastMaxBrake=ad end;G=ab end end;function MakeButton(ae,af,ag,ah,ai,aj,ak,al,am)local an={enableName=ae,disableName=af,width=ag,height=ah,x=ai,y=aj,toggleVar=ak,toggleFunction=al,drawCondition=am,hovered=false}table.insert(u,an)return an end;function AddLocationsToAtlas()for Z,a0 in pairs(T)do table.insert(atlas[0],a0)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a4=#T..". "..planet.name;if radar_1 then local ao,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ao~=nil and ao~=""then a4=a4 .." "..radar_1.getConstructName(ao)end end;local ap={position=position,name=a4,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}T[#T+1]=ap;table.insert(atlas[0],ap)msgText="Location saved as "..a4 else msgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local aq=-1;for Z,a0 in pairs(atlas[0])do if a0.name and a0.name==CustomTarget.name then aq=Z end end;if aq>-1 then table.remove(atlas[0],aq)end;aq=-1;for Z,a0 in pairs(T)do if a0.name and a0.name==CustomTarget.name then msgText=a0.name.." saved location cleared"aq=Z;break end end;if aq~=-1 then table.remove(T,aq)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(ar)ar[#ar+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;peris=0 end end;function ToggleWidgets()if t then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;t=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;t=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(as,at,ai,aj,ag,ah)if as>ai and as<ai+ag and at>aj and at<aj+ah then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then AutoBrake=false;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not gearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=core_altitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=gearExtended;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;gearExtended=OldGearExtended;if gearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else msgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(ar)local au=0;r=""currentConstructMass=k()local av=K;local aw=0;local ax=100;local ay=0;local az=0;local aA=0;local aB=""for Z in pairs(elementsID)do local a5=0;local aC=0;aC=e(elementsID[Z])a5=g(elementsID[Z])aw=aw+a5;if a5<aC then if a5==0 then az=az+1 else ay=ay+1 end;if L and#m==0 then position=vec3(core.getElementPositionById(elementsID[Z]))local ai=position.x-X;local aj=position.y-X;local aD=position.z-X;table.insert(m,core.spawnArrowSticker(ai,aj,aD+1,"down"))table.insert(m,core.spawnArrowSticker(ai,aj,aD+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ai+1,aj,aD,"north"))table.insert(m,core.spawnArrowSticker(ai+1,aj,aD,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ai-1,aj,aD,"south"))table.insert(m,core.spawnArrowSticker(ai-1,aj,aD,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ai,aj-1,aD,"east"))table.insert(m,core.spawnArrowSticker(ai,aj-1,aD,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ai,aj+1,aD,"west"))table.insert(m,core.spawnArrowSticker(ai,aj+1,aD,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,elementsID[Z])end elseif L and#m>0 and m[11]==elementsID[Z]then for aE in pairs(m)do core.deleteSticker(m[aE])end;m={}end end;au=a(aw*100/av)if currentConstructMass<W then ax=math.ceil(100*(currentConstructMass-updateMass())/V)W=currentConstructMass end;if ax<100 or au<100 then ar[#ar+1]=[[<g class="pbright txt">]]if ax<100 then aA=a(ax*2.55)aB=b("rgb(%d,%d,%d)",255-aA,aA,0)ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],aB,ax)end;aA=a(au*2.55)aB=b("rgb(%d,%d,%d)",255-aA,aA,0)if au<100 then ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aB,au)if az>0 then ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aB,az,ay)elseif ay>0 then ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aB,ay)end end;ar[#ar+1]=[[<\g>]]end end;function DrawCursorLine(ar)local aF=a(utils.clamp(distance/(x/4)*255,0,255))ar[#ar+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",simulatedX,simulatedY,a(PrimaryR+0.5)+aF,a(PrimaryG+0.5)-aF,a(PrimaryB+0.5)-aF)end;function getPitch(aG,aH,aI)local aJ=aG:cross(aI):normalize_inplace()local aK=math.acos(utils.clamp(aJ:dot(-aH),-1,1))*constants.rad2deg;if aJ:cross(-aH):dot(aI)<0 then aK=-aK end;return aK end;function wipeSaveVariables()if not dbHud then msgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"msgTimer=5 elseif D then if E then for Z,a0 in pairs(SaveableVariables)do dbHud.setStringValue(a0,d(nil))end;for Z,a0 in pairs(AutoVariables)do dbHud.setStringValue(a0,d(nil))end;msgText="Databank wiped. New variables will save after re-enter seat and exit"msgTimer=5;E=false;D=false;wipedDatabank=true else msgText="Press ALT-7 again to confirm wipe"E=true end end end;function CheckButtons()for _,a0 in pairs(u)do if a0.hovered then a0.toggleFunction()a0.hovered=false end end end;function SetButtonContains()local ai=simulatedX+x/2;local aj=simulatedY+y/2;for _,a0 in pairs(u)do a0.hovered=Contains(ai,aj,a0.x,a0.y,a0.width,a0.height)end end;function DrawButton(ar,aL,hover,ai,aj,aM,aN,aO,aP,aQ,aR)if type(aQ)=="function"then aQ=aQ()end;if type(aR)=="function"then aR=aR()end;ar[#ar+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ai,aj,aM,aN)if aL then ar[#ar+1]=b("%s'",aO)else ar[#ar+1]=aP end;if hover then ar[#ar+1]=" style='stroke:white; stroke-width:2'"else ar[#ar+1]=" style='stroke:black; stroke-width:1'"end;ar[#ar+1]="></rect>"ar[#ar+1]=b("<text x='%f' y='%f' font-size='24' fill='",ai+aM/2,aj+aN/2+5)if aL then ar[#ar+1]="black"else ar[#ar+1]="white"end;ar[#ar+1]="' text-anchor='middle' font-family='Montserrat'>"if aL then ar[#ar+1]=b("%s</text>",aQ)else ar[#ar+1]=b("%s</text>",aR)end end;function DrawButtons(ar)local aS="rgb(50,50,50)'"local aT="rgb(210,200,200)"local aU=DrawButton;for _,a0 in pairs(u)do local af=a0.disableName;local ae=a0.enableName;if type(af)=="function"then af=af()end;if type(ae)=="function"then ae=ae()end;if not a0.drawCondition or a0.drawCondition()then aU(ar,a0.toggleVar(),a0.hovered,a0.x,a0.y,a0.width,a0.height,aT,aS,af,ae)end end end;function DrawTank(ar,U,ai,aV,aW,aX,aY,aZ)local a_=1;local b0=2;local b1=3;local b2=4;local b3=5;local b4=6;local b5=""local b6=0;local b7=350;local b8=360;if l()==1 then b7=b7-50;b8=b8-50 end;ar[#ar+1]=[[<g class="pdim txtfuel">]]if aW=="ATMO"then b5="atmofueltank"elseif aW=="SPACE"then b5="spacefueltank"else b5="rocketfueltank"end;b6=_G[b5 .."_size"]if#aX>0 then for i=1,#aX do local a4=string.sub(aX[i][b0],1,12)local b9=0;for aE=1,b6 do if aX[i][b0]==json.decode(unit[b5 .."_"..aE].getData()).name then b9=aE;break end end;if U or aY[i]==nil or aZ[i]==nil then local ba=0;local bb=0;local bc=0;local bd=0;local a8=system.getTime()if b9~=0 then aZ[i]=json.decode(unit[b5 .."_"..b9].getData()).percentage;aY[i]=json.decode(unit[b5 .."_"..b9].getData()).timeLeft;if aY[i]=="n/a"then aY[i]=0 end else bc=j(aX[i][a_])-aX[i][b2]ba=aX[i][b1]aZ[i]=a(0.5+bc*100/ba)bb=aX[i][b3]bd=aX[i][b4]if bb<=bc then aY[i]=0 else aY[i]=a(0.5+bc/((bb-bc)/(a8-bd)))end;aX[i][b3]=bc;aX[i][b4]=a8 end end;if a4==aV then a4=b("%s %d",aW,i)end;if b9==0 then a4=a4 .." *"end;local be;if aY[i]==0 then be="n/a"else be=FormatTimeString(aY[i])end;if aZ[i]~=nil then local aA=a(aZ[i]*2.55)local aB=b("rgb(%d,%d,%d)",255-aA,aA,0)local bf=""if be~="n/a"and aY[i]<120 or aZ[i]<5 then if U then bf=[[class="red"]]end end;ar[#ar+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ai,b7,bf,a4,ai,b8,aB,aZ[i],be)b7=b7+30;b8=b8+30 end end end;ar[#ar+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aK=-math.deg(math.atan(velocity.y,velocity.z))+180;aK=aK-90;if aK<0 then aK=360+aK end;if aK>180 then aK=-180+aK-180 end;return-aK end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bg=math.deg(math.atan(velocity.y,velocity.x))-90;if bg<-180 then bg=360+bg end;return bg end;function AlignToWorldVector(bh,bi)if bi==nil then bi=w end;bh=vec3(bh):normalize()local bj=vec3(core.getConstructWorldOrientationForward())-bh;local bk=-getMagnitudeInDirection(bj,core.getConstructWorldOrientationRight())*v;local bl=-getMagnitudeInDirection(bj,core.getConstructWorldOrientationUp())*v;yawInput2=yawInput2-(bk+(bk-p)*DampingMultiplier)pitchInput2=pitchInput2+bl+(bl-q)*DampingMultiplier;p=bk;q=bl;if math.abs(bk)<bi and math.abs(bl)<bi then return true end;return false end;function getAPEnableName()local a4=AutopilotTargetName;if a4==nil then a4=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a4==nil then a4="None"end;return"Engage Autopilot: "..a4 end;function getAPDisableName()local a4=AutopilotTargetName;if a4==nil then a4=CustomTarget.name end;if a4==nil then a4="None"end;return"Disable Autopilot: "..a4 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()else AntigravTargetAltitude=core_altitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if unit.getAtmosphereDensity()<0 and unit.getClosestPlanetInfluence()>0 and core_altitude>ReentryAltitude and not Reentry then Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;msgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude else msgText="You do not meet re-entry requirements. (Must be out of atmosphere and close to a planet"Rentry=false end end;local bm=50;local bn=260;local bo=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bn,bm,x/2-bn/2,y/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then msgText="Brakes in Toggle Mode"else msgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bn,bm,x/2-bn/2-50-bo.width,y/2-bm+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bn,bm,x/2-bn/2+bo.width+50,y/2-bm+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bp=MakeButton(getAPEnableName,getAPDisableName,600,60,x/2-600/2,y/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bp.height,bp.x+bp.width+30,bp.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,bp.height,bp.x-200-30,bp.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bm=60;bn=300;local ai=10;local aj=y/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bn,bm,ai,aj,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bn,bm,ai+bn+20,aj,function()return AltitudeHold end,ToggleAltitudeHold)aj=aj+bm+20;MakeButton("Engage Autoland","Disable Autoland",bn,bm,ai,aj,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bn,bm,ai+bn+20,aj,function()return AutoTakeoff end,ToggleAutoTakeoff)aj=aj+bm+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bn,bm,ai,aj,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Begin Glide Reentry","Cancel Glide Reentry",bn,bm,ai+bn+20,aj,function()return Reentry end,BeginReentry,function()return core_altitude>ReentryAltitude end)aj=aj+bm+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",bn,bm,ai,aj,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then msgText="Emergency Warp Enabled"else msgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",bn,bm,ai+bn+20,aj,function()return n end,function()n=not n;if n then msgText="Orbit Display Enabled"else msgText="Orbit Display Disabled"end end)aj=aj+bm+20;MakeButton("Enable AGG","Disable AGG",bn,bm,ai,aj,function()return AntigravTargetAltitude==nil end,ToggleAntigrav,function()return antigrav~=nil end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bn,bm,ai,aj,function()return L end,function()L=not L;if L then msgText="Repair Arrows Enabled"else msgText="Repair Arrows Diabled"end end,function()return l()==1 end)aj=aj+bm+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bn*2,bm,ai,aj,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(ar)local bq=core_altitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local br=vec3(core.getWorldVertical())local bs=vec3(core.getConstructWorldOrientationForward())local bt=vec3(core.getConstructWorldOrientationRight())local aK=getPitch(br,bs,bt)local bu=getRoll(br,bs,bt)local bv=bu;local bw=aK;local bx=f()local by=a(unit.getThrottle())local bz=speed*3.6;local bA=unit.getAxisCommandValue(0)local bB=GetFlightStyle()if bx==0 then if speed>5 then aK=getRelativePitch(velocity)bu=getRelativeYaw(velocity)else aK=0;bu=0 end;bottomText="YAW"end;ar[#ar+1]=LastOdometerOutput;ar[#ar+1]=r;ar[#ar+1]=radarMessage;if a3%O==0 then U=true end;DrawTank(ar,U,100,"Atmospheric ","ATMO",H,R,S)DrawTank(ar,U,200,"Space fuel t","SPACE",I,P,Q)DrawTank(ar,U,300,"Rocket fuel ","ROCKET",J,M,N)if U then U=false;a3=0 end;a3=a3+1;DrawVerticalSpeed(ar,bq,bx)if l()==0 then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(ar,bw,bv,bx,centerX,centerY,"ROLL")DrawPrograde(ar,bw,bv,bx,velocity,speed,centerX,centerY)DrawAltitudeDisplay(ar,bq,bx)else DrawArtificialHorizon(ar,aK,bu,bx,centerX,centerY,"YAW")DrawPrograde(ar,bw,bv,bx,velocity,speed,centerX,centerY)end end end;DrawThrottle(ar,bB,by,bA)DrawSpeed(ar,bz)DrawWarnings(ar)DisplayOrbit(ar)if screen_2 then local bC=vec3(core.getConstructWorldPos())local ai=960+bC.x/MapXRatio;local aj=450+bC.y/MapYRatio;screen_2.moveContent(YouAreHere,(ai-80)/19.2,(aj-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(ar)local bD=rgb;local bE=a2;local bF=rgb;local bG=a2;if IsInFreeLook()and not brightHud then bD=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bE=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;ar[#ar+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bD,bD,bF,bF,bE,bE,bG,bG)end;function HUDEpilogue(ar)ar[#ar+1]="</svg>"end;function DrawSpeed(ar,bz)local bH=altMeterY+40;local bI=altMeterX;ar[#ar+1]=[[<g class="pdim txt txtend">]]if l()==1 then bH=75 end;ar[#ar+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bI,bH,a(bz))end;function DrawOdometer(ar,totalDistanceTrip,totalDistanceTravelled,bB,flightTime)local bJ=1240;local bK=55;local bL=65;local bx=f()local ab=core.g()local bM=0;local bN=0;refreshLastMaxBrake(ab)maxThrust=Nav:maxForceForward()F=k()local bO=vec3(core.getWorldAcceleration()):len()/9.80665;if ab>0.1 then bN=F*ab;bM=maxThrust/ab end;ar[#ar+1]=[[<g class="pdim txt txtend">]]if l()==1 then bJ=1120;bK=55;bL=65 elseif bx>0 then ar[#ar+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bx)end;ar[#ar+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bJ,bK,bJ,bL,ab/9.80665,bJ,bK+20,bJ,bL+20,bO)ar[#ar+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then ar[#ar+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],totalDistanceTrip,totalDistanceTravelled/1000,FormatTimeString(flightTime),FormatTimeString(totalFlightTime),F/1000,LastMaxBrake/1000,maxThrust/1000,bB)if ab>0.1 then ar[#ar+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bM/1000,bN/1000)else ar[#ar+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else ar[#ar+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bB)end;ar[#ar+1]="</g>"end;function DrawThrottle(ar,bB,by,bA)local b7=centerY+65;local b8=centerY+75;if l()==1 then b7=55;b8=65 end;local bP="CRUISE"local unit="km/h"local bQ=bA;if bB=="TRAVEL"or bB=="AUTOPILOT"then bP="THROT"unit="%"bQ=by;local bR="dim"if by<0 then bR="red"end;ar[#ar+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bR,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(by),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;ar[#ar+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,b7,bP,centerX-150,b8,bQ,unit)end;function DrawVerticalSpeed(ar,bq,bx)if bq<200000 and bx==0 or bq and bx>0 then local velocity=vec3(core.getWorldVelocity())local bS=vec3(core.getWorldVertical())*-1;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local bU=0;if math.abs(bT)>1 then bU=45*math.log(math.abs(bT),10)if bT<0 then bU=-bU end end;ar[#ar+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bT),a(bU))end end;function DrawArtificialHorizon(ar,bw,bv,bx,centerX,centerY,bottomText)local bV=circleRad;if bV>0 then local bW=a(bw)local bX=0;local bY=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bv,centerX,centerY)ar[#ar+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bV-1,centerX,centerY)ar[#ar+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bW-30-bW%5+0.5),a(bW+30+bW%5+0.5),5 do if i%10==0 then bX=30 elseif i%5==0 then bX=20 end;local aj=centerY+-i*5+bw*5;if bX==30 then bY=b([[%s M %d %f h %d]],bY,centerX-15,aj,bX)else bY=b([[%s M %d %f h %d]],bY,centerX-10,aj,bX)end end;ar[#ar+1]=bY..[["/>]]local bZ="PITCH"if bottomText=="YAW"then bZ="REL PITCH"end;if bw>90 and bx==0 then bw=90-(bw-90)elseif bw<-90 and bx==0 then bw=-90-(bw+90)end;ar[#ar+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)ar[#ar+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bV,centerX,centerY,centerX-bV,centerY+bV*bw/20,bV*9,bV*2,-1*bv,centerX,centerY)ar[#ar+1]="</g>"ar[#ar+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-circleRad-20,bZ,centerX,centerY-circleRad-10,bW)end end;function DrawAltitudeDisplay(ar,bq,bx)if bq<200000 and bx==0 or bq and bx>0 then local b_=altMeterX;local c0=altMeterY;local c1=78;local c2=19;table.insert(ar,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],b_-1,c0-4,c1+2,c2+6,b_+1,c0-1,c1-4,c2))local aq=0;local c3=1;local c4=0;while aq<6 do local c5=11;local c6=16;local c7=9;local c8=14;local bf="altsm"if aq>2 then c6=c6+3;c5=c5+2;c8=c8+2;c7=c7-6;bf="altbig"end;local c9=bq/c3%10;local ca=a(c9)local cb=a((ca+1)%10)local cc=c4;if aq==0 then cc=c9-ca end;local cd=c6*(cc-1)local ce=cd+c6;local ai=b_+c7+(6-aq)*c5;local aj=c0+c8;table.insert(ar,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bf,ai,aj+cd,cb,ai,aj+ce,ca))aq=aq+1;c3=c3*10;if ca==9 then c4=cc else c4=0 end end;table.insert(ar,[[</g></g>]])end end;function DrawPrograde(ar,bw,bv,bx,velocity,speed,centerX,centerY)if bx==0 and speed>5 then local bV=circleRad;local cf=20;local cg=20;local ch=getRelativePitch(velocity)local ci=getRelativeYaw(velocity)local cj=-ci/cg*bV;local ck=ch/cf*bV;local ai=centerX+cj;local aj=centerY+ck;local distance=math.sqrt(cj^2+ck^2)if distance<bV then ar[#ar+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ai,aj)else local bU=math.atan(ck,cj)local cl=centerX+bV*math.cos(bU)local cm=centerY+bV*math.sin(bU)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',cl,cm)end end end;function DrawWarnings(ar)ar[#ar+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)ar[#ar+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ar[#ar+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]ar[#ar+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]ar[#ar+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cn=960;local co=860;local cp=900;local cq=930;local cr=960;local cs=225;local ct=150;local cu=960;if l()==1 then co=135;cp=155;cq=175;cs=115;ct=95 end;if BrakeIsOn then ar[#ar+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cn,co)end;if GyroIsOn then ar[#ar+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cn,cu)end;if gearExtended then if hasGear then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cn,cp)else ar[#ar+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cn,cp)end;ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cn,cq,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cn,cr)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],cn,cs,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cn,cs,AutopilotStatus)elseif FollowMode then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cn,cs)elseif AltitudeHold then if AutoTakeoff then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cn,cs,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then ar[#ar+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cn,cs+50)end else ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cn,cs,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then ar[#ar+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cn,cs)else ar[#ar+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cn,cs)end end;if TurnBurn then ar[#ar+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cn,ct)end;if VectorToTarget then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cn,ct,VectorStatus)end;ar[#ar+1]="</g>"end;function DisplayOrbit(ar)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and n then local cv=75;local cw=0;local cx=250;local cy=4;cw=cw+cy;local cz=15;local ai=cv+cx+cv/2+cy;local aj=cw+cx/2+5+cy;local cA,cB,cC,cD;cA=cx/4;cD=0;ar[#ar+1]=[[<g class="pbright txtorb txtmid">]]ar[#ar+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cx+cv*2,cx+cw,cy,cy)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cC=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cA*2)cB=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cC*(1-orbit.eccentricity)cD=cA-orbit.periapsis.altitude/cC-planet.radius/cC;local cE=""if orbit.periapsis.altitude<=0 then cE='redout'end;ar[#ar+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cE,cv+cx/2+cD+cy,cw+cx/2+cy,cA,cB)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cv+cx/2+cy,cw+cx/2+cy,planet.radius/cC)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ar[#ar+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ai-35,aj-5,cv+cx/2+cA+cD,aj-5)ar[#ar+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ai,aj)aj=aj+cz;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ai,aj,getDistanceDisplayString(orbit.apoapsis.altitude))aj=aj+cz;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ai,aj,FormatTimeString(orbit.timeToApoapsis))aj=aj+cz;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ai,aj,getSpeedDisplayString(orbit.apoapsis.speed))end;aj=cw+cx/2+5+cy;ai=cv-cv/2+10+cy;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ar[#ar+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ai+35,aj-5,cv+cx/2-cA+cD,aj-5)ar[#ar+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ai,aj)aj=aj+cz;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ai,aj,getDistanceDisplayString(orbit.periapsis.altitude))aj=aj+cz;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ai,aj,FormatTimeString(orbit.timeToPeriapsis))aj=aj+cz;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ai,aj,getSpeedDisplayString(orbit.periapsis.speed))end;ar[#ar+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cv+cx/2+cy,20+cy,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cF=orbit.timeToApoapsis/orbit.period*2*math.pi;local cG=cA*math.cos(cF)local cH=cB*math.sin(cF)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cv+cx/2+cG+cD+cy,cw+cx/2+cH+cy)end;ar[#ar+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000}}}end;atlas=Atlas()for Z,a0 in pairs(atlas[0])do if z==nil or a0.center.x<z then z=a0.center.x end;if A==nil or a0.center.x>A then A=a0.center.x end;if B==nil or a0.center.y<B then B=a0.center.y end;if C==nil or a0.center.y>C then C=a0.center.y end end;GalaxyMapHTML=""local cI=1.1*(A-z)/1920;local cJ=1.4*(C-B)/1080;for Z,a0 in pairs(atlas[0])do local ai=960+a0.center.x/cI;local aj=540+a0.center.y/cJ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ai..'" cy="'..aj..'" r="'..a0.radius/cI*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(a0.name,"Moon")and not string.match(a0.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ai.."' y='"..aj+a0.radius/cI*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..a0.name.."</text>"end end;local bC=vec3(core.getConstructWorldPos())local ai=960+bC.x/cI;local aj=540+bC.y/cJ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ai..'" cy="'..aj..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ai.."' y='"..aj-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cI;MapYRatio=cJ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bC=vec3(core.getConstructWorldPos())local ai=960+bC.x/cI;local aj=540+bC.y/cJ;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ai-80)/19.20,(aj-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cK(cL)return type(cL)=='number'end;local function cM(cL)return type(tonumber(cL))=='number'end;local function cN(cO)return type(cO)=='table'end;local function cP(cQ)return type(cQ)=='string'end;local function cR(a0)return cN(a0)and cK(a0.x and a0.y and a0.z)end;local function cS(cT)return cN(cT)and cK(cT.latitude and cT.longitude and cT.altitude and cT.bodyId and cT.systemId)end;local cU=math.pi/180;local cV=180/math.pi;local cW=1e-10;local cX=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cY='::pos{'..cX..','..cX..','..cX..','..cX..','..cX..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local cZ=utils.clamp;local function c_(d0,d1)if d0==0 then return math.abs(d1)<1e-09 end;if d1==0 then return math.abs(d0)<1e-09 end;return math.abs(d0-d1)<math.max(math.abs(d0),math.abs(d1))*cW end;local function d2(cL)local a1=string.gsub(string.reverse(b('%.4f',cL)),'^0*%.?','')return a1==''and'0'or string.reverse(a1)end;local function d3(d4)if cR(d4)then return b('{x=%.3f,y=%.3f,z=%.3f}',d4.x,d4.y,d4.z)end;if cN(d4)and not getmetatable(d4)then local d5={}local d6=next(d4)if type(d6)=='nil'or d6==1 then d5=d4 else for Z,a0 in pairs(d4)do local bQ=d3(a0)if type(Z)=='number'then table.insert(d5,b('[%s]=%s',Z,bQ))else table.insert(d5,b('%s=%s',Z,bQ))end end end;return b('{%s}',table.concat(d5,','))end;if cP(d4)then return b("'%s'",d4:gsub("'",[[\']]))end;return tostring(d4)end;local d7={}d7.__index=d7;d7.__tostring=function(d4,d8)local d9={}for Z in pairs(d4)do table.insert(d9,Z)end;table.sort(d9)local d5={}for _,Z in ipairs(d9)do local bQ=d3(d4[Z])if type(Z)=='number'then table.insert(d5,b('[%s]=%s',Z,bQ))else table.insert(d5,b('%s=%s',Z,bQ))end end;if d8 then return b('%s%s',d8,table.concat(d5,',\n'..d8))end;return b('{%s}',table.concat(d5,','))end;d7.__eq=function(da,db)return da.planetarySystemId==db.planetarySystemId and da.bodyId==db.bodyId and c_(da.radius,db.radius)and c_(da.center.x,db.center.x)and c_(da.center.y,db.center.y)and c_(da.center.z,db.center.z)and c_(da.GM,db.GM)end;local function dc(dd,de,df,dg,dh)assert(cM(dd),'Argument 1 (planetarySystemId) must be a number:'..type(dd))assert(cM(de),'Argument 2 (bodyId) must be a number:'..type(de))assert(cM(df),'Argument 3 (radius) must be a number:'..type(df))assert(cN(dg),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dg))assert(cM(dh),'Argument 5 (GM) must be a number:'..type(dh))return setmetatable({planetarySystemId=tonumber(dd),bodyId=tonumber(de),radius=tonumber(df),center=vec3(dg),GM=tonumber(dh)},d7)end;local di={}di.__index=di;di.__tostring=function(dj)return b('::pos{%d,%d,%s,%s,%s}',dj.systemId,dj.bodyId,d2(dj.latitude*cV),d2(dj.longitude*cV),d2(dj.altitude))end;di.__eq=function(da,db)return da.bodyId==db.bodyId and da.systemId==db.systemId and c_(da.latitude,db.latitude)and c_(da.altitude,db.altitude)and(c_(da.longitude,db.longitude)or c_(da.latitude,math.pi/2)or c_(da.latitude,-math.pi/2))end;local function dk(dl,de,dm,dn,bq)local dd=dl;if cP(dl)and not dn and not bq and not de and not dm then dd,de,dm,dn,bq=string.match(dl,cY)assert(dd,'Argument 1 (position string) is malformed.')else assert(cM(dd),'Argument 1 (systemId) must be a number:'..type(dd))assert(cM(de),'Argument 2 (bodyId) must be a number:'..type(de))assert(cM(dm),'Argument 3 (latitude) must be in degrees:'..type(dm))assert(cM(dn),'Argument 4 (longitude) must be in degrees:'..type(dn))assert(cM(bq),'Argument 5 (altitude) must be in meters:'..type(bq))end;dd=tonumber(dd)de=tonumber(de)dm=tonumber(dm)dn=tonumber(dn)bq=tonumber(bq)if de==0 then return setmetatable({latitude=dm,longitude=dn,altitude=bq,bodyId=de,systemId=dd},di)end;return setmetatable({latitude=cU*cZ(dm,-90,90),longitude=cU*(dn%360),altitude=bq,bodyId=de,systemId=dd},di)end;local dp={}dp.__index=dp;dp.__tostring=function(d4,d8)local dq=d8 and d8 ..'  'local dr={}local d9={}for Z in pairs(d4)do table.insert(d9,Z)end;table.sort(d9)for _,ds in ipairs(d9)do bdy=d4[ds]local dt=d7.__tostring(bdy,dq)if d8 then table.insert(dr,b('[%s]={\n%s\n%s}',ds,dt,d8))else table.insert(dr,b('  [%s]=%s',ds,dt))end end;if d8 then return b('\n%s%s%s',d8,table.concat(dr,',\n'..d8),d8)end;return b('{\n%s\n}',table.concat(dr,',\n'))end;local function du(dv)local atlas={}local pid;for _,a0 in pairs(dv)do local ao=a0.planetarySystemId;if type(ao)~='number'then error('Invalid planetary system ID: '..tostring(ao))elseif pid and ao~=pid then error('Mismatch planetary system IDs: '..ao..' and '..pid)end;local dw=a0.bodyId;if type(dw)~='number'then error('Invalid body ID: '..tostring(dw))elseif atlas[dw]then error('Duplicate body ID: '..tostring(dw))end;setmetatable(a0.center,getmetatable(vec3.unit_x))atlas[dw]=setmetatable(a0,d7)pid=ao end;return setmetatable(atlas,dp)end;PlanetaryReference={}local function dx(dv)return setmetatable({galaxyAtlas=dv or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cO,i)if type(i)=='number'then local system=cO.galaxyAtlas[i]return du(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d4)return function(cO,Z)local dy,nv=next(cO,Z)return dy,nv and du(nv)end,d4.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d4)local dz={}for _,dA in pairs(d4 or{})do local dB=dA:getPlanetarySystemId()local dC=dp.__tostring(dA,'    ')table.insert(dz,b('  [%s]={%s\n  }',dB,dC))end;return b('{\n%s\n}\n',table.concat(dz,',\n'))end;PlanetaryReference.BodyParameters=dc;PlanetaryReference.MapPosition=dk;PlanetaryReference.PlanetarySystem=du;function PlanetaryReference.createBodyParameters(dD,de,dE,dF,dG,dH,dI)assert(cM(dD),'Argument 1 (planetarySystemId) must be a number:'..type(dD))assert(cM(de),'Argument 2 (bodyId) must be a number:'..type(de))assert(cM(dE),'Argument 3 (surfaceArea) must be a number:'..type(dE))assert(cN(dF),'Argument 4 (aPosition) must be an array or vec3:'..type(dF))assert(cN(dG),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dG))assert(cM(dH),'Argument 6 (altitude) must be in meters:'..type(dH))assert(cM(dI),'Argument 7 (gravityAtPosition) must be number:'..type(dI))local df=math.sqrt(dE/4/math.pi)local distance=df+dH;local dJ=vec3(dF)+distance*vec3(dG)local dh=dI*distance*distance;return dc(dD,de,df,dJ,dh)end;PlanetaryReference.isMapPosition=cS;function PlanetaryReference:getPlanetarySystem(dl)if i==nil then i=0 end;if nv==nil then nv=0 end;local dD=dl;if cS(dl)then dD=dl.systemId end;if type(dD)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dp then system=du(system)end;return system end end end;function dp:castIntersections(dK,dL,dM,dN)local dM=dM or function(dO)return 1.05*dO.radius end;local dP={}if dN then for _,i in ipairs(dN)do dP[i]=self[i]end else dN={}for Z,dO in pairs(self)do table.insert(dN,Z)dP[Z]=dO end end;local function dQ(dR,dS)local dT=dP[dR].center-dK;local dU=dP[dS].center-dK;return dT:len()<dU:len()end;table.sort(dN,dQ)local dV=dL:normalize()for i,ao in ipairs(dN)do local dO=dP[ao]local dW=dO.center-dK;local df=dM(dO)local dX=dW:dot(dV)local dY=dX^2-(dW:len2()-df^2)if dY>=0 then local dZ=math.sqrt(dY)local d_=dX+dZ;local e0=dX-dZ;if e0>0 then return dO,d_,e0 elseif d_>0 then return dO,d_,nil end end end;return nil,nil,nil end;function dp:closestBody(e1)assert(type(e1)=='table','Invalid coordinates.')local e2,dO;local e3=vec3(e1)for _,e4 in pairs(self)do local e5=(e4.center-e3):len2()if not dO or e5<e2 then dO=e4;e2=e5 end end;return dO end;function dp:convertToBodyIdAndWorldCoordinates(dl)local e6=dl;if cP(dl)then e6=dk(dl)end;if e6.bodyId==0 then return 0,vec3(e6.latitude,e6.longitude,e6.altitude)end;local e4=self:getBodyParameters(e6)if e4 then return e6.bodyId,e4:convertToWorldCoordinates(e6)end end;function dp:getBodyParameters(dl)local de=dl;if cS(dl)then de=dl.bodyId end;assert(cM(de),'Argument 1 (bodyId) must be a number:'..type(de))return self[de]end;function dp:getPlanetarySystemId()local _,a0=next(self)return a0 and a0.planetarySystemId end;function d7:convertToMapPosition(dg)assert(cN(dg),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dg))local e7=vec3(dg)if self.bodyId==0 then return setmetatable({latitude=e7.x,longitude=e7.y,altitude=e7.z,bodyId=0,systemId=self.planetarySystemId},di)end;local e8=e7-self.center;local distance=e8:len()local bq=distance-self.radius;local dm=0;local dn=0;if not c_(distance,0)then local e9=math.atan(e8.y,e8.x)dn=e9>=0 and e9 or 2*math.pi+e9;dm=math.pi/2-math.acos(e8.z/distance)end;return setmetatable({latitude=dm,longitude=dn,altitude=bq,bodyId=self.bodyId,systemId=self.planetarySystemId},di)end;function d7:convertToWorldCoordinates(dl)local e6=cP(dl)and dk(dl)or dl;if e6.bodyId==0 then return vec3(e6.latitude,e6.longitude,e6.altitude)end;assert(cS(e6),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e6.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e6.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ea=math.cos(e6.latitude)return self.center+(self.radius+e6.altitude)*vec3(ea*math.cos(e6.longitude),ea*math.sin(e6.longitude),math.sin(e6.latitude))end;function d7:getAltitude(dg)return(vec3(dg)-self.center):len()-self.radius end;function d7:getDistance(dg)return(vec3(dg)-self.center):len()end;function d7:getGravity(dg)local eb=self.center-vec3(dg)local ec=eb:len2()return self.GM/ec*eb/math.sqrt(ec)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dx(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cP(cQ)return type(cQ)=='string'end;local function cN(cO)return type(cO)=='table'end;local function c_(d0,d1)if d0==0 then return math.abs(d1)<1e-09 end;if d1==0 then return math.abs(d0)<1e-09 end;return math.abs(d0-d1)<math.max(math.abs(d0),math.abs(d1))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bq)assert(self.body)local distance=bq+self.body.radius;if not c_(distance,0)then local orbit=math.sqrt(self.body.GM/distance)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dl,velocity)assert(self.body)assert(cN(dl)or cP(dl))assert(cN(velocity))local bC=(cP(dl)or PlanetRef.isMapPosition(dl))and self.body:convertToWorldCoordinates(dl)or vec3(dl)local a0=vec3(velocity)local ed=bC-self.body.center;local dU=a0:len2()local ee=ed:len()local ef=self.body.GM;local eg=((dU-ef/ee)*ed-ed:dot(a0)*a0)/ef;local d0=ef/(2*ef/ee-dU)local eh=eg:len()local dV=eg:normalize()local ei=d0*(1-eh)local ej=d0*(1+eh)local ek=ei*dV+self.body.center;local el=eh<=1 and-ej*dV+self.body.center or nil;local em=math.sqrt(d0*ef*(1-eh*eh))local en=el and 2*math.pi*math.sqrt(d0^3/ef)local eo=math.acos(eg:dot(ed)/(eh*ee))if ed:dot(a0)<0 then eo=-(eo-2*math.pi)end;local ep=math.acos((math.cos(eo)+eh)/(1+eh*math.cos(eo)))local eq=ep;if eq<0 then eq=eq+2*math.pi end;local er=eq-eh*math.sin(eq)local es=0;local et=0;local eu=0;if en~=nil then es=er/(2*math.pi/en)et=en-es;eu=et+en/2;if eo-math.pi>0 then et=es;eu=et+en/2 end;if eu>en then eu=eu-en end end;return{periapsis={position=ek,speed=em/ei,circularOrbitSpeed=math.sqrt(ef/ei),altitude=ei-self.body.radius},apoapsis=el and{position=el,speed=em/ej,circularOrbitSpeed=math.sqrt(ef/ej),altitude=ej-self.body.radius},currentVelocity=a0,currentPosition=bC,eccentricity=eh,period=en,eccentricAnomaly=ep,meanAnomaly=er,timeToPeriapsis=et,timeToApoapsis=eu}end;local function ev(ew)local e4=PlanetRef.BodyParameters(ew.planetarySystemId,ew.bodyId,ew.radius,ew.center,ew.GM)return setmetatable({body=e4},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ev(...)end})end;function Kinematics()local Kinematic={}local ex=30000000/3600;local ey=ex*ex;local ez=100;local function eA(a0)return 1/math.sqrt(1-a0*a0/ey)end;function Kinematic.computeAccelerationTime(eB,eC,eD)local eE=ex*math.asin(eB/ex)return(ex*math.asin(eD/ex)-eE)/eC end;function Kinematic.computeDistanceAndTime(eB,eD,eF,eG,eH,eI)eH=eH or 0;eI=eI or 0;local eJ=eB<=eD;local eK=eG*(eJ and 1 or-1)/eF;local eL=-eI/eF;local eM=eK+eL;if eJ and eM<=0 or not eJ and eM>=0 then return-1,-1 end;local eN,eO=0,0;if eK~=0 and eH>0 then local eE=math.asin(eB/ex)local eP=math.pi*(eK/2+eL)local eQ=eK*eH;local eR=ex*math.pi;local a0=function(cO)local aM=(eP*cO-eQ*math.sin(math.pi*cO/2/eH)+eR*eE)/eR;local eS=math.tan(aM)return ex*eS/math.sqrt(eS*eS+1)end;local eT=eJ and function(cQ)return cQ>=eD end or function(cQ)return cQ<=eD end;eO=2*eH;if eT(a0(eO))then local eU=0;while math.abs(eO-eU)>0.5 do local cO=(eO+eU)/2;if eT(a0(cO))then eO=cO else eU=cO end end end;local eV=eB;local eW=eO/ez;for eX=1,ez do local speed=a0(eX*eW)eN=eN+(speed+eV)*eW/2;eV=speed end;if eO<2*eH then return eN,eO end;eB=eV end;local eE=ex*math.asin(eB/ex)local eY=(ex*math.asin(eD/ex)-eE)/eM;local eZ=ey*math.cos(eE/ex)/eM;local distance=eZ-ey*math.cos((eM*eY+eE)/ex)/eM;return distance+eN,eY+eO end;function Kinematic.computeTravelTime(eB,eC,distance)if distance==0 then return 0 end;if eC>0 then local eE=ex*math.asin(eB/ex)local eZ=ey*math.cos(eE/ex)/eC;return(ex*math.acos(eC*(eZ-distance)/ey)-eE)/eC end;assert(eB>0,'Acceleration and initial speed are both zero.')return distance/eB end;function Kinematic.lorentz(a0)return eA(a0)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()InAtmo=f()>0;function getDistanceDisplayString(distance)local e_=distance>100000;local a1=""if e_ then a1=round(distance/1000/200,1).." SU"elseif distance<1000 then a1=round(distance,1).." M"else a1=round(distance/1000,1).." KM"end;return a1 end;function getDistanceDisplayString2(distance)local e_=distance>100000;local a1=""if e_ then a1=round(distance/1000/200,2).." SU"elseif distance<1000 then a1=round(distance,2).." M"else a1=round(distance/1000,2).." KM"end;return a1 end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(f0)local f1=a(f0/3600)local f2=a(f0/60%60)local f0=a(f0%60)if f0<0 or f1<0 or f2<0 then return"0s"end;if f1>0 then return f1 .."h "..f2 .."m "..f0 .."s"elseif f2>0 then return f2 .."m "..f0 .."s"else return f0 .."s"end end;function getMagnitudeInDirection(bh,dL)bh=vec3(bh)dL=vec3(dL):normalize()local a1=bh*dL;return a1.x+a1.y+a1.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f3=0;for Z,a0 in pairs(atlas[0])do f3=f3+1;if f3==AutopilotTargetIndex then if a0.center then AutopilotTargetName=a0.name;AutopilotTargetPlanet=galaxyReference[0][Z]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,o=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)s=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;system.addDataToWidget(widgetMaxMassText,widgetMaxMass)system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=a0 end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f4=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return f4 end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local f5,f6=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,f7;if not TurnBurn then _,f7=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,f7=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local f8=0;local f9=0;if brakeDistance+f5<AutopilotDistance then f8=AutopilotDistance-(brakeDistance+f5)f9=Kinematic.computeTravelTime(8333.0556,0,f8)else local fa=(AutopilotDistance-brakeDistance)/f5;f5=AutopilotDistance-brakeDistance;f6=f6*fa end;if AutopilotBraking then return f7 elseif AutopilotCruising then return f9+f7 else return f6+brakeTime+f9 end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,o,k(),0,0,LastMaxBrake-s*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,o,k(),0,0,LastMaxBrake-s*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,o,k(),Nav:maxForceForward(),warmup,LastMaxBrake-s*k())end;function GetFlightStyle()local fb=Nav.axisCommandManager:getAxisCommandType(0)local bB="TRAVEL"if fb==1 then bB="CRUISE"end;if Autopilot then bB="AUTOPILOT"end;return bB end;function round(cX,fc)local fd=10^(fc or 0)return a(cX*fd+0.5)/fd end;function tablelength(fe)local f3=0;for _ in pairs(fe)do f3=f3+1 end;return f3 end;function BeginProfile(ff)ProfileTimeStart=system.getTime()end;function EndProfile(ff)local fg=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fg;ProfileCount=ProfileCount+1;if fg>ProfileTimeMax then ProfileTimeMax=fg end;if fg<ProfileTimeMin then ProfileTimeMin=fg end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fh=ProfileTimeSum;local fi=ProfileTimeSum/ProfileCount;local fj=ProfileTimeMin;local fk=ProfileTimeMax;local fl=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fh,fi,fj,fk,fl))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fm=unit.getAtmosphereDensity()if door and(fm>0 or fm==0 and core_altitude<10000)then for _,a0 in pairs(door)do a0.activate()end end;if forcefield and(fm>0 or fm==0 and core_altitude<10000)then for _,a0 in pairs(forcefield)do a0.activate()end end;if dbHud then if not wipedDatabank then for Z,a0 in pairs(AutoVariables)do dbHud.setStringValue(a0,json.encode(_G[a0]))end;for Z,a0 in pairs(SaveableVariables)do dbHud.setStringValue(a0,json.encode(_G[a0]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fn)if fn=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()distance=AutopilotDistance;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(brakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(maxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not InAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=true elseif unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end elseif fn=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fo;fo=radar_1.getData():find('identifiedConstructs":%[%]')if hasSpaceRadar and EmergencyWarp then local ao,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ao~=nil and ao~=""then if math.floor(distance)<EmergencyWarpDistance and notTriedEmergencyWarp then emergencyWarp=true;notTriedEmergencyWarp=false end end end;if fo==nil and perisPanelID==nil then peris=1;ToggleRadarPanel()end;if fo~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fp=radar_1.getEntries()radarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fp)local fq={}for Z,a0 in pairs(fp)do if radar_1.hasMatchingTransponder(a0)==1 then fq[#fq+1]=a0 end end;if#fq>0 then local aj=15;radarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],radarMessage,aj)for Z,a0 in pairs(fq)do aj=aj+20;radarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],radarMessage,aj,radar_1.getConstructName(a0))end end elseif radar_1 then local fr;fr=radar_1.getData():find('worksInEnvironment":false')if fr then radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then peris=0;ToggleRadarPanel()end end;if warpdrive~=nil then if emergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then msgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"msgTimer=5;unit.setTimer("emergencyWarpTick",5)emergencyWarp=false else msgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;emergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end;local ar={}local bB=GetFlightStyle()DrawOdometer(ar,totalDistanceTrip,totalDistanceTravelled,bB,flightTime)checkDamage(ar)LastOdometerOutput=table.concat(ar,"")collectgarbage("collect")elseif fn=="reEmergencyWarp"then notTriedEmergencyWarp=true;emergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif fn=="msgTick"then local ar={}DisplayMessage(ar,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif fn=="emergencyWarpTick"then msgText="EMERGENCY WARP ACTIVATED"msgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;unit.stopTimer("emergencyWarpTick")elseif fn=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif fn=="apTick"then local l=Nav.control.isRemoteControlled;yawInput2=0;rollInput2=0;pitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fs=system.getMouseDeltaX()local ft=system.getMouseDeltaY()targetGroundAltitude=Nav:getTargetGroundAltitude()local fu=0.002;local fv=velMag>8334;if not fv and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fv;if antigrav and antigrav.getState()==1 and not desiredBaseAltitude then desiredBaseAltitude=antigrav.getBaseAltitude()end;if BrakeIsOn then brakeInput=1 else brakeInput=0 end;core_altitude=core.getAltitude()if core_altitude==0 then core_altitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local ar={}HUDPrologue(ar)if showHud then updateHud(ar)else DisplayOrbit(ar)DrawWarnings(ar)end;HUDEpilogue(ar)ar[#ar+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if msgText~="empty"then DisplayMessage(ar,msgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(ar)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then simulatedX=screen_1.getMouseX()*2560;simulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(ar)if screen_1.getMouseState()==1 then CheckButtons()end;ar[#ar+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then simulatedX=simulatedX+fs;simulatedY=simulatedY+ft end;SetButtonContains()DrawButtons(ar)if not Animating and not Animated then local fw=table.concat(ar,"")ar={}ar[#ar+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ar[#ar+1]=GalaxyMapHTML;ar[#ar+1]=fw;ar[#ar+1]="</body>"Animating=true;ar[#ar+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ar,"")system.setScreen(content)elseif Animated then local fw=table.concat(ar,"")ar={}ar[#ar+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ar[#ar+1]=GalaxyMapHTML;ar[#ar+1]=fw;ar[#ar+1]="</body>"end;if not Animating then ar[#ar+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end else CheckButtons()simulatedX=0;simulatedY=0 end else simulatedX=simulatedX+fs;simulatedY=simulatedY+ft;distance=math.sqrt(simulatedX*simulatedX+simulatedY*simulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if simulatedX>0 and simulatedX>DeadZone then yawInput2=yawInput2-(simulatedX-DeadZone)*MouseXSensitivity elseif simulatedX<0 and simulatedX<DeadZone*-1 then yawInput2=yawInput2-(simulatedX+DeadZone)*MouseXSensitivity else yawInput2=0 end;if simulatedY>0 and simulatedY>DeadZone then pitchInput2=pitchInput2-(simulatedY-DeadZone)*MouseYSensitivity elseif simulatedY<0 and simulatedY<DeadZone*-1 then pitchInput2=pitchInput2-(simulatedY+DeadZone)*MouseYSensitivity else pitchInput2=0 end elseif userControlScheme=="Mouse"then simulatedX=0;simulatedY=0;pitchInput2=(-utils.smoothstep(ft,-100,100)+0.5)*2*mousePitchFactor;yawInput2=(-utils.smoothstep(fs,-100,100)+0.5)*2*mouseYawFactor else simulatedX=0;simulatedY=0 end;CheckButtons()if distance>DeadZone then DrawCursorLine(ar)end else SetButtonContains()DrawButtons(ar)end;ar[#ar+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end;ar[#ar+1]=[[</svg></body>]]content=table.concat(ar,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if AutoBrake and AutopilotTargetName~="None"and(vec3(core.getConstructWorldPos())-vec3(AutopilotTargetPlanet.center)):len()<=brakeDistance then brakeInput=1;if planet.name==AutopilotTargetPlanet.name and orbit.apoapsis~=nil and orbit.eccentricity<1 then brakeInput=0;AutoBrake=false end end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)end;brakeDistance=brakeDistance;brakeTime=brakeTime;local fx=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fy=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fz=getMagnitudeInDirection(fy,AutopilotShipUp)local fA=getMagnitudeInDirection(fy,AutopilotShipRight)local fB=-fA*AutopilotDistance*velMag*fu;local fC=-fz*AutopilotDistance*velMag*fu;fx=AutopilotTargetCoords+-fB*vec3(AutopilotShipRight)+-fC*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fx)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fD=true;local fE=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fE)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fD=AlignToWorldVector((fx-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fD=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fD then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;brakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(ar,"Autopilot completed, orbit established")brakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fD then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fD then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fF=0;local bC=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fG=bC-vec3(core.getConstructWorldPos())local fH=vec3(fG):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fI=vec3(fG):project_on(vec3(core.getConstructWorldOrientationRight())):len()local distance=math.sqrt(fH*fH+fI*fI)AlignToWorldVector(fG:normalize())local fJ=40;local fK=distance<fJ;local fL=100;local fM=utils.clamp((distance-fJ)/2,10,fL)pitchInput2=0;local fD=math.abs(yawInput2)<0.1;if fD and velMag<fM and not fK then BrakeIsOn=false;fF=-10 else BrakeIsOn=true;fF=0 end;local bs=vec3(core.getConstructWorldOrientationForward())local bt=vec3(core.getConstructWorldOrientationRight())local br=vec3(core.getWorldVertical())local aK=getPitch(br,bs,bt)local fN=1.0;if math.abs(fF-aK)>fN then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fF-aK)local fO=pitchPID:get()pitchInput2=fO end end;local bS=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then autoRoll=true;if Reentry then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then Reentry=false end end;local bq=core_altitude;local fP=HoldAltitude-bq;local fQ=500+velMag;local fF=(utils.smoothstep(fP,-fQ,fQ)-0.5)*2*MaxPitch;if not AltitudeHold then fF=0 end;local fR=pitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bj=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bj)local fS=bj:len()-bj:project_on(bS):len()local ad=json.decode(unit.getData()).maxBrake;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local fT=velocity:len()-math.abs(bT)local fU=vec3(core.getWorldAirFrictionAcceleration())if ad~=nil then LastMaxBrake=ad;brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fT,0,core.getConstructMass(),0,0,ad+(fU:len()-fU:project_on(bS):len())*core.getConstructMass())else brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fT,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if fS<=brakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and fS>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=fS end;pitchInput2=fR;local fV=-1;if BrakeLanding then fF=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)if vBooster then fV=vBooster.distance()elseif hover then fV=hover.distance()end;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;if fV>-1 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;gearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)upAmount=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and velocity:normalize():dot(-bS)<0.99 then BrakeIsOn=true elseif bT<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fF<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;local bs=vec3(core.getConstructWorldOrientationForward())local bt=vec3(core.getConstructWorldOrientationRight())local br=vec3(core.getWorldVertical())local aK=getPitch(br,bs,bt)local fN=0.1;if math.abs(fF-aK)>fN then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fF-aK)local fO=pitchPID:get()pitchInput2=pitchInput2+fO end end;LastEccentricity=orbit.eccentricity;if antigrav and core_altitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local fW=core_altitude-antigrav.getBaseAltitude()if core_altitude>800 and fW<-200 then desiredBaseAltitude=math.max(core_altitude+100,1000)elseif fW>200 then desiredBaseAltitude=core_altitude-100 end else local fW=AntigravTargetAltitude-core_altitude;local velocity=vec3(core.getWorldVelocity())local bS=vec3(core.getWorldVertical())*-1;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local fX=290;local fY=-290;if unit.getClosestPlanetInfluence()>0.3 then fY=-190 end;fY=math.min(math.max(fY,-math.abs(fW)/20.0),-10)fX=math.max(math.min(fX,math.abs(fW)/20.0),10)if bT<fY then desiredBaseAltitude=core_altitude+100 elseif bT>fX then desiredBaseAltitude=math.max(core_altitude-100,1000)elseif math.abs(fW)>150 or math.abs(bT)>15 then if math.abs(bT)>10 then desiredBaseAltitude=core_altitude+math.max(math.min(fW-bT/10.0,100),-100)else desiredBaseAltitude=core_altitude+math.max(math.min(fW,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bT)<10 and math.abs(fW)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local fZ=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fZ=math.max(fZ,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local f_=pitchInput+pitchInput2+system.getControlDeviceForwardInput()local g0=rollInput+rollInput2+system.getControlDeviceYawInput()local g1=yawInput+yawInput2-system.getControlDeviceLeftRightInput()local g2=brakeInput;local g3=vec3(core.getWorldVertical())local g4=vec3(core.getConstructWorldOrientationUp())local g5=vec3(core.getConstructWorldOrientationForward())local g6=vec3(core.getConstructWorldOrientationRight())local g7=vec3(core.getWorldVelocity())local g8=vec3(core.getWorldVelocity()):normalize()local g9=getRoll(g3,g5,g6)local ga=math.abs(g9)local gb=utils.sign(g9)local gc=vec3(core.getWorldAngularVelocity())local gd=f_*pitchSpeedFactor*g6+g0*rollSpeedFactor*g5+g1*yawSpeedFactor*g4;if g3:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local ge=1.0;if autoRoll==true and ga>ge and g0==0 then local gf=utils.clamp(0,ga-30,ga+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gf-g9)local gg=rollPID:get()gd=gd+gg*g5 end;local gh=20.0;if turnAssist==true and ga>gh and f_==0 and g1==0 then local gi=turnAssistFactor*0.1;local gj=turnAssistFactor*0.025;local gk=(ga-gh)/(180-gh)*180;local gl=0;if gk<90 then gl=gk/90 elseif gk<180 then gl=(180-gk)/90 end;gl=gl*gl;local gm=-gb*gj*(1.0-gl)local gn=gi*gl;gd=gd+gn*g6+gm*g4 end end;local go=1;local gp=0;local gq=1;local gr=fZ*(gd-gc)local gs=vec3(core.getWorldAirFrictionAngularAcceleration())gr=gr-gs;Nav:setEngineTorqueCommand('torque',gr,go,'airfoil','','',gq)local gt=-g2*(brakeSpeedFactor*g7+brakeFlatFactor*g8)Nav:setEngineForceCommand('brake',gt)local gu=''local gv=vec3()local gw=false;local gx='thrust analog longitudinal'local gy=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gy==axisCommandType.byThrottle then local gz=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gx,axisCommandId.longitudinal)Nav:setEngineForceCommand(gx,gz,go)elseif gy==axisCommandType.byTargetSpeed then local gz=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gu=gu..' , '..gx;gv=gv+gz;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gw=true end end;local gA='thrust analog lateral'local gB=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gB==axisCommandType.byThrottle then local gC=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gA,axisCommandId.lateral)Nav:setEngineForceCommand(gA,gC,go)elseif gB==axisCommandType.byTargetSpeed then local gD=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gu=gu..' , '..gA;gv=gv+gD end;local gE='thrust analog vertical'local gF=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gF==axisCommandType.byThrottle then local gG=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gE,axisCommandId.vertical)if upAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gE,gG,go,'airfoil','ground','',gq)else Nav:setEngineForceCommand(gE,vec3(),go)end elseif gF==axisCommandType.byTargetSpeed then local gH=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gu=gu..' , '..gE;gv=gv+gH end;if gv:len()>constants.epsilon then if brakeInput~=0 or gw or math.abs(g8:dot(g5))<0.95 then gu=gu..', brake'end;Nav:setEngineForceCommand(gu,gv,gp,'','','',gq)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif isboosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,a1=coroutine.resume(beginSetup)if a1 then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gI)if gI=="gear"then gearExtended=not gearExtended;if gearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or core_altitude<ReentryAltitude)then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;gearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gI=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gI=="forward"then pitchInput=pitchInput-1 elseif gI=="backward"then pitchInput=pitchInput+1 elseif gI=="left"then rollInput=rollInput-1 elseif gI=="right"then rollInput=rollInput+1 elseif gI=="yawright"then yawInput=yawInput-1 elseif gI=="yawleft"then yawInput=yawInput+1 elseif gI=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gI=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gI=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gI=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gI=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gI=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gI=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif gI=="option2"then DecrementAutopilotTargetIndex()toggleView=false elseif gI=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;toggleView=false;ToggleWidgets()elseif gI=="option4"then ToggleAutopilot()toggleView=false elseif gI=="option5"then ToggleTurnBurn()toggleView=false elseif gI=="option6"then ToggleAltitudeHold()toggleView=false elseif gI=="option7"then wipeSaveVariables()toggleView=false elseif gI=="option8"then ToggleFollowMode()toggleView=false elseif gI=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;toggleView=false elseif gI=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gI=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gI=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gI=="booster"then isboosting=not isboosting;if isboosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gI=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gI=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gI=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gI=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gI=="warp"then if warpdrive~=nil then if not emergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then msgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")emergencyWarp=false;msgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gI)if gI=="forward"then pitchInput=pitchInput+1 elseif gI=="backward"then pitchInput=pitchInput-1 elseif gI=="left"then rollInput=rollInput+1 elseif gI=="right"then rollInput=rollInput-1 elseif gI=="yawright"then yawInput=yawInput+1 elseif gI=="yawleft"then yawInput=yawInput-1 elseif gI=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gI=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gI=="up"then upAmount=upAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gI=="down"then upAmount=upAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gI=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gI=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gI=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;simulatedX=0;simulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gI=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gI=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gI)if gI=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gI=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gI=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gI=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(ar,gJ)if gJ~="empty"then ar[#ar+1]=[[<text class="msg" x="50%%" y="310" >]]for gK in string.gmatch(gJ,"([^\n]+)")do ar[#ar+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gK)end;ar[#ar+1]=[[</text>]]end;if msgTimer~=0 then unit.setTimer("msgTick",msgTimer)msgTimer=0 end end;function updateDistance()local a8=system.getTime()local velocity=vec3(core.getWorldVelocity())local bz=vec3(velocity):len()local gL=a8-lastTravelTime;if bz>1.38889 then bz=bz/1000;local gM=bz*(a8-lastTravelTime)totalDistanceTravelled=totalDistanceTravelled+gM;totalDistanceTrip=totalDistanceTrip+gM end;flightTime=flightTime+gL;totalFlightTime=totalFlightTime+gL;lastTravelTime=a8 end;function updateMass()local gN=0;for Z in pairs(elementsID)do gN=gN+core.getElementMassById(elementsID[Z])end;return gN end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
