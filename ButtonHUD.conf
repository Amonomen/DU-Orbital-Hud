name: ButtonsHud - Dimencia and Archaegeo v4.72 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement. 
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.72;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;AntigravTargetAltitude=nil;CoreAltitude=core.getAltitude()ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=0;local S=k()local T=16;local U=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY"}AutoVariables={"EmergencyWarp","HasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo"}if dbHud then local V=dbHud.hasKey;if not useTheseSettings then for W,X in pairs(SaveableVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end end;for W,X in pairs(AutoVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end;if A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;R=S-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for W in pairs(ElementsID)do local a0=h(ElementsID[W])if a0=="landing gear"then HasGear=true end;if a0=="dynamic core"then local a1=e(ElementsID[W])if a1>10000 then T=128 elseif a1>1000 then T=64 elseif a1>150 then T=32 end end;H=H+e(ElementsID[W])if a0=="atmospheric fuel-tank"or a0=="space fuel-tank"or a0=="rocket fuel-tank"then local a1=e(ElementsID[W])local a2=j(ElementsID[W])local a3=0;local a4=system.getTime()if a0=="atmospheric fuel-tank"then local a5=400;local a6=35.03;if a1>10000 then a5=51200;a6=5480 elseif a1>1300 then a5=6400;a6=988.67 elseif a1>150 then a5=1600;a6=182.67 end;a3=a2-a6;if fuelTankOptimizationAtmo>0 then a5=a5+a5*fuelTankOptimizationAtmo*0.05 end;if a3>a5 then a5=a3 end;E[#E+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="rocket fuel-tank"then local a5=320;local a6=173.42;if a1>65000 then a5=40000;a6=25740 elseif a1>6000 then a5=5120;a6=4720 elseif a1>700 then a5=640;a6=886.72 end;a3=a2-a6;if fuelTankOptimizationRocket>0 then a5=a5+a5*fuelTankOptimizationRocket*0.05 end;if a3>a5 then a5=a3 end;G[#G+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="space fuel-tank"then local a5=2400;local a6=182.67;if a1>10000 then a5=76800;a6=5480 elseif a1>1300 then a5=9600;a6=988.67 end;a3=a2-a6;if fuelTankOptimizationSpace>0 then a5=a5+a5*fuelTankOptimizationSpace*0.05 end;if a3>a5 then a5=a3 end;F[#F+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,X in pairs(door)do X.deactivate()end end;if forcefield then for _,X in pairs(forcefield)do X.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then if GearExtended==nil then GearExtended=Nav.control.isAnyLandingGearExtended()==1 end;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(0)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a7,a8)if a7==nil then a7=core.g()end;a7=round(a7,5)if a8~=nil and a8 or(D==nil or D~=a7)then local a9=c(unit.getData()).maxBrake;if a9~=nil then LastMaxBrake=a9 end;if f()>0 then LastMaxBrakeInAtmo=a9 end;D=a7 end end;function MakeButton(aa,ab,ac,ad,ae,af,ag,ah,ai)local aj={enableName=aa,disableName=ab,width=ac,height=ad,x=ae,y=af,toggleVar=ag,toggleFunction=ah,drawCondition=ai,hovered=false}table.insert(r,aj)return aj end;function AddLocationsToAtlas()for W,X in pairs(SavedLocations)do table.insert(atlas[0],X)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a0=#SavedLocations..". "..planet.name;if radar_1 then local ak,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ak~=nil and ak~=""then a0=a0 .." "..radar_1.getConstructName(ak)end end;local al={position=position,name=a0,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=al;table.insert(atlas[0],al)MsgText="Location saved as "..a0 else MsgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local am=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then am=W end end;if am>-1 then table.remove(atlas[0],am)end;am=-1;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then MsgText=X.name.." saved location cleared"am=W;break end end;if am~=-1 then table.remove(SavedLocations,am)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(an)an[#an+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ao,ap,ae,af,ac,ad)if ao>ae and ao<ae+ac and ap>af and ap<af+ad then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not GearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=CoreAltitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(an)local aq=0;p=""currentConstructMass=k()local ar=H;local as=0;local at=100;local au=0;local av=0;local aw=0;local ax=""for W in pairs(ElementsID)do local a1=0;local ay=0;ay=e(ElementsID[W])a1=g(ElementsID[W])as=as+a1;if a1<ay then if a1==0 then av=av+1 else au=au+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[W]))local ae=position.x-T;local af=position.y-T;local az=position.z-T;table.insert(m,core.spawnArrowSticker(ae,af,az+1,"down"))table.insert(m,core.spawnArrowSticker(ae,af,az+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ae+1,af,az,"north"))table.insert(m,core.spawnArrowSticker(ae+1,af,az,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ae-1,af,az,"south"))table.insert(m,core.spawnArrowSticker(ae-1,af,az,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ae,af-1,az,"east"))table.insert(m,core.spawnArrowSticker(ae,af-1,az,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ae,af+1,az,"west"))table.insert(m,core.spawnArrowSticker(ae,af+1,az,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[W])end elseif I and#m>0 and m[11]==ElementsID[W]then for aA in pairs(m)do core.deleteSticker(m[aA])end;m={}end end;aq=a(as*100/ar)if currentConstructMass<S then at=math.ceil(100*(currentConstructMass-updateMass())/R)S=currentConstructMass end;if at<100 or aq<100 then an[#an+1]=[[<g class="pbright txt">]]if at<100 then aw=a(at*2.55)ax=b("rgb(%d,%d,%d)",255-aw,aw,0)an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],ax,at)end;aw=a(aq*2.55)ax=b("rgb(%d,%d,%d)",255-aw,aw,0)if aq<100 then an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ax,aq)if av>0 then an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ax,av,au)elseif au>0 then an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ax,au)end end;an[#an+1]=[[<\g>]]end end;function DrawCursorLine(an)local aB=a(utils.clamp(Distance/(u/4)*255,0,255))an[#an+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aB,a(PrimaryG+0.5)-aB,a(PrimaryB+0.5)-aB)end;function getPitch(aC,aD,aE)local aF=aC:cross(aE):normalize_inplace()local aG=math.acos(utils.clamp(aF:dot(-aD),-1,1))*constants.rad2deg;if aF:cross(-aD):dot(aE)<0 then aG=-aG end;return aG end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 elseif A then if B then for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,d(nil))end;for W,X in pairs(AutoVariables)do if X~="SavedLocations"then dbHud.setStringValue(X,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe"B=true end end end;function CheckButtons()for _,X in pairs(r)do if X.hovered then X.toggleFunction()X.hovered=false end end end;function SetButtonContains()local ae=SimulatedX+u/2;local af=SimulatedY+v/2;for _,X in pairs(r)do X.hovered=Contains(ae,af,X.x,X.y,X.width,X.height)end end;function DrawButton(an,aH,hover,ae,af,aI,aJ,aK,aL,aM,aN)if type(aM)=="function"then aM=aM()end;if type(aN)=="function"then aN=aN()end;an[#an+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ae,af,aI,aJ)if aH then an[#an+1]=b("%s'",aK)else an[#an+1]=aL end;if hover then an[#an+1]=" style='stroke:white; stroke-width:2'"else an[#an+1]=" style='stroke:black; stroke-width:1'"end;an[#an+1]="></rect>"an[#an+1]=b("<text x='%f' y='%f' font-size='24' fill='",ae+aI/2,af+aJ/2+5)if aH then an[#an+1]="black"else an[#an+1]="white"end;an[#an+1]="' text-anchor='middle' font-family='Montserrat'>"if aH then an[#an+1]=b("%s</text>",aM)else an[#an+1]=b("%s</text>",aN)end end;function DrawButtons(an)local aO="rgb(50,50,50)'"local aP="rgb(210,200,200)"local aQ=DrawButton;for _,X in pairs(r)do local ab=X.disableName;local aa=X.enableName;if type(ab)=="function"then ab=ab()end;if type(aa)=="function"then aa=aa()end;if not X.drawCondition or X.drawCondition()then aQ(an,X.toggleVar(),X.hovered,X.x,X.y,X.width,X.height,aP,aO,ab,aa)end end end;function DrawTank(an,Q,ae,aR,aS,aT,aU,aV)local aW=1;local aX=2;local aY=3;local aZ=4;local a_=5;local b0=6;local b1=""local b2=0;local b3=fuelY;local b4=fuelY+10;if l()==1 then b3=b3-50;b4=b4-50 end;an[#an+1]=[[<g class="pdim txtfuel">]]if aS=="ATMO"then b1="atmofueltank"elseif aS=="SPACE"then b1="spacefueltank"else b1="rocketfueltank"end;b2=_G[b1 .."_size"]if#aT>0 then for i=1,#aT do local a0=string.sub(aT[i][aX],1,12)local b5=0;for aA=1,b2 do if aT[i][aX]==json.decode(unit[b1 .."_"..aA].getData()).name then b5=aA;break end end;if Q or aU[i]==nil or aV[i]==nil then local b6=0;local b7=0;local b8=0;local b9=0;local a4=system.getTime()if b5~=0 then aV[i]=json.decode(unit[b1 .."_"..b5].getData()).percentage;aU[i]=json.decode(unit[b1 .."_"..b5].getData()).timeLeft;if aU[i]=="n/a"then aU[i]=0 end else b8=j(aT[i][aW])-aT[i][aZ]b6=aT[i][aY]aV[i]=a(0.5+b8*100/b6)b7=aT[i][a_]b9=aT[i][b0]if b7<=b8 then aU[i]=0 else aU[i]=a(0.5+b8/((b7-b8)/(a4-b9)))end;aT[i][a_]=b8;aT[i][b0]=a4 end end;if a0==aR then a0=b("%s %d",aS,i)end;if b5==0 then a0=a0 .." *"end;local ba;if aU[i]==0 then ba="n/a"else ba=FormatTimeString(aU[i])end;if aV[i]~=nil then local aw=a(aV[i]*2.55)local ax=b("rgb(%d,%d,%d)",255-aw,aw,0)local bb=""if ba~="n/a"and aU[i]<120 or aV[i]<5 then if Q then bb=[[class="red"]]end end;an[#an+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ae,b3,bb,a0,ae,b4,ax,aV[i],ba)b3=b3+30;b4=b4+30 end end end;an[#an+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aG=-math.deg(math.atan(velocity.y,velocity.z))+180;aG=aG-90;if aG<0 then aG=360+aG end;if aG>180 then aG=-180+aG-180 end;return-aG end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bc=math.deg(math.atan(velocity.y,velocity.x))-90;if bc<-180 then bc=360+bc end;return bc end;function AlignToWorldVector(bd,be)if be==nil then be=t end;bd=vec3(bd):normalize()local bf=vec3(core.getConstructWorldOrientationForward())-bd;local bg=-getMagnitudeInDirection(bf,core.getConstructWorldOrientationRight())*s;local bh=-getMagnitudeInDirection(bf,core.getConstructWorldOrientationUp())*s;YawInput2=YawInput2-(bg+(bg-n)*DampingMultiplier)PitchInput2=PitchInput2+bh+(bh-o)*DampingMultiplier;n=bg;o=bh;if math.abs(bg)<be and math.abs(bh)<be then return true end;return false end;function getAPEnableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a0==nil then a0="None"end;return"Engage Autopilot: "..a0 end;function getAPDisableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name end;if a0==nil then a0="None"end;return"Disable Autopilot: "..a0 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()else AntigravTargetAltitude=CoreAltitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Parachute Re-Entry cancelled"else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"elseif not planet.atmos then MsgText="Parachute Re-Entry requires a planet with atmospher"elseif unit.getAtmosphereDensity()<=0 and unit.getClosestPlanetInfluence()>0 and not Reentry then Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoroll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed else MsgText="Parachute requirements not met. (Must be out of atmosphere and within gravity influence of a planet with atmosphere"Rentry=false end end end;local bi=50;local bj=260;local bk=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bj,bi,u/2-bj/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bj,bi,u/2-bj/2-50-bk.width,v/2-bi+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bj,bi,u/2-bj/2+bk.width+50,v/2-bi+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bl=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bl.height,bl.x+bl.width+30,bl.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,bl.height,bl.x-200-30,bl.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bi=60;bj=300;local ae=10;local af=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bj,bi,ae,af,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bj,bi,ae+bj+20,af,function()return AltitudeHold end,ToggleAltitudeHold)af=af+bi+20;MakeButton("Engage Autoland","Disable Autoland",bj,bi,ae,af,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bj,bi,ae+bj+20,af,function()return AutoTakeoff end,ToggleAutoTakeoff)af=af+bi+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bj,bi,ae,af,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bj,bi,ae+bj+20,af,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)af=af+bi+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",bj,bi,ae,af,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",bj,bi,ae+bj+20,af,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)af=af+bi+20;MakeButton("Enable AGG","Disable AGG",bj,bi,ae,af,function()return AntigravTargetAltitude~=nil end,ToggleAntigrav,function()return antigrav~=nil end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bj,bi,ae+bj+20,af,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)af=af+bi+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bj*2,bi,ae,af,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(an)local bm=CoreAltitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local bn=vec3(core.getWorldVertical())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local aG=getPitch(bn,bo,bp)local bq=getRoll(bn,bo,bp)local br=bq;local bs=aG;local bt=f()local bu=a(unit.getThrottle())local bv=speed*3.6;local bw=unit.getAxisCommandValue(0)local bx=GetFlightStyle()if bt==0 then if speed>5 then aG=getRelativePitch(velocity)bq=getRelativeYaw(velocity)else aG=0;bq=0 end;bottomText="YAW"end;an[#an+1]=LastOdometerOutput;an[#an+1]=p;an[#an+1]=RadarMessage;if U%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(an,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(an,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(an,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;U=0 end;U=U+1;DrawVerticalSpeed(an,bm,bt)if l()==0 then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(an,bs,br,bt,centerX,centerY,"ROLL")DrawPrograde(an,bs,br,bt,velocity,speed,centerX,centerY)DrawAltitudeDisplay(an,bm,bt)else DrawArtificialHorizon(an,aG,bq,bt,centerX,centerY,"YAW")DrawPrograde(an,bs,br,bt,velocity,speed,centerX,centerY)end end end;DrawThrottle(an,bx,bu,bw)DrawSpeed(an,bv)DrawWarnings(an)DisplayOrbitScreen(an)if screen_2 then local by=vec3(core.getConstructWorldPos())local ae=960+by.x/MapXRatio;local af=450+by.y/MapYRatio;screen_2.moveContent(YouAreHere,(ae-80)/19.2,(af-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(an)local bz=rgb;local bA=Z;local bB=rgb;local bC=Z;if IsInFreeLook()and not brightHud then bz=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bA=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;an[#an+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bz,bz,bB,bB,bA,bA,bC,bC)end;function HUDEpilogue(an)an[#an+1]="</svg>"end;function DrawSpeed(an,bv)local bD=altMeterY+40;local bE=altMeterX;an[#an+1]=[[<g class="pdim txt txtend">]]if l()==1 then bD=75 end;an[#an+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bE,bD,a(bv))end;function DrawOdometer(an,TotalDistanceTrip,TotalDistanceTravelled,bx,bF)local bG=1240;local bH=55;local bI=65;local bt=f()local a7=core.g()local bJ=0;local bK=0;refreshLastMaxBrake(a7)maxThrust=Nav:maxForceForward()C=k()local bL=vec3(core.getWorldAcceleration()):len()/9.80665;if a7>0.1 then bK=C*a7;bJ=maxThrust/a7 end;an[#an+1]=[[<g class="pdim txt txtend">]]if l()==1 then bG=1120;bH=55;bI=65 elseif bt>0 then an[#an+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bt)end;an[#an+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bG,bH,bG,bI,a7/9.80665,bG,bH+20,bG,bI+20,bL)an[#an+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then an[#an+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bF),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bx)if a7>0.1 then an[#an+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bJ/1000,bK/1000)else an[#an+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else an[#an+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bx)end;an[#an+1]="</g>"end;function DrawThrottle(an,bx,bu,bw)local b3=centerY+65;local b4=centerY+75;if l()==1 then b3=55;b4=65 end;local bM="CRUISE"local unit="km/h"local bN=bw;if bx=="TRAVEL"or bx=="AUTOPILOT"then bM="THROT"unit="%"bN=bu;local bO="dim"if bu<0 then bO="red"end;an[#an+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bO,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(bu),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;an[#an+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,b3,bM,centerX-150,b4,bN,unit)end;function DrawVerticalSpeed(an,bm,bt)if bm<200000 and bt==0 or bm and bt>0 then local velocity=vec3(core.getWorldVelocity())local bP=vec3(core.getWorldVertical())*-1;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;local bR=0;if math.abs(bQ)>1 then bR=45*math.log(math.abs(bQ),10)if bQ<0 then bR=-bR end end;an[#an+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bQ),a(bR))end end;function DrawArtificialHorizon(an,bs,br,bt,centerX,centerY,bottomText)local bS=circleRad;if bS>0 then local bT=a(bs)local bU=0;local bV=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*br,centerX,centerY)an[#an+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bS-1,centerX,centerY)an[#an+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bT-30-bT%5+0.5),a(bT+30+bT%5+0.5),5 do if i%10==0 then bU=30 elseif i%5==0 then bU=20 end;local af=centerY+-i*5+bs*5;if bU==30 then bV=b([[%s M %d %f h %d]],bV,centerX-15,af,bU)else bV=b([[%s M %d %f h %d]],bV,centerX-10,af,bU)end end;an[#an+1]=bV..[["/>]]local bW="PITCH"if bottomText=="YAW"then bW="REL PITCH"end;if bs>90 and bt==0 then bs=90-(bs-90)elseif bs<-90 and bt==0 then bs=-90-(bs+90)end;an[#an+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)an[#an+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bS,centerX,centerY,centerX-bS,centerY+bS*bs/20,bS*9,bS*2,-1*br,centerX,centerY)an[#an+1]="</g>"an[#an+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-circleRad-20,bW,centerX,centerY-circleRad-10,bT)end end;function DrawAltitudeDisplay(an,bm,bt)if bm<200000 and bt==0 or bm and bt>0 then local bX=altMeterX;local bY=altMeterY;local bZ=78;local b_=19;table.insert(an,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],bX-1,bY-4,bZ+2,b_+6,bX+1,bY-1,bZ-4,b_))local am=0;local c0=1;local c1=0;while am<6 do local c2=11;local c3=16;local c4=9;local c5=14;local bb="altsm"if am>2 then c3=c3+3;c2=c2+2;c5=c5+2;c4=c4-6;bb="altbig"end;local c6=bm/c0%10;local c7=a(c6)local c8=a((c7+1)%10)local c9=c1;if am==0 then c9=c6-c7 end;local ca=c3*(c9-1)local cb=ca+c3;local ae=bX+c4+(6-am)*c2;local af=bY+c5;table.insert(an,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bb,ae,af+ca,c8,ae,af+cb,c7))am=am+1;c0=c0*10;if c7==9 then c1=c9 else c1=0 end end;table.insert(an,[[</g></g>]])end end;function DrawPrograde(an,bs,br,bt,velocity,speed,centerX,centerY)if bt==0 and speed>5 then local bS=circleRad;local cc=20;local cd=20;local ce=getRelativePitch(velocity)local cf=getRelativeYaw(velocity)local cg=-cf/cd*bS;local ch=ce/cc*bS;local ae=centerX+cg;local af=centerY+ch;local ci=math.sqrt(cg^2+ch^2)if ci<bS then an[#an+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ae,af)else local bR=math.atan(ch,cg)local cj=centerX+bS*math.cos(bR)local ck=centerY+bS*math.sin(bR)an[#an+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',cj,ck)end end end;function DrawWarnings(an)an[#an+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)an[#an+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then an[#an+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]an[#an+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]an[#an+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cl=960;local cm=860;local cn=900;local co=930;local cp=960;local cq=200;local cr=150;local cs=960;if l()==1 then cm=135;cn=155;co=175;cq=115;cr=95 end;if BrakeIsOn then an[#an+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cl,cm)end;if GyroIsOn then an[#an+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cl,cs)end;if GearExtended then if HasGear then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cl,cn)else an[#an+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cl,cn)end;an[#an+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cl,co,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then an[#an+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cl,cp)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],cl,cq,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cl,cq,AutopilotStatus)elseif FollowMode then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cl,cq)elseif AltitudeHold then if AutoTakeoff then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cl,cq,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then an[#an+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cl,cq+50)end else an[#an+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cl,cq,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cl,cq)end;if BrakeLanding then if StrongBrakes then an[#an+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cl,cq)else an[#an+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cl,cq)end end;if TurnBurn then an[#an+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cl,cr)end;if VectorToTarget then an[#an+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cl,cr,VectorStatus)end;an[#an+1]="</g>"end;function DisplayOrbitScreen(an)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ct=75;local cu=0;local cv=250;local cw=4;cu=cu+cw;local cx=15;local ae=ct+cv+ct/2+cw;local af=cu+cv/2+5+cw;local cy,cz,cA,cB;cy=cv/4;cB=0;an[#an+1]=[[<g class="pbright txtorb txtmid">]]an[#an+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cv+ct*2,cv+cu,cw,cw)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cA=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cy*2)cz=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cA*(1-orbit.eccentricity)cB=cy-orbit.periapsis.altitude/cA-planet.radius/cA;local cC=""if orbit.periapsis.altitude<=0 then cC='redout'end;an[#an+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cC,ct+cv/2+cB+cw,cu+cv/2+cw,cy,cz)an[#an+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ct+cv/2+cw,cu+cv/2+cw,planet.radius/cA)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then an[#an+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae-35,af-5,ct+cv/2+cy+cB,af-5)an[#an+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ae,af)af=af+cx;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.apoapsis.altitude))af=af+cx;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToApoapsis))af=af+cx;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.apoapsis.speed))end;af=cu+cv/2+5+cw;ae=ct-ct/2+10+cw;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then an[#an+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae+35,af-5,ct+cv/2-cy+cB,af-5)an[#an+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ae,af)af=af+cx;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.periapsis.altitude))af=af+cx;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToPeriapsis))af=af+cx;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.periapsis.speed))end;an[#an+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ct+cv/2+cw,20+cw,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cD=orbit.timeToApoapsis/orbit.period*2*math.pi;local cE=cy*math.cos(cD)local cF=cz*math.sin(cD)an[#an+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ct+cv/2+cE+cB+cw,cu+cv/2+cF+cw)end;an[#an+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for W,X in pairs(atlas[0])do if w==nil or X.center.x<w then w=X.center.x end;if x==nil or X.center.x>x then x=X.center.x end;if y==nil or X.center.y<y then y=X.center.y end;if z==nil or X.center.y>z then z=X.center.y end end;GalaxyMapHTML=""local cG=1.1*(x-w)/1920;local cH=1.4*(z-y)/1080;for W,X in pairs(atlas[0])do local ae=960+X.center.x/cG;local af=540+X.center.y/cH;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="'..X.radius/cG*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(X.name,"Moon")and not string.match(X.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af+X.radius/cG*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..X.name.."</text>"end end;local by=vec3(core.getConstructWorldPos())local ae=960+by.x/cG;local af=540+by.y/cH;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cG;MapYRatio=cH;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local by=vec3(core.getConstructWorldPos())local ae=960+by.x/cG;local af=540+by.y/cH;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ae-80)/19.20,(af-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cI(cJ)return type(cJ)=='number'end;local function cK(cJ)return type(tonumber(cJ))=='number'end;local function cL(cM)return type(cM)=='table'end;local function cN(cO)return type(cO)=='string'end;local function cP(X)return cL(X)and cI(X.x and X.y and X.z)end;local function cQ(cR)return cL(cR)and cI(cR.latitude and cR.longitude and cR.altitude and cR.bodyId and cR.systemId)end;local cS=math.pi/180;local cT=180/math.pi;local cU=1e-10;local cV=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cW='::pos{'..cV..','..cV..','..cV..','..cV..','..cV..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local cX=utils.clamp;local function cY(cZ,c_)if cZ==0 then return math.abs(c_)<1e-09 end;if c_==0 then return math.abs(cZ)<1e-09 end;return math.abs(cZ-c_)<math.max(math.abs(cZ),math.abs(c_))*cU end;local function d0(cJ)local Y=string.gsub(string.reverse(b('%.4f',cJ)),'^0*%.?','')return Y==''and'0'or string.reverse(Y)end;local function d1(d2)if cP(d2)then return b('{x=%.3f,y=%.3f,z=%.3f}',d2.x,d2.y,d2.z)end;if cL(d2)and not getmetatable(d2)then local d3={}local d4=next(d2)if type(d4)=='nil'or d4==1 then d3=d2 else for W,X in pairs(d2)do local bN=d1(X)if type(W)=='number'then table.insert(d3,b('[%s]=%s',W,bN))else table.insert(d3,b('%s=%s',W,bN))end end end;return b('{%s}',table.concat(d3,','))end;if cN(d2)then return b("'%s'",d2:gsub("'",[[\']]))end;return tostring(d2)end;local d5={}d5.__index=d5;d5.__tostring=function(d2,d6)local d7={}for W in pairs(d2)do table.insert(d7,W)end;table.sort(d7)local d3={}for _,W in ipairs(d7)do local bN=d1(d2[W])if type(W)=='number'then table.insert(d3,b('[%s]=%s',W,bN))else table.insert(d3,b('%s=%s',W,bN))end end;if d6 then return b('%s%s',d6,table.concat(d3,',\n'..d6))end;return b('{%s}',table.concat(d3,','))end;d5.__eq=function(d8,d9)return d8.planetarySystemId==d9.planetarySystemId and d8.bodyId==d9.bodyId and cY(d8.radius,d9.radius)and cY(d8.center.x,d9.center.x)and cY(d8.center.y,d9.center.y)and cY(d8.center.z,d9.center.z)and cY(d8.GM,d9.GM)end;local function da(db,dc,dd,de,df)assert(cK(db),'Argument 1 (planetarySystemId) must be a number:'..type(db))assert(cK(dc),'Argument 2 (bodyId) must be a number:'..type(dc))assert(cK(dd),'Argument 3 (radius) must be a number:'..type(dd))assert(cL(de),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(de))assert(cK(df),'Argument 5 (GM) must be a number:'..type(df))return setmetatable({planetarySystemId=tonumber(db),bodyId=tonumber(dc),radius=tonumber(dd),center=vec3(de),GM=tonumber(df)},d5)end;local dg={}dg.__index=dg;dg.__tostring=function(dh)return b('::pos{%d,%d,%s,%s,%s}',dh.systemId,dh.bodyId,d0(dh.latitude*cT),d0(dh.longitude*cT),d0(dh.altitude))end;dg.__eq=function(d8,d9)return d8.bodyId==d9.bodyId and d8.systemId==d9.systemId and cY(d8.latitude,d9.latitude)and cY(d8.altitude,d9.altitude)and(cY(d8.longitude,d9.longitude)or cY(d8.latitude,math.pi/2)or cY(d8.latitude,-math.pi/2))end;local function di(dj,dc,dk,dl,bm)local db=dj;if cN(dj)and not dl and not bm and not dc and not dk then db,dc,dk,dl,bm=string.match(dj,cW)assert(db,'Argument 1 (position string) is malformed.')else assert(cK(db),'Argument 1 (systemId) must be a number:'..type(db))assert(cK(dc),'Argument 2 (bodyId) must be a number:'..type(dc))assert(cK(dk),'Argument 3 (latitude) must be in degrees:'..type(dk))assert(cK(dl),'Argument 4 (longitude) must be in degrees:'..type(dl))assert(cK(bm),'Argument 5 (altitude) must be in meters:'..type(bm))end;db=tonumber(db)dc=tonumber(dc)dk=tonumber(dk)dl=tonumber(dl)bm=tonumber(bm)if dc==0 then return setmetatable({latitude=dk,longitude=dl,altitude=bm,bodyId=dc,systemId=db},dg)end;return setmetatable({latitude=cS*cX(dk,-90,90),longitude=cS*(dl%360),altitude=bm,bodyId=dc,systemId=db},dg)end;local dm={}dm.__index=dm;dm.__tostring=function(d2,d6)local dn=d6 and d6 ..'  'local dp={}local d7={}for W in pairs(d2)do table.insert(d7,W)end;table.sort(d7)for _,dq in ipairs(d7)do bdy=d2[dq]local dr=d5.__tostring(bdy,dn)if d6 then table.insert(dp,b('[%s]={\n%s\n%s}',dq,dr,d6))else table.insert(dp,b('  [%s]=%s',dq,dr))end end;if d6 then return b('\n%s%s%s',d6,table.concat(dp,',\n'..d6),d6)end;return b('{\n%s\n}',table.concat(dp,',\n'))end;local function ds(dt)local atlas={}local pid;for _,X in pairs(dt)do local ak=X.planetarySystemId;if type(ak)~='number'then error('Invalid planetary system ID: '..tostring(ak))elseif pid and ak~=pid then error('Mismatch planetary system IDs: '..ak..' and '..pid)end;local du=X.bodyId;if type(du)~='number'then error('Invalid body ID: '..tostring(du))elseif atlas[du]then error('Duplicate body ID: '..tostring(du))end;setmetatable(X.center,getmetatable(vec3.unit_x))atlas[du]=setmetatable(X,d5)pid=ak end;return setmetatable(atlas,dm)end;PlanetaryReference={}local function dv(dt)return setmetatable({galaxyAtlas=dt or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cM,i)if type(i)=='number'then local system=cM.galaxyAtlas[i]return ds(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d2)return function(cM,W)local dw,nv=next(cM,W)return dw,nv and ds(nv)end,d2.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d2)local dx={}for _,dy in pairs(d2 or{})do local dz=dy:getPlanetarySystemId()local dA=dm.__tostring(dy,'    ')table.insert(dx,b('  [%s]={%s\n  }',dz,dA))end;return b('{\n%s\n}\n',table.concat(dx,',\n'))end;PlanetaryReference.BodyParameters=da;PlanetaryReference.MapPosition=di;PlanetaryReference.PlanetarySystem=ds;function PlanetaryReference.createBodyParameters(dB,dc,dC,dD,dE,dF,dG)assert(cK(dB),'Argument 1 (planetarySystemId) must be a number:'..type(dB))assert(cK(dc),'Argument 2 (bodyId) must be a number:'..type(dc))assert(cK(dC),'Argument 3 (surfaceArea) must be a number:'..type(dC))assert(cL(dD),'Argument 4 (aPosition) must be an array or vec3:'..type(dD))assert(cL(dE),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dE))assert(cK(dF),'Argument 6 (altitude) must be in meters:'..type(dF))assert(cK(dG),'Argument 7 (gravityAtPosition) must be number:'..type(dG))local dd=math.sqrt(dC/4/math.pi)local ci=dd+dF;local dH=vec3(dD)+ci*vec3(dE)local df=dG*ci*ci;return da(dB,dc,dd,dH,df)end;PlanetaryReference.isMapPosition=cQ;function PlanetaryReference:getPlanetarySystem(dj)if i==nil then i=0 end;if nv==nil then nv=0 end;local dB=dj;if cQ(dj)then dB=dj.systemId end;if type(dB)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dm then system=ds(system)end;return system end end end;function dm:castIntersections(dI,dJ,dK,dL)local dK=dK or function(dM)return 1.05*dM.radius end;local dN={}if dL then for _,i in ipairs(dL)do dN[i]=self[i]end else dL={}for W,dM in pairs(self)do table.insert(dL,W)dN[W]=dM end end;local function dO(dP,dQ)local dR=dN[dP].center-dI;local dS=dN[dQ].center-dI;return dR:len()<dS:len()end;table.sort(dL,dO)local dT=dJ:normalize()for i,ak in ipairs(dL)do local dM=dN[ak]local dU=dM.center-dI;local dd=dK(dM)local dV=dU:dot(dT)local dW=dV^2-(dU:len2()-dd^2)if dW>=0 then local dX=math.sqrt(dW)local dY=dV+dX;local dZ=dV-dX;if dZ>0 then return dM,dY,dZ elseif dY>0 then return dM,dY,nil end end end;return nil,nil,nil end;function dm:closestBody(d_)assert(type(d_)=='table','Invalid coordinates.')local e0,dM;local e1=vec3(d_)for _,e2 in pairs(self)do local e3=(e2.center-e1):len2()if not dM or e3<e0 then dM=e2;e0=e3 end end;return dM end;function dm:convertToBodyIdAndWorldCoordinates(dj)local e4=dj;if cN(dj)then e4=di(dj)end;if e4.bodyId==0 then return 0,vec3(e4.latitude,e4.longitude,e4.altitude)end;local e2=self:getBodyParameters(e4)if e2 then return e4.bodyId,e2:convertToWorldCoordinates(e4)end end;function dm:getBodyParameters(dj)local dc=dj;if cQ(dj)then dc=dj.bodyId end;assert(cK(dc),'Argument 1 (bodyId) must be a number:'..type(dc))return self[dc]end;function dm:getPlanetarySystemId()local _,X=next(self)return X and X.planetarySystemId end;function d5:convertToMapPosition(de)assert(cL(de),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(de))local e5=vec3(de)if self.bodyId==0 then return setmetatable({latitude=e5.x,longitude=e5.y,altitude=e5.z,bodyId=0,systemId=self.planetarySystemId},dg)end;local e6=e5-self.center;local ci=e6:len()local bm=ci-self.radius;local dk=0;local dl=0;if not cY(ci,0)then local e7=math.atan(e6.y,e6.x)dl=e7>=0 and e7 or 2*math.pi+e7;dk=math.pi/2-math.acos(e6.z/ci)end;return setmetatable({latitude=dk,longitude=dl,altitude=bm,bodyId=self.bodyId,systemId=self.planetarySystemId},dg)end;function d5:convertToWorldCoordinates(dj)local e4=cN(dj)and di(dj)or dj;if e4.bodyId==0 then return vec3(e4.latitude,e4.longitude,e4.altitude)end;assert(cQ(e4),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e4.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e4.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e8=math.cos(e4.latitude)return self.center+(self.radius+e4.altitude)*vec3(e8*math.cos(e4.longitude),e8*math.sin(e4.longitude),math.sin(e4.latitude))end;function d5:getAltitude(de)return(vec3(de)-self.center):len()-self.radius end;function d5:getDistance(de)return(vec3(de)-self.center):len()end;function d5:getGravity(de)local e9=self.center-vec3(de)local ea=e9:len2()return self.GM/ea*e9/math.sqrt(ea)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dv(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cN(cO)return type(cO)=='string'end;local function cL(cM)return type(cM)=='table'end;local function cY(cZ,c_)if cZ==0 then return math.abs(c_)<1e-09 end;if c_==0 then return math.abs(cZ)<1e-09 end;return math.abs(cZ-c_)<math.max(math.abs(cZ),math.abs(c_))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bm)assert(self.body)local ci=bm+self.body.radius;if not cY(ci,0)then local orbit=math.sqrt(self.body.GM/ci)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dj,velocity)assert(self.body)assert(cL(dj)or cN(dj))assert(cL(velocity))local by=(cN(dj)or PlanetRef.isMapPosition(dj))and self.body:convertToWorldCoordinates(dj)or vec3(dj)local X=vec3(velocity)local eb=by-self.body.center;local dS=X:len2()local ec=eb:len()local ed=self.body.GM;local ee=((dS-ed/ec)*eb-eb:dot(X)*X)/ed;local cZ=ed/(2*ed/ec-dS)local ef=ee:len()local dT=ee:normalize()local eg=cZ*(1-ef)local eh=cZ*(1+ef)local ei=eg*dT+self.body.center;local ej=ef<=1 and-eh*dT+self.body.center or nil;local ek=math.sqrt(cZ*ed*(1-ef*ef))local el=ej and 2*math.pi*math.sqrt(cZ^3/ed)local em=math.acos(ee:dot(eb)/(ef*ec))if eb:dot(X)<0 then em=-(em-2*math.pi)end;local en=math.acos((math.cos(em)+ef)/(1+ef*math.cos(em)))local eo=en;if eo<0 then eo=eo+2*math.pi end;local ep=eo-ef*math.sin(eo)local eq=0;local er=0;local es=0;if el~=nil then eq=ep/(2*math.pi/el)er=el-eq;es=er+el/2;if em-math.pi>0 then er=eq;es=er+el/2 end;if es>el then es=es-el end end;return{periapsis={position=ei,speed=ek/eg,circularOrbitSpeed=math.sqrt(ed/eg),altitude=eg-self.body.radius},apoapsis=ej and{position=ej,speed=ek/eh,circularOrbitSpeed=math.sqrt(ed/eh),altitude=eh-self.body.radius},currentVelocity=X,currentPosition=by,eccentricity=ef,period=el,eccentricAnomaly=en,meanAnomaly=ep,timeToPeriapsis=er,timeToApoapsis=es}end;local function et(eu)local e2=PlanetRef.BodyParameters(eu.planetarySystemId,eu.bodyId,eu.radius,eu.center,eu.GM)return setmetatable({body=e2},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return et(...)end})end;function Kinematics()local Kinematic={}local ev=30000000/3600;local ew=ev*ev;local ex=100;local function ey(X)return 1/math.sqrt(1-X*X/ew)end;function Kinematic.computeAccelerationTime(ez,eA,eB)local eC=ev*math.asin(ez/ev)return(ev*math.asin(eB/ev)-eC)/eA end;function Kinematic.computeDistanceAndTime(ez,eB,eD,eE,eF,eG)eF=eF or 0;eG=eG or 0;local eH=ez<=eB;local eI=eE*(eH and 1 or-1)/eD;local eJ=-eG/eD;local eK=eI+eJ;if eH and eK<=0 or not eH and eK>=0 then return-1,-1 end;local eL,eM=0,0;if eI~=0 and eF>0 then local eC=math.asin(ez/ev)local eN=math.pi*(eI/2+eJ)local eO=eI*eF;local eP=ev*math.pi;local X=function(cM)local aI=(eN*cM-eO*math.sin(math.pi*cM/2/eF)+eP*eC)/eP;local eQ=math.tan(aI)return ev*eQ/math.sqrt(eQ*eQ+1)end;local eR=eH and function(cO)return cO>=eB end or function(cO)return cO<=eB end;eM=2*eF;if eR(X(eM))then local eS=0;while math.abs(eM-eS)>0.5 do local cM=(eM+eS)/2;if eR(X(cM))then eM=cM else eS=cM end end end;local eT=ez;local eU=eM/ex;for eV=1,ex do local speed=X(eV*eU)eL=eL+(speed+eT)*eU/2;eT=speed end;if eM<2*eF then return eL,eM end;ez=eT end;local eC=ev*math.asin(ez/ev)local eW=(ev*math.asin(eB/ev)-eC)/eK;local eX=ew*math.cos(eC/ev)/eK;local ci=eX-ew*math.cos((eK*eW+eC)/ev)/eK;return ci+eL,eW+eM end;function Kinematic.computeTravelTime(ez,eA,ci)if ci==0 then return 0 end;if eA>0 then local eC=ev*math.asin(ez/ev)local eX=ew*math.cos(eC/ev)/eA;return(ev*math.acos(eA*(eX-ci)/ew)-eC)/eA end;assert(ez>0,'Acceleration and initial speed are both zero.')return ci/ez end;function Kinematic.lorentz(X)return ey(X)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(ci)local eY=ci>100000;local Y=""if eY then Y=round(ci/1000/200,1).." SU"elseif ci<1000 then Y=round(ci,1).." M"else Y=round(ci/1000,1).." KM"end;return Y end;function getDistanceDisplayString2(ci)local eY=ci>100000;local Y=""if eY then Y=round(ci/1000/200,2).." SU"elseif ci<1000 then Y=round(ci,2).." M"else Y=round(ci/1000,2).." KM"end;return Y end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(eZ)local e_=a(eZ/3600)local f0=a(eZ/60%60)local eZ=a(eZ%60)if eZ<0 or e_<0 or f0<0 then return"0s"end;if e_>0 then return e_.."h "..f0 .."m "elseif f0>0 then return f0 .."m "..eZ.."s"else return eZ.."s"end end;function getMagnitudeInDirection(bd,dJ)bd=vec3(bd)dJ=vec3(dJ):normalize()local Y=bd*dJ;return Y.x+Y.y+Y.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f1=0;for W,X in pairs(atlas[0])do f1=f1+1;if f1==AutopilotTargetIndex then if X.center then AutopilotTargetName=X.name;AutopilotTargetPlanet=galaxyReference[0][W]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=X end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f2=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return f2 end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local f3,f4=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local f5,f6;if not TurnBurn then f5,f6=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else f5,f6=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,f7;if not TurnBurn then _,f7=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,f7=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local f8=0;local f9=0;if f5+f3<AutopilotDistance then f8=AutopilotDistance-(f5+f3)f9=Kinematic.computeTravelTime(8333.0556,0,f8)else local fa=(AutopilotDistance-f5)/f3;f3=AutopilotDistance-f5;f4=f4*fa end;if AutopilotBraking then return f7 elseif AutopilotCruising then return f9+f7 else return f4+f6+f9 end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fb=Nav.axisCommandManager:getAxisCommandType(0)local bx="TRAVEL"if fb==1 then bx="CRUISE"end;if Autopilot then bx="AUTOPILOT"end;return bx end;function hoverDetectGround()local fc=-1;if vBooster then fc=vBooster.distance()elseif hover then fc=hover.distance()end;return fc end;function round(cV,fd)local fe=10^(fd or 0)return a(cV*fe+0.5)/fe end;function tablelength(ff)local f1=0;for _ in pairs(ff)do f1=f1+1 end;return f1 end;function BeginProfile(fg)ProfileTimeStart=system.getTime()end;function EndProfile(fg)local fh=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fh;ProfileCount=ProfileCount+1;if fh>ProfileTimeMax then ProfileTimeMax=fh end;if fh<ProfileTimeMin then ProfileTimeMin=fh end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fi=ProfileTimeSum;local fj=ProfileTimeSum/ProfileCount;local fk=ProfileTimeMin;local fl=ProfileTimeMax;local fm=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fi,fj,fk,fl,fm))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fn=unit.getAtmosphereDensity()if door and(fn>0 or fn==0 and CoreAltitude<10000)then for _,X in pairs(door)do X.activate()end end;if forcefield and(fn>0 or fn==0 and CoreAltitude<10000)then for _,X in pairs(forcefield)do X.activate()end end;if dbHud then if not WipedDatabank then for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fo)if fo=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=AutopilotDistance;if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"MsgTimer=5;unit.setTimer("emergencyWarpTick",5)InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end elseif fo=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fp;fp=radar_1.getData():find('identifiedConstructs":%[%]')if HasSpaceRadar and EmergencyWarp then local ak,ci=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ak~=nil and ak~=""then if math.floor(ci)<EmergencyWarpDistance and NotTriedEmergencyWarp then InEmergencyWarp=true;NotTriedEmergencyWarp=false end end end;if fp==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fp~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fq=radar_1.getEntries()RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fq)local fr={}for W,X in pairs(fq)do if radar_1.hasMatchingTransponder(X)==1 then fr[#fr+1]=X end end;if#fr>0 then local af=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,af)for W,X in pairs(fr)do af=af+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,af,radar_1.getConstructName(X))end end elseif radar_1 then local fs;fs=radar_1.getData():find('worksInEnvironment":false')if fs then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end;local an={}local bx=GetFlightStyle()DrawOdometer(an,TotalDistanceTrip,TotalDistanceTravelled,bx,FlightTime)checkDamage(an)LastOdometerOutput=table.concat(an,"")collectgarbage("collect")elseif fo=="reEmergencyWarp"then NotTriedEmergencyWarp=true;InEmergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif fo=="msgTick"then local an={}DisplayMessage(an,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fo=="emergencyWarpTick"then if EmergencyWarp then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end;unit.stopTimer("emergencyWarpTick")elseif fo=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fo=="apTick"then local l=Nav.control.isRemoteControlled;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local ft=system.getMouseDeltaX()local fu=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fv=0.002;local fw=velMag>8334;if not fw and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fw;if antigrav and antigrav.getState()==1 and not desiredBaseAltitude then desiredBaseAltitude=antigrav.getBaseAltitude()end;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local an={}HUDPrologue(an)if showHud then updateHud(an)else DisplayOrbitScreen(an)DrawWarnings(an)end;HUDEpilogue(an)an[#an+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(an,MsgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(an)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(an)if screen_1.getMouseState()==1 then CheckButtons()end;an[#an+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+ft;SimulatedY=SimulatedY+fu end;SetButtonContains()DrawButtons(an)if not Animating and not Animated then local fx=table.concat(an,"")an={}an[#an+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"an[#an+1]=GalaxyMapHTML;an[#an+1]=fx;an[#an+1]="</body>"Animating=true;an[#an+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(an,"")system.setScreen(content)elseif Animated then local fx=table.concat(an,"")an={}an[#an+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"an[#an+1]=GalaxyMapHTML;an[#an+1]=fx;an[#an+1]="</body>"end;if not Animating then an[#an+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+ft;SimulatedY=SimulatedY+fu;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="Mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fu,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(ft,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(an)end else SetButtonContains()DrawButtons(an)end;an[#an+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;an[#an+1]=[[</svg></body>]]content=table.concat(an,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local f5,f6;if not TurnBurn then f5,f6=GetAutopilotBrakeDistanceAndTime(velMag)else f5,f6=GetAutopilotTBBrakeDistanceAndTime(velMag)end;f5=f5;f6=f6;local fy=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fz=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fA=getMagnitudeInDirection(fz,AutopilotShipUp)local fB=getMagnitudeInDirection(fz,AutopilotShipRight)local fC=-fB*AutopilotDistance*velMag*fv;local fD=-fA*AutopilotDistance*velMag*fv;fy=AutopilotTargetCoords+-fC*vec3(AutopilotShipRight)+-fD*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fy)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fE=true;local fF=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fF)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fE=AlignToWorldVector((fy-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fE=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fE then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=f5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(an,"Autopilot completed, orbit established")BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=f5 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fE then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fE then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fG=0;local by=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fH=by-vec3(core.getConstructWorldPos())local fI=vec3(fH):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fJ=vec3(fH):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ci=math.sqrt(fI*fI+fJ*fJ)AlignToWorldVector(fH:normalize())local fK=40;local fL=ci<fK;local fM=100;local fN=utils.clamp((ci-fK)/2,10,fM)PitchInput2=0;local fE=math.abs(YawInput2)<0.1;if fE and velMag<fN and not fL then BrakeIsOn=false;fG=-10 else BrakeIsOn=true;fG=0 end;local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local aG=getPitch(bn,bo,bp)local fO=1.0;if math.abs(fG-aG)>fO then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fG-aG)local fP=pitchPID:get()PitchInput2=fP end end;local bP=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then local bm=CoreAltitude;local fQ=HoldAltitude-bm;local fR=500+velMag;local fG=(utils.smoothstep(fQ,-fR,fR)-0.5)*2*MaxPitch;if not AltitudeHold then fG=0 end;autoRoll=true;if Reentry then fG=-80;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if unit.getAtmosphereDensity()>0.05 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;fG=0 end end;local fS=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bf=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bf)local fT=bf:len()-bf:project_on(bP):len()local a9=json.decode(unit.getData()).maxBrake;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;local fU=velocity:len()-math.abs(bQ)local fV=vec3(core.getWorldAirFrictionAcceleration())if a9~=nil then LastMaxBrake=a9;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(fU,0,core.getConstructMass(),0,0,a9+(fV:len()-fV:project_on(bP):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(fU,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if fT<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and fT>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=fT end;PitchInput2=fS;local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local fc=-1;local aG=getPitch(bn,bo,bp)local fO=0.1;if BrakeLanding then fG=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;fc=hoverDetectGround()if fc>-1 then if math.abs(fG-aG)<fO then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bP)<0.99 then BrakeIsOn=true elseif bQ<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fG<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;if math.abs(fG-aG)>fO then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fG-aG)local fP=pitchPID:get()PitchInput2=PitchInput2+fP end end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local fW=CoreAltitude-antigrav.getBaseAltitude()if CoreAltitude>800 and fW<-200 then desiredBaseAltitude=math.max(CoreAltitude+100,1000)elseif fW>200 then desiredBaseAltitude=CoreAltitude-100 end else local fW=AntigravTargetAltitude-CoreAltitude;local velocity=vec3(core.getWorldVelocity())local bP=vec3(core.getWorldVertical())*-1;local bQ=velocity.x*bP.x+velocity.y*bP.y+velocity.z*bP.z;local fX=290;local fY=-290;if unit.getClosestPlanetInfluence()>0.3 then fY=-190 end;fY=math.min(math.max(fY,-math.abs(fW)/20.0),-10)fX=math.max(math.min(fX,math.abs(fW)/20.0),10)if bQ<fY then desiredBaseAltitude=CoreAltitude+100 elseif bQ>fX then desiredBaseAltitude=math.max(CoreAltitude-100,1000)elseif math.abs(fW)>150 or math.abs(bQ)>15 then if math.abs(bQ)>10 then desiredBaseAltitude=CoreAltitude+math.max(math.min(fW-bQ/10.0,100),-100)else desiredBaseAltitude=CoreAltitude+math.max(math.min(fW,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bQ)<10 and math.abs(fW)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local fZ=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fZ=math.max(fZ,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local f_=PitchInput+PitchInput2+system.getControlDeviceForwardInput()local g0=RollInput+RollInput2+system.getControlDeviceYawInput()local g1=YawInput+YawInput2-system.getControlDeviceLeftRightInput()local g2=BrakeInput;local g3=vec3(core.getWorldVertical())local g4=vec3(core.getConstructWorldOrientationUp())local g5=vec3(core.getConstructWorldOrientationForward())local g6=vec3(core.getConstructWorldOrientationRight())local g7=vec3(core.getWorldVelocity())local g8=vec3(core.getWorldVelocity()):normalize()local g9=getRoll(g3,g5,g6)local ga=math.abs(g9)local gb=utils.sign(g9)local gc=vec3(core.getWorldAngularVelocity())local gd=f_*pitchSpeedFactor*g6+g0*rollSpeedFactor*g5+g1*yawSpeedFactor*g4;if g3:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local ge=1.0;if autoRoll==true and ga>ge and g0==0 then local gf=utils.clamp(0,ga-30,ga+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gf-g9)local gg=rollPID:get()gd=gd+gg*g5 end;local gh=20.0;if turnAssist==true and ga>gh and f_==0 and g1==0 then local gi=turnAssistFactor*0.1;local gj=turnAssistFactor*0.025;local gk=(ga-gh)/(180-gh)*180;local gl=0;if gk<90 then gl=gk/90 elseif gk<180 then gl=(180-gk)/90 end;gl=gl*gl;local gm=-gb*gj*(1.0-gl)local gn=gi*gl;gd=gd+gn*g6+gm*g4 end end;local go=1;local gp=0;local gq=1;local gr=fZ*(gd-gc)local gs=vec3(core.getWorldAirFrictionAngularAcceleration())gr=gr-gs;Nav:setEngineTorqueCommand('torque',gr,go,'airfoil','','',gq)local gt=-g2*(brakeSpeedFactor*g7+brakeFlatFactor*g8)Nav:setEngineForceCommand('brake',gt)local gu=''local gv=vec3()local gw=false;local gx='thrust analog longitudinal'local gy=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gy==axisCommandType.byThrottle then local gz=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gx,axisCommandId.longitudinal)Nav:setEngineForceCommand(gx,gz,go)elseif gy==axisCommandType.byTargetSpeed then local gz=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gu=gu..' , '..gx;gv=gv+gz;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gw=true end end;local gA='thrust analog lateral'local gB=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gB==axisCommandType.byThrottle then local gC=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gA,axisCommandId.lateral)Nav:setEngineForceCommand(gA,gC,go)elseif gB==axisCommandType.byTargetSpeed then local gD=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gu=gu..' , '..gA;gv=gv+gD end;local gE='thrust analog vertical'local gF=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gF==axisCommandType.byThrottle then local gG=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gE,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gE,gG,go,'airfoil','ground','',gq)else Nav:setEngineForceCommand(gE,vec3(),go)end elseif gF==axisCommandType.byTargetSpeed then local gH=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gu=gu..' , '..gE;gv=gv+gH end;if gv:len()>constants.epsilon then if BrakeInput~=0 or gw or math.abs(g8:dot(g5))<0.95 then gu=gu..', brake'end;Nav:setEngineForceCommand(gu,gv,gp,'','','',gq)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif IsBoosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,Y=coroutine.resume(beginSetup)if Y then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gI)if gI=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gI=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gI=="forward"then PitchInput=PitchInput-1 elseif gI=="backward"then PitchInput=PitchInput+1 elseif gI=="left"then RollInput=RollInput-1 elseif gI=="right"then RollInput=RollInput+1 elseif gI=="yawright"then YawInput=YawInput-1 elseif gI=="yawleft"then YawInput=YawInput+1 elseif gI=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gI=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gI=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gI=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gI=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gI=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gI=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif gI=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif gI=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif gI=="option4"then ToggleAutopilot()ToggleView=false elseif gI=="option5"then ToggleTurnBurn()ToggleView=false elseif gI=="option6"then ToggleAltitudeHold()ToggleView=false elseif gI=="option7"then wipeSaveVariables()ToggleView=false elseif gI=="option8"then ToggleFollowMode()ToggleView=false elseif gI=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif gI=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gI=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gI=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gI=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gI=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gI=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gI=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gI=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gI=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gI)if gI=="forward"then PitchInput=PitchInput+1 elseif gI=="backward"then PitchInput=PitchInput-1 elseif gI=="left"then RollInput=RollInput+1 elseif gI=="right"then RollInput=RollInput-1 elseif gI=="yawright"then YawInput=YawInput+1 elseif gI=="yawleft"then YawInput=YawInput-1 elseif gI=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gI=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gI=="up"then UpAmount=UpAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gI=="down"then UpAmount=UpAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gI=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gI=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gI=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gI=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gI=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gI)if gI=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gI=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gI=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gI=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(an,gJ)if gJ~="empty"then an[#an+1]=[[<text class="msg" x="50%%" y="310" >]]for gK in string.gmatch(gJ,"([^\n]+)")do an[#an+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gK)end;an[#an+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a4=system.getTime()local velocity=vec3(core.getWorldVelocity())local bv=vec3(velocity):len()local gL=a4-LastTravelTime;if bv>1.38889 then bv=bv/1000;local gM=bv*(a4-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+gM;TotalDistanceTrip=TotalDistanceTrip+gM end;FlightTime=FlightTime+gL;TotalFlightTime=TotalFlightTime+gL;LastTravelTime=a4 end;function updateMass()local gN=0;for W in pairs(ElementsID)do gN=gN+core.getElementMassById(ElementsID[W])end;return gN end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
