name: ButtonsHud - Dimencia and Archaegeo v4.920 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: Default is 1080, does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;DisplayOrbit=true;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}local b={"BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;function LoadVariables()if dbHud_1 then local b3=dbHud_1.hasKey;if not useTheseSettings then for b4,b5 in pairs(a)do if b3(b5)then local b6=f(dbHud_1.getStringValue(b5))if b6~=nil then c(b5 .." "..dbHud_1.getStringValue(b5))_G[b5]=b6;az=true end end end end;coroutine.yield()for b4,b5 in pairs(b)do if b3(b5)then local b6=f(dbHud_1.getStringValue(b5))if b6~=nil then c(b5 .." "..dbHud_1.getStringValue(b5))_G[b5]=b6;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local b7=system.getTime()if LastStartTime+180<b7 then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=b7;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(b8,b9)if b8>b9 then b9=b8 end;if ContainerOptimization>0 then b9=b9-b9*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then b9=b9-b9*FuelTankOptimization*0.05 end;return b9 end;function ProcessElements()for b4 in pairs(af)do local type=l(af[b4])if type=="landing gear"then A=true end;if type=="dynamic core"then local ba=h(af[b4])if ba>10000 then aQ=128 elseif ba>1000 then aQ=64 elseif ba>150 then aQ=32 end end;aG=aG+h(af[b4])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local ba=h(af[b4])local bb=m(af[b4])local b8=0;local bc=system.getTime()if type=="Atmospheric Fuel Tank"then local b9=400;local bd=35.03;if ba>10000 then b9=51200;bd=5480 elseif ba>1300 then b9=6400;bd=988.67 elseif ba>150 then b9=1600;bd=182.67 end;b8=bb-bd;if fuelTankHandlingAtmo>0 then b9=b9+b9*fuelTankHandlingAtmo*0.2 end;b9=CalculateFuelVolume(b8,b9)aD[#aD+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end;if type=="Rocket Fuel Tank"then local b9=320;local bd=173.42;if ba>65000 then b9=40000;bd=25740 elseif ba>6000 then b9=5120;bd=4720 elseif ba>700 then b9=640;bd=886.72 end;b8=bb-bd;if fuelTankHandlingRocket>0 then b9=b9+b9*fuelTankHandlingRocket*0.2 end;b9=CalculateFuelVolume(b8,b9)aF[#aF+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end;if type=="Space Fuel Tank"then local b9=2400;local bd=182.67;if ba>10000 then b9=76800;bd=5480 elseif ba>1300 then b9=9600;bd=988.67 end;b8=bb-bd;if fuelTankHandlingSpace>0 then b9=b9+b9*fuelTankHandlingSpace*0.2 end;b9=CalculateFuelVolume(b8,b9)aE[#aE+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,b5 in pairs(door)do b5.toggle()end end;if switch then for _,b5 in pairs(switch)do b5.toggle()end end;if forcefield then for _,b5 in pairs(forcefield)do b5.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not A then GearExtended=true end else if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(b5)if ResolutionX==1920 then return b5 else return round(ResolutionX*b5/1920,0)end end;function ConvertResolutionY(b5)if ResolutionY==1080 then return b5 else return round(ResolutionY*b5/1080,0)end end;function RefreshLastMaxBrake(be,bf)if be==nil then be=core.g()end;be=round(be,5)local bg=j()if bf~=nil and bf or(aC==nil or aC~=be)then local velocity=core.getVelocity()local bh=vec3(velocity):len()local bi=f(unit.getData()).maxBrake;if bi~=nil and bi>0 and ad then bi=bi/utils.clamp(bh/100,0.1,1)bi=bi/bg;if bi>LastMaxBrakeInAtmo and bg>0.10 then LastMaxBrakeInAtmo=bi end end;if bi~=nil and bi>0 then LastMaxBrake=bi end;aC=be end end;function MakeButton(bj,bk,bl,bm,bn,bo,bp,bq,br)local bs={enableName=bj,disableName=bk,width=bl,height=bm,x=bn,y=bo,toggleVar=bp,toggleFunction=bq,drawCondition=br,hovered=false}table.insert(aq,bs)return bs end;function UpdateAtlasLocationsList()AtlasOrdered={}for b4,b5 in pairs(aS[0])do table.insert(AtlasOrdered,{name=b5.name,index=b4})end;local function bt(bu,bv)return bu.name<bv.name end;table.sort(AtlasOrdered,bt)end;function AddLocationsToAtlas()for b4,b5 in pairs(SavedLocations)do table.insert(aS[0],b5)end;UpdateAtlasLocationsList()end;function AddNewLocationByWaypoint(bw,bx,bn,bo,by)if dbHud_1 then local bz={}if bx==0 then bz={position=vec3(bn,bo,by),name=bw,atmosphere=0,planetname="Space",gravity=0}else local bA;if aS[0][bx].atmos then bA=100 else bA=0 end;bz={position=vec3(bn,bo,by),name=bw,atmosphere=bA,planetname=aS[0][bx].name,gravity=aS[0][bx].gravity}end;SavedLocations[#SavedLocations+1]=bz;table.insert(aS[0],bz)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bB=planet.name..". "..#SavedLocations;if radar_1 then local bC,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bC~=nil and bC~=""then bB=bB.." "..radar_1.getConstructName(bC)end end;local bz={position=position,name=bB,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=bz;table.insert(aS[0],bz)UpdateAtlasLocationsList()K="Location saved as "..bB else K="Databank must be installed to save locations"end end;function UpdatePosition(bD)local bE=-1;local bz;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name==CustomTarget.name then bE=b4;break end end;if bE~=-1 then local bF;if bD~=nil then bz={position=SavedLocations[bE].position,name=bD,atmosphere=SavedLocations[bE].atmosphere,planetname=SavedLocations[bE].planetname,gravity=SavedLocations[bE].gravity}else bz={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bE].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bE]=bz;bE=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name==CustomTarget.name then bE=b4 end end;if bE>-1 then aS[0][bE]=bz end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bE=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name==CustomTarget.name then bE=b4 end end;if bE>-1 then table.remove(aS[0],bE)end;bE=-1;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name==CustomTarget.name then K=b5.name.." saved location cleared"bE=b4;break end end;if bE~=-1 then table.remove(SavedLocations,bE)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bG)bG[#bG+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bH,bI,bn,bo,bl,bm)if bH>bn and bH<bn+bl and bI>bo and bI<bo+bm then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bJ=vec3(core.getConstructWorldOrientationForward())local bK=vec3(core.getConstructWorldOrientationRight())local bL=vec3(core.getWorldVertical())local bM=getPitch(bL,bJ,bK)LockPitch=bM;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else a7=true end else a8=true;RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bG)local bN=0;ao=""local bO=aG;local bP=0;local bQ=0;local bR=0;local bS=0;local bT=""for b4 in pairs(af)do local ba=0;local bU=0;bU=h(af[b4])ba=k(af[b4])bP=bP+ba;if ba<bU then if ba==0 then bR=bR+1 else bQ=bQ+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[b4]))local bn=position.x-aQ;local bo=position.y-aQ;local by=position.z-aQ;table.insert(al,core.spawnArrowSticker(bn,bo,by+1,"down"))table.insert(al,core.spawnArrowSticker(bn,bo,by+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bn+1,bo,by,"north"))table.insert(al,core.spawnArrowSticker(bn+1,bo,by,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bn-1,bo,by,"south"))table.insert(al,core.spawnArrowSticker(bn-1,bo,by,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bn,bo-1,by,"east"))table.insert(al,core.spawnArrowSticker(bn,bo-1,by,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bn,bo+1,by,"west"))table.insert(al,core.spawnArrowSticker(bn,bo+1,by,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[b4])end elseif aH and#al>0 and al[11]==af[b4]then for bV in pairs(al)do core.deleteSticker(al[bV])end;al={}end end;bN=d(bP/bO*100)if bN<100 then bG[#bG+1]=[[<g class="pbright txt">]]bS=d(bN*2.55)bT=e("rgb(%d,%d,%d)",255-bS,bS,0)if bN<100 then bG[#bG+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],bT,bN)if bR>0 then bG[#bG+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],bT,bR,bQ)elseif bQ>0 then bG[#bG+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],bT,bQ)end end;bG[#bG+1]=[[<\g>]]end end;function DrawCursorLine(bG)local bW=d(utils.clamp(a3/(at/4)*255,0,255))bG[#bG+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+bW,d(PrimaryG+0.5)-bW,d(PrimaryB+0.5)-bW)end;function getPitch(bX,bY,bv)local bZ=bX:cross(bv):normalize_inplace()local bM=math.acos(utils.clamp(bZ:dot(-bY),-1,1))*constants.rad2deg;if bZ:cross(-bY):dot(bv)<0 then bM=-bM end;return bM end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for b4,b5 in pairs(a)do dbHud_1.setStringValue(b5,g(nil))end;for b4,b5 in pairs(b)do if b5~="SavedLocations"then dbHud_1.setStringValue(b5,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,b5 in pairs(aq)do if b5.hovered then if not b5.drawCondition or b5.drawCondition()then b5.toggleFunction()end;b5.hovered=false end end end;function SetButtonContains()local bn=a0+at/2;local bo=a1+au/2;for _,b5 in pairs(aq)do b5.hovered=Contains(bn,bo,b5.x,b5.y,b5.width,b5.height)end end;function DrawButton(bG,b_,hover,bn,bo,c0,c1,c2,c3,c4,c5)if type(c4)=="function"then c4=c4()end;if type(c5)=="function"then c5=c5()end;bG[#bG+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bn,bo,c0,c1)if b_ then bG[#bG+1]=e("%s'",c2)else bG[#bG+1]=c3 end;if hover then bG[#bG+1]=" style='stroke:white; stroke-width:2'"else bG[#bG+1]=" style='stroke:black; stroke-width:1'"end;bG[#bG+1]="></rect>"bG[#bG+1]=e("<text x='%f' y='%f' font-size='24' fill='",bn+c0/2,bo+c1/2+5)if b_ then bG[#bG+1]="black"else bG[#bG+1]="white"end;bG[#bG+1]="' text-anchor='middle' font-family='Montserrat'>"if b_ then bG[#bG+1]=e("%s</text>",c4)else bG[#bG+1]=e("%s</text>",c5)end end;function DrawButtons(bG)local c6="rgb(50,50,50)'"local c7="rgb(210,200,200)"local c8=DrawButton;for _,b5 in pairs(aq)do local bk=b5.disableName;local bj=b5.enableName;if type(bk)=="function"then bk=bk()end;if type(bj)=="function"then bj=bj()end;if not b5.drawCondition or b5.drawCondition()then c8(bG,b5.toggleVar(),b5.hovered,b5.x,b5.y,b5.width,b5.height,c7,c6,bk,bj)end end end;function DrawTank(bG,aP,bn,c9,ca,cb,cc,cd)local ce=1;local cf=2;local cg=3;local ch=4;local ci=5;local cj=6;local ck=""local cl=0;local cm=fuelY;local cn=fuelY+10;if o()==1 and not RemoteHud then cm=cm-50;cn=cn-50 end;bG[#bG+1]=[[<g class="pdim txtfuel">]]if ca=="ATMO"then ck="atmofueltank"elseif ca=="SPACE"then ck="spacefueltank"else ck="rocketfueltank"end;cl=_G[ck.."_size"]if#cb>0 then for i=1,#cb do local bB=string.sub(cb[i][cf],1,12)local co=0;for bV=1,cl do if cb[i][cf]==f(unit[ck.."_"..bV].getData()).name then co=bV;break end end;if aP or cc[i]==nil or cd[i]==nil then local cp=0;local cq=0;local cr=0;local cs=0;local bc=system.getTime()if co~=0 then cd[i]=f(unit[ck.."_"..co].getData()).percentage;cc[i]=f(unit[ck.."_"..co].getData()).timeLeft;if cc[i]=="n/a"then cc[i]=0 end else cr=m(cb[i][ce])-cb[i][ch]cp=cb[i][cg]cd[i]=d(0.5+cr*100/cp)cq=cb[i][ci]cs=cb[i][cj]if cq<=cr then cc[i]=0 else cc[i]=d(0.5+cr/((cq-cr)/(bc-cs)))end;cb[i][ci]=cr;cb[i][cj]=bc end end;if bB==c9 then bB=e("%s %d",ca,i)end;if co==0 then bB=bB.." *"end;local ct;if cc[i]==0 then ct="n/a"else ct=FormatTimeString(cc[i])end;if cd[i]~=nil then local bS=d(cd[i]*2.55)local bT=e("rgb(%d,%d,%d)",255-bS,bS,0)local cu=""if ct~="n/a"and cc[i]<120 or cd[i]<5 then if aP then cu=[[class="red"]]end end;bG[#bG+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bn,cm,cu,bB,bn,cn,bT,cd[i],ct)cm=cm+30;cn=cn+30 end end end;bG[#bG+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(velocity)velocity=vec3(velocity)local bM=-math.deg(math.atan(velocity.y,velocity.z))+180;bM=bM-90;if bM<0 then bM=360+bM end;if bM>180 then bM=-180+bM-180 end;return-bM end;function getRelativeYaw(velocity)velocity=vec3(velocity)local cv=math.deg(math.atan(velocity.y,velocity.x))-90;if cv<-180 then cv=360+cv end;return cv end;function AlignToWorldVector(cw,cx)if not ad or RateOfChange>MinimumRateOfChange+0.08 or aa~=-1 then if cx==nil then cx=as end;cw=vec3(cw):normalize()local cy=vec3(core.getConstructWorldOrientationForward())-cw;local cz=-getMagnitudeInDirection(cy,core.getConstructWorldOrientationRight())*ar;local cA=-getMagnitudeInDirection(cy,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cz/2 end;if an==0 then an=cA/2 end;D=D-(cz+(cz-am)*DampingMultiplier)C=C+cA+(cA-an)*DampingMultiplier;am=cz;an=cA;if math.abs(cz)<cx and math.abs(cA)<cx then return true end;return false end end;function getAPEnableName()local bB=AutopilotTargetName;if bB==nil then bB=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bB==nil then bB="None"end;return"Engage Autopilot: "..bB end;function getAPDisableName()local bB=AutopilotTargetName;if bB==nil then bB=CustomTarget.name end;if bB==nil then bB="None"end;return"Disable Autopilot: "..bB end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cB=50;local cC=260;local cD=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cC,cB,at/2-cC/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cC,cB,at/2-cC/2-50-cD.width,au/2-cB+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cC,cB,at/2-cC/2+cD.width+50,au/2-cB+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cE=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cE.height,cE.x+cE.width+30,cE.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cE.height,cE.x+cE.width+30,cE.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cE.height,cE.x-200-30,cE.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cB=60;cC=300;local bn=10;local bo=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cC,cB,bn,bo,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cC,cB,bn+cC+20,bo,function()return AltitudeHold end,ToggleAltitudeHold)bo=bo+cB+20;MakeButton("Engage Autoland","Disable Autoland",cC,cB,bn,bo,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cC,cB,bn+cC+20,bo,function()return AutoTakeoff end,ToggleAutoTakeoff)bo=bo+cB+20;MakeButton("Show Orbit Display","Hide Orbit Display",cC,cB,bn,bo,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bo=bo+cB+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cC,cB,bn,bo,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cC,cB,bn+cC+20,bo,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bo=bo+cB+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cC,cB,bn,bo,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cC,cB,bn+cC+20,bo,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bo=bo+cB+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cC,cB,bn,bo,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bo=bo+cB+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cC*2,cB,bn,bo,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cF=Nav.axisCommandManager:getAxisCommandType(0)local cG="TRAVEL"if cF==1 then cG="CRUISE"end;if Autopilot then cG="AUTOPILOT"end;return cG end;function updateHud(bG)local cH=ae;local velocity=core.getVelocity()local bh=vec3(velocity):len()local bL=vec3(core.getWorldVertical())local bJ=vec3(core.getConstructWorldOrientationForward())local bK=vec3(core.getConstructWorldOrientationRight())local cI=vec3(core.getConstructWorldOrientationUp())local cJ=getRoll(bL,bJ,bK)local cK=cJ/180*math.pi;local cL=math.cos(cK)local cM=math.sin(cK)local bM=getPitch(bL,bJ,bK*cL+cI*cM)local cN=cJ;local cO=bM;local cP=j()local cQ=d(unit.getThrottle())local cR=bh*3.6;local cS=unit.getAxisCommandValue(0)local cG=GetFlightStyle()local cT="ROLL"local cU=unit.getClosestPlanetInfluence()>0;if cQ==nil then cQ=0 end;if not cU then if bh>5 then bM=getRelativePitch(velocity)cJ=getRelativeYaw(velocity)else bM=0;cJ=0 end;cT="YAW"end;bG[#bG+1]=a5;bG[#bG+1]=ao;bG[#bG+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bG,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bG,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bG,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bG,cH)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cU then DrawRollLines(bG,centerX,centerY,cN,cT,cU)DrawArtificialHorizon(bG,cO,cN,centerX,centerY,cU,d(getRelativeYaw(velocity)),bh)else DrawRollLines(bG,centerX,centerY,cJ,cT,cU)DrawArtificialHorizon(bG,bM,cJ,centerX,centerY,cU,d(cJ),bh)end;DrawAltitudeDisplay(bG,cH,cU)DrawPrograde(bG,velocity,bh,centerX,centerY)end end;DrawThrottle(bG,cG,cQ,cS)DrawSpeed(bG,cR)DrawWarnings(bG)DisplayOrbitScreen(bG)if screen_2 then local cV=vec3(core.getConstructWorldPos())local bn=960+cV.x/aU;local bo=450+cV.y/aV;screen_2.moveContent(aW,(bn-80)/19.2,(bo-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bG)local cW=aj;local cX=ak;local cY=aj;local cZ=ak;if IsInFreeLook()and not brightHud then cW=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]cX=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bG[#bG+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],cW,cW,cY,cY,cX,cX,cZ,cZ,ResolutionX,ResolutionY)end;function HUDEpilogue(bG)bG[#bG+1]="</svg>"end;function DrawSpeed(bG,cR)local c_=throtPosY-10;local d0=throtPosX+10;bG[#bG+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then c_=75 end;bG[#bG+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],d0,c_,d(cR))end;function DrawOdometer(bG,W,TotalDistanceTravelled,cG,X,cP)local d1=ConvertResolutionX(1240)local d2=ConvertResolutionY(55)local d3=d2+10;local cP=j()local be=core.g()local d4=0;local d5=0;local d6=0;RefreshLastMaxBrake(be)if ad then d6=LastMaxBrakeInAtmo else d6=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local d7=vec3(core.getWorldAcceleration()):len()/9.80665;if be>0.1 then d5=aB*be;d4=maxThrust/be end;bG[#bG+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d1=ConvertResolutionX(1120)d2=ConvertResolutionY(55)d3=d2+10 elseif ad then local d8=ConvertResolutionX(770)bG[#bG+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],d8,d2,d8,d3,cP)end;bG[#bG+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],d1,d2,d1,d3,be/9.80665,d1,d2+20,d1,d3+20,d7)bG[#bG+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bG[#bG+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),d6/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cG)if be>0.1 then bG[#bG+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),d4/1000,ConvertResolutionX(1240),ConvertResolutionY(20),d5/1000)else bG[#bG+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bG[#bG+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cG)end;bG[#bG+1]="</g>"end;function DrawThrottle(bG,cG,cQ,cS)local cm=throtPosY+10;local cn=throtPosY+20;if o()==1 and not RemoteHud then cm=55;cn=65 end;local d9="CRUISE"local unit="km/h"local da=cS;if cG=="TRAVEL"or cG=="AUTOPILOT"then d9="THROT"unit="%"da=cQ;local db="dim"if cQ<0 then db="red"end;bG[#bG+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],db,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(cQ),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bG[#bG+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cm,d9,throtPosX+10,cn,da,unit)end;function DrawVerticalSpeed(bG,cH)if cH<200000 and not ad or cH and ad then local dc=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dd=0;if math.abs(dc)>1 then dd=45*math.log(math.abs(dc),10)if dc<0 then dd=-dd end end;bG[#bG+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dc),d(dd))end end;function getHeading(bY)local de=-vec3(core.getWorldVertical())bY=bY-bY:project_on(de)local df=vec3(0,0,1)df=df-df:project_on(de)local dg=df:cross(de)local dd=df:angle_between(bY)*constants.rad2deg;if bY:dot(dg)<0 then dd=360-dd end;return dd end;function DrawRollLines(bG,centerX,centerY,cN,cT,cU)local dh=circleRad;local di=20;di=d(di)local dj=d(cN)if cU then for i=-45,45,5 do local dk=i;bG[#bG+1]=e([[<g transform="rotate(%f,%d,%d)">]],dk,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bG[#bG+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dh+di-len,centerX,centerY+dh+di)end;bG[#bG+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dh+di-35,cT,centerX,centerY+dh+di-25,dj)bG[#bG+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cN,centerX,centerY)bG[#bG+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dh+di-20,centerX+5,centerY+dh+di-20,centerX,centerY+dh+di-15)bG[#bG+1]="</g>"end;local cv=dj;if cU then cv=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dl=20;local dm=d(cv)local dn=0;local dp=centerY+dh+di+20;local dq=centerX;if cT~="YAW"then dp=ConvertResolutionY(130)dq=ConvertResolutionX(960)end;local dr=[[<path class="txttick line" d="]]for i=d(dm-(dl+10)-dm%5+0.5),d(dm+dl+10+dm%5+0.5),5 do local bn=dq+-i*5+cv*5;if i%10==0 then dn=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bG[#bG+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bn+5,dp-12,p)elseif i%5==0 then dn=5 end;if dn==10 then dr=e([[%s M %f %f v %d]],dr,bn,dp-5,dn)else dr=e([[%s M %f %f v %d]],dr,bn,dp-2.5,dn)end end;bG[#bG+1]=dr..[["/>]]bG[#bG+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dq-5,dp+10,dq+5,dp+10,dq,dp+5)if cU then cT="HDG"end;bG[#bG+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dq,dp+25,dm,dq,dp+35,cT)end;function DrawArtificialHorizon(bG,cO,cN,centerX,centerY,cU,ds,bh)local dh=circleRad;local dt=d(dh*3/5)if dh>0 then local du=d(cO)local len=0;local dr=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cN,centerX,centerY)if not ad then dr=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bG[#bG+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dh-1,centerX,centerY)bG[#bG+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(du-30-du%5+0.5),d(du+30+du%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bo=centerY+-i*5+cO*5;if len==30 then dr=e([[%s M %d %f h %d]],dr,centerX-dt-len,bo,len)if ad then bG[#bG+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cN,centerX,centerY,centerX-dt+10,bo,i)bG[#bG+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cN,centerX,centerY,centerX+dt-10,bo,i)if i==0 or i==180 or i==-180 then bG[#bG+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cN,centerX,centerY,centerX-dt+20,bo,dt*2-40)end else bG[#bG+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dt+10,bo,i)bG[#bG+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dt-10,bo,i)end;dr=e([[%s M %d %f h %d]],dr,centerX+dt,bo,len)else dr=e([[%s M %d %f h %d]],dr,centerX-dt-len,bo,len)dr=e([[%s M %d %f h %d]],dr,centerX+dt,bo,len)end end;bG[#bG+1]=dr..[["/>]]local dv="PITCH"if not cU then dv="REL PITCH"end;if cO>90 and not ad then cO=90-(cO-90)elseif cO<-90 and not ad then cO=-90-(cO+90)end;if dh>200 then if ad then if bh>w then bG[#bG+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ds)end;bG[#bG+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cN,centerX,centerY)else bG[#bG+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bG[#bG+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dt+25,centerY-5,centerX-dt+20,centerY,centerX-dt+25,centerY+5,centerX-dt+50,centerY+4,du)bG[#bG+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dt-25,centerY-5,centerX+dt-20,centerY,centerX+dt-25,centerY+5,centerX+dt-30,centerY+4,du)bG[#bG+1]="</g>"end;local dw=d(dh/3)bG[#bG+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dw,centerY,dh-dw)if not ad and cU then bG[#bG+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cN,centerX,centerY,centerX-dt+10,centerY,dt*2-20)end;bG[#bG+1]="</g>"if dh<200 then if ad and bh>w then bG[#bG+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dh,dv,centerX,centerY-dh+10,du,centerX,centerY-15,"Yaw",centerX,centerY+20,ds)else bG[#bG+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dh,dv,centerX,centerY-dh+15,du)end end end end;function DrawAltitudeDisplay(bG,cH,cU)local dx=altMeterX;local dy=altMeterY;local dz=78;local dA=19;local dB=AboveGroundLevel()if dB~=-1 then table.insert(bG,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dx+dz,dy+dA+20,dB))end;if cU and(cH<200000 and not ad or cH and ad)then table.insert(bG,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dx-1,dy-4,dz+2,dA+6,dx+1,dy-1,dz-4,dA))local bE=0;local dC=1;local dD=0;local dE=cH<0;local dF=9;if dE then dF=0 end;local cH=math.abs(cH)while bE<6 do local dG=11;local dH=16;local dI=9;local dJ=14;local cu="altsm"if bE>2 then dH=dH+3;dG=dG+2;dJ=dJ+2;dI=dI-6;cu="altbig"end;if dE then cu=cu.." red"end;local dK=cH/dC%10;local dL=d(dK)local dM=d((dL+1)%10)local dN=dD;if bE==0 then dN=dK-dL;if dE then dN=1-dN end end;if dE and(bE==0 or dD~=0)then local dO=dM;dM=dL;dL=dO end;local dP=dH*(dN-1)local dQ=dP+dH;local bn=dx+dI+(6-bE)*dG;local bo=dy+dJ;table.insert(bG,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cu,bn,bo+dP,dM,bn,bo+dQ,dL))bE=bE+1;dC=dC*10;if dL==dF then dD=dN else dD=0 end end;table.insert(bG,[[</g></g>]])end end;function DrawPrograde(bG,velocity,bh,centerX,centerY)if bh>5 and not ad or bh>w then local dh=circleRad;local dR=20;local dS=20;local dT=vec3(velocity)local dU=getRelativePitch(dT)local dV=getRelativeYaw(dT)local dW=-dV/dS*dh;local dX=dU/dR*dh;local bn=centerX+dW;local bo=centerY+dX;local a3=math.sqrt(dW^2+dX^2)if a3<dh then bG[#bG+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bn,bo)else local dd=math.atan(dX,dW)local dY=centerX+dh*math.cos(dd)local dZ=centerY+dh*math.sin(dd)bG[#bG+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',dY,dZ)end;dU=getRelativePitch(-dT)dV=getRelativeYaw(-dT)dW=-dV/dS*dh;dX=dU/dR*dh;bn=centerX+dW;bo=centerY+dX;a3=math.sqrt(dW^2+dX^2)if not ad then if a3<dh then bG[#bG+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bn,bo)else local dd=math.atan(dX,dW)local dY=centerX+dh*math.cos(dd)local dZ=centerY+dh*math.sin(dd)bG[#bG+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',dY,dZ)end end end end;function DrawWarnings(bG)bG[#bG+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bG[#bG+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bG[#bG+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bG[#bG+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bG[#bG+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local d_=ConvertResolutionX(960)local e0=ConvertResolutionY(860)local e1=ConvertResolutionY(880)local e2=ConvertResolutionY(900)local e3=ConvertResolutionY(960)local e4=ConvertResolutionY(200)local e5=ConvertResolutionY(150)local e6=ConvertResolutionY(960)if o()==1 and not RemoteHud then e0=ConvertResolutionY(135)e1=ConvertResolutionY(155)e2=ConvertResolutionY(175)e4=ConvertResolutionY(115)e5=ConvertResolutionY(95)end;if BrakeIsOn then bG[#bG+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],d_,e0)end;if ad and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bG[#bG+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],d_,e4+50)end;if ah then bG[#bG+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],d_,e6)end;if GearExtended then if A then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],d_,e1)else bG[#bG+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],d_,e1)end;bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],d_,e2,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],d_,e3+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],d_,e4+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bG[#bG+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],d_,e4+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],d_,e4+20,AutopilotStatus)elseif LockPitch~=nil then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],d_,e4+20,d(LockPitch))elseif I then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],d_,e4+20)elseif Reentry then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],d_,e4+20)end;if AltitudeHold then if AutoTakeoff then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],d_,e4,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bG[#bG+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],d_,e4+50)end else bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],d_,e4,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bG[#bG+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],d_,e4)else bG[#bG+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],d_,e4)end end;if ProgradeIsOn then bG[#bG+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],d_,e4)end;if RetrogradeIsOn then bG[#bG+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],d_,e4)end;if TurnBurn then bG[#bG+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],d_,e5)end;if VectorToTarget then bG[#bG+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],d_,e4+30,VectorStatus)end;bG[#bG+1]="</g>"end;function DisplayOrbitScreen(bG)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local e7=75;local e8=0;local e9=250;local ea=4;e8=e8+ea;local eb=15;local bn=e7+e9+e7/2+ea;local bo=e8+e9/2+5+ea;local ec,ed,ee,ef;ec=e9/4;ef=0;bG[#bG+1]=[[<g class="pbright txtorb txtmid">]]bG[#bG+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',e9+e7*2,e9+e8,ea,ea)if orbit.periapsis~=nil and orbit.apoapsis~=nil then ee=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ec*2)ed=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/ee*(1-orbit.eccentricity)ef=ec-orbit.periapsis.altitude/ee-planet.radius/ee;local eg=""if orbit.periapsis.altitude<=0 then eg='redout'end;bG[#bG+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eg,e7+e9/2+ef+ea,e8+e9/2+ea,ec,ed)bG[#bG+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',e7+e9/2+ea,e8+e9/2+ea,planet.radius/ee)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bG[#bG+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bn-35,bo-5,e7+e9/2+ec+ef,bo-5)bG[#bG+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bn,bo)bo=bo+eb;bG[#bG+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getDistanceDisplayString(orbit.apoapsis.altitude))bo=bo+eb;bG[#bG+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,FormatTimeString(orbit.timeToApoapsis))bo=bo+eb;bG[#bG+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getSpeedDisplayString(orbit.apoapsis.speed))end;bo=e8+e9/2+5+ea;bn=e7-e7/2+10+ea;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bG[#bG+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bn+35,bo-5,e7+e9/2-ec+ef,bo-5)bG[#bG+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bn,bo)bo=bo+eb;bG[#bG+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getDistanceDisplayString(orbit.periapsis.altitude))bo=bo+eb;bG[#bG+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,FormatTimeString(orbit.timeToPeriapsis))bo=bo+eb;bG[#bG+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getSpeedDisplayString(orbit.periapsis.speed))end;bG[#bG+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],e7+e9/2+ea,20+ea,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eh=orbit.timeToApoapsis/orbit.period*2*math.pi;local ei=ec*math.cos(eh)local ej=ed*math.sin(eh)bG[#bG+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',e7+e9/2+ei+ef+ea,e8+e9/2+ej+ea)end;bG[#bG+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local ek=a3>100000;local b6=""if ek then b6=round(a3/1000/200,1).." SU"elseif a3<1000 then b6=round(a3,1).." M"else b6=round(a3/1000,1).." KM"end;return b6 end;function getDistanceDisplayString2(a3)local ek=a3>100000;local b6=""if ek then b6=round(a3/1000/200,2).." SU"elseif a3<1000 then b6=round(a3,2).." M"else b6=round(a3/1000,2).." KM"end;return b6 end;function getSpeedDisplayString(bh)return d(round(bh*3.6,0)+0.5).." km/h"end;function FormatTimeString(el)local em=0;local en=0;local eo=0;if el<60 then el=d(el)elseif el<3600 then em=d(el/60)el=d(el%60)elseif el<86400 then en=d(el/3600)em=d(el%3600/60)else eo=d(el/86400)en=d(el%86400/60)end;if eo>0 then return eo.."d "..en.."h "elseif en>0 then return en.."h "..em.."m "elseif em>0 then return em.."m "..el.."s"elseif el>0 then return el.."s"else return"0s"end end;function getMagnitudeInDirection(cw,ep)cw=vec3(cw)ep=vec3(ep):normalize()local b6=cw*ep;return b6.x+b6.y+b6.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eq=AtlasOrdered[AutopilotTargetIndex].index;local er=aS[0][eq]if er.center then AutopilotTargetName=er.name;V=aY[0][eq]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=er;for _,b5 in pairs(aY[0])do if b5.name==CustomTarget.planetname then V=b5;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(V.center)_,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local es=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return es end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local bh=vec3(velocity):len()local et,eu=aZ.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ev;if not TurnBurn then _,ev=GetAutopilotBrakeDistanceAndTime(bh)else _,ev=GetAutopilotTBBrakeDistanceAndTime(bh)end;local ew=0;local ex=0;if AutopilotCruising or not Autopilot and bh>5 then ex=aZ.computeTravelTime(bh,0,AutopilotDistance)elseif P+et<AutopilotDistance then ew=AutopilotDistance-(P+et)ex=aZ.computeTravelTime(8333.0556,0,ew)else local ey=(AutopilotDistance-P)/et;et=AutopilotDistance-P;eu=eu*ey end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return ex elseif AutopilotBraking then return ev elseif AutopilotCruising then return ex+ev else return eu+Q+ex end end;function GetAutopilotBrakeDistanceAndTime(bh)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bh)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local ez=-1;local eA=-1;if vBooster then ez=vBooster.distance()end;if hover then eA=hover.distance()end;if ez~=-1 and eA~=-1 then if ez<eA then return ez else return eA end elseif ez~=-1 then return ez elseif eA~=-1 then return eA else return-1 end end;function AboveGroundLevel()local eB=-1;local eC=aa;if telemeter_1 then eB=telemeter_1.getDistance()end;if eC~=-1 and eB~=-1 then if eC<eB then return eC else return eB end elseif eC~=-1 then return eC else return eB end end;function tablelength(eD)local eE=0;for _ in pairs(eD)do eE=eE+1 end;return eE end;function BeginProfile(eF)ProfileTimeStart=system.getTime()end;function EndProfile(eF)local eG=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eG;ProfileCount=ProfileCount+1;if eG>ProfileTimeMax then ProfileTimeMax=eG end;if eG<ProfileTimeMin then ProfileTimeMin=eG end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eH=ProfileTimeSum;local eI=ProfileTimeSum/ProfileCount;local eJ=ProfileTimeMin;local eK=ProfileTimeMax;local eL=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eH,eI,eJ,eK,eL))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eM=radar_1.getEntries()local eN=radar_1.getData()local eO=ConvertResolutionX(1770)local eP=ConvertResolutionY(330)if#eM>0 then local eQ=eN:find('identifiedConstructs":%[%]')if eQ==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if eQ~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],eO,eP,#eM)local eR={}for b4,b5 in pairs(eM)do if radar_1.hasMatchingTransponder(b5)==1 then eR[#eR+1]=b5 end end;if#eR>0 then local bo=ConvertResolutionY(15)local bn=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bn,bo)for b4,b5 in pairs(eR)do bo=bo+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bn,bo,radar_1.getConstructName(b5))end end else local eS;eS=eN:find('worksInEnvironment":false')if eS then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],eO,eP)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],eO,eP)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bG,eT)if eT~="empty"then bG[#bG+1]=[[<text class="msg" x="50%%" y="310" >]]for eU in string.gmatch(eT,"([^\n]+)")do bG[#bG+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],eU)end;bG[#bG+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bc=system.getTime()local velocity=vec3(core.getWorldVelocity())local cR=vec3(velocity):len()local eV=bc-ag;if cR>1.38889 then cR=cR/1000;local eW=cR*(bc-ag)TotalDistanceTravelled=TotalDistanceTravelled+eW;W=W+eW end;X=X+eV;TotalFlightTime=TotalFlightTime+eV;ag=bc end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for b4,b5 in pairs(aS[0])do if av==nil or b5.center.x<av then av=b5.center.x end;if aw==nil or b5.center.x>aw then aw=b5.center.x end;if ax==nil or b5.center.y<ax then ax=b5.center.y end;if ay==nil or b5.center.y>ay then ay=b5.center.y end end;aT=""local eX=1.1*(aw-av)/1920;local eY=1.4*(ay-ax)/1080;for b4,b5 in pairs(aS[0])do local bn=960+b5.center.x/eX;local bo=540+b5.center.y/eY;aT=aT..'<circle cx="'..bn..'" cy="'..bo..'" r="'..b5.radius/eX*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(b5.name,"Moon")and not string.match(b5.name,"Sanctuary")then aT=aT.."<text x='"..bn.."' y='"..bo+b5.radius/eX*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..b5.name.."</text>"end end;local cV=vec3(core.getConstructWorldPos())local bn=960+cV.x/eX;local bo=540+cV.y/eY;aT=aT..'<circle cx="'..bn..'" cy="'..bo..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bn.."' y='"..bo-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=eX;aV=eY;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local cV=vec3(core.getConstructWorldPos())local bn=960+cV.x/eX;local bo=540+cV.y/eY;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bn-80)/19.20,(bo-80)/10.80,aT)end end;function PlanetRef()local function eZ(e_)return type(e_)=='number'end;local function f0(e_)return type(tonumber(e_))=='number'end;local function f1(f2)return type(f2)=='table'end;local function f3(f4)return type(f4)=='string'end;local function f5(b5)return f1(b5)and eZ(b5.x and b5.y and b5.z)end;local function f6(f7)return f1(f7)and eZ(f7.latitude and f7.longitude and f7.altitude and f7.bodyId and f7.systemId)end;local f8=math.pi/180;local f9=180/math.pi;local fa=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local fb='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fc=utils.clamp;local function fd(fe,ff)if fe==0 then return math.abs(ff)<1e-09 end;if ff==0 then return math.abs(fe)<1e-09 end;return math.abs(fe-ff)<math.max(math.abs(fe),math.abs(ff))*fa end;local function fg(e_)local b6=string.gsub(string.reverse(e('%.4f',e_)),'^0*%.?','')return b6==''and'0'or string.reverse(b6)end;local function fh(fi)if f5(fi)then return e('{x=%.3f,y=%.3f,z=%.3f}',fi.x,fi.y,fi.z)end;if f1(fi)and not getmetatable(fi)then local fj={}local fk=next(fi)if type(fk)=='nil'or fk==1 then fj=fi else for b4,b5 in pairs(fi)do local da=fh(b5)if type(b4)=='number'then table.insert(fj,e('[%s]=%s',b4,da))else table.insert(fj,e('%s=%s',b4,da))end end end;return e('{%s}',table.concat(fj,','))end;if f3(fi)then return e("'%s'",fi:gsub("'",[[\']]))end;return tostring(fi)end;local fl={}fl.__index=fl;fl.__tostring=function(fi,fm)local fn={}for b4 in pairs(fi)do table.insert(fn,b4)end;table.sort(fn)local fj={}for _,b4 in ipairs(fn)do local da=fh(fi[b4])if type(b4)=='number'then table.insert(fj,e('[%s]=%s',b4,da))else table.insert(fj,e('%s=%s',b4,da))end end;if fm then return e('%s%s',fm,table.concat(fj,',\n'..fm))end;return e('{%s}',table.concat(fj,','))end;fl.__eq=function(fo,fp)return fo.planetarySystemId==fp.planetarySystemId and fo.bodyId==fp.bodyId and fd(fo.radius,fp.radius)and fd(fo.center.x,fp.center.x)and fd(fo.center.y,fp.center.y)and fd(fo.center.z,fp.center.z)and fd(fo.GM,fp.GM)end;local function fq(fr,fs,ft,fu,fv)assert(f0(fr),'Argument 1 (planetarySystemId) must be a number:'..type(fr))assert(f0(fs),'Argument 2 (bodyId) must be a number:'..type(fs))assert(f0(ft),'Argument 3 (radius) must be a number:'..type(ft))assert(f1(fu),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fu))assert(f0(fv),'Argument 5 (GM) must be a number:'..type(fv))return setmetatable({planetarySystemId=tonumber(fr),bodyId=tonumber(fs),radius=tonumber(ft),center=vec3(fu),GM=tonumber(fv)},fl)end;local fw={}fw.__index=fw;fw.__tostring=function(fx)return e('::pos{%d,%d,%s,%s,%s}',fx.systemId,fx.bodyId,fg(fx.latitude*f9),fg(fx.longitude*f9),fg(fx.altitude))end;fw.__eq=function(fo,fp)return fo.bodyId==fp.bodyId and fo.systemId==fp.systemId and fd(fo.latitude,fp.latitude)and fd(fo.altitude,fp.altitude)and(fd(fo.longitude,fp.longitude)or fd(fo.latitude,math.pi/2)or fd(fo.latitude,-math.pi/2))end;local function fy(fz,fs,fA,fB,cH)local fr=fz;if f3(fz)and not fB and not cH and not fs and not fA then fr,fs,fA,fB,cH=string.match(fz,fb)assert(fr,'Argument 1 (position string) is malformed.')else assert(f0(fr),'Argument 1 (systemId) must be a number:'..type(fr))assert(f0(fs),'Argument 2 (bodyId) must be a number:'..type(fs))assert(f0(fA),'Argument 3 (latitude) must be in degrees:'..type(fA))assert(f0(fB),'Argument 4 (longitude) must be in degrees:'..type(fB))assert(f0(cH),'Argument 5 (altitude) must be in meters:'..type(cH))end;fr=tonumber(fr)fs=tonumber(fs)fA=tonumber(fA)fB=tonumber(fB)cH=tonumber(cH)if fs==0 then return setmetatable({latitude=fA,longitude=fB,altitude=cH,bodyId=fs,systemId=fr},fw)end;return setmetatable({latitude=f8*fc(fA,-90,90),longitude=f8*(fB%360),altitude=cH,bodyId=fs,systemId=fr},fw)end;local fC={}fC.__index=fC;fC.__tostring=function(fi,fm)local fD=fm and fm..'  'local fE={}local fn={}for b4 in pairs(fi)do table.insert(fn,b4)end;table.sort(fn)for _,fF in ipairs(fn)do bdy=fi[fF]local fG=fl.__tostring(bdy,fD)if fm then table.insert(fE,e('[%s]={\n%s\n%s}',fF,fG,fm))else table.insert(fE,e('  [%s]=%s',fF,fG))end end;if fm then return e('\n%s%s%s',fm,table.concat(fE,',\n'..fm),fm)end;return e('{\n%s\n}',table.concat(fE,',\n'))end;local function fH(fI)local aS={}local pid;for _,b5 in pairs(fI)do local bC=b5.planetarySystemId;if type(bC)~='number'then error('Invalid planetary system ID: '..tostring(bC))elseif pid and bC~=pid then error('Mismatch planetary system IDs: '..bC..' and '..pid)end;local fJ=b5.bodyId;if type(fJ)~='number'then error('Invalid body ID: '..tostring(fJ))elseif aS[fJ]then error('Duplicate body ID: '..tostring(fJ))end;setmetatable(b5.center,getmetatable(vec3.unit_x))aS[fJ]=setmetatable(b5,fl)pid=bC end;return setmetatable(aS,fC)end;aX={}local function fK(fI)return setmetatable({galaxyAtlas=fI or{}},aX)end;aX.__index=function(f2,i)if type(i)=='number'then local system=f2.galaxyAtlas[i]return fH(system)end;return rawget(aX,i)end;aX.__pairs=function(fi)return function(f2,b4)local fL,nv=next(f2,b4)return fL,nv and fH(nv)end,fi.galaxyAtlas,nil end;aX.__tostring=function(fi)local fM={}for _,fN in pairs(fi or{})do local fO=fN:getPlanetarySystemId()local fP=fC.__tostring(fN,'    ')table.insert(fM,e('  [%s]={%s\n  }',fO,fP))end;return e('{\n%s\n}\n',table.concat(fM,',\n'))end;aX.BodyParameters=fq;aX.MapPosition=fy;aX.PlanetarySystem=fH;function aX.createBodyParameters(fQ,fs,fR,fS,fT,fU,fV)assert(f0(fQ),'Argument 1 (planetarySystemId) must be a number:'..type(fQ))assert(f0(fs),'Argument 2 (bodyId) must be a number:'..type(fs))assert(f0(fR),'Argument 3 (surfaceArea) must be a number:'..type(fR))assert(f1(fS),'Argument 4 (aPosition) must be an array or vec3:'..type(fS))assert(f1(fT),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(fT))assert(f0(fU),'Argument 6 (altitude) must be in meters:'..type(fU))assert(f0(fV),'Argument 7 (gravityAtPosition) must be number:'..type(fV))local ft=math.sqrt(fR/4/math.pi)local a3=ft+fU;local fW=vec3(fS)+a3*vec3(fT)local fv=fV*a3*a3;return fq(fQ,fs,ft,fW,fv)end;aX.isMapPosition=f6;function aX:getPlanetarySystem(fz)if i==nil then i=0 end;if nv==nil then nv=0 end;local fQ=fz;if f6(fz)then fQ=fz.systemId end;if type(fQ)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fC then system=fH(system)end;return system end end end;function fC:castIntersections(fX,ep,fY,fZ)local fY=fY or function(f_)return 1.05*f_.radius end;local g0={}if fZ then for _,i in ipairs(fZ)do g0[i]=self[i]end else fZ={}for b4,f_ in pairs(self)do table.insert(fZ,b4)g0[b4]=f_ end end;local function g1(g2,g3)local g4=g0[g2].center-fX;local g5=g0[g3].center-fX;return g4:len()<g5:len()end;table.sort(fZ,g1)local g6=ep:normalize()for i,bC in ipairs(fZ)do local f_=g0[bC]local g7=f_.center-fX;local ft=fY(f_)local g8=g7:dot(g6)local g9=g8^2-(g7:len2()-ft^2)if g9>=0 then local ga=math.sqrt(g9)local gb=g8+ga;local gc=g8-ga;if gc>0 then return f_,gb,gc elseif gb>0 then return f_,gb,nil end end end;return nil,nil,nil end;function fC:closestBody(gd)assert(type(gd)=='table','Invalid coordinates.')local ge,f_;local gf=vec3(gd)for _,gg in pairs(self)do local gh=(gg.center-gf):len2()if not f_ or gh<ge then f_=gg;ge=gh end end;return f_ end;function fC:convertToBodyIdAndWorldCoordinates(fz)local gi=fz;if f3(fz)then gi=fy(fz)end;if gi.bodyId==0 then return 0,vec3(gi.latitude,gi.longitude,gi.altitude)end;local gg=self:getBodyParameters(gi)if gg then return gi.bodyId,gg:convertToWorldCoordinates(gi)end end;function fC:getBodyParameters(fz)local fs=fz;if f6(fz)then fs=fz.bodyId end;assert(f0(fs),'Argument 1 (bodyId) must be a number:'..type(fs))return self[fs]end;function fC:getPlanetarySystemId()local _,b5=next(self)return b5 and b5.planetarySystemId end;function fl:convertToMapPosition(fu)assert(f1(fu),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fu))local gj=vec3(fu)if self.bodyId==0 then return setmetatable({latitude=gj.x,longitude=gj.y,altitude=gj.z,bodyId=0,systemId=self.planetarySystemId},fw)end;local gk=gj-self.center;local a3=gk:len()local cH=a3-self.radius;local fA=0;local fB=0;if not fd(a3,0)then local gl=math.atan(gk.y,gk.x)fB=gl>=0 and gl or 2*math.pi+gl;fA=math.pi/2-math.acos(gk.z/a3)end;return setmetatable({latitude=fA,longitude=fB,altitude=cH,bodyId=self.bodyId,systemId=self.planetarySystemId},fw)end;function fl:convertToWorldCoordinates(fz)local gi=f3(fz)and fy(fz)or fz;if gi.bodyId==0 then return vec3(gi.latitude,gi.longitude,gi.altitude)end;assert(f6(gi),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gi.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gi.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local gm=math.cos(gi.latitude)return self.center+(self.radius+gi.altitude)*vec3(gm*math.cos(gi.longitude),gm*math.sin(gi.longitude),math.sin(gi.latitude))end;function fl:getAltitude(fu)return(vec3(fu)-self.center):len()-self.radius end;function fl:getDistance(fu)return(vec3(fu)-self.center):len()end;function fl:getGravity(fu)local gn=self.center-vec3(fu)local go=gn:len2()return self.GM/go*gn/math.sqrt(go)end;return setmetatable(aX,{__call=function(_,...)return fK(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function f3(f4)return type(f4)=='string'end;local function f1(f2)return type(f2)=='table'end;local function fd(fe,ff)if fe==0 then return math.abs(ff)<1e-09 end;if ff==0 then return math.abs(fe)<1e-09 end;return math.abs(fe-ff)<math.max(math.abs(fe),math.abs(ff))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cH)assert(self.body)local a3=cH+self.body.radius;if not fd(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fz,velocity)assert(self.body)assert(f1(fz)or f3(fz))assert(f1(velocity))local cV=(f3(fz)or PlanetRef.isMapPosition(fz))and self.body:convertToWorldCoordinates(fz)or vec3(fz)local b5=vec3(velocity)local gp=cV-self.body.center;local g5=b5:len2()local gq=gp:len()local gr=self.body.GM;local gs=((g5-gr/gq)*gp-gp:dot(b5)*b5)/gr;local fe=gr/(2*gr/gq-g5)local gt=gs:len()local g6=gs:normalize()local gu=fe*(1-gt)local gv=fe*(1+gt)local gw=gu*g6+self.body.center;local gx=gt<=1 and-gv*g6+self.body.center or nil;local gy=math.sqrt(fe*gr*(1-gt*gt))local gz=gx and 2*math.pi*math.sqrt(fe^3/gr)local gA=math.acos(gs:dot(gp)/(gt*gq))if gp:dot(b5)<0 then gA=-(gA-2*math.pi)end;local gB=math.acos((math.cos(gA)+gt)/(1+gt*math.cos(gA)))local gC=gB;if gC<0 then gC=gC+2*math.pi end;local gD=gC-gt*math.sin(gC)local gE=0;local gF=0;local gG=0;if gz~=nil then gE=gD/(2*math.pi/gz)gF=gz-gE;gG=gF+gz/2;if gA-math.pi>0 then gF=gE;gG=gF+gz/2 end;if gG>gz then gG=gG-gz end end;return{periapsis={position=gw,speed=gy/gu,circularOrbitSpeed=math.sqrt(gr/gu),altitude=gu-self.body.radius},apoapsis=gx and{position=gx,speed=gy/gv,circularOrbitSpeed=math.sqrt(gr/gv),altitude=gv-self.body.radius},currentVelocity=b5,currentPosition=cV,eccentricity=gt,period=gz,eccentricAnomaly=gB,meanAnomaly=gD,timeToPeriapsis=gF,timeToApoapsis=gG}end;local function gH(gI)local gg=PlanetRef.BodyParameters(gI.planetarySystemId,gI.bodyId,gI.radius,gI.center,gI.GM)return setmetatable({body=gg},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gH(...)end})end;function Kinematics()local aZ={}local gJ=30000000/3600;local gK=gJ*gJ;local gL=100;local function gM(b5)return 1/math.sqrt(1-b5*b5/gK)end;function aZ.computeAccelerationTime(gN,gO,gP)local gQ=gJ*math.asin(gN/gJ)return(gJ*math.asin(gP/gJ)-gQ)/gO end;function aZ.computeDistanceAndTime(gN,gP,gR,gS,gT,gU)gT=gT or 0;gU=gU or 0;local gV=gN<=gP;local gW=gS*(gV and 1 or-1)/gR;local gX=-gU/gR;local gY=gW+gX;if gV and gY<=0 or not gV and gY>=0 then return-1,-1 end;local gZ,g_=0,0;if gW~=0 and gT>0 then local gQ=math.asin(gN/gJ)local h0=math.pi*(gW/2+gX)local h1=gW*gT;local h2=gJ*math.pi;local b5=function(f2)local c0=(h0*f2-h1*math.sin(math.pi*f2/2/gT)+h2*gQ)/h2;local h3=math.tan(c0)return gJ*h3/math.sqrt(h3*h3+1)end;local h4=gV and function(f4)return f4>=gP end or function(f4)return f4<=gP end;g_=2*gT;if h4(b5(g_))then local h5=0;while math.abs(g_-h5)>0.5 do local f2=(g_+h5)/2;if h4(b5(f2))then g_=f2 else h5=f2 end end end;local h6=gN;local h7=g_/gL;for h8=1,gL do local bh=b5(h8*h7)gZ=gZ+(bh+h6)*h7/2;h6=bh end;if g_<2*gT then return gZ,g_ end;gN=h6 end;local gQ=gJ*math.asin(gN/gJ)local b7=(gJ*math.asin(gP/gJ)-gQ)/gY;local h9=gK*math.cos(gQ/gJ)/gY;local a3=h9-gK*math.cos((gY*b7+gQ)/gJ)/gY;return a3+gZ,b7+g_ end;function aZ.computeTravelTime(gN,gO,a3)if a3==0 then return 0 end;if gO>0 then local gQ=gJ*math.asin(gN/gJ)local h9=gK*math.cos(gQ/gJ)/gO;return(gJ*math.acos(gO*(h9-a3)/gK)-gQ)/gO end;assert(gN>0,'Acceleration and initial speed are both zero.')return a3/gN end;function aZ.lorentz(b5)return gM(b5)end;return aZ end;function script.onStart()VERSION_NUMBER=4.920;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bA=j()if door and(bA>0 or bA==0 and ae<10000)then for _,b5 in pairs(door)do b5.toggle()end end;if switch then for _,b5 in pairs(switch)do b5.toggle()end end;if forcefield and(bA>0 or bA==0 and ae<10000)then for _,b5 in pairs(forcefield)do b5.toggle()end end;if dbHud_1 then if not Y then for b4,b5 in pairs(b)do dbHud_1.setStringValue(b5,g(_G[b5]))end;for b4,b5 in pairs(a)do dbHud_1.setStringValue(b5,g(_G[b5]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(ha)if ha=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hb=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hb then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ha=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bG={}local cG=GetFlightStyle()DrawOdometer(bG,W,TotalDistanceTravelled,cG,X)CheckDamage(bG)a5=table.concat(bG,"")collectgarbage("collect")elseif ha=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local b6=json.decode(dbHud_1.getStringValue("SavedLocations"))if b6~=nil then _G["SavedLocations"]=b6;local bE=-1;local bz;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name=="SatNav Location"then bE=b4;break end end;if bE~=-1 then bz=SavedLocations[bE]bE=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name=="SatNav Location"then bE=b4;break end end;if bE>-1 then aS[0][bE]=bz end;UpdateAtlasLocationsList()K=bz.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ha=="msgTick"then local bG={}DisplayMessage(bG,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif ha=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif ha=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)aa=hoverDetectGround()local hc=system.getMouseDeltaX()local hd=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local he=velMag>8334;if not he and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=he;if ad and j()>0.09 then if not ai then if velMag>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if velMag<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bG={}HUDPrologue(bG)if showHud then updateHud(bG)else DisplayOrbitScreen(bG)DrawWarnings(bG)end;HUDEpilogue(bG)bG[#bG+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bG,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bG)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bG)if screen_1.getMouseState()==1 then CheckButtons()end;bG[#bG+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+hc;a1=a1+hd end;SetButtonContains()DrawButtons(bG)if not b0 and not b1 then local hf=table.concat(bG,"")bG={}bG[#bG+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bG[#bG+1]=aT;bG[#bG+1]=hf;bG[#bG+1]="</body>"b0=true;bG[#bG+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bG,"")system.setScreen(content)elseif b1 then local hf=table.concat(bG,"")bG={}bG[#bG+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bG[#bG+1]=aT;bG[#bG+1]=hf;bG[#bG+1]="</body>"end;if not b0 then bG[#bG+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+hc;a1=a1+hd;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(hd,-100,100)+0.5)*2*y;D=(-utils.smoothstep(hc,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bG)end else SetButtonContains()DrawButtons(bG)end;bG[#bG+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bG[#bG+1]=[[</svg></body>]]content=table.concat(bG,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>w then local hg=AlignToWorldVector(vec3(velocity),0.01)if a7 then b2=true;if hg then ProgradeIsOn=false;x=true;BeginReentry()a7=false;a9=true;b2=autoRollPreference end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif velMag>w then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)end;P=P;Q=Q;local hh=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local hi=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local hj=getMagnitudeInDirection(hi,AutopilotShipUp)local hk=getMagnitudeInDirection(hi,AutopilotShipRight)local hl=-hk*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local hm=-hj*AutopilotDistance*velMag*TrajectoryAlignmentStrength;hh=AutopilotTargetCoords+-hl*vec3(AutopilotShipRight)+-hm*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hh)-vec3(core.getConstructWorldPos())):len()local hn=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hn)..'", "unit":""}')local ho=true;local hp=(V.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hp)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then ho=AlignToWorldVector((hh-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then ho=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not ho or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hp-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if ho then if not AutopilotRealigned then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif ho then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hq=0;local cV=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hr=cV-vec3(core.getConstructWorldPos())local hs=vec3(hr):project_on(vec3(core.getConstructWorldOrientationForward())):len()local ht=vec3(hr):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hs*hs+ht*ht)AlignToWorldVector(hr:normalize())local hu=40;local hv=a3<hu;local hw=100;local hx=utils.clamp((a3-hu)/2,10,hw)C=0;local ho=math.abs(D)<0.1;if ho and velMag<hx and not hv then BrakeIsOn=false;hq=-20 else BrakeIsOn=true;hq=0 end;local bJ=vec3(core.getConstructWorldOrientationForward())local bK=vec3(core.getConstructWorldOrientationRight())local bL=vec3(core.getWorldVertical())local bM=getPitch(bL,bJ,bK)local hy=1.0;if math.abs(hq-bM)>hy then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hq-bM)local hz=pitchPID:get()C=hz end end;local de=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cU=unit.getClosestPlanetInfluence()>0;local cH=ae;local hA=HoldAltitude-cH;local hB=500+velMag;local hq=(utils.smoothstep(hA,-hB,hB)-0.5)*2*MaxPitch;if not AltitudeHold then hq=0 end;if LockPitch~=nil then if cU then hq=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hC=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hC then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hC)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hq=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hq=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hD=C;if velMag>w then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cy=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cy)local hE=cy:len()-cy:project_on(de):len()local bi=LastMaxBrakeInAtmo;local dc=velocity.x*de.x+velocity.y*de.y+velocity.z*de.z;local hF=velocity:len()-math.abs(dc)local hG=vec3(core.getWorldAirFrictionAcceleration())if bi~=nil then P,Q=aZ.computeDistanceAndTime(hF,0,n(),0,0,bi+(hG:len()-hG:project_on(de):len())*n())else P,Q=aZ.computeDistanceAndTime(hF,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hE<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hE>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hE end;C=hD;local bJ=vec3(core.getConstructWorldOrientationForward())local bK=vec3(core.getConstructWorldOrientationRight())local bL=vec3(core.getWorldVertical())local eB=-1;local bM=getPitch(bL,bJ,bK)local hy=0.1;if BrakeLanding then hq=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local dc=velocity.x*de.x+velocity.y*de.y+velocity.z*de.z;eB=aa;if eB>-1 then if math.abs(hq-bM)<hy then b2=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-de)<0.99 then BrakeIsOn=true elseif dc<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hq<20 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif a8 and j()==0 and ae>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hq-bM)>hy then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hq-bM)local hz=pitchPID:get()C=C+hz end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local hH=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)hH=math.max(hH,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hI=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hJ=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hK=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hL=G;local hM=vec3(core.getWorldVertical())local hN=vec3(core.getConstructWorldOrientationUp())local hO=vec3(core.getConstructWorldOrientationForward())local hP=vec3(core.getConstructWorldOrientationRight())local hQ=vec3(core.getWorldVelocity())local hR=vec3(core.getWorldVelocity()):normalize()local hS=getRoll(hM,hO,hP)local hT=math.abs(hS)local hU=utils.sign(hS)local j=j()local hV=vec3(core.getWorldAngularVelocity())local hW=hI*pitchSpeedFactor*hP+hJ*rollSpeedFactor*hO+hK*yawSpeedFactor*hN;if hM:len()>0.01 and j>0.0 or ProgradeIsOn then local hX=1.0;if b2==true and hT>hX and hJ==0 then local hY=utils.clamp(0,hT-30,hT+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hY-hS)local hZ=rollPID:get()hW=hW+hZ*hO end end;if hM:len()>0.01 and j>0.0 then local h_=20.0;if turnAssist==true and hT>h_ and hI==0 and hK==0 then local i0=turnAssistFactor*0.1;local i1=turnAssistFactor*0.025;local i2=(hT-h_)/(180-h_)*180;local i3=0;if i2<90 then i3=i2/90 elseif i2<180 then i3=(180-i2)/90 end;i3=i3*i3;local i4=-hU*i1*(1.0-i3)local i5=i0*i3;hW=hW+i5*hP+i4*hN end end;local i6=1;local i7=0;local i8=1;local i9=hH*(hW-hV)local ia=vec3(core.getWorldAirFrictionAngularAcceleration())i9=i9-ia;Nav:setEngineTorqueCommand('torque',i9,i6,'airfoil','','',i8)local ib=-hL*(brakeSpeedFactor*hQ+brakeFlatFactor*hR)Nav:setEngineForceCommand('brake',ib)local ic=''local id=vec3()local ie=false;local ig='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then ig=ig..ExtraLongitudeTags end;local ih=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ih==axisCommandType.byThrottle then local ii=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ig,axisCommandId.longitudinal)Nav:setEngineForceCommand(ig,ii,i6)elseif ih==axisCommandType.byTargetSpeed then local ii=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ic=ic..' , '..ig;id=id+ii;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ie=true end end;local ij='thrust analog lateral 'if ExtraLateralTags~="none"then ij=ij..ExtraLateralTags end;local ik=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ik==axisCommandType.byThrottle then local il=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ij,axisCommandId.lateral)Nav:setEngineForceCommand(ij,il,i6)elseif ik==axisCommandType.byTargetSpeed then local im=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ic=ic..' , '..ij;id=id+im end;local io='thrust analog vertical 'if ExtraVerticalTags~="none"then io=io..ExtraVerticalTags end;local ip=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ip==axisCommandType.byThrottle then local iq=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(io,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(io,iq,i6,'airfoil','ground','',i8)else Nav:setEngineForceCommand(io,vec3(),i6)Nav:setEngineForceCommand('airfoil vertical',iq,i6,'airfoil','','',i8)Nav:setEngineForceCommand('ground vertical',iq,i6,'ground','','',i8)end elseif ip==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),i6)end;local ir=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ic=ic..' , '..io;id=id+ir end;if id:len()>constants.epsilon then if G~=0 or ie or math.abs(hR:dot(hO))<0.95 then ic=ic..', brake'end;Nav:setEngineForceCommand(ic,id,i7,'','','',i8)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bh=vec3(core.getVelocity()):len()local is=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local it=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bh*3.6>it*(1-is)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh*3.6<it*(1-is)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iu=unit.getThrottle()local hx=iu/100;if j==0 then hx=hx*MaxGameVelocity;if bh>=hx*(1-is)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh<hx*(1-is)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hx=hx*ReentrySpeed/3.6;if bh>=hx*(1-is)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh<hx*(1-is)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,b6=coroutine.resume(beginSetup)if b6 then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iv)if iv=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iv=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iv=="forward"then B=B-1 elseif iv=="backward"then B=B+1 elseif iv=="left"then E=E-1 elseif iv=="right"then E=E+1 elseif iv=="yawright"then F=F-1 elseif iv=="yawleft"then F=F+1 elseif iv=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iv=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iv=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iv=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iv=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iv=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iv=="option1"then IncrementAutopilotTargetIndex()v=false elseif iv=="option2"then DecrementAutopilotTargetIndex()v=false elseif iv=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iv=="option4"then ToggleAutopilot()v=false elseif iv=="option5"then ToggleLockPitch()v=false elseif iv=="option6"then ToggleAltitudeHold()v=false elseif iv=="option7"then wipeSaveVariables()v=false elseif iv=="option8"then ToggleFollowMode()v=false elseif iv=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iv=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iv=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iv=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iv=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iv=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iv=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iv=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iv=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iv)if iv=="forward"then B=0 elseif iv=="backward"then B=0 elseif iv=="left"then E=0 elseif iv=="right"then E=0 elseif iv=="yawright"then F=0 elseif iv=="yawleft"then F=0 elseif iv=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iv=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iv=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iv=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iv=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iv=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iv=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iv=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iv=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iv)if iv=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iv=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iv=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iv=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iw)local i;local ix="/commands /setname /G /agg /addlocation"local iy,iz;local iA="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n"iA=iA.."/agg <targetheight> - Manually set agg target height\n/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iw," ")if i~=nil then iy=string.sub(iw,0,i-1)iz=string.sub(iw,i+1)elseif i==nil or not string.find(ix,iy)then for eU in string.gmatch(iA,"([^\n]+)")do c(eU)end;return end;if iy=="/setname"then if iz==nil or iz==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iz)else K="Select a saved target to rename first"end elseif iy=="/addlocation"then if iz==nil or iz==""or string.find(iz,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iz,"::")local bw=string.sub(iz,1,i-2)i=string.find(iz,",")iz=string.sub(iz,i+1)local bV=string.find(iz,",")local bx=tonumber(string.sub(iz,1,bV-1))i=string.find(iz,",")iz=string.sub(iz,i+1)bV=string.find(iz,",")local bn=tonumber(string.sub(iz,1,bV-1))i=string.find(iz,",")iz=string.sub(iz,i+1)bV=string.find(iz,",")local bo=tonumber(string.sub(iz,1,bV-1))i=string.find(iz,",")iz=string.sub(iz,i+1)local by=tonumber(string.sub(iz,1,#iz-1))AddNewLocationByWaypoint(bw,bx,bn,bo,by)elseif iy=="/agg"then if iz==nil or iz==""then K="Usage: /agg targetheight"return end;iz=tonumber(iz)if iz<1000 then iz=1000 end;AntigravTargetAltitude=iz;K="AGG Target Height set to "..iz elseif iy=="/G"then if iz==nil or iz==""then K="Usage: /G VariableName variablevalue"return end;i=string.find(iz," ")local iB=string.sub(iz,0,i-1)local iC=string.sub(iz,i+1)for b4,b5 in pairs(a)do if b5==iB then K="Variable "..iB.." changed to "..iC;local iD=type(_G[b5])if iD=="number"then iC=tonumber(iC)elseif iD=="boolean"then if string.lower(iC)=="true"then iC=true else iC=false end end;_G[b5]=iC;return end end;K="No such global variable: "..iB end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
