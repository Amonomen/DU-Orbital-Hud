name: ButtonsHud - Dimencia and Archaegeo v4.94 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the entered value
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LastApTickTime=system.getTime()TargetRoll=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=false;local b2=false;local b3=autoRollPreference;local b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b5=vec3(core.getWorldVelocity())local b6=vec3(b5):len()local b7=math.cos(StallAngle*constants.deg2rad)local b8=LandingGearGroundHeight;local b9=system.getMouseDeltaX()local ba=system.getMouseDeltaY()local bb=false;function LoadVariables()if dbHud_1 then local bc=dbHud_1.hasKey;if not useTheseSettings then for bd,be in pairs(a)do if bc(be)then local bf=f(dbHud_1.getStringValue(be))if bf~=nil then c(be.." "..dbHud_1.getStringValue(be))_G[be]=bf;az=true end end end end;coroutine.yield()for bd,be in pairs(b)do if bc(be)then local bf=f(dbHud_1.getStringValue(be))if bf~=nil then c(be.." "..dbHud_1.getStringValue(be))_G[be]=bf;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bg=system.getTime()if LastStartTime+180<bg then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b3=autoRollPreference end;LastStartTime=bg;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b7=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bh,bi)if bh>bi then bi=bh end;if ContainerOptimization>0 then bi=bi-bi*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bi=bi-bi*FuelTankOptimization*0.05 end;return bi end;function ProcessElements()local bj=fuelX~=0 and fuelY~=0;for bd in pairs(af)do local type=l(af[bd])if type=="Landing Gear"then A=true end;if type=="Dynamic Core Unit"then local bk=h(af[bd])if bk>10000 then aQ=128 elseif bk>1000 then aQ=64 elseif bk>150 then aQ=32 end end;aG=aG+h(af[bd])if bj and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bk=h(af[bd])local bl=m(af[bd])local bh=0;local bm=system.getTime()if type=="Atmospheric Fuel Tank"then local bi=400;local bn=35.03;if bk>10000 then bi=51200;bn=5480 elseif bk>1300 then bi=6400;bn=988.67 elseif bk>150 then bi=1600;bn=182.67 end;bh=bl-bn;if fuelTankHandlingAtmo>0 then bi=bi+bi*fuelTankHandlingAtmo*0.2 end;bi=CalculateFuelVolume(bh,bi)aD[#aD+1]={af[bd],core.getElementNameById(af[bd]),bi,bn,bh,bm}end;if type=="Rocket Fuel Tank"then local bi=320;local bn=173.42;if bk>65000 then bi=40000;bn=25740 elseif bk>6000 then bi=5120;bn=4720 elseif bk>700 then bi=640;bn=886.72 end;bh=bl-bn;if fuelTankHandlingRocket>0 then bi=bi+bi*fuelTankHandlingRocket*0.1 end;bi=CalculateFuelVolume(bh,bi)aF[#aF+1]={af[bd],core.getElementNameById(af[bd]),bi,bn,bh,bm}end;if type=="Space Fuel Tank"then local bi=2400;local bn=182.67;if bk>10000 then bi=76800;bn=5480 elseif bk>1300 then bi=9600;bn=988.67 end;bh=bl-bn;if fuelTankHandlingSpace>0 then bi=bi+bi*fuelTankHandlingSpace*0.2 end;bi=CalculateFuelVolume(bh,bi)aE[#aE+1]={af[bd],core.getElementNameById(af[bd]),bi,bn,bh,bm}end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,be in pairs(door)do be.toggle()end end;if switch then for _,be in pairs(switch)do be.toggle()end end;if forcefield then for _,be in pairs(forcefield)do be.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bo=AboveGroundLevel()if bo~=-1 or not ad and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not A then GearExtended=true end else BrakeIsOn=false end;if b8~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b8)if b8==0 and not A then GearExtended=true;BrakeIsOn=true end else b8=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and bo~=-1 then a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ad end;function ConvertResolutionX(be)if ResolutionX==1920 then return be else return round(ResolutionX*be/1920,0)end end;function ConvertResolutionY(be)if ResolutionY==1080 then return be else return round(ResolutionY*be/1080,0)end end;function RefreshLastMaxBrake(bp,bq)if bp==nil then bp=core.g()end;bp=round(bp,5)local br=j()if bq~=nil and bq or(aC==nil or aC~=bp)then local b5=core.getVelocity()local bs=vec3(b5):len()local bt=f(unit.getData()).maxBrake;if bt~=nil and bt>0 and ad then bt=bt/utils.clamp(bs/100,0.1,1)bt=bt/br;if br>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bt)/2 else LastMaxBrakeInAtmo=bt end end end;if bt~=nil and bt>0 then LastMaxBrake=bt end;aC=bp end end;function MakeButton(bu,bv,bw,bx,by,bz,bA,bB,bC)local bD={enableName=bu,disableName=bv,width=bw,height=bx,x=by,y=bz,toggleVar=bA,toggleFunction=bB,drawCondition=bC,hovered=false}table.insert(aq,bD)return bD end;function UpdateAtlasLocationsList()AtlasOrdered={}for bd,be in pairs(aS[0])do table.insert(AtlasOrdered,{name=be.name,index=bd})end;local function bE(bF,bG)return bF.name<bG.name end;table.sort(AtlasOrdered,bE)end;function AddLocationsToAtlas()for bd,be in pairs(SavedLocations)do table.insert(aS[0],be)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bH)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bI='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bJ,bK,bL,bM,bN=string.match(bH,bI)if bJ=="0"and bK=="0"then return vec3(tonumber(bL),tonumber(bM),tonumber(bN))end;bM=math.rad(bM)bL=math.rad(bL)local planet=aS[tonumber(bJ)][tonumber(bK)]local bO=math.cos(bL)local bP=vec3(bO*math.cos(bM),bO*math.sin(bM),math.sin(bL))return planet.center+(planet.radius+bN)*bP end;function AddNewLocationByWaypoint(bQ,planet,bH)if dbHud_1 then local bR={}local position=zeroConvertToWorldCoordinates(bH)if planet.name=="Space"then bR={position=position,name=bQ,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bS=false;if planet.hasAtmosphere then bS=true else bS=false end;bR={position=position,name=bQ,atmosphere=bS,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bR;table.insert(aS[0],bR)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bT=planet.name..". "..#SavedLocations;if radar_1 then local bU,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bU~=nil and bU~=""then bT=bT.." "..radar_1.getConstructName(bU)end end;local bR={}local bS=false;if planet.hasAtmosphere then bS=true end;bR={position=position,name=bT,atmosphere=bS,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bR;table.insert(aS[0],bR)UpdateAtlasLocationsList()K="Location saved as "..bT else K="Databank must be installed to save locations"end end;function UpdatePosition(bV)local bW=-1;local bR;for bd,be in pairs(SavedLocations)do if be.name and be.name==CustomTarget.name then bW=bd;break end end;if bW~=-1 then local bX;if bV~=nil then bR={position=SavedLocations[bW].position,name=bV,atmosphere=SavedLocations[bW].atmosphere,planetname=SavedLocations[bW].planetname,gravity=SavedLocations[bW].gravity}else bR={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bW].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bW]=bR;bW=-1;for bd,be in pairs(aS[0])do if be.name and be.name==CustomTarget.name then bW=bd end end;if bW>-1 then aS[0][bW]=bR end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bW=-1;for bd,be in pairs(aS[0])do if be.name and be.name==CustomTarget.name then bW=bd end end;if bW>-1 then table.remove(aS[0],bW)end;bW=-1;for bd,be in pairs(SavedLocations)do if be.name and be.name==CustomTarget.name then K=be.name.." saved location cleared"bW=bd;break end end;if bW~=-1 then table.remove(SavedLocations,bW)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bY)bY[#bY+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bZ,b_,by,bz,bw,bx)if bZ>by and bZ<by+bw and b_>bz and b_<bz+bx then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local c0=vec3(core.getConstructWorldOrientationForward())local c1=vec3(core.getConstructWorldOrientationRight())local c2=vec3(core.getWorldVertical())local c3=getPitch(c2,c0,c1)LockPitch=c3;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b3=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b3=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b3=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b3=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b3=autoRollPreference end end;function CheckDamage(bY)local c4=0;ao=""local c5=aG;local c6=0;local c7=0;local c8=0;local c9=0;local ca=""for bd in pairs(af)do local bk=0;local cb=0;cb=h(af[bd])bk=k(af[bd])c6=c6+bk;if bk<cb then if bk==0 then c8=c8+1 else c7=c7+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bd]))local by=position.x-aQ;local bz=position.y-aQ;local cc=position.z-aQ;table.insert(al,core.spawnArrowSticker(by,bz,cc+1,"down"))table.insert(al,core.spawnArrowSticker(by,bz,cc+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(by+1,bz,cc,"north"))table.insert(al,core.spawnArrowSticker(by+1,bz,cc,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(by-1,bz,cc,"south"))table.insert(al,core.spawnArrowSticker(by-1,bz,cc,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(by,bz-1,cc,"east"))table.insert(al,core.spawnArrowSticker(by,bz-1,cc,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(by,bz+1,cc,"west"))table.insert(al,core.spawnArrowSticker(by,bz+1,cc,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bd])end elseif aH and#al>0 and al[11]==af[bd]then for cd in pairs(al)do core.deleteSticker(al[cd])end;al={}end end;c4=d(c6/c5*100)if c4<100 then bY[#bY+1]=[[<g class="pbright txt">]]c9=d(c4*2.55)ca=e("rgb(%d,%d,%d)",255-c9,c9,0)if c4<100 then bY[#bY+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ca,c4)if c8>0 then bY[#bY+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ca,c8,c7)elseif c7>0 then bY[#bY+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ca,c7)end end;bY[#bY+1]=[[<\g>]]end end;function DrawCursorLine(bY)local ce=d(utils.clamp(a3/(at/4)*255,0,255))bY[#bY+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+ce,d(PrimaryG+0.5)-ce,d(PrimaryB+0.5)-ce)end;function getPitch(cf,cg,bG)local ch=cf:cross(bG):normalize_inplace()local c3=math.acos(utils.clamp(ch:dot(-cg),-1,1))*constants.rad2deg;if ch:cross(-cg):dot(bG)<0 then c3=-c3 end;return c3 end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b3=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bd,be in pairs(a)do dbHud_1.setStringValue(be,g(nil))end;for bd,be in pairs(b)do if be~="SavedLocations"then dbHud_1.setStringValue(be,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,be in pairs(aq)do if be.hovered then if not be.drawCondition or be.drawCondition()then be.toggleFunction()end;be.hovered=false end end end;function SetButtonContains()local by=a0+at/2;local bz=a1+au/2;for _,be in pairs(aq)do be.hovered=Contains(by,bz,be.x,be.y,be.width,be.height)end end;function DrawButton(bY,ci,hover,by,bz,cj,ck,cl,cm,cn,co)if type(cn)=="function"then cn=cn()end;if type(co)=="function"then co=co()end;bY[#bY+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",by,bz,cj,ck)if ci then bY[#bY+1]=e("%s'",cl)else bY[#bY+1]=cm end;if hover then bY[#bY+1]=" style='stroke:white; stroke-width:2'"else bY[#bY+1]=" style='stroke:black; stroke-width:1'"end;bY[#bY+1]="></rect>"bY[#bY+1]=e("<text x='%f' y='%f' font-size='24' fill='",by+cj/2,bz+ck/2+5)if ci then bY[#bY+1]="black"else bY[#bY+1]="white"end;bY[#bY+1]="' text-anchor='middle' font-family='Montserrat'>"if ci then bY[#bY+1]=e("%s</text>",cn)else bY[#bY+1]=e("%s</text>",co)end end;function DrawButtons(bY)local cp="rgb(50,50,50)'"local cq="rgb(210,200,200)"local cr=DrawButton;for _,be in pairs(aq)do local bv=be.disableName;local bu=be.enableName;if type(bv)=="function"then bv=bv()end;if type(bu)=="function"then bu=bu()end;if not be.drawCondition or be.drawCondition()then cr(bY,be.toggleVar(),be.hovered,be.x,be.y,be.width,be.height,cq,cp,bv,bu)end end end;function DrawTank(bY,aP,by,cs,ct,cu,cv,cw)local cx=1;local cy=2;local cz=3;local cA=4;local cB=5;local cC=6;local cD=""local cE=0;local cF=fuelY;local cG=fuelY+10;if o()==1 and not RemoteHud then cF=cF-50;cG=cG-50 end;bY[#bY+1]=[[<g class="pdim txtfuel">]]if ct=="ATMO"then cD="atmofueltank"elseif ct=="SPACE"then cD="spacefueltank"else cD="rocketfueltank"end;cE=_G[cD.."_size"]if#cu>0 then for i=1,#cu do local bT=string.sub(cu[i][cy],1,12)local cH=0;for cd=1,cE do if cu[i][cy]==f(unit[cD.."_"..cd].getData()).name then cH=cd;break end end;if aP or cv[i]==nil or cw[i]==nil then local cI=0;local cJ=0;local cK=0;local cL=0;local bm=system.getTime()if cH~=0 then cw[i]=f(unit[cD.."_"..cH].getData()).percentage;cv[i]=f(unit[cD.."_"..cH].getData()).timeLeft;if cv[i]=="n/a"then cv[i]=0 end else cK=m(cu[i][cx])-cu[i][cA]cI=cu[i][cz]cw[i]=d(0.5+cK*100/cI)cJ=cu[i][cB]cL=cu[i][cC]if cJ<=cK then cv[i]=0 else cv[i]=d(0.5+cK/((cJ-cK)/(bm-cL)))end;cu[i][cB]=cK;cu[i][cC]=bm end end;if bT==cs then bT=e("%s %d",ct,i)end;if cH==0 then bT=bT.." *"end;local cM;if cv[i]==0 then cM="n/a"else cM=FormatTimeString(cv[i])end;if cw[i]~=nil then local c9=d(cw[i]*2.55)local ca=e("rgb(%d,%d,%d)",255-c9,c9,0)local cN=""if cM~="n/a"and cv[i]<120 or cw[i]<5 then if aP then cN=[[class="red"]]end end;bY[#bY+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],by,cF,cN,bT,by,cG,ca,cw[i],cM)cF=cF+30;cG=cG+30 end end end;bY[#bY+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b5)b5=vec3(b5)local c3=-math.deg(math.atan(b5.y,b5.z))+180;c3=c3-90;if c3<0 then c3=360+c3 end;if c3>180 then c3=-180+c3-180 end;return-c3 end;function getRelativeYaw(b5)b5=vec3(b5)local cO=math.deg(math.atan(b5.y,b5.x))-90;if cO<-180 then cO=360+cO end;return cO end;function AlignToWorldVector(cP,cQ,cR)if not ad or not stalling or aa~=-1 or b6<w then local cS=cR;if cS==nil then cS=DampingMultiplier end;if cQ==nil then cQ=as end;cP=vec3(cP):normalize()local cT=vec3(core.getConstructWorldOrientationForward())-cP;local cU=-getMagnitudeInDirection(cT,core.getConstructWorldOrientationRight())*ar;local cV=-getMagnitudeInDirection(cT,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cU/2 end;if an==0 then an=cV/2 end;if math.abs(cU)<0.1 then D=D-cU*2 else D=D-(cU+(cU-am)*cS)end;if math.abs(cV)<0.1 then C=C+cV*2 else C=C+cV+(cV-an)*cS end;am=cU;an=cV;if math.abs(cU)<cQ and math.abs(cV)<cQ then return true end;return false elseif stalling and aa==-1 then cP=vec3(core.getWorldVelocity())local cS=cR;if cS==nil then cS=DampingMultiplier end;if cQ==nil then cQ=as end;cP=vec3(cP):normalize()local cT=vec3(core.getConstructWorldOrientationForward())-cP;local cU=-getMagnitudeInDirection(cT,core.getConstructWorldOrientationRight())*ar;local cV=-getMagnitudeInDirection(cT,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cU/2 end;if an==0 then an=cV/2 end;if math.abs(cU)<0.1 then D=D-cU*5 else D=D-(cU+(cU-am)*cS)end;if math.abs(cV)<0.1 then C=C+cV*5 else C=C+cV+(cV-an)*cS end;am=cU;an=cV;if math.abs(cU)<cQ and math.abs(cV)<cQ then return true end;return false end end;function getAPEnableName()local bT=AutopilotTargetName;if bT==nil then bT=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bT==nil then bT="None"end;return"Engage Autopilot: "..bT end;function getAPDisableName()local bT=AutopilotTargetName;if bT==nil then bT=CustomTarget.name end;if bT==nil then bT="None"end;return"Disable Autopilot: "..bT end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b3=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b3=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b3=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cW=50;local cX=260;local cY=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cX,cW,at/2-cX/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cX,cW,at/2-cX/2-50-cY.width,au/2-cW+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cX,cW,at/2-cX/2+cY.width+50,au/2-cW+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cZ=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cZ.height,cZ.x+cZ.width+30,cZ.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cZ.height,cZ.x+cZ.width+30,cZ.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cZ.height,cZ.x-200-30,cZ.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cW=60;cX=300;local by=10;local bz=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cX,cW,by,bz,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cX,cW,by+cX+20,bz,function()return AltitudeHold end,ToggleAltitudeHold)bz=bz+cW+20;MakeButton("Engage Autoland","Disable Autoland",cX,cW,by,bz,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cX,cW,by+cX+20,bz,function()return AutoTakeoff end,ToggleAutoTakeoff)bz=bz+cW+20;MakeButton("Show Orbit Display","Hide Orbit Display",cX,cW,by,bz,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bz=bz+cW+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cX,cW,by,bz,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cX,cW,by+cX+20,bz,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bz=bz+cW+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cX,cW,by,bz,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cX,cW,by+cX+20,bz,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bz=bz+cW+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cX,cW,by,bz,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bz=bz+cW+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cX*2,cW,by,bz,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local c_=Nav.axisCommandManager:getAxisCommandType(0)local d0="TRAVEL"if c_==1 then d0="CRUISE"end;if Autopilot then d0="AUTOPILOT"end;return d0 end;function UpdateHud(bY)local bN=ae;local b5=core.getVelocity()local bs=vec3(b5):len()local c2=vec3(core.getWorldVertical())local c0=vec3(core.getConstructWorldOrientationForward())local c1=vec3(core.getConstructWorldOrientationRight())local d1=vec3(core.getConstructWorldOrientationUp())local d2=getRoll(c2,c0,c1)local d3=d2/180*math.pi;local d4=math.cos(d3)local d5=math.sin(d3)local c3=getPitch(c2,c0,c1*d4+d1*d5)local d6=d2;local d7=c3;local d8=j()local d9=d(unit.getThrottle())local da=bs*3.6;local db=unit.getAxisCommandValue(0)local d0=GetFlightStyle()local dc="ROLL"local dd=unit.getClosestPlanetInfluence()>0;if d9==nil then d9=0 end;if not dd then if bs>5 then c3=getRelativePitch(b5)d2=getRelativeYaw(b5)else c3=0;d2=0 end;dc="YAW"end;bY[#bY+1]=a5;bY[#bY+1]=ao;bY[#bY+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bY,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bY,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bY,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bY,bN)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dd then DrawRollLines(bY,centerX,centerY,d6,dc,dd)DrawArtificialHorizon(bY,d7,d6,centerX,centerY,dd,d(getRelativeYaw(b5)),bs)else DrawRollLines(bY,centerX,centerY,d2,dc,dd)DrawArtificialHorizon(bY,c3,d2,centerX,centerY,dd,d(d2),bs)end;DrawAltitudeDisplay(bY,bN,dd)DrawPrograde(bY,b5,bs,centerX,centerY)end end;DrawThrottle(bY,d0,d9,db)DrawSpeed(bY,da)DrawWarnings(bY)DisplayOrbitScreen(bY)if screen_2 then local bH=vec3(core.getConstructWorldPos())local by=960+bH.x/aU;local bz=450+bH.y/aV;screen_2.moveContent(aW,(by-80)/19.2,(bz-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bY)local de=aj;local df=ak;local dg=aj;local dh=ak;if IsInFreeLook()and not brightHud then de=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]df=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bY[#bY+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],de,de,dg,dg,df,df,dh,dh,ResolutionX,ResolutionY)end;function HUDEpilogue(bY)bY[#bY+1]="</svg>"end;function DrawSpeed(bY,da)local di=throtPosY-10;local dj=throtPosX+10;bY[#bY+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then di=75 end;bY[#bY+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dj,di,d(da))end;function DrawOdometer(bY,W,TotalDistanceTravelled,d0,X,d8)local dk=ConvertResolutionX(1240)local dl=ConvertResolutionY(55)local dm=dl+10;local d8=j()local bp=core.g()local dn=0;local dp=0;local dq=0;RefreshLastMaxBrake(bp)if ad then dq=LastMaxBrakeInAtmo else dq=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dr=vec3(core.getWorldAcceleration()):len()/9.80665;if bp>0.1 then dp=aB*bp;dn=maxThrust/bp end;bY[#bY+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dk=ConvertResolutionX(1120)dl=ConvertResolutionY(55)dm=dl+10 elseif ad then local ds=ConvertResolutionX(770)bY[#bY+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],ds,dl,ds,dm,d8)end;bY[#bY+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dk,dl,dk,dm,bp/9.80665,dk,dl+20,dk,dm+20,dr)bY[#bY+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bY[#bY+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dq/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),d0)if bp>0.1 then bY[#bY+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dn/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dp/1000)else bY[#bY+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bY[#bY+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),d0)end;bY[#bY+1]="</g>"end;function DrawThrottle(bY,d0,d9,db)local cF=throtPosY+10;local cG=throtPosY+20;if o()==1 and not RemoteHud then cF=55;cG=65 end;local dt="CRUISE"local unit="km/h"local du=db;if d0=="TRAVEL"or d0=="AUTOPILOT"then dt="THROT"unit="%"du=d9;local dv="dim"if d9<0 then dv="red"end;bY[#bY+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dv,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d9),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bY[#bY+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cF,dt,throtPosX+10,cG,du,unit)end;function DrawVerticalSpeed(bY,bN)if bN<200000 and not ad or bN and ad then local dw=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dx=0;if math.abs(dw)>1 then dx=45*math.log(math.abs(dw),10)if dw<0 then dx=-dx end end;bY[#bY+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dw),d(dx))end end;function getHeading(cg)local dy=-vec3(core.getWorldVertical())cg=cg-cg:project_on(dy)local dz=vec3(0,0,1)dz=dz-dz:project_on(dy)local dA=dz:cross(dy)local dx=dz:angle_between(cg)*constants.rad2deg;if cg:dot(dA)<0 then dx=360-dx end;return dx end;function DrawRollLines(bY,centerX,centerY,d6,dc,dd)local dB=circleRad;local dC=20;dC=d(dC)local dD=d(d6)if dd then for i=-45,45,5 do local dE=i;bY[#bY+1]=e([[<g transform="rotate(%f,%d,%d)">]],dE,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bY[#bY+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dB+dC-len,centerX,centerY+dB+dC)end;bY[#bY+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dB+dC-35,dc,centerX,centerY+dB+dC-25,dD)bY[#bY+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d6,centerX,centerY)bY[#bY+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dB+dC-20,centerX+5,centerY+dB+dC-20,centerX,centerY+dB+dC-15)bY[#bY+1]="</g>"end;local cO=dD;if dd then cO=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dF=20;local dG=d(cO)local dH=0;local dI=centerY+dB+dC+20;local dJ=centerX;if dc~="YAW"then dI=ConvertResolutionY(130)dJ=ConvertResolutionX(960)end;local dK=[[<path class="txttick line" d="]]for i=d(dG-(dF+10)-dG%5+0.5),d(dG+dF+10+dG%5+0.5),5 do local by=dJ+-i*5+cO*5;if i%10==0 then dH=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bY[#bY+1]=e([[
                            <text x="%f" y="%f">%d</text>]],by+5,dI-12,p)elseif i%5==0 then dH=5 end;if dH==10 then dK=e([[%s M %f %f v %d]],dK,by,dI-5,dH)else dK=e([[%s M %f %f v %d]],dK,by,dI-2.5,dH)end end;bY[#bY+1]=dK..[["/>]]bY[#bY+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dJ-5,dI+10,dJ+5,dI+10,dJ,dI+5)if dd then dc="HDG"end;bY[#bY+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dJ,dI+25,dG,dJ,dI+35,dc)end;function DrawArtificialHorizon(bY,d7,d6,centerX,centerY,dd,dL,bs)local dB=circleRad;local dM=d(dB*3/5)if dB>0 then local dN=d(d7)local len=0;local dK=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*d6,centerX,centerY)if not ad then dK=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bY[#bY+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dB-1,centerX,centerY)bY[#bY+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dN-30-dN%5+0.5),d(dN+30+dN%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bz=centerY+-i*5+d7*5;if len==30 then dK=e([[%s M %d %f h %d]],dK,centerX-dM-len,bz,len)if ad then bY[#bY+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d6,centerX,centerY,centerX-dM+10,bz,i)bY[#bY+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d6,centerX,centerY,centerX+dM-10,bz,i)if i==0 or i==180 or i==-180 then bY[#bY+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d6,centerX,centerY,centerX-dM+20,bz,dM*2-40)end else bY[#bY+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dM+10,bz,i)bY[#bY+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dM-10,bz,i)end;dK=e([[%s M %d %f h %d]],dK,centerX+dM,bz,len)else dK=e([[%s M %d %f h %d]],dK,centerX-dM-len,bz,len)dK=e([[%s M %d %f h %d]],dK,centerX+dM,bz,len)end end;bY[#bY+1]=dK..[["/>]]local dO="PITCH"if not dd then dO="REL PITCH"end;if d7>90 and not ad then d7=90-(d7-90)elseif d7<-90 and not ad then d7=-90-(d7+90)end;if dB>200 then if ad then if bs>w then bY[#bY+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dL)end;bY[#bY+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d6,centerX,centerY)else bY[#bY+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bY[#bY+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dM+25,centerY-5,centerX-dM+20,centerY,centerX-dM+25,centerY+5,centerX-dM+50,centerY+4,dN)bY[#bY+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dM-25,centerY-5,centerX+dM-20,centerY,centerX+dM-25,centerY+5,centerX+dM-30,centerY+4,dN)bY[#bY+1]="</g>"end;local dP=d(dB/3)bY[#bY+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dP,centerY,dB-dP)if not ad and dd then bY[#bY+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d6,centerX,centerY,centerX-dM+10,centerY,dM*2-20)end;bY[#bY+1]="</g>"if dB<200 then if ad and bs>w then bY[#bY+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dB,dO,centerX,centerY-dB+10,dN,centerX,centerY-15,"Yaw",centerX,centerY+20,dL)else bY[#bY+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dB,dO,centerX,centerY-dB+15,dN)end end end end;function DrawAltitudeDisplay(bY,bN,dd)local dQ=altMeterX;local dR=altMeterY;local dS=78;local dT=19;local dU=AboveGroundLevel()if dU~=-1 then table.insert(bY,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dQ+dS,dR+dT+20,dU))end;if dd and(bN<200000 and not ad or bN and ad)then table.insert(bY,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dQ-1,dR-4,dS+2,dT+6,dQ+1,dR-1,dS-4,dT))local bW=0;local dV=1;local dW=0;local dX=bN<0;local dY=9;if dX then dY=0 end;local bN=math.abs(bN)while bW<6 do local dZ=11;local d_=16;local e0=9;local e1=14;local cN="altsm"if bW>2 then d_=d_+3;dZ=dZ+2;e1=e1+2;e0=e0-6;cN="altbig"end;if dX then cN=cN.." red"end;local e2=bN/dV%10;local e3=d(e2)local e4=d((e3+1)%10)local e5=dW;if bW==0 then e5=e2-e3;if dX then e5=1-e5 end end;if dX and(bW==0 or dW~=0)then local e6=e4;e4=e3;e3=e6 end;local e7=d_*(e5-1)local e8=e7+d_;local by=dQ+e0+(6-bW)*dZ;local bz=dR+e1;table.insert(bY,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cN,by,bz+e7,e4,by,bz+e8,e3))bW=bW+1;dV=dV*10;if e3==dY then dW=e5 else dW=0 end end;table.insert(bY,[[</g></g>]])end end;function DrawPrograde(bY,b5,bs,centerX,centerY)if bs>5 and not ad or bs>w then local dB=circleRad;local e9=20;local ea=20;local eb=vec3(b5)local ec=getRelativePitch(eb)local ed=getRelativeYaw(eb)local ee=14;local ef=ee/2;local eg=-ed/ea*dB;local eh=ec/e9*dB;local by=centerX+eg;local bz=centerY+eh;local a3=math.sqrt(eg^2+eh^2)local ei=[[<circle
                cx="]]..by..[["
                cy="]]..bz..[["
                r="]]..ef/ee..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..by..[["
                cy="]]..bz..[["
                r="]]..ef..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..by-ee..[[,]]..bz..[[ h ]]..ef..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..by+ef..[[,]]..bz..[[ h ]]..ef..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..by..[[,]]..bz-ee..[[ v ]]..ef..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a3<dB then bY[#bY+1]=ei else local dx=math.atan(eh,eg)local ej=4;local ek=centerX+dB*math.cos(dx)local el=centerY+dB*math.sin(dx)bY[#bY+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dx*180/math.pi,ek,el,ek-ej,el-ej/2,ej*2,ej,ek+ej,el-ej,ej,ej,-ej,ej)end;if not ad then ec=getRelativePitch(-eb)ed=getRelativeYaw(-eb)eg=-ed/ea*dB;eh=ec/e9*dB;by=centerX+eg;bz=centerY+eh;a3=math.sqrt(eg^2+eh^2)if a3<dB then local em=[[<circle
                        cx="]]..by..[["
                        cy="]]..bz..[["
                        r="]]..ef..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..by..[[,]]..bz-ee..[[ v ]]..ef..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..by..[[,]]..bz..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..by..[[,]]..bz..[[)" />
                     <path
                        d="M ]]..by-ef..[[,]]..bz..[[ h ]]..ee..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..by..[[,]]..bz..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..by..[[,]]..bz..[[)"/>]]bY[#bY+1]=em end end end end;function DrawWarnings(bY)bY[#bY+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bY[#bY+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bY[#bY+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bY[#bY+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bY[#bY+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local en=ConvertResolutionX(960)local eo=ConvertResolutionY(860)local ep=ConvertResolutionY(880)local eq=ConvertResolutionY(900)local er=ConvertResolutionY(960)local es=ConvertResolutionY(200)local et=ConvertResolutionY(150)local eu=ConvertResolutionY(960)if o()==1 and not RemoteHud then eo=ConvertResolutionY(135)ep=ConvertResolutionY(155)eq=ConvertResolutionY(175)es=ConvertResolutionY(115)et=ConvertResolutionY(95)end;if BrakeIsOn then bY[#bY+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],en,eo)end;if ad and stalling and hoverDetectGround()==-1 then bY[#bY+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],en,es+50)end;if ah then bY[#bY+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],en,eu)end;if GearExtended then if A then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],en,ep)else bY[#bY+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],en,ep)end;bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],en,eq,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],en,er+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],en,es+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bY[#bY+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],en,es+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],en,es+20,AutopilotStatus)elseif LockPitch~=nil then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],en,es+20,d(LockPitch))elseif I then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],en,es+20)elseif Reentry then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],en,es+20)end;if AltitudeHold then if AutoTakeoff then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],en,es,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bY[#bY+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],en,es+50)end else bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],en,es,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bY[#bY+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],en,es)else bY[#bY+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],en,es)end end;if ProgradeIsOn then bY[#bY+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],en,es)end;if RetrogradeIsOn then bY[#bY+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],en,es)end;if TurnBurn then bY[#bY+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],en,et)end;if VectorToTarget then bY[#bY+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],en,es+30,VectorStatus)end;bY[#bY+1]="</g>"end;function DisplayOrbitScreen(bY)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ev=OrbitMapX;local ew=OrbitMapY;local ex=OrbitMapSize;local ey=4;ew=ew+ey;local ez=15;local by=ev+ex+ev/2+ey;local bz=ew+ex/2+5+ey;local eA,eB,eC,eD;eA=ex/4;eD=0;bY[#bY+1]=[[<g class="pbright txtorb txtmid">]]bY[#bY+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ex+ev*2,ex+ew,ey,ey)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eC=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eA*2)eB=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eC*(1-orbit.eccentricity)eD=eA-orbit.periapsis.altitude/eC-planet.radius/eC;local eE=""if orbit.periapsis.altitude<=0 then eE='redout'end;bY[#bY+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eE,ev+ex/2+eD+ey,ew+ex/2+ey,eA,eB)bY[#bY+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ev+ex/2+ey,ew+ex/2+ey,planet.radius/eC)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bY[#bY+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],by-35,bz-5,ev+ex/2+eA+eD,bz-5)bY[#bY+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],by,bz)bz=bz+ez;bY[#bY+1]=e([[<text x="%f" y="%f">%s</text>]],by,bz,getDistanceDisplayString(orbit.apoapsis.altitude))bz=bz+ez;bY[#bY+1]=e([[<text x="%f" y="%f">%s</text>]],by,bz,FormatTimeString(orbit.timeToApoapsis))bz=bz+ez;bY[#bY+1]=e([[<text x="%f" y="%f">%s</text>]],by,bz,getSpeedDisplayString(orbit.apoapsis.speed))end;bz=ew+ex/2+5+ey;by=ev-ev/2+10+ey;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bY[#bY+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],by+35,bz-5,ev+ex/2-eA+eD,bz-5)bY[#bY+1]=e([[<text x="%f" y="%f">Periapsis</text>]],by,bz)bz=bz+ez;bY[#bY+1]=e([[<text x="%f" y="%f">%s</text>]],by,bz,getDistanceDisplayString(orbit.periapsis.altitude))bz=bz+ez;bY[#bY+1]=e([[<text x="%f" y="%f">%s</text>]],by,bz,FormatTimeString(orbit.timeToPeriapsis))bz=bz+ez;bY[#bY+1]=e([[<text x="%f" y="%f">%s</text>]],by,bz,getSpeedDisplayString(orbit.periapsis.speed))end;bY[#bY+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ev+ex/2+ey,20+ey,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eF=orbit.timeToApoapsis/orbit.period*2*math.pi;local eG=eA*math.cos(eF)local eH=eB*math.sin(eF)bY[#bY+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ev+ex/2+eG+eD+ey,ew+ex/2+eH+ey)end;bY[#bY+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local eI=a3>100000;local bf=""if eI then bf=round(a3/1000/200,1).." SU"elseif a3<1000 then bf=round(a3,1).." M"else bf=round(a3/1000,1).." KM"end;return bf end;function getDistanceDisplayString2(a3)local eI=a3>100000;local bf=""if eI then bf=round(a3/1000/200,2).." SU"elseif a3<1000 then bf=round(a3,2).." M"else bf=round(a3/1000,2).." KM"end;return bf end;function getSpeedDisplayString(bs)return d(round(bs*3.6,0)+0.5).." km/h"end;function FormatTimeString(eJ)local eK=0;local eL=0;local eM=0;if eJ<60 then eJ=d(eJ)elseif eJ<3600 then eK=d(eJ/60)eJ=d(eJ%60)elseif eJ<86400 then eL=d(eJ/3600)eK=d(eJ%3600/60)else eM=d(eJ/86400)eL=d(eJ%86400/3600)end;if eM>0 then return eM.."d "..eL.."h "elseif eL>0 then return eL.."h "..eK.."m "elseif eK>0 then return eK.."m "..eJ.."s"elseif eJ>0 then return eJ.."s"else return"0s"end end;function getMagnitudeInDirection(cP,eN)cP=vec3(cP)eN=vec3(eN):normalize()local bf=cP*eN;return bf.x+bf.y+bf.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eO=AtlasOrdered[AutopilotTargetIndex].index;local eP=aS[0][eO]if eP.center then AutopilotTargetName=eP.name;V=aY[0][eO]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eP;for _,be in pairs(aY[0])do if be.name==CustomTarget.planetname then V=be;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eQ=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eQ end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b5=core.getWorldVelocity()local bs=vec3(b5):len()local eR,eS=aZ.computeDistanceAndTime(vec3(b5):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eT;if not TurnBurn then _,eT=GetAutopilotBrakeDistanceAndTime(bs)else _,eT=GetAutopilotTBBrakeDistanceAndTime(bs)end;local eU=0;local eV=0;if AutopilotCruising or not Autopilot and bs>5 then eV=aZ.computeTravelTime(bs,0,AutopilotDistance)elseif P+eR<AutopilotDistance then eU=AutopilotDistance-(P+eR)eV=aZ.computeTravelTime(8333.0556,0,eU)else local eW=(AutopilotDistance-P)/eR;eR=AutopilotDistance-P;eS=eS*eW end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eV elseif AutopilotBraking then return eT elseif AutopilotCruising then return eV+eT else return eS+Q+eV end end;function GetAutopilotBrakeDistanceAndTime(bs)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bs,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bs,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bs)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bs,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eX=-1;local eY=-1;if vBooster then eX=vBooster.distance()end;if hover then eY=hover.distance()end;if eX~=-1 and eY~=-1 then if eX<eY then return eX else return eY end elseif eX~=-1 then return eX elseif eY~=-1 then return eY else return-1 end end;function AboveGroundLevel()local eZ=-1;local e_=hoverDetectGround()if telemeter_1 then eZ=telemeter_1.getDistance()end;if e_~=-1 and eZ~=-1 then if e_<eZ then return e_ else return eZ end elseif e_~=-1 then return e_ else return eZ end end;function tablelength(f0)local f1=0;for _ in pairs(f0)do f1=f1+1 end;return f1 end;function BeginProfile(f2)ProfileTimeStart=system.getTime()end;function EndProfile(f2)local f3=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+f3;ProfileCount=ProfileCount+1;if f3>ProfileTimeMax then ProfileTimeMax=f3 end;if f3<ProfileTimeMin then ProfileTimeMin=f3 end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local f4=ProfileTimeSum;local f5=ProfileTimeSum/ProfileCount;local f6=ProfileTimeMin;local f7=ProfileTimeMax;local f8=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",f4,f5,f6,f7,f8))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local f9=radar_1.getEntries()local fa=radar_1.getData()local fb=ConvertResolutionX(1770)local fc=ConvertResolutionY(330)if#f9>0 then local fd=fa:find('identifiedConstructs":%[%]')if fd==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if fd~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fb,fc,#f9)local fe={}for bd,be in pairs(f9)do if radar_1.hasMatchingTransponder(be)==1 then table.insert(fe,be)end end;if#fe>0 then local bz=ConvertResolutionY(15)local by=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,by,bz)for bd,be in pairs(fe)do bz=bz+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,by,bz,radar_1.getConstructName(be))end end else local ff;ff=fa:find('worksInEnvironment":false')if ff then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fb,fc)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fb,fc)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bY,fg)if fg~="empty"then bY[#bY+1]=[[<text class="msg" x="50%%" y="310" >]]for fh in string.gmatch(fg,"([^\n]+)")do bY[#bY+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fh)end;bY[#bY+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bm=system.getTime()local b5=vec3(core.getWorldVelocity())local da=vec3(b5):len()local fi=bm-ag;if da>1.38889 then da=da/1000;local fj=da*(bm-ag)TotalDistanceTravelled=TotalDistanceTravelled+fj;W=W+fj end;X=X+fi;TotalFlightTime=TotalFlightTime+fi;ag=bm end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aS=Atlas()for bd,be in pairs(aS[0])do if av==nil or be.center.x<av then av=be.center.x end;if aw==nil or be.center.x>aw then aw=be.center.x end;if ax==nil or be.center.y<ax then ax=be.center.y end;if ay==nil or be.center.y>ay then ay=be.center.y end end;aT=""local fk=1.1*(aw-av)/1920;local fl=1.4*(ay-ax)/1080;for bd,be in pairs(aS[0])do local by=960+be.center.x/fk;local bz=540+be.center.y/fl;aT=aT..'<circle cx="'..by..'" cy="'..bz..'" r="'..be.radius/fk*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(be.name,"Moon")and not string.match(be.name,"Sanctuary")and not string.match(be.name,"Space")then aT=aT.."<text x='"..by.."' y='"..bz+be.radius/fk*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..be.name.."</text>"end end;local bH=vec3(core.getConstructWorldPos())local by=960+bH.x/fk;local bz=540+bH.y/fl;aT=aT..'<circle cx="'..by..'" cy="'..bz..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..by.."' y='"..bz-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fk;aV=fl;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bH=vec3(core.getConstructWorldPos())local by=960+bH.x/fk;local bz=540+bH.y/fl;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((by-80)/19.20,(bz-80)/10.80,aT)end end;function PlanetRef()local function fm(fn)return type(fn)=='number'end;local function fo(fn)return type(tonumber(fn))=='number'end;local function fp(fq)return type(fq)=='table'end;local function fr(fs)return type(fs)=='string'end;local function ft(be)return fp(be)and fm(be.x and be.y and be.z)end;local function fu(fv)return fp(fv)and fm(fv.latitude and fv.longitude and fv.altitude and fv.bodyId and fv.systemId)end;local fw=math.pi/180;local fx=180/math.pi;local fy=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bI='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fz=utils.clamp;local function fA(fB,fC)if fB==0 then return math.abs(fC)<1e-09 end;if fC==0 then return math.abs(fB)<1e-09 end;return math.abs(fB-fC)<math.max(math.abs(fB),math.abs(fC))*fy end;local function fD(fn)local bf=string.gsub(string.reverse(e('%.4f',fn)),'^0*%.?','')return bf==''and'0'or string.reverse(bf)end;local function fE(fF)if ft(fF)then return e('{x=%.3f,y=%.3f,z=%.3f}',fF.x,fF.y,fF.z)end;if fp(fF)and not getmetatable(fF)then local fG={}local fH=next(fF)if type(fH)=='nil'or fH==1 then fG=fF else for bd,be in pairs(fF)do local du=fE(be)if type(bd)=='number'then table.insert(fG,e('[%s]=%s',bd,du))else table.insert(fG,e('%s=%s',bd,du))end end end;return e('{%s}',table.concat(fG,','))end;if fr(fF)then return e("'%s'",fF:gsub("'",[[\']]))end;return tostring(fF)end;local fI={}fI.__index=fI;fI.__tostring=function(fF,fJ)local fK={}for bd in pairs(fF)do table.insert(fK,bd)end;table.sort(fK)local fG={}for _,bd in ipairs(fK)do local du=fE(fF[bd])if type(bd)=='number'then table.insert(fG,e('[%s]=%s',bd,du))else table.insert(fG,e('%s=%s',bd,du))end end;if fJ then return e('%s%s',fJ,table.concat(fG,',\n'..fJ))end;return e('{%s}',table.concat(fG,','))end;fI.__eq=function(fL,fM)return fL.planetarySystemId==fM.planetarySystemId and fL.bodyId==fM.bodyId and fA(fL.radius,fM.radius)and fA(fL.center.x,fM.center.x)and fA(fL.center.y,fM.center.y)and fA(fL.center.z,fM.center.z)and fA(fL.GM,fM.GM)end;local function fN(bJ,bK,fO,fP,fQ)assert(fo(bJ),'Argument 1 (planetarySystemId) must be a number:'..type(bJ))assert(fo(bK),'Argument 2 (bodyId) must be a number:'..type(bK))assert(fo(fO),'Argument 3 (radius) must be a number:'..type(fO))assert(fp(fP),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fP))assert(fo(fQ),'Argument 5 (GM) must be a number:'..type(fQ))return setmetatable({planetarySystemId=tonumber(bJ),bodyId=tonumber(bK),radius=tonumber(fO),center=vec3(fP),GM=tonumber(fQ)},fI)end;local fR={}fR.__index=fR;fR.__tostring=function(fS)return e('::pos{%d,%d,%s,%s,%s}',fS.systemId,fS.bodyId,fD(fS.latitude*fx),fD(fS.longitude*fx),fD(fS.altitude))end;fR.__eq=function(fL,fM)return fL.bodyId==fM.bodyId and fL.systemId==fM.systemId and fA(fL.latitude,fM.latitude)and fA(fL.altitude,fM.altitude)and(fA(fL.longitude,fM.longitude)or fA(fL.latitude,math.pi/2)or fA(fL.latitude,-math.pi/2))end;local function fT(fU,bK,bL,bM,bN)local bJ=fU;if fr(fU)and not bM and not bN and not bK and not bL then bJ,bK,bL,bM,bN=string.match(fU,bI)assert(bJ,'Argument 1 (position string) is malformed.')else assert(fo(bJ),'Argument 1 (systemId) must be a number:'..type(bJ))assert(fo(bK),'Argument 2 (bodyId) must be a number:'..type(bK))assert(fo(bL),'Argument 3 (latitude) must be in degrees:'..type(bL))assert(fo(bM),'Argument 4 (longitude) must be in degrees:'..type(bM))assert(fo(bN),'Argument 5 (altitude) must be in meters:'..type(bN))end;bJ=tonumber(bJ)bK=tonumber(bK)bL=tonumber(bL)bM=tonumber(bM)bN=tonumber(bN)if bK==0 then return setmetatable({latitude=bL,longitude=bM,altitude=bN,bodyId=bK,systemId=bJ},fR)end;return setmetatable({latitude=fw*fz(bL,-90,90),longitude=fw*(bM%360),altitude=bN,bodyId=bK,systemId=bJ},fR)end;local fV={}fV.__index=fV;fV.__tostring=function(fF,fJ)local fW=fJ and fJ..'  'local fX={}local fK={}for bd in pairs(fF)do table.insert(fK,bd)end;table.sort(fK)for _,fY in ipairs(fK)do bdy=fF[fY]local fZ=fI.__tostring(bdy,fW)if fJ then table.insert(fX,e('[%s]={\n%s\n%s}',fY,fZ,fJ))else table.insert(fX,e('  [%s]=%s',fY,fZ))end end;if fJ then return e('\n%s%s%s',fJ,table.concat(fX,',\n'..fJ),fJ)end;return e('{\n%s\n}',table.concat(fX,',\n'))end;local function f_(g0)local aS={}local pid;for _,be in pairs(g0)do local bU=be.planetarySystemId;if type(bU)~='number'then error('Invalid planetary system ID: '..tostring(bU))elseif pid and bU~=pid then error('Mismatch planetary system IDs: '..bU..' and '..pid)end;local g1=be.bodyId;if type(g1)~='number'then error('Invalid body ID: '..tostring(g1))elseif aS[g1]then error('Duplicate body ID: '..tostring(g1))end;setmetatable(be.center,getmetatable(vec3.unit_x))aS[g1]=setmetatable(be,fI)pid=bU end;return setmetatable(aS,fV)end;aX={}local function g2(g0)return setmetatable({galaxyAtlas=g0 or{}},aX)end;aX.__index=function(fq,i)if type(i)=='number'then local system=fq.galaxyAtlas[i]return f_(system)end;return rawget(aX,i)end;aX.__pairs=function(fF)return function(fq,bd)local g3,nv=next(fq,bd)return g3,nv and f_(nv)end,fF.galaxyAtlas,nil end;aX.__tostring=function(fF)local g4={}for _,g5 in pairs(fF or{})do local g6=g5:getPlanetarySystemId()local g7=fV.__tostring(g5,'    ')table.insert(g4,e('  [%s]={%s\n  }',g6,g7))end;return e('{\n%s\n}\n',table.concat(g4,',\n'))end;aX.BodyParameters=fN;aX.MapPosition=fT;aX.PlanetarySystem=f_;function aX.createBodyParameters(g8,bK,g9,ga,gb,gc,gd)assert(fo(g8),'Argument 1 (planetarySystemId) must be a number:'..type(g8))assert(fo(bK),'Argument 2 (bodyId) must be a number:'..type(bK))assert(fo(g9),'Argument 3 (surfaceArea) must be a number:'..type(g9))assert(fp(ga),'Argument 4 (aPosition) must be an array or vec3:'..type(ga))assert(fp(gb),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gb))assert(fo(gc),'Argument 6 (altitude) must be in meters:'..type(gc))assert(fo(gd),'Argument 7 (gravityAtPosition) must be number:'..type(gd))local fO=math.sqrt(g9/4/math.pi)local a3=fO+gc;local ge=vec3(ga)+a3*vec3(gb)local fQ=gd*a3*a3;return fN(g8,bK,fO,ge,fQ)end;aX.isMapPosition=fu;function aX:getPlanetarySystem(fU)if i==nil then i=0 end;if nv==nil then nv=0 end;local g8=fU;if fu(fU)then g8=fU.systemId end;if type(g8)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fV then system=f_(system)end;return system end end end;function fV:castIntersections(gf,eN,gg,gh)local gg=gg or function(gi)return 1.05*gi.radius end;local gj={}if gh then for _,i in ipairs(gh)do gj[i]=self[i]end else gh={}for bd,gi in pairs(self)do table.insert(gh,bd)gj[bd]=gi end end;local function gk(gl,gm)local gn=gj[gl].center-gf;local go=gj[gm].center-gf;return gn:len()<go:len()end;table.sort(gh,gk)local gp=eN:normalize()for i,bU in ipairs(gh)do local gi=gj[bU]local gq=gi.center-gf;local fO=gg(gi)local gr=gq:dot(gp)local gs=gr^2-(gq:len2()-fO^2)if gs>=0 then local gt=math.sqrt(gs)local gu=gr+gt;local gv=gr-gt;if gv>0 then return gi,gu,gv elseif gu>0 then return gi,gu,nil end end end;return nil,nil,nil end;function fV:closestBody(gw)assert(type(gw)=='table','Invalid coordinates.')local gx,gi;local gy=vec3(gw)for _,gz in pairs(self)do local gA=(gz.center-gy):len2()if(not gi or gA<gx)and gz.name~="Space"then gi=gz;gx=gA end end;return gi end;function fV:convertToBodyIdAndWorldCoordinates(fU)local gB=fU;if fr(fU)then gB=fT(fU)end;if gB.bodyId==0 then return 0,vec3(gB.latitude,gB.longitude,gB.altitude)end;local gz=self:getBodyParameters(gB)if gz then return gB.bodyId,gz:convertToWorldCoordinates(gB)end end;function fV:getBodyParameters(fU)local bK=fU;if fu(fU)then bK=fU.bodyId end;assert(fo(bK),'Argument 1 (bodyId) must be a number:'..type(bK))return self[bK]end;function fV:getPlanetarySystemId()local _,be=next(self)return be and be.planetarySystemId end;function fI:convertToMapPosition(fP)assert(fp(fP),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fP))local gC=vec3(fP)if self.bodyId==0 then return setmetatable({latitude=gC.x,longitude=gC.y,altitude=gC.z,bodyId=0,systemId=self.planetarySystemId},fR)end;local gD=gC-self.center;local a3=gD:len()local bN=a3-self.radius;local bL=0;local bM=0;if not fA(a3,0)then local gE=math.atan(gD.y,gD.x)bM=gE>=0 and gE or 2*math.pi+gE;bL=math.pi/2-math.acos(gD.z/a3)end;return setmetatable({latitude=bL,longitude=bM,altitude=bN,bodyId=self.bodyId,systemId=self.planetarySystemId},fR)end;function fI:convertToWorldCoordinates(fU)local gB=fr(fU)and fT(fU)or fU;if gB.bodyId==0 then return vec3(gB.latitude,gB.longitude,gB.altitude)end;assert(fu(gB),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gB.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gB.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bO=math.cos(gB.latitude)return self.center+(self.radius+gB.altitude)*vec3(bO*math.cos(gB.longitude),bO*math.sin(gB.longitude),math.sin(gB.latitude))end;function fI:getAltitude(fP)return(vec3(fP)-self.center):len()-self.radius end;function fI:getDistance(fP)return(vec3(fP)-self.center):len()end;function fI:getGravity(fP)local gF=self.center-vec3(fP)local gG=gF:len2()return self.GM/gG*gF/math.sqrt(gG)end;return setmetatable(aX,{__call=function(_,...)return g2(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fr(fs)return type(fs)=='string'end;local function fp(fq)return type(fq)=='table'end;local function fA(fB,fC)if fB==0 then return math.abs(fC)<1e-09 end;if fC==0 then return math.abs(fB)<1e-09 end;return math.abs(fB-fC)<math.max(math.abs(fB),math.abs(fC))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bN)assert(self.body)local a3=bN+self.body.radius;if not fA(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fU,b5)assert(self.body)assert(fp(fU)or fr(fU))assert(fp(b5))local bH=(fr(fU)or PlanetRef.isMapPosition(fU))and self.body:convertToWorldCoordinates(fU)or vec3(fU)local be=vec3(b5)local gH=bH-self.body.center;local go=be:len2()local gI=gH:len()local gJ=self.body.GM;local gK=((go-gJ/gI)*gH-gH:dot(be)*be)/gJ;local fB=gJ/(2*gJ/gI-go)local gL=gK:len()local gp=gK:normalize()local gM=fB*(1-gL)local gN=fB*(1+gL)local gO=gM*gp+self.body.center;local gP=gL<=1 and-gN*gp+self.body.center or nil;local gQ=math.sqrt(fB*gJ*(1-gL*gL))local gR=gP and 2*math.pi*math.sqrt(fB^3/gJ)local gS=math.acos(gK:dot(gH)/(gL*gI))if gH:dot(be)<0 then gS=-(gS-2*math.pi)end;local gT=math.acos((math.cos(gS)+gL)/(1+gL*math.cos(gS)))local gU=gT;if gU<0 then gU=gU+2*math.pi end;local gV=gU-gL*math.sin(gU)local gW=0;local gX=0;local gY=0;if gR~=nil then gW=gV/(2*math.pi/gR)gX=gR-gW;gY=gX+gR/2;if gS-math.pi>0 then gX=gW;gY=gX+gR/2 end;if gY>gR then gY=gY-gR end end;return{periapsis={position=gO,speed=gQ/gM,circularOrbitSpeed=math.sqrt(gJ/gM),altitude=gM-self.body.radius},apoapsis=gP and{position=gP,speed=gQ/gN,circularOrbitSpeed=math.sqrt(gJ/gN),altitude=gN-self.body.radius},currentVelocity=be,currentPosition=bH,eccentricity=gL,period=gR,eccentricAnomaly=gT,meanAnomaly=gV,timeToPeriapsis=gX,timeToApoapsis=gY}end;local function gZ(g_)local gz=PlanetRef.BodyParameters(g_.planetarySystemId,g_.bodyId,g_.radius,g_.center,g_.GM)return setmetatable({body=gz},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gZ(...)end})end;function Kinematics()local aZ={}local h0=30000000/3600;local h1=h0*h0;local h2=100;local function h3(be)return 1/math.sqrt(1-be*be/h1)end;function aZ.computeAccelerationTime(h4,h5,h6)local h7=h0*math.asin(h4/h0)return(h0*math.asin(h6/h0)-h7)/h5 end;function aZ.computeDistanceAndTime(h4,h6,h8,h9,ha,hb)ha=ha or 0;hb=hb or 0;local hc=h4<=h6;local hd=h9*(hc and 1 or-1)/h8;local he=-hb/h8;local hf=hd+he;if hc and hf<=0 or not hc and hf>=0 then return-1,-1 end;local hg,hh=0,0;if hd~=0 and ha>0 then local h7=math.asin(h4/h0)local hi=math.pi*(hd/2+he)local hj=hd*ha;local hk=h0*math.pi;local be=function(fq)local cj=(hi*fq-hj*math.sin(math.pi*fq/2/ha)+hk*h7)/hk;local hl=math.tan(cj)return h0*hl/math.sqrt(hl*hl+1)end;local hm=hc and function(fs)return fs>=h6 end or function(fs)return fs<=h6 end;hh=2*ha;if hm(be(hh))then local hn=0;while math.abs(hh-hn)>0.5 do local fq=(hh+hn)/2;if hm(be(fq))then hh=fq else hn=fq end end end;local ho=h4;local hp=hh/h2;for hq=1,h2 do local bs=be(hq*hp)hg=hg+(bs+ho)*hp/2;ho=bs end;if hh<2*ha then return hg,hh end;h4=ho end;local h7=h0*math.asin(h4/h0)local bg=(h0*math.asin(h6/h0)-h7)/hf;local hr=h1*math.cos(h7/h0)/hf;local a3=hr-h1*math.cos((hf*bg+h7)/h0)/hf;return a3+hg,bg+hh end;function aZ.computeTravelTime(h4,h5,a3)if a3==0 then return 0 end;if h5>0 then local h7=h0*math.asin(h4/h0)local hr=h1*math.cos(h7/h0)/h5;return(h0*math.acos(h5*(hr-a3)/h1)-h7)/h5 end;assert(h4>0,'Acceleration and initial speed are both zero.')return a3/h4 end;function aZ.lorentz(be)return h3(be)end;return aZ end;function script.onStart()VERSION_NUMBER=4.94;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})SetupChecks()LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()b0=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(hs)if dbHud_1 then if not Y then for bd,be in pairs(b)do dbHud_1.setStringValue(be,g(_G[be]))if hs and dbHud_2 then dbHud_2.setStringValue(be,g(_G[be]))end end;for bd,be in pairs(a)do dbHud_1.setStringValue(be,g(_G[be]))if hs and dbHud_2 then dbHud_2.setStringValue(be,g(_G[be]))end end;c("Saved Variables to Datacore")if hs and dbHud_2 then K="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bS=j()if door and(bS>0 or bS==0 and ae<10000)then for _,be in pairs(door)do be.toggle()end end;if switch then for _,be in pairs(switch)do be.toggle()end end;if forcefield and(bS>0 or bS==0 and ae<10000)then for _,be in pairs(forcefield)do be.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(ht)if ht=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hu=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hu then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ht=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bY={}local d0=GetFlightStyle()DrawOdometer(bY,W,TotalDistanceTravelled,d0,X)if ShouldCheckDamage then CheckDamage(bY)end;a5=table.concat(bY,"")collectgarbage("collect")elseif ht=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bf=json.decode(dbHud_1.getStringValue("SavedLocations"))if bf~=nil then _G["SavedLocations"]=bf;local bW=-1;local bR;for bd,be in pairs(SavedLocations)do if be.name and be.name=="SatNav Location"then bW=bd;break end end;if bW~=-1 then bR=SavedLocations[bW]bW=-1;for bd,be in pairs(aS[0])do if be.name and be.name=="SatNav Location"then bW=bd;break end end;if bW>-1 then aS[0][bW]=bR end;UpdateAtlasLocationsList()K=bR.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ht=="msgTick"then local bY={}DisplayMessage(bY,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif ht=="animateTick"then b2=true;b1=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif ht=="hudTick"then local bY={}HUDPrologue(bY)if showHud then UpdateHud(bY)else DisplayOrbitScreen(bY)DrawWarnings(bY)end;HUDEpilogue(bY)bY[#bY+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bY,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bY)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(bY)if screen_1.getMouseState()==1 then CheckButtons()end;bY[#bY+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(bY)if not b1 and not b2 then local hv=table.concat(bY,"")bY={}bY[#bY+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bY[#bY+1]=aT;bY[#bY+1]=hv;bY[#bY+1]="</body>"b1=true;bY[#bY+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bY,"")system.setScreen(content)elseif b2 then local hv=table.concat(bY,"")bY={}bY[#bY+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bY[#bY+1]=aT;bY[#bY+1]=hv;bY[#bY+1]="</body>"end;if not b1 then bY[#bY+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(bY)end else SetButtonContains()DrawButtons(bY)end;bY[#bY+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bY[#bY+1]=[[</svg></body>]]content=table.concat(bY,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif ht=="apTick"then b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;local bg=system.getTime()local hw=bg-LastApTickTime;LastApTickTime=bg;local hx=core.getVelocity()local hy=getRelativeYaw(hx)local hz=getRelativePitch(hx)stalling=ad and hy<-StallAngle or hy>StallAngle or hz<-StallAngle or hz>StallAngle;b9=system.getMouseDeltaX()ba=system.getMouseDeltaY()if InvertMouse and not J then ba=-ba end;D=0;H=0;C=0;b5=vec3(core.getWorldVelocity())b6=vec3(b5):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b0(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b5)aa=hoverDetectGround()local c0=vec3(core.getConstructWorldOrientationForward())local c1=vec3(core.getConstructWorldOrientationRight())local c2=vec3(core.getWorldVertical())local c3=getPitch(c2,c0,c1)local bp=planet:getGravity(core.getConstructWorldPos()):len()*n()TargetRoll=0;local d2=getRoll(c2,c0,c1)local d3=math.abs(d2/180*math.pi)local d4=math.cos(d3)local d5=math.sin(d3)local hA=getPitch(c2,c0,c1*d4+vec3(core.getConstructWorldOrientationUp())*d5)a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b1 then a0=a0+b9;a1=a1+ba end else a0=0;a1=0 end else a0=a0+b9;a1=a1+ba;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(ba,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b9,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hB=b6>8334;if b6>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hB then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hB and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hB;if ad and j()>0.09 then if not ai then if b6>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b6<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b6>w then local hC=AlignToWorldVector(vec3(b5),0.01)if a7 then b3=true;if b6<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b3=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b6>w then AlignToWorldVector(-vec3(b5))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b6*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)end;P=P;Q=Q;local hD=AutopilotTargetCoords;if orbit.apoapsis==nil and b6>300 and AutopilotAccelerating then local hE=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b5):normalize()local hF=getMagnitudeInDirection(hE,AutopilotShipUp)local hG=getMagnitudeInDirection(hE,AutopilotShipRight)local hH=-hG*AutopilotDistance*b6*TrajectoryAlignmentStrength;local hI=-hF*AutopilotDistance*b6*TrajectoryAlignmentStrength;hD=AutopilotTargetCoords+-hH*vec3(AutopilotShipRight)+-hI*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hD)-vec3(core.getConstructWorldPos())):len()local hJ=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hJ)..'", "unit":""}')local hK=true;local hL=(V.center-(vec3(core.getConstructWorldPos())+vec3(b5):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hL)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hK=AlignToWorldVector((hD-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hK=AlignToWorldVector(-vec3(b5):normalize())end;if AutopilotAccelerating then if not hK or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b5)<0 and b6>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hL-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b6<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hK then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hK then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b3=true;local hM=0;local bH=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hN=bH-vec3(core.getConstructWorldPos())local hO=vec3(hN):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hP=vec3(hN):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hO*hO+hP*hP)AlignToWorldVector(hN:normalize())local hQ=40;local hR=a3<hQ;local hS=100;local hT=utils.clamp((a3-hQ)/2,10,hS)C=0;local hK=math.abs(D)<0.1;if hK and b6<hT and not hR then BrakeIsOn=false;hM=-20 else BrakeIsOn=true;hM=0 end;local hU=1.0;if math.abs(hM-c3)>hU then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hM-c3)local hV=pitchPID:get()C=hV end end;local dy=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dd=unit.getClosestPlanetInfluence()>0;local hW=HoldAltitude-ae;local hX=500+b6;local hM=(utils.smoothstep(hW,-hX,hX)-0.5)*2*MaxPitch*utils.clamp(b6/100,0.1,1)if not AltitudeHold then hM=0 end;if LockPitch~=nil then if dd then hM=LockPitch else LockPitch=nil end end;b3=true;if Reentry then local hY=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hY then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hY)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hM=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hM=0;b3=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b3=autoRollPreference end end;local hZ=C;if b6>w and not a8 and not VectorToTarget and not BrakeLanding then AlignToWorldVector(vec3(b5))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 and not AutoTakeoff then local cT=CustomTarget.position-vec3(core.getConstructWorldPos())local h_=vec3(core.getConstructWorldOrientationUp())local i0=cT:project_on_plane(c2):normalize()local i1=b5:normalize():project_on_plane(c2):normalize()local i2=math.deg(math.acos(i0:dot(i1)))*-utils.sign(i0:dot(i1:perpendicular()))*2;local i3=math.rad(math.abs(d2))if b6>100 then TargetRoll=utils.clamp(i2,-90,90)local i4=i2;i2=utils.clamp(hy-i2,hy-StallAngle*0.85,hy+StallAngle*0.85)*math.cos(i3)+utils.clamp(hM-hA,-StallAngle*0.85,StallAngle*0.85)*math.sin(math.rad(d2))hM=utils.clamp(hM*math.cos(i3),-StallAngle*0.85,StallAngle*0.85)+utils.clamp(math.abs(i4),-StallAngle*0.85,StallAngle*0.85)*math.sin(i3)end;local i5=i2;if not stalling then if yawPID==nil then yawPID=pid.new(8*0.01,0,8*0.1)end;yawPID:inject(i5)local i6=utils.clamp(yawPID:get(),-1,1)D=D+i6 elseif aa>-1 then AlignToWorldVector(cT)else AlignToWorldVector(b5)end;local i7=planet:getAltitude(CustomTarget.position)local i8=math.sqrt(cT:len()^2-(ae-i7)^2)local i9=LastMaxBrakeInAtmo;if i9 then i9=i9*utils.clamp(b6/100,0.1,1)*j()else i9=LastMaxBrake end;local dw=b5.x*dy.x+b5.y*dy.y+b5.z*dy.z;local ia=b5:len()-math.abs(dw)local ib=vec3(core.getWorldAirFrictionAcceleration())local ic=math.sqrt(ib:len()-ib:project_on(dy):len())*n()if b6>100 then P,Q=aZ.computeDistanceAndTime(b6,100,n(),0,0,i9+ic)local id,ie=aZ.computeDistanceAndTime(100,0,n(),0,0,i9/2)P=P+id else P,Q=aZ.computeDistanceAndTime(b6,0,n(),0,0,i9/2)end;StrongBrakes=true;if i8<=P+b6*hw/2 then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if AltitudeHold then ToggleAltitudeHold()end;BrakeLanding=true;VectorToTarget=false elseif not AutoTakeoff then BrakeIsOn=false end end;C=hZ;local eZ=-1;local hU=0.1;if BrakeLanding then hM=0;local dw=b5.x*dy.x+b5.y*dy.y+b5.z*dy.z;local ig=false;local ih=30;if a_~=nil and a_>0 then local ic=0;local d8=utils.clamp(j(),0.4,2)local i9=LastMaxBrakeInAtmo*utils.clamp(b6/100,0.1,1)*d8;local ii=a_*d8+i9+ic-bp;local ij=i9+ic-bp;local ik=i9/2+ic-bp;local il=b6-math.sqrt(math.abs(ik/2)*20/(0.5*n()))*utils.sign(ik)if il<0 then il=0 end;local im;if b6>100 then local io,_=aZ.computeDistanceAndTime(b6,100,n(),0,0,i9)local ip,_=aZ.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(i9))im=io+ip else im=aZ.computeDistanceAndTime(b6,0,n(),0,0,math.sqrt(i9))end;if im<20 then BrakeIsOn=false else local iq=0;if il>100 then local ir,_=aZ.computeDistanceAndTime(il,100,n(),0,0,ii)local is,_=aZ.computeDistanceAndTime(100,0,n(),0,0,a_*d8+math.sqrt(i9)+ic-bp)iq=ir+is else iq,_=aZ.computeDistanceAndTime(il,0,n(),0,0,a_*d8+math.sqrt(i9)+ic-bp)end;iq=(iq+15+b6*hw)*1.1;local it=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0;if it then local i7=planet:getAltitude(CustomTarget.position)local iu=ae-i7-100;local cT=CustomTarget.position-vec3(core.getConstructWorldPos())local iv=math.sqrt(cT:len()^2-(ae-i7)^2)if iv>100 then it=false elseif iu<=iq or iq==-1 then BrakeIsOn=true else BrakeIsOn=false end;ig=true end;if not it and CalculateBrakeLandingSpeed then if iq>=ih then BrakeIsOn=true else BrakeIsOn=false end;ig=true end end;if bb then ig=false end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)eZ=aa;if eZ>-1 then b3=autoRollPreference;if b6<1 or b5:normalize():dot(c2)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;bb=false;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and b5:normalize():dot(-dy)<0.999 then BrakeIsOn=true elseif dw<-brakeLandingRate and not ig then BrakeIsOn=true elseif not ig then BrakeIsOn=false end end;if AutoTakeoff or a8 then if hM<15 and ae/HoldAltitude>0.75 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b6<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;local iw=hoverDetectGround()>-1;local ix=c3;if VectorToTarget and not iw and b6>100 then local i3=math.rad(math.abs(d2))ix=c3*math.cos(i3)+hz*math.sin(i3)end;local iy=utils.clamp(hM-ix,-StallAngle*0.85,StallAngle*0.85)if math.abs(iy)>hU and(not stalling and(math.abs(d2)<5 or VectorToTarget)or BrakeLanding or iw)then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(iy)local hV=pitchPID:get()C=C+hV end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local iz=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local iA=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local iB=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local iC=G;local iD=vec3(core.getWorldVertical())local iE=vec3(core.getConstructWorldOrientationUp())local iF=vec3(core.getConstructWorldOrientationForward())local iG=vec3(core.getConstructWorldOrientationRight())local iH=vec3(core.getWorldVelocity())local iI=vec3(core.getWorldVelocity()):normalize()local iJ=getRoll(iD,iF,iG)local iK=math.abs(iJ)local iL=utils.sign(iJ)local j=j()local iM=vec3(core.getWorldAngularVelocity())local iN=iz*pitchSpeedFactor*iG+iA*rollSpeedFactor*iF+iB*yawSpeedFactor*iE;if iD:len()>0.01 and j>0.0 or ProgradeIsOn then local iO=1.0;if b3==true and math.abs(TargetRoll-iJ)>iO and iA==0 then local iP=TargetRoll;local iQ=autoRollFactor;if rollPID==nil then rollPID=pid.new(iQ*0.01,0,iQ*0.1)end;rollPID:inject(iP-iJ)local iR=rollPID:get()iN=iN+iR*iF end end;if iD:len()>0.01 and j>0.0 then local iS=20.0;if turnAssist==true and iK>iS and iz==0 and iB==0 then local iT=turnAssistFactor*0.1;local iU=turnAssistFactor*0.025;local iV=(iK-iS)/(180-iS)*180;local iW=0;if iV<90 then iW=iV/90 elseif iV<180 then iW=(180-iV)/90 end;iW=iW*iW;local iX=-iL*iU*(1.0-iW)local iY=iT*iW;iN=iN+iY*iG+iX*iE end end;local iZ=1;local i_=0;local j0=1;local j1=torqueFactor*(iN-iM)local j2=vec3(core.getWorldAirFrictionAngularAcceleration())j1=j1-j2;Nav:setEngineTorqueCommand('torque',j1,iZ,'airfoil','','',j0)local j3=-iC*(brakeSpeedFactor*iH+brakeFlatFactor*iI)Nav:setEngineForceCommand('brake',j3)local j4=''local j5=vec3()local j6=false;local j7='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then j7=j7 ..ExtraLongitudeTags end;local j8=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if j8==axisCommandType.byThrottle then local j9=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(j7,axisCommandId.longitudinal)Nav:setEngineForceCommand(j7,j9,iZ)elseif j8==axisCommandType.byTargetSpeed then local j9=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)j4=j4 ..' , '..j7;j5=j5+j9;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then j6=true end end;local ja='thrust analog lateral 'if ExtraLateralTags~="none"then ja=ja..ExtraLateralTags end;local jb=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jb==axisCommandType.byThrottle then local jc=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ja,axisCommandId.lateral)Nav:setEngineForceCommand(ja,jc,iZ)elseif jb==axisCommandType.byTargetSpeed then local jd=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)j4=j4 ..' , '..ja;j5=j5+jd end;local je='thrust analog vertical 'if ExtraVerticalTags~="none"then je=je..ExtraVerticalTags end;local jf=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jf==axisCommandType.byThrottle then local jg=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(je,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(je,jg,iZ,'airfoil','ground','',j0)else Nav:setEngineForceCommand(je,vec3(),iZ)Nav:setEngineForceCommand('airfoil vertical',jg,iZ,'airfoil','','',j0)Nav:setEngineForceCommand('ground vertical',jg,iZ,'ground','','',j0)end elseif jf==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),iZ)end;local jh=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)j4=j4 ..' , '..je;j5=j5+jh end;if j5:len()>constants.epsilon then if G~=0 or j6 or math.abs(iI:dot(iF))<0.95 then j4=j4 ..', brake'end;Nav:setEngineForceCommand(j4,j5,i_,'','','',j0)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bs=vec3(core.getVelocity()):len()local ji=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jj=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bs*3.6>jj*(1-ji)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bs*3.6<jj*(1-ji)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jk=unit.getThrottle()local hT=jk/100;if j==0 then hT=hT*MaxGameVelocity;if bs>=hT*(1-ji)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bs<hT*(1-ji)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hT=hT*ReentrySpeed/3.6;if bs>=hT*(1-ji)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bs<hT*(1-ji)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bf=coroutine.resume(beginSetup)if bf then SetupComplete=true end else Nav:update()if not b1 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jl)if jl=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;bb=true;b3=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if A and not BrakeLanding then Nav.control.extendLandingGears()end else if A then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jl=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif jl=="forward"then B=B-1 elseif jl=="backward"then B=B+1 elseif jl=="left"then E=E-1 elseif jl=="right"then E=E+1 elseif jl=="yawright"then F=F-1 elseif jl=="yawleft"then F=F+1 elseif jl=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif jl=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif jl=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jl=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jl=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jl=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jl=="option1"then IncrementAutopilotTargetIndex()v=false elseif jl=="option2"then DecrementAutopilotTargetIndex()v=false elseif jl=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif jl=="option4"then ToggleAutopilot()v=false elseif jl=="option5"then ToggleLockPitch()v=false elseif jl=="option6"then ToggleAltitudeHold()v=false elseif jl=="option7"then wipeSaveVariables()v=false elseif jl=="option8"then ToggleFollowMode()v=false elseif jl=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif jl=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b2=false;b1=false end elseif jl=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jl=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jl=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif jl=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif jl=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif jl=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif jl=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jl)if jl=="forward"then B=0 elseif jl=="backward"then B=0 elseif jl=="left"then E=0 elseif jl=="right"then E=0 elseif jl=="yawright"then F=0 elseif jl=="yawleft"then F=0 elseif jl=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif jl=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif jl=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jl=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jl=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jl=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jl=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b2=false;b1=false end elseif jl=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jl=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(jl)if jl=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jl=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jl=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif jl=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(jm)local i;local jn="/commands /setname /G /agg /addlocation /copydatabank"local jo,jp=nil,nil;local jq="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(jm," ")jo=jm;if i~=nil then jo=string.sub(jm,0,i-1)jp=string.sub(jm,i+1)elseif not string.find(jn,jo)then for fh in string.gmatch(jq,"([^\n]+)")do c(fh)end;return end;if jo=="/setname"then if jp==nil or jp==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(jp)else K="Select a saved target to rename first"end elseif jo=="/addlocation"then if jp==nil or jp==""or string.find(jp,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(jp,"::")local bQ=string.sub(jp,1,i-2)local bH=string.sub(jp,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bI='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bJ,bK,bL,bM,bN=string.match(bH,bI)local planet=aS[tonumber(bJ)][tonumber(bK)]AddNewLocationByWaypoint(bQ,planet,bH)K="Added "..bQ.." to saved locations,\nplanet "..planet.name.." at "..bH;a2=5 elseif jo=="/agg"then if jp==nil or jp==""then K="Usage: /agg targetheight"return end;jp=tonumber(jp)if jp<1000 then jp=1000 end;AntigravTargetAltitude=jp;K="AGG Target Height set to "..jp elseif jo=="/G"then if jp==nil or jp==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if jp=="dump"then for bd,be in pairs(a)do if type(_G[be])=="boolean"then if _G[be]==true then c(be.." true")else c(be.." false")end elseif _G[be]==nil then c(be.." nil")else c(be.." ".._G[be])end end;return end;i=string.find(jp," ")local jr=string.sub(jp,0,i-1)local js=string.sub(jp,i+1)for bd,be in pairs(a)do if be==jr then K="Variable "..jr.." changed to "..js;local jt=type(_G[be])if jt=="number"then js=tonumber(js)elseif jt=="boolean"then if string.lower(js)=="true"then js=true else js=false end end;_G[be]=js;return end end;K="No such global variable: "..jr elseif jo=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else K="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
