name: ButtonsHud - Dimencia and Archaegeo v4.70 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement. 
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.70;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;toggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;EmergencyWarp=false;ReentryMode=false;mousePitchFactor=1;mouseYawFactor=1;hasGear=false;pitchInput=0;pitchInput2=0;yawInput2=0;rollInput=0;yawInput=0;brakeInput=0;rollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;msgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;isBoosting=false;brakeDistance,brakeTime=0;maxBrakeDistance,maxBrakeTime=0;hasDB=false;hasSpaceRadar=false;hasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;totalDistanceTravelled=0.0;totalDistanceTrip=0;emergencyWarp=false;notTriedEmergencyWarp=true;flightTime=0;wipedDatabank=false;LocationIndex=0;upAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;simulatedX=0;simulatedY=0;AutopilotStatus="Aligning"msgTimer=3;targetGroundAltitude=nil;gearExtended=nil;distance=0;radarMessage=""LastOdometerOutput=""peris=0;AntigravTargetAltitude=nil;core_altitude=core.getAltitude()elementsID=core.getElementIdList()lastTravelTime=system.getTime()totalFlightTime=0;local m={}displayOrbit=true;AutopilotEndSpeed=0;local n=0;local o=0;local p=""hasGear=false;AutopilotPlanetGravity=0;local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}SavedLocations={}local Q=false;local R=0;local S=k()local T=16;local U=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY"}AutoVariables={"EmergencyWarp","hasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","displayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","gearExtended","targetGroundAltitude","totalDistanceTravelled","totalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake"}if dbHud then local V=dbHud.hasKey;if not useTheseSettings then for W,X in pairs(SaveableVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end end;for W,X in pairs(AutoVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end;if A then msgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then msgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else msgText="No Saved Variables Found - Stand up / leave remote to save settings"end else msgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;R=S-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for W in pairs(elementsID)do local a0=h(elementsID[W])if a0=="landing gear"then hasGear=true end;if a0=="dynamic core"then local a1=e(elementsID[W])if a1>10000 then T=128 elseif a1>1000 then T=64 elseif a1>150 then T=32 end end;H=H+e(elementsID[W])if a0=="atmospheric fuel-tank"or a0=="space fuel-tank"or a0=="rocket fuel-tank"then local a1=e(elementsID[W])local a2=j(elementsID[W])local a3=0;local a4=system.getTime()if a0=="atmospheric fuel-tank"then local a5=400;local a6=35.03;if a1>10000 then a5=51200;a6=5480 elseif a1>1300 then a5=6400;a6=988.67 elseif a1>150 then a5=1600;a6=182.67 end;a3=a2-a6;if fuelTankOptimizationAtmo>0 then a5=a5+a5*fuelTankOptimizationAtmo*0.2 end;if a3>a5 then a5=a3 end;E[#E+1]={elementsID[W],core.getElementNameById(elementsID[W]),a5,a6,a3,a4}end;if a0=="rocket fuel-tank"then local a5=320;local a6=173.42;if a1>65000 then a5=40000;a6=25740 elseif a1>6000 then a5=5120;a6=4720 elseif a1>700 then a5=640;a6=886.72 end;a3=a2-a6;if fuelTankOptimizationRocket>0 then a5=a5+a5*fuelTankOptimizationRocket*0.1 end;if a3>a5 then a5=a3 end;G[#G+1]={elementsID[W],core.getElementNameById(elementsID[W]),a5,a6,a3,a4}end;if a0=="space fuel-tank"then local a5=2400;local a6=182.67;if a1>10000 then a5=76800;a6=5480 elseif a1>1300 then a5=9600;a6=988.67 end;a3=a2-a6;if fuelTankOptimizationSpace>0 then a5=a5+a5*fuelTankOptimizationSpace*0.2 end;if a3>a5 then a5=a3 end;F[#F+1]={elementsID[W],core.getElementNameById(elementsID[W]),a5,a6,a3,a4}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;if door then for _,X in pairs(door)do X.deactivate()end end;if forcefield then for _,X in pairs(forcefield)do X.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if targetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(targetGroundAltitude)end;if hasGear then if gearExtended==nil then gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if targetGroundAltitude==nil then if gearExtended then Nav.axisCommandManager:setTargetGroundAltitude(0)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end elseif targetGroundAltitude==nil then if f()==0 then gearExtended=false;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else gearExtended=true;Nav.axisCommandManager:setTargetGroundAltitude(0)end end;if f()>0 and not dbHud and(gearExtended or not hasGear)then BrakeIsOn=true end;InAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a7,a8)if a7==nil then a7=core.g()end;a7=round(a7,5)if a8~=nil and a8 or(D==nil or D~=a7)then local a9=c(unit.getData()).maxBrake;if a9~=nil then LastMaxBrake=a9 end;D=a7 end end;function MakeButton(aa,ab,ac,ad,ae,af,ag,ah,ai)local aj={enableName=aa,disableName=ab,width=ac,height=ad,x=ae,y=af,toggleVar=ag,toggleFunction=ah,drawCondition=ai,hovered=false}table.insert(r,aj)return aj end;function AddLocationsToAtlas()for W,X in pairs(SavedLocations)do table.insert(atlas[0],X)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a0=#SavedLocations..". "..planet.name;if radar_1 then local ak,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ak~=nil and ak~=""then a0=a0 .." "..radar_1.getConstructName(ak)end end;local al={position=position,name=a0,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=al;table.insert(atlas[0],al)msgText="Location saved as "..a0 else msgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local am=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then am=W end end;if am>-1 then table.remove(atlas[0],am)end;am=-1;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then msgText=X.name.." saved location cleared"am=W;break end end;if am~=-1 then table.remove(SavedLocations,am)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(an)an[#an+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ao,ap,ae,af,ac,ad)if ao>ae and ao<ae+ac and ap>af and ap<af+ad then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not gearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=core_altitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=gearExtended;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;gearExtended=OldGearExtended;if gearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else msgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(an)local aq=0;p=""currentConstructMass=k()local ar=H;local as=0;local at=100;local au=0;local av=0;local aw=0;local ax=""for W in pairs(elementsID)do local a1=0;local ay=0;ay=e(elementsID[W])a1=g(elementsID[W])as=as+a1;if a1<ay then if a1==0 then av=av+1 else au=au+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(elementsID[W]))local ae=position.x-T;local af=position.y-T;local az=position.z-T;table.insert(m,core.spawnArrowSticker(ae,af,az+1,"down"))table.insert(m,core.spawnArrowSticker(ae,af,az+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ae+1,af,az,"north"))table.insert(m,core.spawnArrowSticker(ae+1,af,az,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ae-1,af,az,"south"))table.insert(m,core.spawnArrowSticker(ae-1,af,az,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ae,af-1,az,"east"))table.insert(m,core.spawnArrowSticker(ae,af-1,az,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ae,af+1,az,"west"))table.insert(m,core.spawnArrowSticker(ae,af+1,az,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,elementsID[W])end elseif I and#m>0 and m[11]==elementsID[W]then for aA in pairs(m)do core.deleteSticker(m[aA])end;m={}end end;aq=a(as*100/ar)if currentConstructMass<S then at=math.ceil(100*(currentConstructMass-updateMass())/R)S=currentConstructMass end;if at<100 or aq<100 then an[#an+1]=[[<g class="pbright txt">]]if at<100 then aw=a(at*2.55)ax=b("rgb(%d,%d,%d)",255-aw,aw,0)an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],ax,at)end;aw=a(aq*2.55)ax=b("rgb(%d,%d,%d)",255-aw,aw,0)if aq<100 then an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ax,aq)if av>0 then an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ax,av,au)elseif au>0 then an[#an+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ax,au)end end;an[#an+1]=[[<\g>]]end end;function DrawCursorLine(an)local aB=a(utils.clamp(distance/(u/4)*255,0,255))an[#an+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",simulatedX,simulatedY,a(PrimaryR+0.5)+aB,a(PrimaryG+0.5)-aB,a(PrimaryB+0.5)-aB)end;function getPitch(aC,aD,aE)local aF=aC:cross(aE):normalize_inplace()local aG=math.acos(utils.clamp(aF:dot(-aD),-1,1))*constants.rad2deg;if aF:cross(-aD):dot(aE)<0 then aG=-aG end;return aG end;function wipeSaveVariables()if not dbHud then msgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"msgTimer=5 elseif A then if B then for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,d(nil))end;for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,d(nil))end;msgText="Databank wiped. New variables will save after re-enter seat and exit"msgTimer=5;B=false;A=false;wipedDatabank=true else msgText="Press ALT-7 again to confirm wipe"B=true end end end;function CheckButtons()for _,X in pairs(r)do if X.hovered then X.toggleFunction()X.hovered=false end end end;function SetButtonContains()local ae=simulatedX+u/2;local af=simulatedY+v/2;for _,X in pairs(r)do X.hovered=Contains(ae,af,X.x,X.y,X.width,X.height)end end;function DrawButton(an,aH,hover,ae,af,aI,aJ,aK,aL,aM,aN)if type(aM)=="function"then aM=aM()end;if type(aN)=="function"then aN=aN()end;an[#an+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ae,af,aI,aJ)if aH then an[#an+1]=b("%s'",aK)else an[#an+1]=aL end;if hover then an[#an+1]=" style='stroke:white; stroke-width:2'"else an[#an+1]=" style='stroke:black; stroke-width:1'"end;an[#an+1]="></rect>"an[#an+1]=b("<text x='%f' y='%f' font-size='24' fill='",ae+aI/2,af+aJ/2+5)if aH then an[#an+1]="black"else an[#an+1]="white"end;an[#an+1]="' text-anchor='middle' font-family='Montserrat'>"if aH then an[#an+1]=b("%s</text>",aM)else an[#an+1]=b("%s</text>",aN)end end;function DrawButtons(an)local aO="rgb(50,50,50)'"local aP="rgb(210,200,200)"local aQ=DrawButton;for _,X in pairs(r)do local ab=X.disableName;local aa=X.enableName;if type(ab)=="function"then ab=ab()end;if type(aa)=="function"then aa=aa()end;if not X.drawCondition or X.drawCondition()then aQ(an,X.toggleVar(),X.hovered,X.x,X.y,X.width,X.height,aP,aO,ab,aa)end end end;function DrawTank(an,Q,ae,aR,aS,aT,aU,aV)local aW=1;local aX=2;local aY=3;local aZ=4;local a_=5;local b0=6;local b1=""local b2=0;local b3=350;local b4=360;if l()==1 then b3=b3-50;b4=b4-50 end;an[#an+1]=[[<g class="pdim txtfuel">]]if aS=="ATMO"then b1="atmofueltank"elseif aS=="SPACE"then b1="spacefueltank"else b1="rocketfueltank"end;b2=_G[b1 .."_size"]if#aT>0 then for i=1,#aT do local a0=string.sub(aT[i][aX],1,12)local b5=0;for aA=1,b2 do if aT[i][aX]==json.decode(unit[b1 .."_"..aA].getData()).name then b5=aA;break end end;if Q or aU[i]==nil or aV[i]==nil then local b6=0;local b7=0;local b8=0;local b9=0;local a4=system.getTime()if b5~=0 then aV[i]=json.decode(unit[b1 .."_"..b5].getData()).percentage;aU[i]=json.decode(unit[b1 .."_"..b5].getData()).timeLeft;if aU[i]=="n/a"then aU[i]=0 end else b8=j(aT[i][aW])-aT[i][aZ]b6=aT[i][aY]aV[i]=a(0.5+b8*100/b6)b7=aT[i][a_]b9=aT[i][b0]if b7<=b8 then aU[i]=0 else aU[i]=a(0.5+b8/((b7-b8)/(a4-b9)))end;aT[i][a_]=b8;aT[i][b0]=a4 end end;if a0==aR then a0=b("%s %d",aS,i)end;if b5==0 then a0=a0 .." *"end;local ba;if aU[i]==0 then ba="n/a"else ba=FormatTimeString(aU[i])end;if aV[i]~=nil then local aw=a(aV[i]*2.55)local ax=b("rgb(%d,%d,%d)",255-aw,aw,0)local bb=""if ba~="n/a"and aU[i]<120 or aV[i]<5 then if Q then bb=[[class="red"]]end end;an[#an+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ae,b3,bb,a0,ae,b4,ax,aV[i],ba)b3=b3+30;b4=b4+30 end end end;an[#an+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aG=-math.deg(math.atan(velocity.y,velocity.z))+180;aG=aG-90;if aG<0 then aG=360+aG end;if aG>180 then aG=-180+aG-180 end;return-aG end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bc=math.deg(math.atan(velocity.y,velocity.x))-90;if bc<-180 then bc=360+bc end;return bc end;function AlignToWorldVector(bd,be)if be==nil then be=t end;bd=vec3(bd):normalize()local bf=vec3(core.getConstructWorldOrientationForward())-bd;local bg=-getMagnitudeInDirection(bf,core.getConstructWorldOrientationRight())*s;local bh=-getMagnitudeInDirection(bf,core.getConstructWorldOrientationUp())*s;yawInput2=yawInput2-(bg+(bg-n)*DampingMultiplier)pitchInput2=pitchInput2+bh+(bh-o)*DampingMultiplier;n=bg;o=bh;if math.abs(bg)<be and math.abs(bh)<be then return true end;return false end;function getAPEnableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a0==nil then a0="None"end;return"Engage Autopilot: "..a0 end;function getAPDisableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name end;if a0==nil then a0="None"end;return"Disable Autopilot: "..a0 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()else AntigravTargetAltitude=core_altitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if unit.getAtmosphereDensity()<0 and unit.getClosestPlanetInfluence()>0 and core_altitude>ReentryAltitude and not Reentry then Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;msgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude else msgText="You do not meet re-entry requirements. (Must be out of atmosphere and close to a planet"Rentry=false end end;local bi=50;local bj=260;local bk=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bj,bi,u/2-bj/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then msgText="Brakes in Toggle Mode"else msgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bj,bi,u/2-bj/2-50-bk.width,v/2-bi+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bj,bi,u/2-bj/2+bk.width+50,v/2-bi+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bl=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bl.height,bl.x+bl.width+30,bl.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,bl.height,bl.x-200-30,bl.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bi=60;bj=300;local ae=10;local af=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bj,bi,ae,af,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bj,bi,ae+bj+20,af,function()return AltitudeHold end,ToggleAltitudeHold)af=af+bi+20;MakeButton("Engage Autoland","Disable Autoland",bj,bi,ae,af,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bj,bi,ae+bj+20,af,function()return AutoTakeoff end,ToggleAutoTakeoff)af=af+bi+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bj,bi,ae,af,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Begin Glide Reentry","Cancel Glide Reentry",bj,bi,ae+bj+20,af,function()return Reentry end,BeginReentry,function()return core_altitude>ReentryAltitude end)af=af+bi+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",bj,bi,ae,af,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then msgText="Emergency Warp Enabled"else msgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",bj,bi,ae+bj+20,af,function()return displayOrbit end,function()displayOrbit=not displayOrbit;if displayOrbit then msgText="Orbit Display Enabled"else msgText="Orbit Display Disabled"end end)af=af+bi+20;MakeButton("Enable AGG","Disable AGG",bj,bi,ae,af,function()return AntigravTargetAltitude==nil end,ToggleAntigrav,function()return antigrav~=nil end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bj,bi,ae,af,function()return I end,function()I=not I;if I then msgText="Repair Arrows Enabled"else msgText="Repair Arrows Diabled"end end,function()return l()==1 end)af=af+bi+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bj*2,bi,ae,af,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(an)local bm=core_altitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local bn=vec3(core.getWorldVertical())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local aG=getPitch(bn,bo,bp)local bq=getRoll(bn,bo,bp)local br=bq;local bs=aG;local bt=f()local bu=a(unit.getThrottle())local bv=speed*3.6;local bw=unit.getAxisCommandValue(0)local bx=GetFlightStyle()if bt==0 then if speed>5 then aG=getRelativePitch(velocity)bq=getRelativeYaw(velocity)else aG=0;bq=0 end;bottomText="YAW"end;an[#an+1]=LastOdometerOutput;an[#an+1]=p;an[#an+1]=radarMessage;if U%L==0 then Q=true end;DrawTank(an,Q,100,"Atmospheric ","ATMO",E,O,P)DrawTank(an,Q,200,"Space fuel t","SPACE",F,M,N)DrawTank(an,Q,300,"Rocket fuel ","ROCKET",G,J,K)if Q then Q=false;U=0 end;U=U+1;DrawVerticalSpeed(an,bm,bt)if l()==0 then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(an,bs,br,bt,centerX,centerY,"ROLL")DrawPrograde(an,bs,br,bt,velocity,speed,centerX,centerY)DrawAltitudeDisplay(an,bm,bt)else DrawArtificialHorizon(an,aG,bq,bt,centerX,centerY,"YAW")DrawPrograde(an,bs,br,bt,velocity,speed,centerX,centerY)end end end;DrawThrottle(an,bx,bu,bw)DrawSpeed(an,bv)DrawWarnings(an)DisplayOrbit(an)if screen_2 then local by=vec3(core.getConstructWorldPos())local ae=960+by.x/MapXRatio;local af=450+by.y/MapYRatio;screen_2.moveContent(YouAreHere,(ae-80)/19.2,(af-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(an)local bz=rgb;local bA=Z;local bB=rgb;local bC=Z;if IsInFreeLook()and not brightHud then bz=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bA=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;an[#an+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bz,bz,bB,bB,bA,bA,bC,bC)end;function HUDEpilogue(an)an[#an+1]="</svg>"end;function DrawSpeed(an,bv)local bD=altMeterY+40;local bE=altMeterX;an[#an+1]=[[<g class="pdim txt txtend">]]if l()==1 then bD=75 end;an[#an+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bE,bD,a(bv))end;function DrawOdometer(an,totalDistanceTrip,totalDistanceTravelled,bx,flightTime)local bF=1240;local bG=55;local bH=65;local bt=f()local a7=core.g()local bI=0;local bJ=0;refreshLastMaxBrake(a7)maxThrust=Nav:maxForceForward()C=k()local bK=vec3(core.getWorldAcceleration()):len()/9.80665;if a7>0.1 then bJ=C*a7;bI=maxThrust/a7 end;an[#an+1]=[[<g class="pdim txt txtend">]]if l()==1 then bF=1120;bG=55;bH=65 elseif bt>0 then an[#an+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bt)end;an[#an+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bF,bG,bF,bH,a7/9.80665,bF,bG+20,bF,bH+20,bK)an[#an+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then an[#an+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],totalDistanceTrip,totalDistanceTravelled/1000,FormatTimeString(flightTime),FormatTimeString(totalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bx)if a7>0.1 then an[#an+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bI/1000,bJ/1000)else an[#an+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else an[#an+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bx)end;an[#an+1]="</g>"end;function DrawThrottle(an,bx,bu,bw)local b3=centerY+65;local b4=centerY+75;if l()==1 then b3=55;b4=65 end;local bL="CRUISE"local unit="km/h"local bM=bw;if bx=="TRAVEL"or bx=="AUTOPILOT"then bL="THROT"unit="%"bM=bu;local bN="dim"if bu<0 then bN="red"end;an[#an+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bN,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(bu),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;an[#an+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,b3,bL,centerX-150,b4,bM,unit)end;function DrawVerticalSpeed(an,bm,bt)if bm<200000 and bt==0 or bm and bt>0 then local velocity=vec3(core.getWorldVelocity())local bO=vec3(core.getWorldVertical())*-1;local bP=velocity.x*bO.x+velocity.y*bO.y+velocity.z*bO.z;local bQ=0;if math.abs(bP)>1 then bQ=45*math.log(math.abs(bP),10)if bP<0 then bQ=-bQ end end;an[#an+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bP),a(bQ))end end;function DrawArtificialHorizon(an,bs,br,bt,centerX,centerY,bottomText)local bR=circleRad;if bR>0 then local bS=a(bs)local bT=0;local bU=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*br,centerX,centerY)an[#an+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bR-1,centerX,centerY)an[#an+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bS-30-bS%5+0.5),a(bS+30+bS%5+0.5),5 do if i%10==0 then bT=30 elseif i%5==0 then bT=20 end;local af=centerY+-i*5+bs*5;if bT==30 then bU=b([[%s M %d %f h %d]],bU,centerX-15,af,bT)else bU=b([[%s M %d %f h %d]],bU,centerX-10,af,bT)end end;an[#an+1]=bU..[["/>]]local bV="PITCH"if bottomText=="YAW"then bV="REL PITCH"end;if bs>90 and bt==0 then bs=90-(bs-90)elseif bs<-90 and bt==0 then bs=-90-(bs+90)end;an[#an+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)an[#an+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bR,centerX,centerY,centerX-bR,centerY+bR*bs/20,bR*9,bR*2,-1*br,centerX,centerY)an[#an+1]="</g>"an[#an+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-circleRad-20,bV,centerX,centerY-circleRad-10,bS)end end;function DrawAltitudeDisplay(an,bm,bt)if bm<200000 and bt==0 or bm and bt>0 then local bW=altMeterX;local bX=altMeterY;local bY=78;local bZ=19;table.insert(an,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],bW-1,bX-4,bY+2,bZ+6,bW+1,bX-1,bY-4,bZ))local am=0;local b_=1;local c0=0;while am<6 do local c1=11;local c2=16;local c3=9;local c4=14;local bb="altsm"if am>2 then c2=c2+3;c1=c1+2;c4=c4+2;c3=c3-6;bb="altbig"end;local c5=bm/b_%10;local c6=a(c5)local c7=a((c6+1)%10)local c8=c0;if am==0 then c8=c5-c6 end;local c9=c2*(c8-1)local ca=c9+c2;local ae=bW+c3+(6-am)*c1;local af=bX+c4;table.insert(an,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bb,ae,af+c9,c7,ae,af+ca,c6))am=am+1;b_=b_*10;if c6==9 then c0=c8 else c0=0 end end;table.insert(an,[[</g></g>]])end end;function DrawPrograde(an,bs,br,bt,velocity,speed,centerX,centerY)if bt==0 and speed>5 then local bR=circleRad;local cb=20;local cc=20;local cd=getRelativePitch(velocity)local ce=getRelativeYaw(velocity)local cf=-ce/cc*bR;local cg=cd/cb*bR;local ae=centerX+cf;local af=centerY+cg;local distance=math.sqrt(cf^2+cg^2)if distance<bR then an[#an+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ae,af)else local bQ=math.atan(cg,cf)local ch=centerX+bR*math.cos(bQ)local ci=centerY+bR*math.sin(bQ)an[#an+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ch,ci)end end end;function DrawWarnings(an)an[#an+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)an[#an+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then an[#an+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]an[#an+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]an[#an+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cj=960;local ck=860;local cl=900;local cm=930;local cn=960;local co=225;local cp=150;local cq=960;if l()==1 then ck=135;cl=155;cm=175;co=115;cp=95 end;if BrakeIsOn then an[#an+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cj,ck)end;if GyroIsOn then an[#an+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cj,cq)end;if gearExtended then if hasGear then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cj,cl)else an[#an+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cj,cl)end;an[#an+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cj,cm,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then an[#an+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cj,cn)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],cj,co,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cj,co,AutopilotStatus)elseif FollowMode then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cj,co)elseif AltitudeHold then if AutoTakeoff then an[#an+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cj,co,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then an[#an+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cj,co+50)end else an[#an+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cj,co,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then an[#an+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cj,co)else an[#an+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cj,co)end end;if TurnBurn then an[#an+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cj,cp)end;if VectorToTarget then an[#an+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cj,cp,VectorStatus)end;an[#an+1]="</g>"end;function DisplayOrbit(an)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and displayOrbit then local cr=75;local cs=0;local ct=250;local cu=4;cs=cs+cu;local cv=15;local ae=cr+ct+cr/2+cu;local af=cs+ct/2+5+cu;local cw,cx,cy,cz;cw=ct/4;cz=0;an[#an+1]=[[<g class="pbright txtorb txtmid">]]an[#an+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ct+cr*2,ct+cs,cu,cu)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cy=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cw*2)cx=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cy*(1-orbit.eccentricity)cz=cw-orbit.periapsis.altitude/cy-planet.radius/cy;local cA=""if orbit.periapsis.altitude<=0 then cA='redout'end;an[#an+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cA,cr+ct/2+cz+cu,cs+ct/2+cu,cw,cx)an[#an+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cr+ct/2+cu,cs+ct/2+cu,planet.radius/cy)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then an[#an+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae-35,af-5,cr+ct/2+cw+cz,af-5)an[#an+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ae,af)af=af+cv;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.apoapsis.altitude))af=af+cv;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToApoapsis))af=af+cv;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.apoapsis.speed))end;af=cs+ct/2+5+cu;ae=cr-cr/2+10+cu;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then an[#an+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae+35,af-5,cr+ct/2-cw+cz,af-5)an[#an+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ae,af)af=af+cv;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.periapsis.altitude))af=af+cv;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToPeriapsis))af=af+cv;an[#an+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.periapsis.speed))end;an[#an+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cr+ct/2+cu,20+cu,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cB=orbit.timeToApoapsis/orbit.period*2*math.pi;local cC=cw*math.cos(cB)local cD=cx*math.sin(cB)an[#an+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cr+ct/2+cC+cz+cu,cs+ct/2+cD+cu)end;an[#an+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000}}}end;atlas=Atlas()for W,X in pairs(atlas[0])do if w==nil or X.center.x<w then w=X.center.x end;if x==nil or X.center.x>x then x=X.center.x end;if y==nil or X.center.y<y then y=X.center.y end;if z==nil or X.center.y>z then z=X.center.y end end;GalaxyMapHTML=""local cE=1.1*(x-w)/1920;local cF=1.4*(z-y)/1080;for W,X in pairs(atlas[0])do local ae=960+X.center.x/cE;local af=540+X.center.y/cF;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="'..X.radius/cE*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(X.name,"Moon")and not string.match(X.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af+X.radius/cE*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..X.name.."</text>"end end;local by=vec3(core.getConstructWorldPos())local ae=960+by.x/cE;local af=540+by.y/cF;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cE;MapYRatio=cF;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local by=vec3(core.getConstructWorldPos())local ae=960+by.x/cE;local af=540+by.y/cF;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ae-80)/19.20,(af-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cG(cH)return type(cH)=='number'end;local function cI(cH)return type(tonumber(cH))=='number'end;local function cJ(cK)return type(cK)=='table'end;local function cL(cM)return type(cM)=='string'end;local function cN(X)return cJ(X)and cG(X.x and X.y and X.z)end;local function cO(cP)return cJ(cP)and cG(cP.latitude and cP.longitude and cP.altitude and cP.bodyId and cP.systemId)end;local cQ=math.pi/180;local cR=180/math.pi;local cS=1e-10;local cT=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cU='::pos{'..cT..','..cT..','..cT..','..cT..','..cT..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local cV=utils.clamp;local function cW(cX,cY)if cX==0 then return math.abs(cY)<1e-09 end;if cY==0 then return math.abs(cX)<1e-09 end;return math.abs(cX-cY)<math.max(math.abs(cX),math.abs(cY))*cS end;local function cZ(cH)local Y=string.gsub(string.reverse(b('%.4f',cH)),'^0*%.?','')return Y==''and'0'or string.reverse(Y)end;local function c_(d0)if cN(d0)then return b('{x=%.3f,y=%.3f,z=%.3f}',d0.x,d0.y,d0.z)end;if cJ(d0)and not getmetatable(d0)then local d1={}local d2=next(d0)if type(d2)=='nil'or d2==1 then d1=d0 else for W,X in pairs(d0)do local bM=c_(X)if type(W)=='number'then table.insert(d1,b('[%s]=%s',W,bM))else table.insert(d1,b('%s=%s',W,bM))end end end;return b('{%s}',table.concat(d1,','))end;if cL(d0)then return b("'%s'",d0:gsub("'",[[\']]))end;return tostring(d0)end;local d3={}d3.__index=d3;d3.__tostring=function(d0,d4)local d5={}for W in pairs(d0)do table.insert(d5,W)end;table.sort(d5)local d1={}for _,W in ipairs(d5)do local bM=c_(d0[W])if type(W)=='number'then table.insert(d1,b('[%s]=%s',W,bM))else table.insert(d1,b('%s=%s',W,bM))end end;if d4 then return b('%s%s',d4,table.concat(d1,',\n'..d4))end;return b('{%s}',table.concat(d1,','))end;d3.__eq=function(d6,d7)return d6.planetarySystemId==d7.planetarySystemId and d6.bodyId==d7.bodyId and cW(d6.radius,d7.radius)and cW(d6.center.x,d7.center.x)and cW(d6.center.y,d7.center.y)and cW(d6.center.z,d7.center.z)and cW(d6.GM,d7.GM)end;local function d8(d9,da,db,dc,dd)assert(cI(d9),'Argument 1 (planetarySystemId) must be a number:'..type(d9))assert(cI(da),'Argument 2 (bodyId) must be a number:'..type(da))assert(cI(db),'Argument 3 (radius) must be a number:'..type(db))assert(cJ(dc),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dc))assert(cI(dd),'Argument 5 (GM) must be a number:'..type(dd))return setmetatable({planetarySystemId=tonumber(d9),bodyId=tonumber(da),radius=tonumber(db),center=vec3(dc),GM=tonumber(dd)},d3)end;local de={}de.__index=de;de.__tostring=function(df)return b('::pos{%d,%d,%s,%s,%s}',df.systemId,df.bodyId,cZ(df.latitude*cR),cZ(df.longitude*cR),cZ(df.altitude))end;de.__eq=function(d6,d7)return d6.bodyId==d7.bodyId and d6.systemId==d7.systemId and cW(d6.latitude,d7.latitude)and cW(d6.altitude,d7.altitude)and(cW(d6.longitude,d7.longitude)or cW(d6.latitude,math.pi/2)or cW(d6.latitude,-math.pi/2))end;local function dg(dh,da,di,dj,bm)local d9=dh;if cL(dh)and not dj and not bm and not da and not di then d9,da,di,dj,bm=string.match(dh,cU)assert(d9,'Argument 1 (position string) is malformed.')else assert(cI(d9),'Argument 1 (systemId) must be a number:'..type(d9))assert(cI(da),'Argument 2 (bodyId) must be a number:'..type(da))assert(cI(di),'Argument 3 (latitude) must be in degrees:'..type(di))assert(cI(dj),'Argument 4 (longitude) must be in degrees:'..type(dj))assert(cI(bm),'Argument 5 (altitude) must be in meters:'..type(bm))end;d9=tonumber(d9)da=tonumber(da)di=tonumber(di)dj=tonumber(dj)bm=tonumber(bm)if da==0 then return setmetatable({latitude=di,longitude=dj,altitude=bm,bodyId=da,systemId=d9},de)end;return setmetatable({latitude=cQ*cV(di,-90,90),longitude=cQ*(dj%360),altitude=bm,bodyId=da,systemId=d9},de)end;local dk={}dk.__index=dk;dk.__tostring=function(d0,d4)local dl=d4 and d4 ..'  'local dm={}local d5={}for W in pairs(d0)do table.insert(d5,W)end;table.sort(d5)for _,dn in ipairs(d5)do bdy=d0[dn]local dp=d3.__tostring(bdy,dl)if d4 then table.insert(dm,b('[%s]={\n%s\n%s}',dn,dp,d4))else table.insert(dm,b('  [%s]=%s',dn,dp))end end;if d4 then return b('\n%s%s%s',d4,table.concat(dm,',\n'..d4),d4)end;return b('{\n%s\n}',table.concat(dm,',\n'))end;local function dq(dr)local atlas={}local pid;for _,X in pairs(dr)do local ak=X.planetarySystemId;if type(ak)~='number'then error('Invalid planetary system ID: '..tostring(ak))elseif pid and ak~=pid then error('Mismatch planetary system IDs: '..ak..' and '..pid)end;local ds=X.bodyId;if type(ds)~='number'then error('Invalid body ID: '..tostring(ds))elseif atlas[ds]then error('Duplicate body ID: '..tostring(ds))end;setmetatable(X.center,getmetatable(vec3.unit_x))atlas[ds]=setmetatable(X,d3)pid=ak end;return setmetatable(atlas,dk)end;PlanetaryReference={}local function dt(dr)return setmetatable({galaxyAtlas=dr or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cK,i)if type(i)=='number'then local system=cK.galaxyAtlas[i]return dq(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d0)return function(cK,W)local du,nv=next(cK,W)return du,nv and dq(nv)end,d0.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d0)local dv={}for _,dw in pairs(d0 or{})do local dx=dw:getPlanetarySystemId()local dy=dk.__tostring(dw,'    ')table.insert(dv,b('  [%s]={%s\n  }',dx,dy))end;return b('{\n%s\n}\n',table.concat(dv,',\n'))end;PlanetaryReference.BodyParameters=d8;PlanetaryReference.MapPosition=dg;PlanetaryReference.PlanetarySystem=dq;function PlanetaryReference.createBodyParameters(dz,da,dA,dB,dC,dD,dE)assert(cI(dz),'Argument 1 (planetarySystemId) must be a number:'..type(dz))assert(cI(da),'Argument 2 (bodyId) must be a number:'..type(da))assert(cI(dA),'Argument 3 (surfaceArea) must be a number:'..type(dA))assert(cJ(dB),'Argument 4 (aPosition) must be an array or vec3:'..type(dB))assert(cJ(dC),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dC))assert(cI(dD),'Argument 6 (altitude) must be in meters:'..type(dD))assert(cI(dE),'Argument 7 (gravityAtPosition) must be number:'..type(dE))local db=math.sqrt(dA/4/math.pi)local distance=db+dD;local dF=vec3(dB)+distance*vec3(dC)local dd=dE*distance*distance;return d8(dz,da,db,dF,dd)end;PlanetaryReference.isMapPosition=cO;function PlanetaryReference:getPlanetarySystem(dh)if i==nil then i=0 end;if nv==nil then nv=0 end;local dz=dh;if cO(dh)then dz=dh.systemId end;if type(dz)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dk then system=dq(system)end;return system end end end;function dk:castIntersections(dG,dH,dI,dJ)local dI=dI or function(dK)return 1.05*dK.radius end;local dL={}if dJ then for _,i in ipairs(dJ)do dL[i]=self[i]end else dJ={}for W,dK in pairs(self)do table.insert(dJ,W)dL[W]=dK end end;local function dM(dN,dO)local dP=dL[dN].center-dG;local dQ=dL[dO].center-dG;return dP:len()<dQ:len()end;table.sort(dJ,dM)local dR=dH:normalize()for i,ak in ipairs(dJ)do local dK=dL[ak]local dS=dK.center-dG;local db=dI(dK)local dT=dS:dot(dR)local dU=dT^2-(dS:len2()-db^2)if dU>=0 then local dV=math.sqrt(dU)local dW=dT+dV;local dX=dT-dV;if dX>0 then return dK,dW,dX elseif dW>0 then return dK,dW,nil end end end;return nil,nil,nil end;function dk:closestBody(dY)assert(type(dY)=='table','Invalid coordinates.')local dZ,dK;local d_=vec3(dY)for _,e0 in pairs(self)do local e1=(e0.center-d_):len2()if not dK or e1<dZ then dK=e0;dZ=e1 end end;return dK end;function dk:convertToBodyIdAndWorldCoordinates(dh)local e2=dh;if cL(dh)then e2=dg(dh)end;if e2.bodyId==0 then return 0,vec3(e2.latitude,e2.longitude,e2.altitude)end;local e0=self:getBodyParameters(e2)if e0 then return e2.bodyId,e0:convertToWorldCoordinates(e2)end end;function dk:getBodyParameters(dh)local da=dh;if cO(dh)then da=dh.bodyId end;assert(cI(da),'Argument 1 (bodyId) must be a number:'..type(da))return self[da]end;function dk:getPlanetarySystemId()local _,X=next(self)return X and X.planetarySystemId end;function d3:convertToMapPosition(dc)assert(cJ(dc),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dc))local e3=vec3(dc)if self.bodyId==0 then return setmetatable({latitude=e3.x,longitude=e3.y,altitude=e3.z,bodyId=0,systemId=self.planetarySystemId},de)end;local e4=e3-self.center;local distance=e4:len()local bm=distance-self.radius;local di=0;local dj=0;if not cW(distance,0)then local e5=math.atan(e4.y,e4.x)dj=e5>=0 and e5 or 2*math.pi+e5;di=math.pi/2-math.acos(e4.z/distance)end;return setmetatable({latitude=di,longitude=dj,altitude=bm,bodyId=self.bodyId,systemId=self.planetarySystemId},de)end;function d3:convertToWorldCoordinates(dh)local e2=cL(dh)and dg(dh)or dh;if e2.bodyId==0 then return vec3(e2.latitude,e2.longitude,e2.altitude)end;assert(cO(e2),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e2.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e2.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local e6=math.cos(e2.latitude)return self.center+(self.radius+e2.altitude)*vec3(e6*math.cos(e2.longitude),e6*math.sin(e2.longitude),math.sin(e2.latitude))end;function d3:getAltitude(dc)return(vec3(dc)-self.center):len()-self.radius end;function d3:getDistance(dc)return(vec3(dc)-self.center):len()end;function d3:getGravity(dc)local e7=self.center-vec3(dc)local e8=e7:len2()return self.GM/e8*e7/math.sqrt(e8)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dt(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cL(cM)return type(cM)=='string'end;local function cJ(cK)return type(cK)=='table'end;local function cW(cX,cY)if cX==0 then return math.abs(cY)<1e-09 end;if cY==0 then return math.abs(cX)<1e-09 end;return math.abs(cX-cY)<math.max(math.abs(cX),math.abs(cY))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bm)assert(self.body)local distance=bm+self.body.radius;if not cW(distance,0)then local orbit=math.sqrt(self.body.GM/distance)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dh,velocity)assert(self.body)assert(cJ(dh)or cL(dh))assert(cJ(velocity))local by=(cL(dh)or PlanetRef.isMapPosition(dh))and self.body:convertToWorldCoordinates(dh)or vec3(dh)local X=vec3(velocity)local e9=by-self.body.center;local dQ=X:len2()local ea=e9:len()local eb=self.body.GM;local ec=((dQ-eb/ea)*e9-e9:dot(X)*X)/eb;local cX=eb/(2*eb/ea-dQ)local ed=ec:len()local dR=ec:normalize()local ee=cX*(1-ed)local ef=cX*(1+ed)local eg=ee*dR+self.body.center;local eh=ed<=1 and-ef*dR+self.body.center or nil;local ei=math.sqrt(cX*eb*(1-ed*ed))local ej=eh and 2*math.pi*math.sqrt(cX^3/eb)local ek=math.acos(ec:dot(e9)/(ed*ea))if e9:dot(X)<0 then ek=-(ek-2*math.pi)end;local el=math.acos((math.cos(ek)+ed)/(1+ed*math.cos(ek)))local em=el;if em<0 then em=em+2*math.pi end;local en=em-ed*math.sin(em)local eo=0;local ep=0;local eq=0;if ej~=nil then eo=en/(2*math.pi/ej)ep=ej-eo;eq=ep+ej/2;if ek-math.pi>0 then ep=eo;eq=ep+ej/2 end;if eq>ej then eq=eq-ej end end;return{periapsis={position=eg,speed=ei/ee,circularOrbitSpeed=math.sqrt(eb/ee),altitude=ee-self.body.radius},apoapsis=eh and{position=eh,speed=ei/ef,circularOrbitSpeed=math.sqrt(eb/ef),altitude=ef-self.body.radius},currentVelocity=X,currentPosition=by,eccentricity=ed,period=ej,eccentricAnomaly=el,meanAnomaly=en,timeToPeriapsis=ep,timeToApoapsis=eq}end;local function er(es)local e0=PlanetRef.BodyParameters(es.planetarySystemId,es.bodyId,es.radius,es.center,es.GM)return setmetatable({body=e0},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return er(...)end})end;function Kinematics()local Kinematic={}local et=30000000/3600;local eu=et*et;local ev=100;local function ew(X)return 1/math.sqrt(1-X*X/eu)end;function Kinematic.computeAccelerationTime(ex,ey,ez)local eA=et*math.asin(ex/et)return(et*math.asin(ez/et)-eA)/ey end;function Kinematic.computeDistanceAndTime(ex,ez,eB,eC,eD,eE)eD=eD or 0;eE=eE or 0;local eF=ex<=ez;local eG=eC*(eF and 1 or-1)/eB;local eH=-eE/eB;local eI=eG+eH;if eF and eI<=0 or not eF and eI>=0 then return-1,-1 end;local eJ,eK=0,0;if eG~=0 and eD>0 then local eA=math.asin(ex/et)local eL=math.pi*(eG/2+eH)local eM=eG*eD;local eN=et*math.pi;local X=function(cK)local aI=(eL*cK-eM*math.sin(math.pi*cK/2/eD)+eN*eA)/eN;local eO=math.tan(aI)return et*eO/math.sqrt(eO*eO+1)end;local eP=eF and function(cM)return cM>=ez end or function(cM)return cM<=ez end;eK=2*eD;if eP(X(eK))then local eQ=0;while math.abs(eK-eQ)>0.5 do local cK=(eK+eQ)/2;if eP(X(cK))then eK=cK else eQ=cK end end end;local eR=ex;local eS=eK/ev;for eT=1,ev do local speed=X(eT*eS)eJ=eJ+(speed+eR)*eS/2;eR=speed end;if eK<2*eD then return eJ,eK end;ex=eR end;local eA=et*math.asin(ex/et)local eU=(et*math.asin(ez/et)-eA)/eI;local eV=eu*math.cos(eA/et)/eI;local distance=eV-eu*math.cos((eI*eU+eA)/et)/eI;return distance+eJ,eU+eK end;function Kinematic.computeTravelTime(ex,ey,distance)if distance==0 then return 0 end;if ey>0 then local eA=et*math.asin(ex/et)local eV=eu*math.cos(eA/et)/ey;return(et*math.acos(ey*(eV-distance)/eu)-eA)/ey end;assert(ex>0,'Acceleration and initial speed are both zero.')return distance/ex end;function Kinematic.lorentz(X)return ew(X)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(distance)local eW=distance>100000;local Y=""if eW then Y=round(distance/1000/200,1).." SU"elseif distance<1000 then Y=round(distance,1).." M"else Y=round(distance/1000,1).." KM"end;return Y end;function getDistanceDisplayString2(distance)local eW=distance>100000;local Y=""if eW then Y=round(distance/1000/200,2).." SU"elseif distance<1000 then Y=round(distance,2).." M"else Y=round(distance/1000,2).." KM"end;return Y end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(eX)local eY=a(eX/3600)local eZ=a(eX/60%60)local eX=a(eX%60)if eX<0 or eY<0 or eZ<0 then return"0s"end;if eY>0 then return eY.."h "..eZ.."m "..eX.."s"elseif eZ>0 then return eZ.."m "..eX.."s"else return eX.."s"end end;function getMagnitudeInDirection(bd,dH)bd=vec3(bd)dH=vec3(dH):normalize()local Y=bd*dH;return Y.x+Y.y+Y.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local e_=0;for W,X in pairs(atlas[0])do e_=e_+1;if e_==AutopilotTargetIndex then if X.center then AutopilotTargetName=X.name;AutopilotTargetPlanet=galaxyReference[0][W]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then system.print("Custom Target Found")if unit.getAtmosphereDensity()==0 and InAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==0 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==0 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==0 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==0 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==0 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==0 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==0 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=X end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f0=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return f0 end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local f1,f2=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,f3;if not TurnBurn then _,f3=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,f3=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local f4=0;local f5=0;if brakeDistance+f1<AutopilotDistance then f4=AutopilotDistance-(brakeDistance+f1)f5=Kinematic.computeTravelTime(8333.0556,0,f4)else local f6=(AutopilotDistance-brakeDistance)/f1;f1=AutopilotDistance-brakeDistance;f2=f2*f6 end;if AutopilotBraking then return f3 elseif AutopilotCruising then return f5+f3 else return f2+brakeTime+f5 end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local f7=Nav.axisCommandManager:getAxisCommandType(0)local bx="TRAVEL"if f7==1 then bx="CRUISE"end;if Autopilot then bx="AUTOPILOT"end;return bx end;function round(cT,f8)local f9=10^(f8 or 0)return a(cT*f9+0.5)/f9 end;function tablelength(fa)local e_=0;for _ in pairs(fa)do e_=e_+1 end;return e_ end;function BeginProfile(fb)ProfileTimeStart=system.getTime()end;function EndProfile(fb)local fc=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fc;ProfileCount=ProfileCount+1;if fc>ProfileTimeMax then ProfileTimeMax=fc end;if fc<ProfileTimeMin then ProfileTimeMin=fc end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fd=ProfileTimeSum;local fe=ProfileTimeSum/ProfileCount;local ff=ProfileTimeMin;local fg=ProfileTimeMax;local fh=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fd,fe,ff,fg,fh))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fi=unit.getAtmosphereDensity()if door and(fi>0 or fi==0 and core_altitude<10000)then for _,X in pairs(door)do X.activate()end end;if forcefield and(fi>0 or fi==0 and core_altitude<10000)then for _,X in pairs(forcefield)do X.activate()end end;if dbHud then if not wipedDatabank then for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fj)if fj=="tenthSecond"then InAtmo=unit.getAtmosphereDensity()>0;if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()distance=AutopilotDistance;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(brakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(maxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not InAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=true elseif unit.getAtmosphereDensity()==0 and InAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==0 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==0 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==0 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==0 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==0 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;InAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end elseif fj=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fk;fk=radar_1.getData():find('identifiedConstructs":%[%]')if hasSpaceRadar and EmergencyWarp then local ak,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ak~=nil and ak~=""then if math.floor(distance)<EmergencyWarpDistance and notTriedEmergencyWarp then emergencyWarp=true;notTriedEmergencyWarp=false end end end;if fk==nil and perisPanelID==nil then peris=1;ToggleRadarPanel()end;if fk~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fl=radar_1.getEntries()radarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fl)local fm={}for W,X in pairs(fl)do if radar_1.hasMatchingTransponder(X)==1 then fm[#fm+1]=X end end;if#fm>0 then local af=15;radarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],radarMessage,af)for W,X in pairs(fm)do af=af+20;radarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],radarMessage,af,radar_1.getConstructName(X))end end elseif radar_1 then local fn;fn=radar_1.getData():find('worksInEnvironment":false')if fn then radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then peris=0;ToggleRadarPanel()end end;if warpdrive~=nil then if emergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then msgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"msgTimer=5;unit.setTimer("emergencyWarpTick",5)emergencyWarp=false else msgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;emergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end;local an={}local bx=GetFlightStyle()DrawOdometer(an,totalDistanceTrip,totalDistanceTravelled,bx,flightTime)checkDamage(an)LastOdometerOutput=table.concat(an,"")collectgarbage("collect")elseif fj=="reEmergencyWarp"then notTriedEmergencyWarp=true;emergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif fj=="msgTick"then local an={}DisplayMessage(an,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif fj=="emergencyWarpTick"then msgText="EMERGENCY WARP ACTIVATED"msgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;unit.stopTimer("emergencyWarpTick")elseif fj=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif fj=="apTick"then local l=Nav.control.isRemoteControlled;yawInput2=0;rollInput2=0;pitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fo=system.getMouseDeltaX()local fp=system.getMouseDeltaY()targetGroundAltitude=Nav:getTargetGroundAltitude()local fq=0.002;local fr=velMag>8334;if not fr and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fr;if antigrav and antigrav.getState()==1 and not desiredBaseAltitude then desiredBaseAltitude=antigrav.getBaseAltitude()end;if BrakeIsOn then brakeInput=1 else brakeInput=0 end;core_altitude=core.getAltitude()if core_altitude==0 then core_altitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local an={}HUDPrologue(an)if showHud then updateHud(an)else DisplayOrbit(an)DrawWarnings(an)end;HUDEpilogue(an)an[#an+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if msgText~="empty"then DisplayMessage(an,msgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(an)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then simulatedX=screen_1.getMouseX()*2560;simulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(an)if screen_1.getMouseState()==1 then CheckButtons()end;an[#an+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then simulatedX=simulatedX+fo;simulatedY=simulatedY+fp end;SetButtonContains()DrawButtons(an)if not Animating and not Animated then local fs=table.concat(an,"")an={}an[#an+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"an[#an+1]=GalaxyMapHTML;an[#an+1]=fs;an[#an+1]="</body>"Animating=true;an[#an+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(an,"")system.setScreen(content)elseif Animated then local fs=table.concat(an,"")an={}an[#an+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"an[#an+1]=GalaxyMapHTML;an[#an+1]=fs;an[#an+1]="</body>"end;if not Animating then an[#an+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end else CheckButtons()simulatedX=0;simulatedY=0 end else simulatedX=simulatedX+fo;simulatedY=simulatedY+fp;distance=math.sqrt(simulatedX*simulatedX+simulatedY*simulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if simulatedX>0 and simulatedX>DeadZone then yawInput2=yawInput2-(simulatedX-DeadZone)*MouseXSensitivity elseif simulatedX<0 and simulatedX<DeadZone*-1 then yawInput2=yawInput2-(simulatedX+DeadZone)*MouseXSensitivity else yawInput2=0 end;if simulatedY>0 and simulatedY>DeadZone then pitchInput2=pitchInput2-(simulatedY-DeadZone)*MouseYSensitivity elseif simulatedY<0 and simulatedY<DeadZone*-1 then pitchInput2=pitchInput2-(simulatedY+DeadZone)*MouseYSensitivity else pitchInput2=0 end elseif userControlScheme=="Mouse"then simulatedX=0;simulatedY=0;pitchInput2=(-utils.smoothstep(fp,-100,100)+0.5)*2*mousePitchFactor;yawInput2=(-utils.smoothstep(fo,-100,100)+0.5)*2*mouseYawFactor else simulatedX=0;simulatedY=0 end;CheckButtons()if distance>DeadZone then DrawCursorLine(an)end else SetButtonContains()DrawButtons(an)end;an[#an+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end;an[#an+1]=[[</svg></body>]]content=table.concat(an,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)end;brakeDistance=brakeDistance;brakeTime=brakeTime;local ft=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fu=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fv=getMagnitudeInDirection(fu,AutopilotShipUp)local fw=getMagnitudeInDirection(fu,AutopilotShipRight)local fx=-fw*AutopilotDistance*velMag*fq;local fy=-fv*AutopilotDistance*velMag*fq;ft=AutopilotTargetCoords+-fx*vec3(AutopilotShipRight)+-fy*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(ft)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fz=true;local fA=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fA)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fz=AlignToWorldVector((ft-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fz=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fz then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;brakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(an,"Autopilot completed, orbit established")brakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fz then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fz then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fB=0;local by=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fC=by-vec3(core.getConstructWorldPos())local fD=vec3(fC):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fE=vec3(fC):project_on(vec3(core.getConstructWorldOrientationRight())):len()local distance=math.sqrt(fD*fD+fE*fE)AlignToWorldVector(fC:normalize())local fF=40;local fG=distance<fF;local fH=100;local fI=utils.clamp((distance-fF)/2,10,fH)pitchInput2=0;local fz=math.abs(yawInput2)<0.1;if fz and velMag<fI and not fG then BrakeIsOn=false;fB=-10 else BrakeIsOn=true;fB=0 end;local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local aG=getPitch(bn,bo,bp)local fJ=1.0;if math.abs(fB-aG)>fJ then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fB-aG)local fK=pitchPID:get()pitchInput2=fK end end;local bO=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then autoRoll=true;if Reentry then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then Reentry=false end end;local bm=core_altitude;local fL=HoldAltitude-bm;local fM=500+velMag;local fB=(utils.smoothstep(fL,-fM,fM)-0.5)*2*MaxPitch;if not AltitudeHold then fB=0 end;local fN=pitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bf=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bf)local fO=bf:len()-bf:project_on(bO):len()local a9=json.decode(unit.getData()).maxBrake;local bP=velocity.x*bO.x+velocity.y*bO.y+velocity.z*bO.z;local fP=velocity:len()-math.abs(bP)local fQ=vec3(core.getWorldAirFrictionAcceleration())if a9~=nil then LastMaxBrake=a9;brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fP,0,core.getConstructMass(),0,0,a9+(fQ:len()-fQ:project_on(bO):len())*core.getConstructMass())else brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fP,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if fO<=brakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and fO>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=fO end;pitchInput2=fN;local fR=-1;if BrakeLanding then fB=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)if vBooster then fR=vBooster.distance()elseif hover then fR=hover.distance()end;local bP=velocity.x*bO.x+velocity.y*bO.y+velocity.z*bO.z;if fR>-1 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;gearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)upAmount=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and velocity:normalize():dot(-bO)<0.99 then BrakeIsOn=true elseif bP<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fB<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local aG=getPitch(bn,bo,bp)local fJ=0.1;if math.abs(fB-aG)>fJ then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fB-aG)local fK=pitchPID:get()pitchInput2=pitchInput2+fK end end;LastEccentricity=orbit.eccentricity;if antigrav and core_altitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local fS=core_altitude-antigrav.getBaseAltitude()if core_altitude>800 and fS<-200 then desiredBaseAltitude=math.max(core_altitude+100,1000)elseif fS>200 then desiredBaseAltitude=core_altitude-100 end else local fS=AntigravTargetAltitude-core_altitude;local velocity=vec3(core.getWorldVelocity())local bO=vec3(core.getWorldVertical())*-1;local bP=velocity.x*bO.x+velocity.y*bO.y+velocity.z*bO.z;local fT=290;local fU=-290;if unit.getClosestPlanetInfluence()>0.3 then fU=-190 end;fU=math.min(math.max(fU,-math.abs(fS)/20.0),-10)fT=math.max(math.min(fT,math.abs(fS)/20.0),10)if bP<fU then desiredBaseAltitude=core_altitude+100 elseif bP>fT then desiredBaseAltitude=math.max(core_altitude-100,1000)elseif math.abs(fS)>150 or math.abs(bP)>15 then if math.abs(bP)>10 then desiredBaseAltitude=core_altitude+math.max(math.min(fS-bP/10.0,100),-100)else desiredBaseAltitude=core_altitude+math.max(math.min(fS,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bP)<10 and math.abs(fS)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local fV=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fV=math.max(fV,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local fW=pitchInput+pitchInput2+system.getControlDeviceForwardInput()local fX=rollInput+rollInput2+system.getControlDeviceYawInput()local fY=yawInput+yawInput2-system.getControlDeviceLeftRightInput()local fZ=brakeInput;local f_=vec3(core.getWorldVertical())local g0=vec3(core.getConstructWorldOrientationUp())local g1=vec3(core.getConstructWorldOrientationForward())local g2=vec3(core.getConstructWorldOrientationRight())local g3=vec3(core.getWorldVelocity())local g4=vec3(core.getWorldVelocity()):normalize()local g5=getRoll(f_,g1,g2)local g6=math.abs(g5)local g7=utils.sign(g5)local g8=vec3(core.getWorldAngularVelocity())local g9=fW*pitchSpeedFactor*g2+fX*rollSpeedFactor*g1+fY*yawSpeedFactor*g0;if f_:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local ga=1.0;if autoRoll==true and g6>ga and fX==0 then local gb=utils.clamp(0,g6-30,g6+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gb-g5)local gc=rollPID:get()g9=g9+gc*g1 end;local gd=20.0;if turnAssist==true and g6>gd and fW==0 and fY==0 then local ge=turnAssistFactor*0.1;local gf=turnAssistFactor*0.025;local gg=(g6-gd)/(180-gd)*180;local gh=0;if gg<90 then gh=gg/90 elseif gg<180 then gh=(180-gg)/90 end;gh=gh*gh;local gi=-g7*gf*(1.0-gh)local gj=ge*gh;g9=g9+gj*g2+gi*g0 end end;local gk=1;local gl=0;local gm=1;local gn=fV*(g9-g8)local go=vec3(core.getWorldAirFrictionAngularAcceleration())gn=gn-go;Nav:setEngineTorqueCommand('torque',gn,gk,'airfoil','','',gm)local gp=-fZ*(brakeSpeedFactor*g3+brakeFlatFactor*g4)Nav:setEngineForceCommand('brake',gp)local gq=''local gr=vec3()local gs=false;local gt='thrust analog longitudinal'local gu=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gu==axisCommandType.byThrottle then local gv=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gt,axisCommandId.longitudinal)Nav:setEngineForceCommand(gt,gv,gk)elseif gu==axisCommandType.byTargetSpeed then local gv=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gq=gq..' , '..gt;gr=gr+gv;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gs=true end end;local gw='thrust analog lateral'local gx=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gx==axisCommandType.byThrottle then local gy=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gw,axisCommandId.lateral)Nav:setEngineForceCommand(gw,gy,gk)elseif gx==axisCommandType.byTargetSpeed then local gz=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gq=gq..' , '..gw;gr=gr+gz end;local gA='thrust analog vertical'local gB=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gB==axisCommandType.byThrottle then local gC=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gA,axisCommandId.vertical)if upAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gA,gC,gk,'airfoil','ground','',gm)else Nav:setEngineForceCommand(gA,vec3(),gk)end elseif gB==axisCommandType.byTargetSpeed then local gD=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gq=gq..' , '..gA;gr=gr+gD end;if gr:len()>constants.epsilon then if brakeInput~=0 or gs or math.abs(g4:dot(g1))<0.95 then gq=gq..', brake'end;Nav:setEngineForceCommand(gq,gr,gl,'','','',gm)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif isboosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,Y=coroutine.resume(beginSetup)if Y then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gE)if gE=="gear"then gearExtended=not gearExtended;if gearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or core_altitude<ReentryAltitude)then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;gearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gE=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gE=="forward"then pitchInput=pitchInput-1 elseif gE=="backward"then pitchInput=pitchInput+1 elseif gE=="left"then rollInput=rollInput-1 elseif gE=="right"then rollInput=rollInput+1 elseif gE=="yawright"then yawInput=yawInput-1 elseif gE=="yawleft"then yawInput=yawInput+1 elseif gE=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gE=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gE=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gE=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gE=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gE=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gE=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif gE=="option2"then DecrementAutopilotTargetIndex()toggleView=false elseif gE=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;toggleView=false;ToggleWidgets()elseif gE=="option4"then ToggleAutopilot()toggleView=false elseif gE=="option5"then ToggleTurnBurn()toggleView=false elseif gE=="option6"then ToggleAltitudeHold()toggleView=false elseif gE=="option7"then wipeSaveVariables()toggleView=false elseif gE=="option8"then ToggleFollowMode()toggleView=false elseif gE=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;toggleView=false elseif gE=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gE=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gE=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gE=="booster"then isboosting=not isboosting;if isboosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gE=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gE=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gE=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gE=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gE=="warp"then if warpdrive~=nil then if not emergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then msgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")emergencyWarp=false;msgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gE)if gE=="forward"then pitchInput=pitchInput+1 elseif gE=="backward"then pitchInput=pitchInput-1 elseif gE=="left"then rollInput=rollInput+1 elseif gE=="right"then rollInput=rollInput-1 elseif gE=="yawright"then yawInput=yawInput+1 elseif gE=="yawleft"then yawInput=yawInput-1 elseif gE=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gE=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gE=="up"then upAmount=upAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gE=="down"then upAmount=upAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gE=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gE=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gE=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;simulatedX=0;simulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gE=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gE=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gE)if gE=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gE=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gE=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gE=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(an,gF)if gF~="empty"then an[#an+1]=[[<text class="msg" x="50%%" y="310" >]]for gG in string.gmatch(gF,"([^\n]+)")do an[#an+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gG)end;an[#an+1]=[[</text>]]end;if msgTimer~=0 then unit.setTimer("msgTick",msgTimer)msgTimer=0 end end;function updateDistance()local a4=system.getTime()local velocity=vec3(core.getWorldVelocity())local bv=vec3(velocity):len()local gH=a4-lastTravelTime;if bv>1.38889 then bv=bv/1000;local gI=bv*(a4-lastTravelTime)totalDistanceTravelled=totalDistanceTravelled+gI;totalDistanceTrip=totalDistanceTrip+gI end;flightTime=flightTime+gH;totalFlightTime=totalFlightTime+gH;lastTravelTime=a4 end;function updateMass()local gJ=0;for W in pairs(elementsID)do gJ=gJ+core.getElementMassById(elementsID[W])end;return gJ end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
