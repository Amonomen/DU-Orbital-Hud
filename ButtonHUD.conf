name: ButtonsHud - Dimencia and Archaegeo v4.901 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        ResolutionY = 1080 --export: Default is 1080, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;DisplayOrbit=true;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav"}local b={"BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=false;local q=true;local r=55;local s=false;local t=1;local u=1;local v=false;local w=0;local x=0;local y=0;local z=0;local A=0;local B=0;local C=0;local D=false;local E=false;local F="empty"local G=1;local H=5;local I=5;local J=false;local K,L=0;local M,N=0;local O=false;local P=false;local Q=nil;local R=0;local S=0;local T=false;local U=0;local V=0;local W=0;local X=3;local Y=0;local Z=""local a0=""local a1=0;local a2=false;local a3=false;local a4=false;local a5=-1;local a6=false;local a7=""local a8=j()>0;local a9=core.getAltitude()local aa=core.getElementIdList()local ab=system.getTime()local ac=nil;local ad=false;local ae={}local af=0;local ag=0;local ah=""local ai=true;local aj={}local ak=1;local al=0.001;local am=ResolutionX;local an=ResolutionY;local ao=nil;local ap=nil;local aq=nil;local ar=nil;local as=false;local at=false;local au=0;local av=nil;local aw={}local ax={}local ay={}local az=0;local aA=false;local aB={}local aC={}local aD=d(1/apTickRate)*2;local aE={}local aF={}local aG={}local aH={}local aI=false;local aJ=16;local aK=0;function script.onStart()VERSION_NUMBER=4.901;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})if dbHud_1 then local aL=dbHud_1.hasKey;if not useTheseSettings then for aM,aN in pairs(a)do if aL(aN)then local aO=f(dbHud_1.getStringValue(aN))if aO~=nil then c(aN.." "..dbHud_1.getStringValue(aN))_G[aN]=aO;as=true end end end end;coroutine.yield()for aM,aN in pairs(b)do if aL(aN)then local aO=f(dbHud_1.getStringValue(aN))if aO~=nil then c(aN.." "..dbHud_1.getStringValue(aN))_G[aN]=aO;as=true end end end;if useTheseSettings then F="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif as then F="Loaded Saved Variables (see Lua Chat Tab for list)"else F="No Saved Variables Found - Stand up / leave remote to save settings"end else F="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;coroutine.yield()local aP=system.getTime()if LastStartTime+180<aP then LastMaxBrakeInAtmo=0 end;LastStartTime=aP;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then F="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=a9 end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;local aQ=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local aR=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]for aM in pairs(aa)do local type=l(aa[aM])if type=="landing gear"then v=true end;if type=="dynamic core"then local aS=h(aa[aM])if aS>10000 then aJ=128 elseif aS>1000 then aJ=64 elseif aS>150 then aJ=32 end end;az=az+h(aa[aM])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local aS=h(aa[aM])local aT=m(aa[aM])local aU=0;local aV=system.getTime()if type=="Atmospheric Fuel Tank"then local aW=400;local aX=35.03;if aS>10000 then aW=51200;aX=5480 elseif aS>1300 then aW=6400;aX=988.67 elseif aS>150 then aW=1600;aX=182.67 end;aU=aT-aX;if fuelTankHandlingAtmo>0 then aW=aW+aW*fuelTankHandlingAtmo*0.2 end;if aU>aW then aW=aU end;aw[#aw+1]={aa[aM],core.getElementNameById(aa[aM]),aW,aX,aU,aV}end;if type=="Rocket Fuel Tank"then local aW=320;local aX=173.42;if aS>65000 then aW=40000;aX=25740 elseif aS>6000 then aW=5120;aX=4720 elseif aS>700 then aW=640;aX=886.72 end;aU=aT-aX;if fuelTankHandlingRocket>0 then aW=aW+aW*fuelTankHandlingRocket*0.2 end;if aU>aW then aW=aU end;ay[#ay+1]={aa[aM],core.getElementNameById(aa[aM]),aW,aX,aU,aV}end;if type=="Space Fuel Tank"then local aW=2400;local aX=182.67;if aS>10000 then aW=76800;aX=5480 elseif aS>1300 then aW=9600;aX=988.67 end;aU=aT-aX;if fuelTankHandlingSpace>0 then aW=aW+aW*fuelTankHandlingSpace*0.2 end;if aU>aW then aW=aU end;ax[#ax+1]={aa[aM],core.getElementNameById(aa[aM]),aW,aX,aU,aV}end end end end;coroutine.yield()if gyro~=nil then ac=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if a8 then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then O=true else P=true end end;if door then for _,aN in pairs(door)do aN.toggle()end end;if switch then for _,aN in pairs(switch)do aN.toggle()end end;if forcefield then for _,aN in pairs(forcefield)do aN.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if v then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not v then GearExtended=true end else if GearExtended or not v then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if a8 and not dbHud_1 and(GearExtended or not v)then BrakeIsOn=true end;WasInAtmo=a8;unit.hide()function RefreshLastMaxBrake(aY,aZ)if aY==nil then aY=core.g()end;aY=round(aY,5)local a_=j()if aZ~=nil and aZ or(av==nil or av~=aY)then local velocity=core.getVelocity()local b0=vec3(velocity):len()local b1=f(unit.getData()).maxBrake;if b1~=nil and b1>0 and a8 then b1=b1/utils.clamp(b0/100,0.1,1)b1=b1/a_;if b1>LastMaxBrakeInAtmo and a_>0.10 then LastMaxBrakeInAtmo=b1 end end;if b1~=nil and b1>0 then LastMaxBrake=b1 end;av=aY end end;function MakeButton(b2,b3,b4,b5,b6,b7,b8,b9,ba)local bb={enableName=b2,disableName=b3,width=b4,height=b5,x=b6,y=b7,toggleVar=b8,toggleFunction=b9,drawCondition=ba,hovered=false}table.insert(aj,bb)return bb end;function UpdateAtlasLocationsList()AtlasOrdered={}for aM,aN in pairs(atlas[0])do table.insert(AtlasOrdered,{name=aN.name,index=aM})end;local function bc(bd,be)return bd.name<be.name end;table.sort(AtlasOrdered,bc)end;function AddLocationsToAtlas()for aM,aN in pairs(SavedLocations)do table.insert(atlas[0],aN)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bf=planet.name..". "..#SavedLocations;if radar_1 then local bg,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bg~=nil and bg~=""then bf=bf.." "..radar_1.getConstructName(bg)end end;local bh={position=position,name=bf,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=bh;table.insert(atlas[0],bh)UpdateAtlasLocationsList()F="Location saved as "..bf else F="Databank must be installed to save locations"end end;function UpdatePosition()local bi=-1;local bh;for aM,aN in pairs(SavedLocations)do if aN.name and aN.name==CustomTarget.name then bi=aM;break end end;if bi~=-1 then bh={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bi].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[bi]=bh;bi=-1;for aM,aN in pairs(atlas[0])do if aN.name and aN.name==CustomTarget.name then bi=aM end end;if bi>-1 then atlas[0][bi]=bh end;UpdateAtlasLocationsList()F=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local bi=-1;for aM,aN in pairs(atlas[0])do if aN.name and aN.name==CustomTarget.name then bi=aM end end;if bi>-1 then table.remove(atlas[0],bi)end;bi=-1;for aM,aN in pairs(SavedLocations)do if aN.name and aN.name==CustomTarget.name then F=aN.name.." saved location cleared"bi=aM;break end end;if bi~=-1 then table.remove(SavedLocations,bi)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bj)bj[#bj+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a1==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a1==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a1=0 end end;function ToggleWidgets()if ai then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ai=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ai=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bk,bl,b6,b7,b4,b5)if bk>b6 and bk<b6+b4 and bl>b7 and bl<b7+b5 then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>r then F="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=a9+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bm=vec3(core.getConstructWorldOrientationForward())local bn=vec3(core.getConstructWorldOrientationRight())local bo=vec3(core.getWorldVertical())local bp=getPitch(bo,bm,bn)LockPitch=bp;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;D=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not a8 then AutoTakeoff=false;HoldAltitude=a9;if not a3 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=a9+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a3 then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then D=not D;if D then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else F="Follow Mode only works with Remote controller"D=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>r then F="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else a2=true end else a3=true;RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;D=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;p=false;LockPitch=nil else a3=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;p=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;D=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;D=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function CheckDamage(bj)local bq=0;ah=""local br=az;local bs=0;local bt=0;local bu=0;local bv=0;local bw=""for aM in pairs(aa)do local aS=0;local bx=0;bx=h(aa[aM])aS=k(aa[aM])bs=bs+aS;if aS<bx then if aS==0 then bu=bu+1 else bt=bt+1 end;if aA and#ae==0 then position=vec3(core.getElementPositionById(aa[aM]))local b6=position.x-aJ;local b7=position.y-aJ;local by=position.z-aJ;table.insert(ae,core.spawnArrowSticker(b6,b7,by+1,"down"))table.insert(ae,core.spawnArrowSticker(b6,b7,by+1,"down"))core.rotateSticker(ae[2],0,0,90)table.insert(ae,core.spawnArrowSticker(b6+1,b7,by,"north"))table.insert(ae,core.spawnArrowSticker(b6+1,b7,by,"north"))core.rotateSticker(ae[4],90,90,0)table.insert(ae,core.spawnArrowSticker(b6-1,b7,by,"south"))table.insert(ae,core.spawnArrowSticker(b6-1,b7,by,"south"))core.rotateSticker(ae[6],90,-90,0)table.insert(ae,core.spawnArrowSticker(b6,b7-1,by,"east"))table.insert(ae,core.spawnArrowSticker(b6,b7-1,by,"east"))core.rotateSticker(ae[8],90,0,90)table.insert(ae,core.spawnArrowSticker(b6,b7+1,by,"west"))table.insert(ae,core.spawnArrowSticker(b6,b7+1,by,"west"))core.rotateSticker(ae[10],-90,0,90)table.insert(ae,aa[aM])end elseif aA and#ae>0 and ae[11]==aa[aM]then for bz in pairs(ae)do core.deleteSticker(ae[bz])end;ae={}end end;bq=d(bs/br*100)if bq<100 then bj[#bj+1]=[[<g class="pbright txt">]]bv=d(bq*2.55)bw=e("rgb(%d,%d,%d)",255-bv,bv,0)if bq<100 then bj[#bj+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],bw,bq)if bu>0 then bj[#bj+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],bw,bu,bt)elseif bt>0 then bj[#bj+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],bw,bt)end end;bj[#bj+1]=[[<\g>]]end end;function DrawCursorLine(bj)local bA=d(utils.clamp(Y/(am/4)*255,0,255))bj[#bj+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",V,W,d(PrimaryR+0.5)+bA,d(PrimaryG+0.5)-bA,d(PrimaryB+0.5)-bA)end;function getPitch(bB,bC,be)local bD=bB:cross(be):normalize_inplace()local bp=math.acos(utils.clamp(bD:dot(-bC),-1,1))*constants.rad2deg;if bD:cross(-bC):dot(be)<0 then bp=-bp end;return bp end;function clearAll()if a6 then a6=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;D=false;p=false;a2=false;a3=false;s=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;ac=false;LockPitch=nil else a6=true end end;function wipeSaveVariables()if not dbHud_1 then F="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"X=5 else if at then for aM,aN in pairs(a)do dbHud_1.setStringValue(aN,g(nil))end;for aM,aN in pairs(b)do if aN~="SavedLocations"then dbHud_1.setStringValue(aN,g(nil))end end;F="Databank wiped. New variables will save after re-enter seat and exit"X=5;at=false;as=false;T=true else F="Press ALT-7 again to confirm wipe of ALL data"at=true end end end;function CheckButtons()for _,aN in pairs(aj)do if aN.hovered then if not aN.drawCondition or aN.drawCondition()then aN.toggleFunction()end;aN.hovered=false end end end;function SetButtonContains()local b6=V+am/2;local b7=W+an/2;for _,aN in pairs(aj)do aN.hovered=Contains(b6,b7,aN.x,aN.y,aN.width,aN.height)end end;function DrawButton(bj,bE,hover,b6,b7,bF,bG,bH,bI,bJ,bK)if type(bJ)=="function"then bJ=bJ()end;if type(bK)=="function"then bK=bK()end;bj[#bj+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",b6,b7,bF,bG)if bE then bj[#bj+1]=e("%s'",bH)else bj[#bj+1]=bI end;if hover then bj[#bj+1]=" style='stroke:white; stroke-width:2'"else bj[#bj+1]=" style='stroke:black; stroke-width:1'"end;bj[#bj+1]="></rect>"bj[#bj+1]=e("<text x='%f' y='%f' font-size='24' fill='",b6+bF/2,b7+bG/2+5)if bE then bj[#bj+1]="black"else bj[#bj+1]="white"end;bj[#bj+1]="' text-anchor='middle' font-family='Montserrat'>"if bE then bj[#bj+1]=e("%s</text>",bJ)else bj[#bj+1]=e("%s</text>",bK)end end;function DrawButtons(bj)local bL="rgb(50,50,50)'"local bM="rgb(210,200,200)"local bN=DrawButton;for _,aN in pairs(aj)do local b3=aN.disableName;local b2=aN.enableName;if type(b3)=="function"then b3=b3()end;if type(b2)=="function"then b2=b2()end;if not aN.drawCondition or aN.drawCondition()then bN(bj,aN.toggleVar(),aN.hovered,aN.x,aN.y,aN.width,aN.height,bM,bL,b3,b2)end end end;function DrawTank(bj,aI,b6,bO,bP,bQ,bR,bS)local bT=1;local bU=2;local bV=3;local bW=4;local bX=5;local bY=6;local bZ=""local b_=0;local c0=fuelY;local c1=fuelY+10;if o()==1 and not RemoteHud then c0=c0-50;c1=c1-50 end;bj[#bj+1]=[[<g class="pdim txtfuel">]]if bP=="ATMO"then bZ="atmofueltank"elseif bP=="SPACE"then bZ="spacefueltank"else bZ="rocketfueltank"end;b_=_G[bZ.."_size"]if#bQ>0 then for i=1,#bQ do local bf=string.sub(bQ[i][bU],1,12)local c2=0;for bz=1,b_ do if bQ[i][bU]==f(unit[bZ.."_"..bz].getData()).name then c2=bz;break end end;if aI or bR[i]==nil or bS[i]==nil then local c3=0;local c4=0;local c5=0;local c6=0;local aV=system.getTime()if c2~=0 then bS[i]=f(unit[bZ.."_"..c2].getData()).percentage;bR[i]=f(unit[bZ.."_"..c2].getData()).timeLeft;if bR[i]=="n/a"then bR[i]=0 end else c5=m(bQ[i][bT])-bQ[i][bW]c3=bQ[i][bV]bS[i]=d(0.5+c5*100/c3)c4=bQ[i][bX]c6=bQ[i][bY]if c4<=c5 then bR[i]=0 else bR[i]=d(0.5+c5/((c4-c5)/(aV-c6)))end;bQ[i][bX]=c5;bQ[i][bY]=aV end end;if bf==bO then bf=e("%s %d",bP,i)end;if c2==0 then bf=bf.." *"end;local c7;if bR[i]==0 then c7="n/a"else c7=FormatTimeString(bR[i])end;if bS[i]~=nil then local bv=d(bS[i]*2.55)local bw=e("rgb(%d,%d,%d)",255-bv,bv,0)local c8=""if c7~="n/a"and bR[i]<120 or bS[i]<5 then if aI then c8=[[class="red"]]end end;bj[#bj+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],b6,c0,c8,bf,b6,c1,bw,bS[i],c7)c0=c0+30;c1=c1+30 end end end;bj[#bj+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local bp=-math.deg(math.atan(velocity.y,velocity.z))+180;bp=bp-90;if bp<0 then bp=360+bp end;if bp>180 then bp=-180+bp-180 end;return-bp end;function getRelativeYaw(velocity)velocity=vec3(velocity)local c9=math.deg(math.atan(velocity.y,velocity.x))-90;if c9<-180 then c9=360+c9 end;return c9 end;function AlignToWorldVector(ca,cb)if not a8 or RateOfChange>MinimumRateOfChange+0.08 or a5~=-1 then if cb==nil then cb=al end;ca=vec3(ca):normalize()local cc=vec3(core.getConstructWorldOrientationForward())-ca;local cd=-getMagnitudeInDirection(cc,core.getConstructWorldOrientationRight())*ak;local ce=-getMagnitudeInDirection(cc,core.getConstructWorldOrientationUp())*ak;if af==0 then af=cd/2 end;if ag==0 then ag=ce/2 end;y=y-(cd+(cd-af)*DampingMultiplier)x=x+ce+(ce-ag)*DampingMultiplier;af=cd;ag=ce;if math.abs(cd)<cb and math.abs(ce)<cb then return true end;return false end end;function getAPEnableName()local bf=AutopilotTargetName;if bf==nil then bf=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bf==nil then bf="None"end;return"Engage Autopilot: "..bf end;function getAPDisableName()local bf=AutopilotTargetName;if bf==nil then bf=CustomTarget.name end;if bf==nil then bf="None"end;return"Disable Autopilot: "..bf end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=a9 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then F="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then F="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"X=5 elseif not s then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then F="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;F="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;F="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local cf=50;local cg=260;local ch=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cg,cf,am/2-cg/2,an/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then F="Brakes in Toggle Mode"else F="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cg,cf,am/2-cg/2-50-ch.width,an/2-cf+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cg,cf,am/2-cg/2+ch.width+50,an/2-cf+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local ci=MakeButton(getAPEnableName,getAPDisableName,600,60,am/2-600/2,an/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,ci.height,ci.x+ci.width+30,ci.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,ci.height,ci.x+ci.width+30,ci.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,ci.height,ci.x-200-30,ci.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cf=60;cg=300;local b6=10;local b7=an/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cg,cf,b6,b7,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cg,cf,b6+cg+20,b7,function()return AltitudeHold end,ToggleAltitudeHold)b7=b7+cf+20;MakeButton("Engage Autoland","Disable Autoland",cg,cf,b6,b7,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cg,cf,b6+cg+20,b7,function()return AutoTakeoff end,ToggleAutoTakeoff)b7=b7+cf+20;MakeButton("Show Orbit Display","Hide Orbit Display",cg,cf,b6,b7,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then F="Orbit Display Enabled"else F="Orbit Display Disabled"end end)b7=b7+cf+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cg,cf,b6,b7,function()return Reentry end,function()s=true;BeginReentry()end,function()return a9>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cg,cf,b6+cg+20,b7,function()return Reentry end,BeginReentry,function()return a9>ReentryAltitude end)b7=b7+cf+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cg,cf,b6,b7,function()return D end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cg,cf,b6+cg+20,b7,function()return aA end,function()aA=not aA;if aA then F="Repair Arrows Enabled"else F="Repair Arrows Diabled"end end,function()return o()==1 end)b7=b7+cf+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cg,cf,b6,b7,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;b7=b7+cf+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cg*2,cf,b6,b7,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function GetFlightStyle()local cj=Nav.axisCommandManager:getAxisCommandType(0)local ck="TRAVEL"if cj==1 then ck="CRUISE"end;if Autopilot then ck="AUTOPILOT"end;return ck end;function updateHud(bj)local cl=a9;local velocity=core.getVelocity()local b0=vec3(velocity):len()local bo=vec3(core.getWorldVertical())local bm=vec3(core.getConstructWorldOrientationForward())local bn=vec3(core.getConstructWorldOrientationRight())local cm=vec3(core.getConstructWorldOrientationUp())local cn=getRoll(bo,bm,bn)local co=cn/180*math.pi;local cp=math.cos(co)local cq=math.sin(co)local bp=getPitch(bo,bm,bn*cp+cm*cq)local cr=cn;local cs=bp;local ct=j()local cu=d(unit.getThrottle())local cv=b0*3.6;local cw=unit.getAxisCommandValue(0)local ck=GetFlightStyle()local cx="ROLL"local cy=unit.getClosestPlanetInfluence()>0;if cu==nil then cu=0 end;if not cy then if b0>5 then bp=getRelativePitch(velocity)cn=getRelativeYaw(velocity)else bp=0;cn=0 end;cx="YAW"end;bj[#bj+1]=a0;bj[#bj+1]=ah;bj[#bj+1]=Z;if aK%aD==0 then aI=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bj,aI,fuelX,"Atmospheric ","ATMO",aw,aG,aH)DrawTank(bj,aI,fuelX+100,"Space fuel t","SPACE",ax,aE,aF)DrawTank(bj,aI,fuelX+200,"Rocket fuel ","ROCKET",ay,aB,aC)end;if aI then aI=false;aK=0 end;aK=aK+1;DrawVerticalSpeed(bj,cl)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cy then DrawRollLines(bj,centerX,centerY,cr,cx,cy)DrawArtificialHorizon(bj,cs,cr,centerX,centerY,cy,d(getRelativeYaw(velocity)),b0)else DrawRollLines(bj,centerX,centerY,cn,cx,cy)DrawArtificialHorizon(bj,bp,cn,centerX,centerY,cy,d(cn),b0)end;DrawAltitudeDisplay(bj,cl,cy)DrawPrograde(bj,velocity,b0,centerX,centerY)end end;DrawThrottle(bj,ck,cu,cw)DrawSpeed(bj,cv)DrawWarnings(bj)DisplayOrbitScreen(bj)if screen_2 then local cz=vec3(core.getConstructWorldPos())local b6=960+cz.x/MapXRatio;local b7=450+cz.y/MapYRatio;screen_2.moveContent(YouAreHere,(b6-80)/19.2,(b7-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bj)local cA=aQ;local cB=aR;local cC=aQ;local cD=aR;if IsInFreeLook()and not brightHud then cA=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]cB=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bj[#bj+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],cA,cA,cC,cC,cB,cB,cD,cD,ResolutionX,ResolutionY)end;function HUDEpilogue(bj)bj[#bj+1]="</svg>"end;function DrawSpeed(bj,cv)local cE=throtPosY-10;local cF=throtPosX+10;bj[#bj+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cE=75 end;bj[#bj+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],cF,cE,d(cv))end;function DrawOdometer(bj,R,TotalDistanceTravelled,ck,S,ct)local cG=1240;local cH=55;local cI=65;local ct=j()local aY=core.g()local cJ=0;local cK=0;local cL=0;RefreshLastMaxBrake(aY)if a8 then cL=LastMaxBrakeInAtmo else cL=LastMaxBrake end;maxThrust=Nav:maxForceForward()au=n()if not ShowOdometer then return end;local cM=vec3(core.getWorldAcceleration()):len()/9.80665;if aY>0.1 then cK=au*aY;cJ=maxThrust/aY end;bj[#bj+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cG=1120;cH=55;cI=65 elseif a8 then bj[#bj+1]=e([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],ct)end;bj[#bj+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],cG,cH,cG,cI,aY/9.80665,cG,cH+20,cG,cI+20,cM)bj[#bj+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if o()==0 or RemoteHud then bj[#bj+1]=e([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="180">%s</text>
                        ]],R,TotalDistanceTravelled/1000,FormatTimeString(S),FormatTimeString(TotalFlightTime),au/1000,cL/1000,maxThrust/1000,ck)if aY>0.1 then bj[#bj+1]=e([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],cJ/1000,cK/1000)else bj[#bj+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else bj[#bj+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ck)end;bj[#bj+1]="</g>"end;function DrawThrottle(bj,ck,cu,cw)local c0=throtPosY+10;local c1=throtPosY+20;if o()==1 and not RemoteHud then c0=55;c1=65 end;local cN="CRUISE"local unit="km/h"local cO=cw;if ck=="TRAVEL"or ck=="AUTOPILOT"then cN="THROT"unit="%"cO=cu;local cP="dim"if cu<0 then cP="red"end;bj[#bj+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],cP,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(cu),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bj[#bj+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,c0,cN,throtPosX+10,c1,cO,unit)end;function DrawVerticalSpeed(bj,cl)if cl<200000 and not a8 or cl and a8 then local cQ=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local cR=0;if math.abs(cQ)>1 then cR=45*math.log(math.abs(cQ),10)if cQ<0 then cR=-cR end end;bj[#bj+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(cQ),d(cR))end end;function getHeading(bC)local cS=-vec3(core.getWorldVertical())bC=bC-bC:project_on(cS)local cT=vec3(0,0,1)cT=cT-cT:project_on(cS)local cU=cT:cross(cS)local cR=cT:angle_between(bC)*constants.rad2deg;if bC:dot(cU)<0 then cR=360-cR end;return cR end;function DrawRollLines(bj,centerX,centerY,cr,cx,cy)local cV=circleRad;local cW=20;cW=d(cW)local cX=d(cr)if cy then for i=-45,45,5 do local cY=i;bj[#bj+1]=e([[<g transform="rotate(%f,%d,%d)">]],cY,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bj[#bj+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+cV+cW-len,centerX,centerY+cV+cW)end;bj[#bj+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+cV+cW-35,cx,centerX,centerY+cV+cW-25,cX)bj[#bj+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cr,centerX,centerY)bj[#bj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+cV+cW-20,centerX+5,centerY+cV+cW-20,centerX,centerY+cV+cW-15)bj[#bj+1]="</g>"end;local c9=cX;if cy then c9=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local cZ=20;local c_=d(c9)local d0=0;local d1=centerY+cV+cW+20;local d2=centerX;if cx~="YAW"then d1=130;d2=960 end;local d3=[[<path class="txttick line" d="]]for i=d(c_-(cZ+10)-c_%5+0.5),d(c_+cZ+10+c_%5+0.5),5 do local b6=d2+-i*5+c9*5;if i%10==0 then d0=10;local d4=i;if d4==360 then d4=0 elseif d4>360 then d4=d4-360 elseif d4<0 then d4=d4+360 end;bj[#bj+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],b6+5,d1-12,d4)elseif i%5==0 then d0=5 end;if d0==10 then d3=e([[%s M %f %f v %d]],d3,b6,d1-5,d0)else d3=e([[%s M %f %f v %d]],d3,b6,d1-2.5,d0)end end;bj[#bj+1]=d3 ..[["/>]]bj[#bj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],d2-5,d1+10,d2+5,d1+10,d2,d1+5)if cy then cx="HDG"end;bj[#bj+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],d2,d1+25,c_,d2,d1+35,cx)end;function DrawArtificialHorizon(bj,cs,cr,centerX,centerY,cy,d5,b0)local cV=circleRad;local d6=d(cV*3/5)if cV>0 then local d7=d(cs)local len=0;local d3=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cr,centerX,centerY)if not a8 then d3=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bj[#bj+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],cV-1,centerX,centerY)bj[#bj+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(d7-30-d7%5+0.5),d(d7+30+d7%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local b7=centerY+-i*5+cs*5;if len==30 then d3=e([[%s M %d %f h %d]],d3,centerX-d6-len,b7,len)if a8 then bj[#bj+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cr,centerX,centerY,centerX-d6+10,b7,i)bj[#bj+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cr,centerX,centerY,centerX+d6-10,b7,i)if i==0 or i==180 or i==-180 then bj[#bj+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cr,centerX,centerY,centerX-d6+20,b7,d6*2-40)end else bj[#bj+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-d6+10,b7,i)bj[#bj+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+d6-10,b7,i)end;d3=e([[%s M %d %f h %d]],d3,centerX+d6,b7,len)else d3=e([[%s M %d %f h %d]],d3,centerX-d6-len,b7,len)d3=e([[%s M %d %f h %d]],d3,centerX+d6,b7,len)end end;bj[#bj+1]=d3 ..[["/>]]local d8="PITCH"if not cy then d8="REL PITCH"end;if cs>90 and not a8 then cs=90-(cs-90)elseif cs<-90 and not a8 then cs=-90-(cs+90)end;if cV>200 then if a8 then if b0>r then bj[#bj+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,d5)end;bj[#bj+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cr,centerX,centerY)else bj[#bj+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bj[#bj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-d6+25,centerY-5,centerX-d6+20,centerY,centerX-d6+25,centerY+5,centerX-d6+50,centerY+4,d7)bj[#bj+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+d6-25,centerY-5,centerX+d6-20,centerY,centerX+d6-25,centerY+5,centerX+d6-30,centerY+4,d7)bj[#bj+1]="</g>"end;local d9=d(cV/3)bj[#bj+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-d9,centerY,cV-d9)if not a8 and cy then bj[#bj+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cr,centerX,centerY,centerX-d6+10,centerY,d6*2-20)end;bj[#bj+1]="</g>"if cV<200 then if a8 and b0>r then bj[#bj+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-cV,d8,centerX,centerY-cV+10,d7,centerX,centerY-15,"Yaw",centerX,centerY+20,d5)else bj[#bj+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-cV,d8,centerX,centerY-cV+15,d7)end end end end;function DrawAltitudeDisplay(bj,cl,cy)local da=altMeterX;local db=altMeterY;local dc=78;local dd=19;local de=AboveGroundLevel()if de~=-1 then table.insert(bj,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],da+dc,db+dd+20,de))end;if cy and(cl<200000 and not a8 or cl and a8)then table.insert(bj,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],da-1,db-4,dc+2,dd+6,da+1,db-1,dc-4,dd))local bi=0;local df=1;local dg=0;local dh=cl<0;local di=9;if dh then di=0 end;local cl=math.abs(cl)while bi<6 do local dj=11;local dk=16;local dl=9;local dm=14;local c8="altsm"if bi>2 then dk=dk+3;dj=dj+2;dm=dm+2;dl=dl-6;c8="altbig"end;if dh then c8=c8 .." red"end;local dn=cl/df%10;local dp=d(dn)local dq=d((dp+1)%10)local dr=dg;if bi==0 then dr=dn-dp;if dh then dr=1-dr end end;if dh and(bi==0 or dg~=0)then local ds=dq;dq=dp;dp=ds end;local dt=dk*(dr-1)local du=dt+dk;local b6=da+dl+(6-bi)*dj;local b7=db+dm;table.insert(bj,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],c8,b6,b7+dt,dq,b6,b7+du,dp))bi=bi+1;df=df*10;if dp==di then dg=dr else dg=0 end end;table.insert(bj,[[</g></g>]])end end;function DrawPrograde(bj,velocity,b0,centerX,centerY)if b0>5 and not a8 or b0>r then local cV=circleRad;local dv=20;local dw=20;local dx=vec3(velocity)local dy=getRelativePitch(dx)local dz=getRelativeYaw(dx)local dA=-dz/dw*cV;local dB=dy/dv*cV;local b6=centerX+dA;local b7=centerY+dB;local Y=math.sqrt(dA^2+dB^2)if Y<cV then bj[#bj+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',b6,b7)else local cR=math.atan(dB,dA)local dC=centerX+cV*math.cos(cR)local dD=centerY+cV*math.sin(cR)bj[#bj+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',dC,dD)end;dy=getRelativePitch(-dx)dz=getRelativeYaw(-dx)dA=-dz/dw*cV;dB=dy/dv*cV;b6=centerX+dA;b7=centerY+dB;Y=math.sqrt(dA^2+dB^2)if not a8 then if Y<cV then bj[#bj+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',b6,b7)else local cR=math.atan(dB,dA)local dC=centerX+cV*math.cos(cR)local dD=centerY+cV*math.sin(cR)bj[#bj+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',dC,dD)end end end end;function DrawWarnings(bj)bj[#bj+1]=e([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)bj[#bj+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bj[#bj+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]bj[#bj+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]bj[#bj+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local dE=960;local dF=860;local dG=880;local dH=900;local dI=960;local dJ=200;local dK=150;local dL=960;if o()==1 and not RemoteHud then dF=135;dG=155;dH=175;dJ=115;dK=95 end;if BrakeIsOn then bj[#bj+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],dE,dF)end;if a8 and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bj[#bj+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],dE,dJ+50)end;if ac then bj[#bj+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],dE,dL)end;if GearExtended then if v then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],dE,dG)else bj[#bj+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],dE,dG)end;bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],dE,dH,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if J then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],dE,dI+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(a9-antigrav.getBaseAltitude())<501 then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dE,dJ+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bj[#bj+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dE,dJ+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],dE,dJ+20,AutopilotStatus)elseif LockPitch~=nil then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],dE,dJ+20,d(LockPitch))elseif D then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],dE,dJ+20)elseif Reentry then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],dE,dJ+20)end;if AltitudeHold then if AutoTakeoff then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],dE,dJ,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bj[#bj+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],dE,dJ+50)end else bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],dE,dJ,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bj[#bj+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],dE,dJ)else bj[#bj+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],dE,dJ)end end;if ProgradeIsOn then bj[#bj+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],dE,dJ)end;if RetrogradeIsOn then bj[#bj+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],dE,dJ)end;if TurnBurn then bj[#bj+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],dE,dK)end;if VectorToTarget then bj[#bj+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],dE,dJ+30,VectorStatus)end;bj[#bj+1]="</g>"end;function DisplayOrbitScreen(bj)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local dM=75;local dN=0;local dO=250;local dP=4;dN=dN+dP;local dQ=15;local b6=dM+dO+dM/2+dP;local b7=dN+dO/2+5+dP;local dR,dS,dT,dU;dR=dO/4;dU=0;bj[#bj+1]=[[<g class="pbright txtorb txtmid">]]bj[#bj+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',dO+dM*2,dO+dN,dP,dP)if orbit.periapsis~=nil and orbit.apoapsis~=nil then dT=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(dR*2)dS=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/dT*(1-orbit.eccentricity)dU=dR-orbit.periapsis.altitude/dT-planet.radius/dT;local dV=""if orbit.periapsis.altitude<=0 then dV='redout'end;bj[#bj+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],dV,dM+dO/2+dU+dP,dN+dO/2+dP,dR,dS)bj[#bj+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',dM+dO/2+dP,dN+dO/2+dP,planet.radius/dT)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bj[#bj+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b6-35,b7-5,dM+dO/2+dR+dU,b7-5)bj[#bj+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],b6,b7)b7=b7+dQ;bj[#bj+1]=e([[<text x="%f" y="%f">%s</text>]],b6,b7,getDistanceDisplayString(orbit.apoapsis.altitude))b7=b7+dQ;bj[#bj+1]=e([[<text x="%f" y="%f">%s</text>]],b6,b7,FormatTimeString(orbit.timeToApoapsis))b7=b7+dQ;bj[#bj+1]=e([[<text x="%f" y="%f">%s</text>]],b6,b7,getSpeedDisplayString(orbit.apoapsis.speed))end;b7=dN+dO/2+5+dP;b6=dM-dM/2+10+dP;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bj[#bj+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b6+35,b7-5,dM+dO/2-dR+dU,b7-5)bj[#bj+1]=e([[<text x="%f" y="%f">Periapsis</text>]],b6,b7)b7=b7+dQ;bj[#bj+1]=e([[<text x="%f" y="%f">%s</text>]],b6,b7,getDistanceDisplayString(orbit.periapsis.altitude))b7=b7+dQ;bj[#bj+1]=e([[<text x="%f" y="%f">%s</text>]],b6,b7,FormatTimeString(orbit.timeToPeriapsis))b7=b7+dQ;bj[#bj+1]=e([[<text x="%f" y="%f">%s</text>]],b6,b7,getSpeedDisplayString(orbit.periapsis.speed))end;bj[#bj+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],dM+dO/2+dP,20+dP,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local dW=orbit.timeToApoapsis/orbit.period*2*math.pi;local dX=dR*math.cos(dW)local dY=dS*math.sin(dW)bj[#bj+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',dM+dO/2+dX+dU+dP,dN+dO/2+dY+dP)end;bj[#bj+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for aM,aN in pairs(atlas[0])do if ao==nil or aN.center.x<ao then ao=aN.center.x end;if ap==nil or aN.center.x>ap then ap=aN.center.x end;if aq==nil or aN.center.y<aq then aq=aN.center.y end;if ar==nil or aN.center.y>ar then ar=aN.center.y end end;GalaxyMapHTML=""local dZ=1.1*(ap-ao)/1920;local d_=1.4*(ar-aq)/1080;for aM,aN in pairs(atlas[0])do local b6=960+aN.center.x/dZ;local b7=540+aN.center.y/d_;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..b6 ..'" cy="'..b7 ..'" r="'..aN.radius/dZ*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(aN.name,"Moon")and not string.match(aN.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..b6 .."' y='"..b7+aN.radius/dZ*30+20 .."' font-size='28' fill="..aQ.." text-anchor='middle' font-family='Montserrat'>"..aN.name.."</text>"end end;local cz=vec3(core.getConstructWorldPos())local b6=960+cz.x/dZ;local b7=540+cz.y/d_;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..b6 ..'" cy="'..b7 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..b6 .."' y='"..b7-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=dZ;MapYRatio=d_;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local cz=vec3(core.getConstructWorldPos())local b6=960+cz.x/dZ;local b7=540+cz.y/d_;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..aQ.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((b6-80)/19.20,(b7-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function e0(e1)return type(e1)=='number'end;local function e2(e1)return type(tonumber(e1))=='number'end;local function e3(e4)return type(e4)=='table'end;local function e5(e6)return type(e6)=='string'end;local function e7(aN)return e3(aN)and e0(aN.x and aN.y and aN.z)end;local function e8(e9)return e3(e9)and e0(e9.latitude and e9.longitude and e9.altitude and e9.bodyId and e9.systemId)end;local ea=math.pi/180;local eb=180/math.pi;local ec=1e-10;local d4=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ed='::pos{'..d4 ..','..d4 ..','..d4 ..','..d4 ..','..d4 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local ee=utils.clamp;local function ef(eg,eh)if eg==0 then return math.abs(eh)<1e-09 end;if eh==0 then return math.abs(eg)<1e-09 end;return math.abs(eg-eh)<math.max(math.abs(eg),math.abs(eh))*ec end;local function ei(e1)local aO=string.gsub(string.reverse(e('%.4f',e1)),'^0*%.?','')return aO==''and'0'or string.reverse(aO)end;local function ej(ek)if e7(ek)then return e('{x=%.3f,y=%.3f,z=%.3f}',ek.x,ek.y,ek.z)end;if e3(ek)and not getmetatable(ek)then local el={}local em=next(ek)if type(em)=='nil'or em==1 then el=ek else for aM,aN in pairs(ek)do local cO=ej(aN)if type(aM)=='number'then table.insert(el,e('[%s]=%s',aM,cO))else table.insert(el,e('%s=%s',aM,cO))end end end;return e('{%s}',table.concat(el,','))end;if e5(ek)then return e("'%s'",ek:gsub("'",[[\']]))end;return tostring(ek)end;local en={}en.__index=en;en.__tostring=function(ek,eo)local ep={}for aM in pairs(ek)do table.insert(ep,aM)end;table.sort(ep)local el={}for _,aM in ipairs(ep)do local cO=ej(ek[aM])if type(aM)=='number'then table.insert(el,e('[%s]=%s',aM,cO))else table.insert(el,e('%s=%s',aM,cO))end end;if eo then return e('%s%s',eo,table.concat(el,',\n'..eo))end;return e('{%s}',table.concat(el,','))end;en.__eq=function(eq,er)return eq.planetarySystemId==er.planetarySystemId and eq.bodyId==er.bodyId and ef(eq.radius,er.radius)and ef(eq.center.x,er.center.x)and ef(eq.center.y,er.center.y)and ef(eq.center.z,er.center.z)and ef(eq.GM,er.GM)end;local function es(et,eu,ev,ew,ex)assert(e2(et),'Argument 1 (planetarySystemId) must be a number:'..type(et))assert(e2(eu),'Argument 2 (bodyId) must be a number:'..type(eu))assert(e2(ev),'Argument 3 (radius) must be a number:'..type(ev))assert(e3(ew),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(ew))assert(e2(ex),'Argument 5 (GM) must be a number:'..type(ex))return setmetatable({planetarySystemId=tonumber(et),bodyId=tonumber(eu),radius=tonumber(ev),center=vec3(ew),GM=tonumber(ex)},en)end;local ey={}ey.__index=ey;ey.__tostring=function(ez)return e('::pos{%d,%d,%s,%s,%s}',ez.systemId,ez.bodyId,ei(ez.latitude*eb),ei(ez.longitude*eb),ei(ez.altitude))end;ey.__eq=function(eq,er)return eq.bodyId==er.bodyId and eq.systemId==er.systemId and ef(eq.latitude,er.latitude)and ef(eq.altitude,er.altitude)and(ef(eq.longitude,er.longitude)or ef(eq.latitude,math.pi/2)or ef(eq.latitude,-math.pi/2))end;local function eA(eB,eu,eC,eD,cl)local et=eB;if e5(eB)and not eD and not cl and not eu and not eC then et,eu,eC,eD,cl=string.match(eB,ed)assert(et,'Argument 1 (position string) is malformed.')else assert(e2(et),'Argument 1 (systemId) must be a number:'..type(et))assert(e2(eu),'Argument 2 (bodyId) must be a number:'..type(eu))assert(e2(eC),'Argument 3 (latitude) must be in degrees:'..type(eC))assert(e2(eD),'Argument 4 (longitude) must be in degrees:'..type(eD))assert(e2(cl),'Argument 5 (altitude) must be in meters:'..type(cl))end;et=tonumber(et)eu=tonumber(eu)eC=tonumber(eC)eD=tonumber(eD)cl=tonumber(cl)if eu==0 then return setmetatable({latitude=eC,longitude=eD,altitude=cl,bodyId=eu,systemId=et},ey)end;return setmetatable({latitude=ea*ee(eC,-90,90),longitude=ea*(eD%360),altitude=cl,bodyId=eu,systemId=et},ey)end;local eE={}eE.__index=eE;eE.__tostring=function(ek,eo)local eF=eo and eo..'  'local eG={}local ep={}for aM in pairs(ek)do table.insert(ep,aM)end;table.sort(ep)for _,eH in ipairs(ep)do bdy=ek[eH]local eI=en.__tostring(bdy,eF)if eo then table.insert(eG,e('[%s]={\n%s\n%s}',eH,eI,eo))else table.insert(eG,e('  [%s]=%s',eH,eI))end end;if eo then return e('\n%s%s%s',eo,table.concat(eG,',\n'..eo),eo)end;return e('{\n%s\n}',table.concat(eG,',\n'))end;local function eJ(eK)local atlas={}local pid;for _,aN in pairs(eK)do local bg=aN.planetarySystemId;if type(bg)~='number'then error('Invalid planetary system ID: '..tostring(bg))elseif pid and bg~=pid then error('Mismatch planetary system IDs: '..bg..' and '..pid)end;local eL=aN.bodyId;if type(eL)~='number'then error('Invalid body ID: '..tostring(eL))elseif atlas[eL]then error('Duplicate body ID: '..tostring(eL))end;setmetatable(aN.center,getmetatable(vec3.unit_x))atlas[eL]=setmetatable(aN,en)pid=bg end;return setmetatable(atlas,eE)end;PlanetaryReference={}local function eM(eK)return setmetatable({galaxyAtlas=eK or{}},PlanetaryReference)end;PlanetaryReference.__index=function(e4,i)if type(i)=='number'then local system=e4.galaxyAtlas[i]return eJ(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(ek)return function(e4,aM)local eN,nv=next(e4,aM)return eN,nv and eJ(nv)end,ek.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(ek)local eO={}for _,eP in pairs(ek or{})do local eQ=eP:getPlanetarySystemId()local eR=eE.__tostring(eP,'    ')table.insert(eO,e('  [%s]={%s\n  }',eQ,eR))end;return e('{\n%s\n}\n',table.concat(eO,',\n'))end;PlanetaryReference.BodyParameters=es;PlanetaryReference.MapPosition=eA;PlanetaryReference.PlanetarySystem=eJ;function PlanetaryReference.createBodyParameters(eS,eu,eT,eU,eV,eW,eX)assert(e2(eS),'Argument 1 (planetarySystemId) must be a number:'..type(eS))assert(e2(eu),'Argument 2 (bodyId) must be a number:'..type(eu))assert(e2(eT),'Argument 3 (surfaceArea) must be a number:'..type(eT))assert(e3(eU),'Argument 4 (aPosition) must be an array or vec3:'..type(eU))assert(e3(eV),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(eV))assert(e2(eW),'Argument 6 (altitude) must be in meters:'..type(eW))assert(e2(eX),'Argument 7 (gravityAtPosition) must be number:'..type(eX))local ev=math.sqrt(eT/4/math.pi)local Y=ev+eW;local eY=vec3(eU)+Y*vec3(eV)local ex=eX*Y*Y;return es(eS,eu,ev,eY,ex)end;PlanetaryReference.isMapPosition=e8;function PlanetaryReference:getPlanetarySystem(eB)if i==nil then i=0 end;if nv==nil then nv=0 end;local eS=eB;if e8(eB)then eS=eB.systemId end;if type(eS)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=eE then system=eJ(system)end;return system end end end;function eE:castIntersections(eZ,e_,f0,f1)local f0=f0 or function(f2)return 1.05*f2.radius end;local f3={}if f1 then for _,i in ipairs(f1)do f3[i]=self[i]end else f1={}for aM,f2 in pairs(self)do table.insert(f1,aM)f3[aM]=f2 end end;local function f4(f5,f6)local f7=f3[f5].center-eZ;local f8=f3[f6].center-eZ;return f7:len()<f8:len()end;table.sort(f1,f4)local f9=e_:normalize()for i,bg in ipairs(f1)do local f2=f3[bg]local fa=f2.center-eZ;local ev=f0(f2)local fb=fa:dot(f9)local fc=fb^2-(fa:len2()-ev^2)if fc>=0 then local fd=math.sqrt(fc)local fe=fb+fd;local ff=fb-fd;if ff>0 then return f2,fe,ff elseif fe>0 then return f2,fe,nil end end end;return nil,nil,nil end;function eE:closestBody(fg)assert(type(fg)=='table','Invalid coordinates.')local fh,f2;local fi=vec3(fg)for _,fj in pairs(self)do local fk=(fj.center-fi):len2()if not f2 or fk<fh then f2=fj;fh=fk end end;return f2 end;function eE:convertToBodyIdAndWorldCoordinates(eB)local fl=eB;if e5(eB)then fl=eA(eB)end;if fl.bodyId==0 then return 0,vec3(fl.latitude,fl.longitude,fl.altitude)end;local fj=self:getBodyParameters(fl)if fj then return fl.bodyId,fj:convertToWorldCoordinates(fl)end end;function eE:getBodyParameters(eB)local eu=eB;if e8(eB)then eu=eB.bodyId end;assert(e2(eu),'Argument 1 (bodyId) must be a number:'..type(eu))return self[eu]end;function eE:getPlanetarySystemId()local _,aN=next(self)return aN and aN.planetarySystemId end;function en:convertToMapPosition(ew)assert(e3(ew),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(ew))local fm=vec3(ew)if self.bodyId==0 then return setmetatable({latitude=fm.x,longitude=fm.y,altitude=fm.z,bodyId=0,systemId=self.planetarySystemId},ey)end;local fn=fm-self.center;local Y=fn:len()local cl=Y-self.radius;local eC=0;local eD=0;if not ef(Y,0)then local fo=math.atan(fn.y,fn.x)eD=fo>=0 and fo or 2*math.pi+fo;eC=math.pi/2-math.acos(fn.z/Y)end;return setmetatable({latitude=eC,longitude=eD,altitude=cl,bodyId=self.bodyId,systemId=self.planetarySystemId},ey)end;function en:convertToWorldCoordinates(eB)local fl=e5(eB)and eA(eB)or eB;if fl.bodyId==0 then return vec3(fl.latitude,fl.longitude,fl.altitude)end;assert(e8(fl),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(fl.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(fl.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local fp=math.cos(fl.latitude)return self.center+(self.radius+fl.altitude)*vec3(fp*math.cos(fl.longitude),fp*math.sin(fl.longitude),math.sin(fl.latitude))end;function en:getAltitude(ew)return(vec3(ew)-self.center):len()-self.radius end;function en:getDistance(ew)return(vec3(ew)-self.center):len()end;function en:getGravity(ew)local fq=self.center-vec3(ew)local fr=fq:len2()return self.GM/fr*fq/math.sqrt(fr)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return eM(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function e5(e6)return type(e6)=='string'end;local function e3(e4)return type(e4)=='table'end;local function ef(eg,eh)if eg==0 then return math.abs(eh)<1e-09 end;if eh==0 then return math.abs(eg)<1e-09 end;return math.abs(eg-eh)<math.max(math.abs(eg),math.abs(eh))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cl)assert(self.body)local Y=cl+self.body.radius;if not ef(Y,0)then local orbit=math.sqrt(self.body.GM/Y)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(eB,velocity)assert(self.body)assert(e3(eB)or e5(eB))assert(e3(velocity))local cz=(e5(eB)or PlanetRef.isMapPosition(eB))and self.body:convertToWorldCoordinates(eB)or vec3(eB)local aN=vec3(velocity)local fs=cz-self.body.center;local f8=aN:len2()local ft=fs:len()local fu=self.body.GM;local fv=((f8-fu/ft)*fs-fs:dot(aN)*aN)/fu;local eg=fu/(2*fu/ft-f8)local fw=fv:len()local f9=fv:normalize()local fx=eg*(1-fw)local fy=eg*(1+fw)local fz=fx*f9+self.body.center;local fA=fw<=1 and-fy*f9+self.body.center or nil;local fB=math.sqrt(eg*fu*(1-fw*fw))local fC=fA and 2*math.pi*math.sqrt(eg^3/fu)local fD=math.acos(fv:dot(fs)/(fw*ft))if fs:dot(aN)<0 then fD=-(fD-2*math.pi)end;local fE=math.acos((math.cos(fD)+fw)/(1+fw*math.cos(fD)))local fF=fE;if fF<0 then fF=fF+2*math.pi end;local fG=fF-fw*math.sin(fF)local fH=0;local fI=0;local fJ=0;if fC~=nil then fH=fG/(2*math.pi/fC)fI=fC-fH;fJ=fI+fC/2;if fD-math.pi>0 then fI=fH;fJ=fI+fC/2 end;if fJ>fC then fJ=fJ-fC end end;return{periapsis={position=fz,speed=fB/fx,circularOrbitSpeed=math.sqrt(fu/fx),altitude=fx-self.body.radius},apoapsis=fA and{position=fA,speed=fB/fy,circularOrbitSpeed=math.sqrt(fu/fy),altitude=fy-self.body.radius},currentVelocity=aN,currentPosition=cz,eccentricity=fw,period=fC,eccentricAnomaly=fE,meanAnomaly=fG,timeToPeriapsis=fI,timeToApoapsis=fJ}end;local function fK(fL)local fj=PlanetRef.BodyParameters(fL.planetarySystemId,fL.bodyId,fL.radius,fL.center,fL.GM)return setmetatable({body=fj},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fK(...)end})end;function Kinematics()local Kinematic={}local fM=30000000/3600;local fN=fM*fM;local fO=100;local function fP(aN)return 1/math.sqrt(1-aN*aN/fN)end;function Kinematic.computeAccelerationTime(fQ,fR,fS)local fT=fM*math.asin(fQ/fM)return(fM*math.asin(fS/fM)-fT)/fR end;function Kinematic.computeDistanceAndTime(fQ,fS,fU,fV,fW,fX)fW=fW or 0;fX=fX or 0;local fY=fQ<=fS;local fZ=fV*(fY and 1 or-1)/fU;local f_=-fX/fU;local g0=fZ+f_;if fY and g0<=0 or not fY and g0>=0 then return-1,-1 end;local g1,g2=0,0;if fZ~=0 and fW>0 then local fT=math.asin(fQ/fM)local g3=math.pi*(fZ/2+f_)local g4=fZ*fW;local g5=fM*math.pi;local aN=function(e4)local bF=(g3*e4-g4*math.sin(math.pi*e4/2/fW)+g5*fT)/g5;local g6=math.tan(bF)return fM*g6/math.sqrt(g6*g6+1)end;local g7=fY and function(e6)return e6>=fS end or function(e6)return e6<=fS end;g2=2*fW;if g7(aN(g2))then local g8=0;while math.abs(g2-g8)>0.5 do local e4=(g2+g8)/2;if g7(aN(e4))then g2=e4 else g8=e4 end end end;local g9=fQ;local ga=g2/fO;for gb=1,fO do local b0=aN(gb*ga)g1=g1+(b0+g9)*ga/2;g9=b0 end;if g2<2*fW then return g1,g2 end;fQ=g9 end;local fT=fM*math.asin(fQ/fM)local aP=(fM*math.asin(fS/fM)-fT)/g0;local gc=fN*math.cos(fT/fM)/g0;local Y=gc-fN*math.cos((g0*aP+fT)/fM)/g0;return Y+g1,aP+g2 end;function Kinematic.computeTravelTime(fQ,fR,Y)if Y==0 then return 0 end;if fR>0 then local fT=fM*math.asin(fQ/fM)local gc=fN*math.cos(fT/fM)/fR;return(fM*math.acos(fR*(gc-Y)/fN)-fT)/fR end;assert(fQ>0,'Acceleration and initial speed are both zero.')return Y/fQ end;function Kinematic.lorentz(aN)return fP(aN)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(Y)local gd=Y>100000;local aO=""if gd then aO=round(Y/1000/200,1).." SU"elseif Y<1000 then aO=round(Y,1).." M"else aO=round(Y/1000,1).." KM"end;return aO end;function getDistanceDisplayString2(Y)local gd=Y>100000;local aO=""if gd then aO=round(Y/1000/200,2).." SU"elseif Y<1000 then aO=round(Y,2).." M"else aO=round(Y/1000,2).." KM"end;return aO end;function getSpeedDisplayString(b0)return d(round(b0*3.6,0)+0.5).." km/h"end;function FormatTimeString(ge)local gf=0;local gg=0;local gh=0;if ge<60 then ge=d(ge)elseif ge<3600 then gf=d(ge/60)ge=d(ge%60)elseif ge<86400 then gg=d(ge/3600)gf=d(ge%3600/60)else gh=d(ge/86400)gg=d(ge%86400/60)end;if gh>0 then return gh.."d "..gg.."h "elseif gg>0 then return gg.."h "..gf.."m "elseif gf>0 then return gf.."m "..ge.."s"elseif ge>0 then return ge.."s"else return"0s"end end;function getMagnitudeInDirection(ca,e_)ca=vec3(ca)e_=vec3(e_):normalize()local aO=ca*e_;return aO.x+aO.y+aO.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"Q=nil;return true end;local gi=AtlasOrdered[AutopilotTargetIndex].index;local gj=atlas[0][gi]if gj.center then AutopilotTargetName=gj.name;Q=galaxyReference[0][gi]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=gj;for _,aN in pairs(galaxyReference[0])do if aN.name==CustomTarget.planetname then Q=aN;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(Q.center)_,AutopilotEndSpeed=Kep(Q):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local gk=LastMaxBrakeInAtmo/Q:getGravity(Q.center+vec3(0,0,1)*Q.radius):len()return gk end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(Q.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local b0=vec3(velocity):len()local gl,gm=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local K,L;if not TurnBurn then K,L=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else K,L=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,gn;if not TurnBurn then _,gn=GetAutopilotBrakeDistanceAndTime(b0)else _,gn=GetAutopilotTBBrakeDistanceAndTime(b0)end;local go=0;local gp=0;if AutopilotCruising or not Autopilot and b0>5 then gp=Kinematic.computeTravelTime(b0,0,AutopilotDistance)elseif K+gl<AutopilotDistance then go=AutopilotDistance-(K+gl)gp=Kinematic.computeTravelTime(8333.0556,0,go)else local gq=(AutopilotDistance-K)/gl;gl=AutopilotDistance-K;gm=gm*gq end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gp elseif AutopilotBraking then return gn elseif AutopilotCruising then return gp+gn else return gm+L+gp end end;function GetAutopilotBrakeDistanceAndTime(b0)if not a8 then RefreshLastMaxBrake()return Kinematic.computeDistanceAndTime(b0,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return Kinematic.computeDistanceAndTime(b0,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(b0)RefreshLastMaxBrake()return Kinematic.computeDistanceAndTime(b0,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local gr=-1;local gs=-1;if vBooster then gr=vBooster.distance()end;if hover then gs=hover.distance()end;if gr~=-1 and gs~=-1 then if gr<gs then return gr else return gs end elseif gr~=-1 then return gr elseif gs~=-1 then return gs else return-1 end end;function AboveGroundLevel()local gt=-1;local gu=a5;if telemeter_1 then gt=telemeter_1.getDistance()end;if gu~=-1 and gt~=-1 then if gu<gt then return gu else return gt end elseif gu~=-1 then return gu else return gt end end;function round(d4,gv)local gw=10^(gv or 0)return d(d4*gw+0.5)/gw end;function tablelength(gx)local gy=0;for _ in pairs(gx)do gy=gy+1 end;return gy end;function BeginProfile(gz)ProfileTimeStart=system.getTime()end;function EndProfile(gz)local gA=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gA;ProfileCount=ProfileCount+1;if gA>ProfileTimeMax then ProfileTimeMax=gA end;if gA<ProfileTimeMin then ProfileTimeMin=gA end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gB=ProfileTimeSum;local gC=ProfileTimeSum/ProfileCount;local gD=ProfileTimeMin;local gE=ProfileTimeMax;local gF=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gB,gC,gD,gE,gF))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gG=radar_1.getEntries()local gH=radar_1.getData()if#gG>0 then local gI=gH:find('identifiedConstructs":%[%]')if gI==nil and perisPanelID==nil then a1=1;ToggleRadarPanel()end;if gI~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;Z=e([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#gG)local gJ={}for aM,aN in pairs(gG)do if radar_1.hasMatchingTransponder(aN)==1 then gJ[#gJ+1]=aN end end;if#gJ>0 then local b7=15;Z=e([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],Z,b7)for aM,aN in pairs(gJ)do b7=b7+20;Z=e([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],Z,b7,radar_1.getConstructName(aN))end end else local gK;gK=gH:find('worksInEnvironment":false')if gK then Z=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else Z=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then a1=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local gL=j()if door and(gL>0 or gL==0 and a9<10000)then for _,aN in pairs(door)do aN.toggle()end end;if switch then for _,aN in pairs(switch)do aN.toggle()end end;if forcefield and(gL>0 or gL==0 and a9<10000)then for _,aN in pairs(forcefield)do aN.toggle()end end;if dbHud_1 then if not T then for aM,aN in pairs(b)do dbHud_1.setStringValue(aN,g(_G[aN]))end;for aM,aN in pairs(a)do dbHud_1.setStringValue(aN,g(_G[aN]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(gM)if gM=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local gN=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if gN then Y=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else Y=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then K,L=GetAutopilotBrakeDistanceAndTime(velMag)M,N=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else K,L=GetAutopilotTBBrakeDistanceAndTime(velMag)M,N=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(Y)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(K)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(L)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(M)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(N)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif gM=="oneSecond"then a6=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bj={}local ck=GetFlightStyle()DrawOdometer(bj,R,TotalDistanceTravelled,ck,S)CheckDamage(bj)a0=table.concat(bj,"")collectgarbage("collect")elseif gM=="fiveSecond"then a7=dbHud_1.getStringValue("SPBAutopilotTargetName")if a7~=nil and a7~=""and a7~="SatNavNotChanged"then local aO=json.decode(dbHud_1.getStringValue("SavedLocations"))if aO~=nil then _G["SavedLocations"]=aO;local bi=-1;local bh;for aM,aN in pairs(SavedLocations)do if aN.name and aN.name=="SatNav Location"then bi=aM;break end end;if bi~=-1 then bh=SavedLocations[bi]bi=-1;for aM,aN in pairs(atlas[0])do if aN.name and aN.name=="SatNav Location"then bi=aM;break end end;if bi>-1 then atlas[0][bi]=bh end;UpdateAtlasLocationsList()F=bh.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==a7 then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif gM=="msgTick"then local bj={}DisplayMessage(bj,"empty")F="empty"unit.stopTimer("msgTick")X=3 elseif gM=="animateTick"then Animated=true;Animating=false;V=0;W=0;unit.stopTimer("animateTick")elseif gM=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())a8=j()>0;y=0;C=0;x=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)a5=hoverDetectGround()local gO=system.getMouseDeltaX()local gP=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local gQ=velMag>8334;if not gQ and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=gQ;if a8 then if not ad then if velMag>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ad=true end else if velMag<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ad=false end end end;if BrakeIsOn then B=1 else B=0 end;a9=core.getAltitude()if a9==0 then a9=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bj={}HUDPrologue(bj)if showHud then updateHud(bj)else DisplayOrbitScreen(bj)DrawWarnings(bj)end;HUDEpilogue(bj)bj[#bj+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if F~="empty"then DisplayMessage(bj,F)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bj)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then V=screen_1.getMouseX()*2560;W=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(bj)if screen_1.getMouseState()==1 then CheckButtons()end;bj[#bj+1]=e([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],V,W)elseif system.isViewLocked()==0 then if o()==1 and E then if not Animating then V=V+gO;W=W+gP end;SetButtonContains()DrawButtons(bj)if not Animating and not Animated then local gR=table.concat(bj,"")bj={}bj[#bj+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"bj[#bj+1]=GalaxyMapHTML;bj[#bj+1]=gR;bj[#bj+1]="</body>"Animating=true;bj[#bj+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bj,"")system.setScreen(content)elseif Animated then local gR=table.concat(bj,"")bj={}bj[#bj+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"bj[#bj+1]=GalaxyMapHTML;bj[#bj+1]=gR;bj[#bj+1]="</body>"end;if not Animating then bj[#bj+1]=e([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],V,W)end else CheckButtons()V=0;W=0 end else V=V+gO;W=W+gP;Y=math.sqrt(V*V+W*W)if not E and o()==0 then if userControlScheme=="virtual joystick"then if V>0 and V>DeadZone then y=y-(V-DeadZone)*MouseXSensitivity elseif V<0 and V<DeadZone*-1 then y=y-(V+DeadZone)*MouseXSensitivity else y=0 end;if W>0 and W>DeadZone then x=x-(W-DeadZone)*MouseYSensitivity elseif W<0 and W<DeadZone*-1 then x=x-(W+DeadZone)*MouseYSensitivity else x=0 end elseif userControlScheme=="mouse"then V=0;W=0;x=(-utils.smoothstep(gP,-100,100)+0.5)*2*t;y=(-utils.smoothstep(gO,-100,100)+0.5)*2*u else V=0;W=0 end;CheckButtons()if Y>DeadZone then DrawCursorLine(bj)end else SetButtonContains()DrawButtons(bj)end;bj[#bj+1]=e([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],V,W)end;bj[#bj+1]=[[</svg></body>]]content=table.concat(bj,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>r then local gS=AlignToWorldVector(vec3(velocity),0.01)if a2 then autoRoll=true;if gS then ProgradeIsOn=false;s=true;BeginReentry()a2=false;a4=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if a8 then RetrogradeIsOn=false elseif velMag>r then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a2 then if j()==0 then s=true;BeginReentry()a2=false;a4=true else a2=false;ToggleAutopilot()end end;if a4 and a9<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a4=false end;if Autopilot and j()==0 then local K,L;if not TurnBurn then K,L=GetAutopilotBrakeDistanceAndTime(velMag)else K,L=GetAutopilotTBBrakeDistanceAndTime(velMag)end;K=K;L=L;local gT=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local gU=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local gV=getMagnitudeInDirection(gU,AutopilotShipUp)local gW=getMagnitudeInDirection(gU,AutopilotShipRight)local gX=-gW*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local gY=-gV*AutopilotDistance*velMag*TrajectoryAlignmentStrength;gT=AutopilotTargetCoords+-gX*vec3(AutopilotShipRight)+-gY*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(gT)-vec3(core.getConstructWorldPos())):len()local gZ=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(gZ)..'", "unit":""}')local g_=true;local h0=(Q.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-Q.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(h0)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then g_=AlignToWorldVector((gT-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then g_=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not g_ or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false elseif not p then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)p=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(h0-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and p then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false end;if AutopilotDistance<=K then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false end elseif AutopilotBraking then BrakeIsOn=true;B=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>G or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"F="Autopilot completed, orbit established"B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false;if CustomTarget~=nil then ProgradeIsOn=true;a2=true end end end elseif AutopilotCruising then if AutopilotDistance<=K then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if g_ then if not AutopilotRealigned then AutopilotTargetCoords=vec3(Q.center)+(AutopilotTargetOrbit+Q.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif g_ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not p then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)p=true;BrakeIsOn=false end end end end end;if D then autoRoll=true;local h1=0;local cz=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local h2=cz-vec3(core.getConstructWorldPos())local h3=vec3(h2):project_on(vec3(core.getConstructWorldOrientationForward())):len()local h4=vec3(h2):project_on(vec3(core.getConstructWorldOrientationRight())):len()local Y=math.sqrt(h3*h3+h4*h4)AlignToWorldVector(h2:normalize())local h5=40;local h6=Y<h5;local h7=100;local h8=utils.clamp((Y-h5)/2,10,h7)x=0;local g_=math.abs(y)<0.1;if g_ and velMag<h8 and not h6 then BrakeIsOn=false;h1=-20 else BrakeIsOn=true;h1=0 end;local bm=vec3(core.getConstructWorldOrientationForward())local bn=vec3(core.getConstructWorldOrientationRight())local bo=vec3(core.getWorldVertical())local bp=getPitch(bo,bm,bn)local h9=1.0;if math.abs(h1-bp)>h9 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(h1-bp)local ha=pitchPID:get()x=ha end end;local cS=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cy=unit.getClosestPlanetInfluence()>0;local cl=a9;local hb=HoldAltitude-cl;local hc=500+velMag;local h1=(utils.smoothstep(hb,-hc,hc)-0.5)*2*MaxPitch;if not AltitudeHold then h1=0 end;if LockPitch~=nil then if cy then h1=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local hd=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hd then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hd)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not s then h1=-80;if j()>0.02 then F="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;h1=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then s=false;Reentry=false;autoRoll=autoRollPreference end end;local he=x;if velMag>r then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cc=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cc)local hf=cc:len()-cc:project_on(cS):len()local b1=LastMaxBrakeInAtmo;local cQ=velocity.x*cS.x+velocity.y*cS.y+velocity.z*cS.z;local hg=velocity:len()-math.abs(cQ)local hh=vec3(core.getWorldAirFrictionAcceleration())if b1~=nil then K,L=Kinematic.computeDistanceAndTime(hg,0,n(),0,0,b1+(hh:len()-hh:project_on(cS):len())*n())else K,L=Kinematic.computeDistanceAndTime(hg,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hf<=K then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hf>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hf end;x=he;local bm=vec3(core.getConstructWorldOrientationForward())local bn=vec3(core.getConstructWorldOrientationRight())local bo=vec3(core.getWorldVertical())local gt=-1;local bp=getPitch(bo,bm,bn)local h9=0.1;if BrakeLanding then h1=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local cQ=velocity.x*cS.x+velocity.y*cS.y+velocity.z*cS.z;gt=a5;if gt>-1 then if math.abs(h1-bp)<h9 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)U=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-cS)<0.99 then BrakeIsOn=true elseif cQ<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a3 then if h1<20 then AutoTakeoff=false;if not a3 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;a3=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif a3 and j()==0 and a9>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(h1-bp)>h9 then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(h1-bp)local ha=pitchPID:get()x=x+ha end end;G=orbit.eccentricity;if antigrav and not ExternalAGG and a9<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local hi=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)hi=math.max(hi,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hj=utils.clamp(w+x+system.getControlDeviceForwardInput(),-1,1)local hk=utils.clamp(z+C+system.getControlDeviceYawInput(),-1,1)local hl=utils.clamp(A+y-system.getControlDeviceLeftRightInput(),-1,1)local hm=B;local hn=vec3(core.getWorldVertical())local ho=vec3(core.getConstructWorldOrientationUp())local hp=vec3(core.getConstructWorldOrientationForward())local hq=vec3(core.getConstructWorldOrientationRight())local hr=vec3(core.getWorldVelocity())local hs=vec3(core.getWorldVelocity()):normalize()local ht=getRoll(hn,hp,hq)local hu=math.abs(ht)local hv=utils.sign(ht)local j=j()local hw=vec3(core.getWorldAngularVelocity())local hx=hj*pitchSpeedFactor*hq+hk*rollSpeedFactor*hp+hl*yawSpeedFactor*ho;if hn:len()>0.01 and j>0.0 or ProgradeIsOn then local hy=1.0;if autoRoll==true and hu>hy and hk==0 then local hz=utils.clamp(0,hu-30,hu+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hz-ht)local hA=rollPID:get()hx=hx+hA*hp end end;if hn:len()>0.01 and j>0.0 then local hB=20.0;if turnAssist==true and hu>hB and hj==0 and hl==0 then local hC=turnAssistFactor*0.1;local hD=turnAssistFactor*0.025;local hE=(hu-hB)/(180-hB)*180;local hF=0;if hE<90 then hF=hE/90 elseif hE<180 then hF=(180-hE)/90 end;hF=hF*hF;local hG=-hv*hD*(1.0-hF)local hH=hC*hF;hx=hx+hH*hq+hG*ho end end;local hI=1;local hJ=0;local hK=1;local hL=hi*(hx-hw)local hM=vec3(core.getWorldAirFrictionAngularAcceleration())hL=hL-hM;Nav:setEngineTorqueCommand('torque',hL,hI,'airfoil','','',hK)local hN=-hm*(brakeSpeedFactor*hr+brakeFlatFactor*hs)Nav:setEngineForceCommand('brake',hN)local hO=''local hP=vec3()local hQ=false;local hR='thrust analog longitudinal'local hS=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if hS==axisCommandType.byThrottle then local hT=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hR,axisCommandId.longitudinal)Nav:setEngineForceCommand(hR,hT,hI)elseif hS==axisCommandType.byTargetSpeed then local hT=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)hO=hO..' , '..hR;hP=hP+hT;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then hQ=true end end;local hU='thrust analog lateral'local hV=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if hV==axisCommandType.byThrottle then local hW=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hU,axisCommandId.lateral)Nav:setEngineForceCommand(hU,hW,hI)elseif hV==axisCommandType.byTargetSpeed then local hX=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)hO=hO..' , '..hU;hP=hP+hX end;local hY='thrust analog vertical'local hZ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if hZ==axisCommandType.byThrottle then local h_=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hY,axisCommandId.vertical)if U~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(hY,h_,hI,'airfoil','ground','',hK)else Nav:setEngineForceCommand(hY,vec3(),hI)Nav:setEngineForceCommand('airfoil vertical',h_,hI,'airfoil','','',hK)Nav:setEngineForceCommand('ground vertical',h_,hI,'ground','','',hK)end elseif hZ==axisCommandType.byTargetSpeed then if U==0 then Nav:setEngineForceCommand('hover',vec3(),hI)end;local i0=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)hO=hO..' , '..hY;hP=hP+i0 end;if hP:len()>constants.epsilon then if B~=0 or hQ or math.abs(hs:dot(hp))<0.95 then hO=hO..', brake'end;Nav:setEngineForceCommand(hO,hP,hJ,'','','',hK)end;Nav:setBoosterCommand('rocket_engine')if J and not VanillaRockets then local b0=vec3(core.getVelocity()):len()local i1=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local i2=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if b0*3.6>i2*(1-i1)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b0*3.6<i2*(1-i1)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local i3=unit.getThrottle()local h8=i3/100;if j==0 then h8=h8*MaxGameVelocity;if b0>=h8*(1-i1)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b0<h8*(1-i1)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else h8=h8*ReentrySpeed/3.6;if b0>=h8*(1-i1)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b0<h8*(1-i1)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,aO=coroutine.resume(beginSetup)if aO then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(i4)if i4=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and a5==-1 and(j()>0 or a9<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>r then F="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif i4=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif i4=="forward"then w=w-1 elseif i4=="backward"then w=w+1 elseif i4=="left"then z=z-1 elseif i4=="right"then z=z+1 elseif i4=="yawright"then A=A-1 elseif i4=="yawleft"then A=A+1 elseif i4=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif i4=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif i4=="up"then U=U+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif i4=="down"then U=U-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif i4=="groundaltitudeup"then OldButtonMod=H;OldAntiMod=I;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+I;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+I end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+H else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif i4=="groundaltitudedown"then OldButtonMod=H;OldAntiMod=I;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-H else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif i4=="option1"then IncrementAutopilotTargetIndex()q=false elseif i4=="option2"then DecrementAutopilotTargetIndex()q=false elseif i4=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;q=false;ToggleWidgets()elseif i4=="option4"then ToggleAutopilot()q=false elseif i4=="option5"then ToggleLockPitch()q=false elseif i4=="option6"then ToggleAltitudeHold()q=false elseif i4=="option7"then wipeSaveVariables()q=false elseif i4=="option8"then ToggleFollowMode()q=false elseif i4=="option9"then if gyro~=nil then gyro.toggle()ac=gyro.getState()==1 end;q=false elseif i4=="lshift"then if system.isViewLocked()==1 then E=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then E=true;Animated=false;Animating=false end elseif i4=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif i4=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif i4=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not J then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;J=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;J=false end elseif i4=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif i4=="speedup"then if not E then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif i4=="speeddown"then if not E then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif i4=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(i4)if i4=="forward"then w=0 elseif i4=="backward"then w=0 elseif i4=="left"then z=0 elseif i4=="right"then z=0 elseif i4=="yawright"then A=0 elseif i4=="yawleft"then A=0 elseif i4=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif i4=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif i4=="up"then U=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif i4=="down"then U=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif i4=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then I=OldAntiMod end;if AltitudeHold then H=OldButtonMod end;q=false elseif i4=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then I=OldAntiMod end;if AltitudeHold then H=OldButtonMod end;q=false elseif i4=="lshift"then if system.isViewLocked()==1 then E=false;V=0;W=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then E=false;Animated=false;Animating=false end elseif i4=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif i4=="lalt"then if o()==0 and freeLookToggle then if q then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else q=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(i4)if i4=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+I;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+I end;I=I*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+H;H=H*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif i4=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;I=I*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-H;H=H*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif i4=="speedup"then if not E then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif i4=="speeddown"then if not E then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(bj,i5)if i5~="empty"then bj[#bj+1]=[[<text class="msg" x="50%%" y="310" >]]for i6 in string.gmatch(i5,"([^\n]+)")do bj[#bj+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],i6)end;bj[#bj+1]=[[</text>]]end;if X~=0 then unit.setTimer("msgTick",X)X=0 end end;function updateDistance()local aV=system.getTime()local velocity=vec3(core.getWorldVelocity())local cv=vec3(velocity):len()local i7=aV-ab;if cv>1.38889 then cv=cv/1000;local i8=cv*(aV-ab)TotalDistanceTravelled=TotalDistanceTravelled+i8;R=R+i8 end;S=S+i7;TotalFlightTime=TotalFlightTime+i7;ab=aV end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
