name: ButtonsHud - Dimencia and Archaegeo v4.73 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement. 
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.73;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;AntigravTargetAltitude=nil;CoreAltitude=core.getAltitude()ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;AntigravJustToggledOn=false;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=0;local S=k()local T=16;local U=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","LandingGearGroundHeight"}AutoVariables={"EmergencyWarp","HasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo","AntigravJustToggledOn"}if dbHud then local V=dbHud.hasKey;if not useTheseSettings then for W,X in pairs(SaveableVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end end;for W,X in pairs(AutoVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end;if A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;R=S-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for W in pairs(ElementsID)do local a0=h(ElementsID[W])if a0=="landing gear"then HasGear=true end;if a0=="dynamic core"then local a1=e(ElementsID[W])if a1>10000 then T=128 elseif a1>1000 then T=64 elseif a1>150 then T=32 end end;H=H+e(ElementsID[W])if a0=="atmospheric fuel-tank"or a0=="space fuel-tank"or a0=="rocket fuel-tank"then local a1=e(ElementsID[W])local a2=j(ElementsID[W])local a3=0;local a4=system.getTime()if a0=="atmospheric fuel-tank"then local a5=400;local a6=35.03;if a1>10000 then a5=51200;a6=5480 elseif a1>1300 then a5=6400;a6=988.67 elseif a1>150 then a5=1600;a6=182.67 end;a3=a2-a6;if fuelTankOptimizationAtmo>0 then a5=a5+a5*fuelTankOptimizationAtmo*0.05 end;if a3>a5 then a5=a3 end;E[#E+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="rocket fuel-tank"then local a5=320;local a6=173.42;if a1>65000 then a5=40000;a6=25740 elseif a1>6000 then a5=5120;a6=4720 elseif a1>700 then a5=640;a6=886.72 end;a3=a2-a6;if fuelTankOptimizationRocket>0 then a5=a5+a5*fuelTankOptimizationRocket*0.05 end;if a3>a5 then a5=a3 end;G[#G+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="space fuel-tank"then local a5=2400;local a6=182.67;if a1>10000 then a5=76800;a6=5480 elseif a1>1300 then a5=9600;a6=988.67 end;a3=a2-a6;if fuelTankOptimizationSpace>0 then a5=a5+a5*fuelTankOptimizationSpace*0.05 end;if a3>a5 then a5=a3 end;F[#F+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,X in pairs(door)do X.deactivate()end end;if forcefield then for _,X in pairs(forcefield)do X.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a7,a8)if a7==nil then a7=core.g()end;a7=round(a7,5)if a8~=nil and a8 or(D==nil or D~=a7)then local a9=c(unit.getData()).maxBrake;if a9~=nil then LastMaxBrake=a9 end;if f()>0 then LastMaxBrakeInAtmo=a9 end;D=a7 end end;function MakeButton(aa,ab,ac,ad,ae,af,ag,ah,ai)local aj={enableName=aa,disableName=ab,width=ac,height=ad,x=ae,y=af,toggleVar=ag,toggleFunction=ah,drawCondition=ai,hovered=false}table.insert(r,aj)return aj end;function UpdateAtlasLocationsList()AtlasOrdered={}for W,X in pairs(atlas[0])do table.insert(AtlasOrdered,{name=X.name,index=W})end;local function ak(al,am)return al.name<am.name end;table.sort(AtlasOrdered,ak)end;function AddLocationsToAtlas()for W,X in pairs(SavedLocations)do table.insert(atlas[0],X)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a0=planet.name..". "..#SavedLocations;if radar_1 then local an,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if an~=nil and an~=""then a0=a0 .." "..radar_1.getConstructName(an)end end;local ao={position=position,name=a0,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=ao;table.insert(atlas[0],ao)UpdateAtlasLocationsList()MsgText="Location saved as "..a0 else MsgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local ap=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then ap=W end end;if ap>-1 then table.remove(atlas[0],ap)end;ap=-1;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then MsgText=X.name.." saved location cleared"ap=W;break end end;if ap~=-1 then table.remove(SavedLocations,ap)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(aq)aq[#aq+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ar,as,ae,af,ac,ad)if ar>ae and ar<ae+ac and as>af and as<af+ad then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not GearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=CoreAltitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(aq)local at=0;p=""currentConstructMass=k()local au=H;local av=0;local aw=100;local ax=0;local ay=0;local az=0;local aA=""for W in pairs(ElementsID)do local a1=0;local aB=0;aB=e(ElementsID[W])a1=g(ElementsID[W])av=av+a1;if a1<aB then if a1==0 then ay=ay+1 else ax=ax+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[W]))local ae=position.x-T;local af=position.y-T;local aC=position.z-T;table.insert(m,core.spawnArrowSticker(ae,af,aC+1,"down"))table.insert(m,core.spawnArrowSticker(ae,af,aC+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ae+1,af,aC,"north"))table.insert(m,core.spawnArrowSticker(ae+1,af,aC,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ae-1,af,aC,"south"))table.insert(m,core.spawnArrowSticker(ae-1,af,aC,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ae,af-1,aC,"east"))table.insert(m,core.spawnArrowSticker(ae,af-1,aC,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ae,af+1,aC,"west"))table.insert(m,core.spawnArrowSticker(ae,af+1,aC,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[W])end elseif I and#m>0 and m[11]==ElementsID[W]then for aD in pairs(m)do core.deleteSticker(m[aD])end;m={}end end;at=a(av*100/au)if currentConstructMass<S then aw=math.ceil(100*(currentConstructMass-updateMass())/R)S=currentConstructMass end;if aw<100 or at<100 then aq[#aq+1]=[[<g class="pbright txt">]]if aw<100 then az=a(aw*2.55)aA=b("rgb(%d,%d,%d)",255-az,az,0)aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],aA,aw)end;az=a(at*2.55)aA=b("rgb(%d,%d,%d)",255-az,az,0)if at<100 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aA,at)if ay>0 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aA,ay,ax)elseif ax>0 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aA,ax)end end;aq[#aq+1]=[[<\g>]]end end;function DrawCursorLine(aq)local aE=a(utils.clamp(Distance/(u/4)*255,0,255))aq[#aq+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aE,a(PrimaryG+0.5)-aE,a(PrimaryB+0.5)-aE)end;function getPitch(aF,aG,am)local aH=aF:cross(am):normalize_inplace()local aI=math.acos(utils.clamp(aH:dot(-aG),-1,1))*constants.rad2deg;if aH:cross(-aG):dot(am)<0 then aI=-aI end;return aI end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 elseif A then if B then for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,d(nil))end;for W,X in pairs(AutoVariables)do if X~="SavedLocations"then dbHud.setStringValue(X,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe"B=true end end end;function CheckButtons()for _,X in pairs(r)do if X.hovered then X.toggleFunction()X.hovered=false end end end;function SetButtonContains()local ae=SimulatedX+u/2;local af=SimulatedY+v/2;for _,X in pairs(r)do X.hovered=Contains(ae,af,X.x,X.y,X.width,X.height)end end;function DrawButton(aq,aJ,hover,ae,af,aK,aL,aM,aN,aO,aP)if type(aO)=="function"then aO=aO()end;if type(aP)=="function"then aP=aP()end;aq[#aq+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ae,af,aK,aL)if aJ then aq[#aq+1]=b("%s'",aM)else aq[#aq+1]=aN end;if hover then aq[#aq+1]=" style='stroke:white; stroke-width:2'"else aq[#aq+1]=" style='stroke:black; stroke-width:1'"end;aq[#aq+1]="></rect>"aq[#aq+1]=b("<text x='%f' y='%f' font-size='24' fill='",ae+aK/2,af+aL/2+5)if aJ then aq[#aq+1]="black"else aq[#aq+1]="white"end;aq[#aq+1]="' text-anchor='middle' font-family='Montserrat'>"if aJ then aq[#aq+1]=b("%s</text>",aO)else aq[#aq+1]=b("%s</text>",aP)end end;function DrawButtons(aq)local aQ="rgb(50,50,50)'"local aR="rgb(210,200,200)"local aS=DrawButton;for _,X in pairs(r)do local ab=X.disableName;local aa=X.enableName;if type(ab)=="function"then ab=ab()end;if type(aa)=="function"then aa=aa()end;if not X.drawCondition or X.drawCondition()then aS(aq,X.toggleVar(),X.hovered,X.x,X.y,X.width,X.height,aR,aQ,ab,aa)end end end;function DrawTank(aq,Q,ae,aT,aU,aV,aW,aX)local aY=1;local aZ=2;local a_=3;local b0=4;local b1=5;local b2=6;local b3=""local b4=0;local b5=fuelY;local b6=fuelY+10;if l()==1 then b5=b5-50;b6=b6-50 end;aq[#aq+1]=[[<g class="pdim txtfuel">]]if aU=="ATMO"then b3="atmofueltank"elseif aU=="SPACE"then b3="spacefueltank"else b3="rocketfueltank"end;b4=_G[b3 .."_size"]if#aV>0 then for i=1,#aV do local a0=string.sub(aV[i][aZ],1,12)local b7=0;for aD=1,b4 do if aV[i][aZ]==json.decode(unit[b3 .."_"..aD].getData()).name then b7=aD;break end end;if Q or aW[i]==nil or aX[i]==nil then local b8=0;local b9=0;local ba=0;local bb=0;local a4=system.getTime()if b7~=0 then aX[i]=json.decode(unit[b3 .."_"..b7].getData()).percentage;aW[i]=json.decode(unit[b3 .."_"..b7].getData()).timeLeft;if aW[i]=="n/a"then aW[i]=0 end else ba=j(aV[i][aY])-aV[i][b0]b8=aV[i][a_]aX[i]=a(0.5+ba*100/b8)b9=aV[i][b1]bb=aV[i][b2]if b9<=ba then aW[i]=0 else aW[i]=a(0.5+ba/((b9-ba)/(a4-bb)))end;aV[i][b1]=ba;aV[i][b2]=a4 end end;if a0==aT then a0=b("%s %d",aU,i)end;if b7==0 then a0=a0 .." *"end;local bc;if aW[i]==0 then bc="n/a"else bc=FormatTimeString(aW[i])end;if aX[i]~=nil then local az=a(aX[i]*2.55)local aA=b("rgb(%d,%d,%d)",255-az,az,0)local bd=""if bc~="n/a"and aW[i]<120 or aX[i]<5 then if Q then bd=[[class="red"]]end end;aq[#aq+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ae,b5,bd,a0,ae,b6,aA,aX[i],bc)b5=b5+30;b6=b6+30 end end end;aq[#aq+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aI=-math.deg(math.atan(velocity.y,velocity.z))+180;aI=aI-90;if aI<0 then aI=360+aI end;if aI>180 then aI=-180+aI-180 end;return-aI end;function getRelativeYaw(velocity)velocity=vec3(velocity)local be=math.deg(math.atan(velocity.y,velocity.x))-90;if be<-180 then be=360+be end;return be end;function AlignToWorldVector(bf,bg)if bg==nil then bg=t end;bf=vec3(bf):normalize()local bh=vec3(core.getConstructWorldOrientationForward())-bf;local bi=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationRight())*s;local bj=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationUp())*s;YawInput2=YawInput2-(bi+(bi-n)*DampingMultiplier)PitchInput2=PitchInput2+bj+(bj-o)*DampingMultiplier;n=bi;o=bj;if math.abs(bi)<bg and math.abs(bj)<bg then return true end;return false end;function getAPEnableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a0==nil then a0="None"end;return"Engage Autopilot: "..a0 end;function getAPDisableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name end;if a0==nil then a0="None"end;return"Disable Autopilot: "..a0 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()AntigravJustToggledOn=false else AntigravTargetAltitude=CoreAltitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()AntigravJustToggledOn=true;antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoroll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bk=50;local bl=260;local bm=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bl,bk,u/2-bl/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bl,bk,u/2-bl/2-50-bm.width,v/2-bk+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bl,bk,u/2-bl/2+bm.width+50,v/2-bk+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bn=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bn.height,bn.x+bn.width+30,bn.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,bn.height,bn.x-200-30,bn.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bk=60;bl=300;local ae=10;local af=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bl,bk,ae,af,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bl,bk,ae+bl+20,af,function()return AltitudeHold end,ToggleAltitudeHold)af=af+bk+20;MakeButton("Engage Autoland","Disable Autoland",bl,bk,ae,af,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bl,bk,ae+bl+20,af,function()return AutoTakeoff end,ToggleAutoTakeoff)af=af+bk+20;MakeButton("Show Orbit Display","Hide Orbit Display",bl,bk,ae,af,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bl,bk,ae+bl+20,af,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)af=af+bk+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bl,bk,ae,af,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bl,bk,ae+bl+20,af,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)af=af+bk+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bl,bk,ae,af,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bl,bk,ae+bl+20,af,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)af=af+bk+20;MakeButton("Enable AGG","Disable AGG",bl,bk,ae,af,function()return AntigravTargetAltitude~=nil end,ToggleAntigrav,function()return antigrav~=nil end)af=af+bk+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bl*2,bk,ae,af,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(aq)local bo=CoreAltitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local bp=vec3(core.getWorldVertical())local bq=vec3(core.getConstructWorldOrientationForward())local br=vec3(core.getConstructWorldOrientationRight())local aI=getPitch(bp,bq,br)local bs=getRoll(bp,bq,br)local bt=bs;local bu=aI;local bv=f()local bw=a(unit.getThrottle())local bx=speed*3.6;local by=unit.getAxisCommandValue(0)local bz=GetFlightStyle()if bv==0 then if speed>5 then aI=getRelativePitch(velocity)bs=getRelativeYaw(velocity)else aI=0;bs=0 end;bottomText="YAW"end;aq[#aq+1]=LastOdometerOutput;aq[#aq+1]=p;aq[#aq+1]=RadarMessage;if U%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(aq,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(aq,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(aq,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;U=0 end;U=U+1;DrawVerticalSpeed(aq,bo,bv)if l()==0 then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(aq,bu,bt,bv,centerX,centerY,"ROLL")DrawPrograde(aq,bu,bt,bv,velocity,speed,centerX,centerY)DrawAltitudeDisplay(aq,bo,bv)else DrawArtificialHorizon(aq,aI,bs,bv,centerX,centerY,"YAW")DrawPrograde(aq,bu,bt,bv,velocity,speed,centerX,centerY)end end end;DrawThrottle(aq,bz,bw,by)DrawSpeed(aq,bx)DrawWarnings(aq)DisplayOrbitScreen(aq)if screen_2 then local bA=vec3(core.getConstructWorldPos())local ae=960+bA.x/MapXRatio;local af=450+bA.y/MapYRatio;screen_2.moveContent(YouAreHere,(ae-80)/19.2,(af-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(aq)local bB=rgb;local bC=Z;local bD=rgb;local bE=Z;if IsInFreeLook()and not brightHud then bB=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bC=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;aq[#aq+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bB,bB,bD,bD,bC,bC,bE,bE)end;function HUDEpilogue(aq)aq[#aq+1]="</svg>"end;function DrawSpeed(aq,bx)local bF=altMeterY+40;local bG=altMeterX;aq[#aq+1]=[[<g class="pdim txt txtend">]]if l()==1 then bF=75 end;aq[#aq+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bG,bF,a(bx))end;function DrawOdometer(aq,TotalDistanceTrip,TotalDistanceTravelled,bz,bH)local bI=1240;local bJ=55;local bK=65;local bv=f()local a7=core.g()local bL=0;local bM=0;refreshLastMaxBrake(a7)maxThrust=Nav:maxForceForward()C=k()local bN=vec3(core.getWorldAcceleration()):len()/9.80665;if a7>0.1 then bM=C*a7;bL=maxThrust/a7 end;aq[#aq+1]=[[<g class="pdim txt txtend">]]if l()==1 then bI=1120;bJ=55;bK=65 elseif bv>0 then aq[#aq+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bv)end;aq[#aq+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bI,bJ,bI,bK,a7/9.80665,bI,bJ+20,bI,bK+20,bN)aq[#aq+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then aq[#aq+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bH),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bz)if a7>0.1 then aq[#aq+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bL/1000,bM/1000)else aq[#aq+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else aq[#aq+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bz)end;aq[#aq+1]="</g>"end;function DrawThrottle(aq,bz,bw,by)local b5=centerY+65;local b6=centerY+75;if l()==1 then b5=55;b6=65 end;local bO="CRUISE"local unit="km/h"local bP=by;if bz=="TRAVEL"or bz=="AUTOPILOT"then bO="THROT"unit="%"bP=bw;local bQ="dim"if bw<0 then bQ="red"end;aq[#aq+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bQ,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(bw),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;aq[#aq+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,b5,bO,centerX-150,b6,bP,unit)end;function DrawVerticalSpeed(aq,bo,bv)if bo<200000 and bv==0 or bo and bv>0 then local velocity=vec3(core.getWorldVelocity())local bR=vec3(core.getWorldVertical())*-1;local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;local bT=0;if math.abs(bS)>1 then bT=45*math.log(math.abs(bS),10)if bS<0 then bT=-bT end end;aq[#aq+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bS),a(bT))end end;function DrawArtificialHorizon(aq,bu,bt,bv,centerX,centerY,bottomText)local bU=circleRad;if bU>0 then local bV=a(bu)local bW=0;local bX=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bt,centerX,centerY)aq[#aq+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bU-1,centerX,centerY)aq[#aq+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bV-30-bV%5+0.5),a(bV+30+bV%5+0.5),5 do if i%10==0 then bW=30 elseif i%5==0 then bW=20 end;local af=centerY+-i*5+bu*5;if bW==30 then bX=b([[%s M %d %f h %d]],bX,centerX-15,af,bW)else bX=b([[%s M %d %f h %d]],bX,centerX-10,af,bW)end end;aq[#aq+1]=bX..[["/>]]local bY="PITCH"if bottomText=="YAW"then bY="REL PITCH"end;if bu>90 and bv==0 then bu=90-(bu-90)elseif bu<-90 and bv==0 then bu=-90-(bu+90)end;aq[#aq+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)aq[#aq+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bU,centerX,centerY,centerX-bU,centerY+bU*bu/20,bU*9,bU*2,-1*bt,centerX,centerY)aq[#aq+1]="</g>"aq[#aq+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-circleRad-20,bY,centerX,centerY-circleRad-10,bV)end end;function DrawAltitudeDisplay(aq,bo,bv)if bo<200000 and bv==0 or bo and bv>0 then local bZ=altMeterX;local b_=altMeterY;local c0=78;local c1=19;table.insert(aq,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],bZ-1,b_-4,c0+2,c1+6,bZ+1,b_-1,c0-4,c1))local ap=0;local c2=1;local c3=0;while ap<6 do local c4=11;local c5=16;local c6=9;local c7=14;local bd="altsm"if ap>2 then c5=c5+3;c4=c4+2;c7=c7+2;c6=c6-6;bd="altbig"end;local c8=bo/c2%10;local c9=a(c8)local ca=a((c9+1)%10)local cb=c3;if ap==0 then cb=c8-c9 end;local cc=c5*(cb-1)local cd=cc+c5;local ae=bZ+c6+(6-ap)*c4;local af=b_+c7;table.insert(aq,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bd,ae,af+cc,ca,ae,af+cd,c9))ap=ap+1;c2=c2*10;if c9==9 then c3=cb else c3=0 end end;table.insert(aq,[[</g></g>]])end end;function DrawPrograde(aq,bu,bt,bv,velocity,speed,centerX,centerY)if bv==0 and speed>5 then local bU=circleRad;local ce=20;local cf=20;local cg=getRelativePitch(velocity)local ch=getRelativeYaw(velocity)local ci=-ch/cf*bU;local cj=cg/ce*bU;local ae=centerX+ci;local af=centerY+cj;local ck=math.sqrt(ci^2+cj^2)if ck<bU then aq[#aq+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ae,af)else local bT=math.atan(cj,ci)local cl=centerX+bU*math.cos(bT)local cm=centerY+bU*math.sin(bT)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',cl,cm)end end end;function DrawWarnings(aq)aq[#aq+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)aq[#aq+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then aq[#aq+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]aq[#aq+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]aq[#aq+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cn=960;local co=860;local cp=900;local cq=930;local cr=960;local cs=200;local ct=150;local cu=960;if l()==1 then co=135;cp=155;cq=175;cs=115;ct=95 end;if BrakeIsOn then aq[#aq+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cn,co)end;if GyroIsOn then aq[#aq+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cn,cu)end;if GearExtended then if HasGear then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cn,cp)else aq[#aq+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cn,cp)end;aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cn,cq,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cn,cr)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],cn,cs,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cn,cs,AutopilotStatus)elseif FollowMode then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cn,cs)elseif AltitudeHold then if AutoTakeoff then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cn,cs,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then aq[#aq+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cn,cs+50)end else aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cn,cs,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cn,cs)end;if BrakeLanding then if StrongBrakes then aq[#aq+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cn,cs)else aq[#aq+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cn,cs)end end;if TurnBurn then aq[#aq+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cn,ct)end;if VectorToTarget then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cn,ct,VectorStatus)end;aq[#aq+1]="</g>"end;function DisplayOrbitScreen(aq)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cv=75;local cw=0;local cx=250;local cy=4;cw=cw+cy;local cz=15;local ae=cv+cx+cv/2+cy;local af=cw+cx/2+5+cy;local cA,cB,cC,cD;cA=cx/4;cD=0;aq[#aq+1]=[[<g class="pbright txtorb txtmid">]]aq[#aq+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cx+cv*2,cx+cw,cy,cy)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cC=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cA*2)cB=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cC*(1-orbit.eccentricity)cD=cA-orbit.periapsis.altitude/cC-planet.radius/cC;local cE=""if orbit.periapsis.altitude<=0 then cE='redout'end;aq[#aq+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cE,cv+cx/2+cD+cy,cw+cx/2+cy,cA,cB)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cv+cx/2+cy,cw+cx/2+cy,planet.radius/cC)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then aq[#aq+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae-35,af-5,cv+cx/2+cA+cD,af-5)aq[#aq+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ae,af)af=af+cz;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.apoapsis.altitude))af=af+cz;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToApoapsis))af=af+cz;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.apoapsis.speed))end;af=cw+cx/2+5+cy;ae=cv-cv/2+10+cy;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then aq[#aq+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae+35,af-5,cv+cx/2-cA+cD,af-5)aq[#aq+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ae,af)af=af+cz;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.periapsis.altitude))af=af+cz;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToPeriapsis))af=af+cz;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.periapsis.speed))end;aq[#aq+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cv+cx/2+cy,20+cy,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cF=orbit.timeToApoapsis/orbit.period*2*math.pi;local cG=cA*math.cos(cF)local cH=cB*math.sin(cF)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cv+cx/2+cG+cD+cy,cw+cx/2+cH+cy)end;aq[#aq+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for W,X in pairs(atlas[0])do if w==nil or X.center.x<w then w=X.center.x end;if x==nil or X.center.x>x then x=X.center.x end;if y==nil or X.center.y<y then y=X.center.y end;if z==nil or X.center.y>z then z=X.center.y end end;GalaxyMapHTML=""local cI=1.1*(x-w)/1920;local cJ=1.4*(z-y)/1080;for W,X in pairs(atlas[0])do local ae=960+X.center.x/cI;local af=540+X.center.y/cJ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="'..X.radius/cI*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(X.name,"Moon")and not string.match(X.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af+X.radius/cI*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..X.name.."</text>"end end;local bA=vec3(core.getConstructWorldPos())local ae=960+bA.x/cI;local af=540+bA.y/cJ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cI;MapYRatio=cJ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bA=vec3(core.getConstructWorldPos())local ae=960+bA.x/cI;local af=540+bA.y/cJ;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ae-80)/19.20,(af-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cK(cL)return type(cL)=='number'end;local function cM(cL)return type(tonumber(cL))=='number'end;local function cN(cO)return type(cO)=='table'end;local function cP(cQ)return type(cQ)=='string'end;local function cR(X)return cN(X)and cK(X.x and X.y and X.z)end;local function cS(cT)return cN(cT)and cK(cT.latitude and cT.longitude and cT.altitude and cT.bodyId and cT.systemId)end;local cU=math.pi/180;local cV=180/math.pi;local cW=1e-10;local cX=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cY='::pos{'..cX..','..cX..','..cX..','..cX..','..cX..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local cZ=utils.clamp;local function c_(d0,d1)if d0==0 then return math.abs(d1)<1e-09 end;if d1==0 then return math.abs(d0)<1e-09 end;return math.abs(d0-d1)<math.max(math.abs(d0),math.abs(d1))*cW end;local function d2(cL)local Y=string.gsub(string.reverse(b('%.4f',cL)),'^0*%.?','')return Y==''and'0'or string.reverse(Y)end;local function d3(d4)if cR(d4)then return b('{x=%.3f,y=%.3f,z=%.3f}',d4.x,d4.y,d4.z)end;if cN(d4)and not getmetatable(d4)then local d5={}local d6=next(d4)if type(d6)=='nil'or d6==1 then d5=d4 else for W,X in pairs(d4)do local bP=d3(X)if type(W)=='number'then table.insert(d5,b('[%s]=%s',W,bP))else table.insert(d5,b('%s=%s',W,bP))end end end;return b('{%s}',table.concat(d5,','))end;if cP(d4)then return b("'%s'",d4:gsub("'",[[\']]))end;return tostring(d4)end;local d7={}d7.__index=d7;d7.__tostring=function(d4,d8)local d9={}for W in pairs(d4)do table.insert(d9,W)end;table.sort(d9)local d5={}for _,W in ipairs(d9)do local bP=d3(d4[W])if type(W)=='number'then table.insert(d5,b('[%s]=%s',W,bP))else table.insert(d5,b('%s=%s',W,bP))end end;if d8 then return b('%s%s',d8,table.concat(d5,',\n'..d8))end;return b('{%s}',table.concat(d5,','))end;d7.__eq=function(da,db)return da.planetarySystemId==db.planetarySystemId and da.bodyId==db.bodyId and c_(da.radius,db.radius)and c_(da.center.x,db.center.x)and c_(da.center.y,db.center.y)and c_(da.center.z,db.center.z)and c_(da.GM,db.GM)end;local function dc(dd,de,df,dg,dh)assert(cM(dd),'Argument 1 (planetarySystemId) must be a number:'..type(dd))assert(cM(de),'Argument 2 (bodyId) must be a number:'..type(de))assert(cM(df),'Argument 3 (radius) must be a number:'..type(df))assert(cN(dg),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dg))assert(cM(dh),'Argument 5 (GM) must be a number:'..type(dh))return setmetatable({planetarySystemId=tonumber(dd),bodyId=tonumber(de),radius=tonumber(df),center=vec3(dg),GM=tonumber(dh)},d7)end;local di={}di.__index=di;di.__tostring=function(dj)return b('::pos{%d,%d,%s,%s,%s}',dj.systemId,dj.bodyId,d2(dj.latitude*cV),d2(dj.longitude*cV),d2(dj.altitude))end;di.__eq=function(da,db)return da.bodyId==db.bodyId and da.systemId==db.systemId and c_(da.latitude,db.latitude)and c_(da.altitude,db.altitude)and(c_(da.longitude,db.longitude)or c_(da.latitude,math.pi/2)or c_(da.latitude,-math.pi/2))end;local function dk(dl,de,dm,dn,bo)local dd=dl;if cP(dl)and not dn and not bo and not de and not dm then dd,de,dm,dn,bo=string.match(dl,cY)assert(dd,'Argument 1 (position string) is malformed.')else assert(cM(dd),'Argument 1 (systemId) must be a number:'..type(dd))assert(cM(de),'Argument 2 (bodyId) must be a number:'..type(de))assert(cM(dm),'Argument 3 (latitude) must be in degrees:'..type(dm))assert(cM(dn),'Argument 4 (longitude) must be in degrees:'..type(dn))assert(cM(bo),'Argument 5 (altitude) must be in meters:'..type(bo))end;dd=tonumber(dd)de=tonumber(de)dm=tonumber(dm)dn=tonumber(dn)bo=tonumber(bo)if de==0 then return setmetatable({latitude=dm,longitude=dn,altitude=bo,bodyId=de,systemId=dd},di)end;return setmetatable({latitude=cU*cZ(dm,-90,90),longitude=cU*(dn%360),altitude=bo,bodyId=de,systemId=dd},di)end;local dp={}dp.__index=dp;dp.__tostring=function(d4,d8)local dq=d8 and d8 ..'  'local dr={}local d9={}for W in pairs(d4)do table.insert(d9,W)end;table.sort(d9)for _,ds in ipairs(d9)do bdy=d4[ds]local dt=d7.__tostring(bdy,dq)if d8 then table.insert(dr,b('[%s]={\n%s\n%s}',ds,dt,d8))else table.insert(dr,b('  [%s]=%s',ds,dt))end end;if d8 then return b('\n%s%s%s',d8,table.concat(dr,',\n'..d8),d8)end;return b('{\n%s\n}',table.concat(dr,',\n'))end;local function du(dv)local atlas={}local pid;for _,X in pairs(dv)do local an=X.planetarySystemId;if type(an)~='number'then error('Invalid planetary system ID: '..tostring(an))elseif pid and an~=pid then error('Mismatch planetary system IDs: '..an..' and '..pid)end;local dw=X.bodyId;if type(dw)~='number'then error('Invalid body ID: '..tostring(dw))elseif atlas[dw]then error('Duplicate body ID: '..tostring(dw))end;setmetatable(X.center,getmetatable(vec3.unit_x))atlas[dw]=setmetatable(X,d7)pid=an end;return setmetatable(atlas,dp)end;PlanetaryReference={}local function dx(dv)return setmetatable({galaxyAtlas=dv or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cO,i)if type(i)=='number'then local system=cO.galaxyAtlas[i]return du(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d4)return function(cO,W)local dy,nv=next(cO,W)return dy,nv and du(nv)end,d4.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d4)local dz={}for _,dA in pairs(d4 or{})do local dB=dA:getPlanetarySystemId()local dC=dp.__tostring(dA,'    ')table.insert(dz,b('  [%s]={%s\n  }',dB,dC))end;return b('{\n%s\n}\n',table.concat(dz,',\n'))end;PlanetaryReference.BodyParameters=dc;PlanetaryReference.MapPosition=dk;PlanetaryReference.PlanetarySystem=du;function PlanetaryReference.createBodyParameters(dD,de,dE,dF,dG,dH,dI)assert(cM(dD),'Argument 1 (planetarySystemId) must be a number:'..type(dD))assert(cM(de),'Argument 2 (bodyId) must be a number:'..type(de))assert(cM(dE),'Argument 3 (surfaceArea) must be a number:'..type(dE))assert(cN(dF),'Argument 4 (aPosition) must be an array or vec3:'..type(dF))assert(cN(dG),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dG))assert(cM(dH),'Argument 6 (altitude) must be in meters:'..type(dH))assert(cM(dI),'Argument 7 (gravityAtPosition) must be number:'..type(dI))local df=math.sqrt(dE/4/math.pi)local ck=df+dH;local dJ=vec3(dF)+ck*vec3(dG)local dh=dI*ck*ck;return dc(dD,de,df,dJ,dh)end;PlanetaryReference.isMapPosition=cS;function PlanetaryReference:getPlanetarySystem(dl)if i==nil then i=0 end;if nv==nil then nv=0 end;local dD=dl;if cS(dl)then dD=dl.systemId end;if type(dD)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dp then system=du(system)end;return system end end end;function dp:castIntersections(dK,dL,dM,dN)local dM=dM or function(dO)return 1.05*dO.radius end;local dP={}if dN then for _,i in ipairs(dN)do dP[i]=self[i]end else dN={}for W,dO in pairs(self)do table.insert(dN,W)dP[W]=dO end end;local function dQ(dR,dS)local dT=dP[dR].center-dK;local dU=dP[dS].center-dK;return dT:len()<dU:len()end;table.sort(dN,dQ)local dV=dL:normalize()for i,an in ipairs(dN)do local dO=dP[an]local dW=dO.center-dK;local df=dM(dO)local dX=dW:dot(dV)local dY=dX^2-(dW:len2()-df^2)if dY>=0 then local dZ=math.sqrt(dY)local d_=dX+dZ;local e0=dX-dZ;if e0>0 then return dO,d_,e0 elseif d_>0 then return dO,d_,nil end end end;return nil,nil,nil end;function dp:closestBody(e1)assert(type(e1)=='table','Invalid coordinates.')local e2,dO;local e3=vec3(e1)for _,e4 in pairs(self)do local e5=(e4.center-e3):len2()if not dO or e5<e2 then dO=e4;e2=e5 end end;return dO end;function dp:convertToBodyIdAndWorldCoordinates(dl)local e6=dl;if cP(dl)then e6=dk(dl)end;if e6.bodyId==0 then return 0,vec3(e6.latitude,e6.longitude,e6.altitude)end;local e4=self:getBodyParameters(e6)if e4 then return e6.bodyId,e4:convertToWorldCoordinates(e6)end end;function dp:getBodyParameters(dl)local de=dl;if cS(dl)then de=dl.bodyId end;assert(cM(de),'Argument 1 (bodyId) must be a number:'..type(de))return self[de]end;function dp:getPlanetarySystemId()local _,X=next(self)return X and X.planetarySystemId end;function d7:convertToMapPosition(dg)assert(cN(dg),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dg))local e7=vec3(dg)if self.bodyId==0 then return setmetatable({latitude=e7.x,longitude=e7.y,altitude=e7.z,bodyId=0,systemId=self.planetarySystemId},di)end;local e8=e7-self.center;local ck=e8:len()local bo=ck-self.radius;local dm=0;local dn=0;if not c_(ck,0)then local e9=math.atan(e8.y,e8.x)dn=e9>=0 and e9 or 2*math.pi+e9;dm=math.pi/2-math.acos(e8.z/ck)end;return setmetatable({latitude=dm,longitude=dn,altitude=bo,bodyId=self.bodyId,systemId=self.planetarySystemId},di)end;function d7:convertToWorldCoordinates(dl)local e6=cP(dl)and dk(dl)or dl;if e6.bodyId==0 then return vec3(e6.latitude,e6.longitude,e6.altitude)end;assert(cS(e6),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(e6.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(e6.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ea=math.cos(e6.latitude)return self.center+(self.radius+e6.altitude)*vec3(ea*math.cos(e6.longitude),ea*math.sin(e6.longitude),math.sin(e6.latitude))end;function d7:getAltitude(dg)return(vec3(dg)-self.center):len()-self.radius end;function d7:getDistance(dg)return(vec3(dg)-self.center):len()end;function d7:getGravity(dg)local eb=self.center-vec3(dg)local ec=eb:len2()return self.GM/ec*eb/math.sqrt(ec)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dx(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cP(cQ)return type(cQ)=='string'end;local function cN(cO)return type(cO)=='table'end;local function c_(d0,d1)if d0==0 then return math.abs(d1)<1e-09 end;if d1==0 then return math.abs(d0)<1e-09 end;return math.abs(d0-d1)<math.max(math.abs(d0),math.abs(d1))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bo)assert(self.body)local ck=bo+self.body.radius;if not c_(ck,0)then local orbit=math.sqrt(self.body.GM/ck)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dl,velocity)assert(self.body)assert(cN(dl)or cP(dl))assert(cN(velocity))local bA=(cP(dl)or PlanetRef.isMapPosition(dl))and self.body:convertToWorldCoordinates(dl)or vec3(dl)local X=vec3(velocity)local ed=bA-self.body.center;local dU=X:len2()local ee=ed:len()local ef=self.body.GM;local eg=((dU-ef/ee)*ed-ed:dot(X)*X)/ef;local d0=ef/(2*ef/ee-dU)local eh=eg:len()local dV=eg:normalize()local ei=d0*(1-eh)local ej=d0*(1+eh)local ek=ei*dV+self.body.center;local el=eh<=1 and-ej*dV+self.body.center or nil;local em=math.sqrt(d0*ef*(1-eh*eh))local en=el and 2*math.pi*math.sqrt(d0^3/ef)local eo=math.acos(eg:dot(ed)/(eh*ee))if ed:dot(X)<0 then eo=-(eo-2*math.pi)end;local ep=math.acos((math.cos(eo)+eh)/(1+eh*math.cos(eo)))local eq=ep;if eq<0 then eq=eq+2*math.pi end;local er=eq-eh*math.sin(eq)local es=0;local et=0;local eu=0;if en~=nil then es=er/(2*math.pi/en)et=en-es;eu=et+en/2;if eo-math.pi>0 then et=es;eu=et+en/2 end;if eu>en then eu=eu-en end end;return{periapsis={position=ek,speed=em/ei,circularOrbitSpeed=math.sqrt(ef/ei),altitude=ei-self.body.radius},apoapsis=el and{position=el,speed=em/ej,circularOrbitSpeed=math.sqrt(ef/ej),altitude=ej-self.body.radius},currentVelocity=X,currentPosition=bA,eccentricity=eh,period=en,eccentricAnomaly=ep,meanAnomaly=er,timeToPeriapsis=et,timeToApoapsis=eu}end;local function ev(ew)local e4=PlanetRef.BodyParameters(ew.planetarySystemId,ew.bodyId,ew.radius,ew.center,ew.GM)return setmetatable({body=e4},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ev(...)end})end;function Kinematics()local Kinematic={}local ex=30000000/3600;local ey=ex*ex;local ez=100;local function eA(X)return 1/math.sqrt(1-X*X/ey)end;function Kinematic.computeAccelerationTime(eB,eC,eD)local eE=ex*math.asin(eB/ex)return(ex*math.asin(eD/ex)-eE)/eC end;function Kinematic.computeDistanceAndTime(eB,eD,eF,eG,eH,eI)eH=eH or 0;eI=eI or 0;local eJ=eB<=eD;local eK=eG*(eJ and 1 or-1)/eF;local eL=-eI/eF;local eM=eK+eL;if eJ and eM<=0 or not eJ and eM>=0 then return-1,-1 end;local eN,eO=0,0;if eK~=0 and eH>0 then local eE=math.asin(eB/ex)local eP=math.pi*(eK/2+eL)local eQ=eK*eH;local eR=ex*math.pi;local X=function(cO)local aK=(eP*cO-eQ*math.sin(math.pi*cO/2/eH)+eR*eE)/eR;local eS=math.tan(aK)return ex*eS/math.sqrt(eS*eS+1)end;local eT=eJ and function(cQ)return cQ>=eD end or function(cQ)return cQ<=eD end;eO=2*eH;if eT(X(eO))then local eU=0;while math.abs(eO-eU)>0.5 do local cO=(eO+eU)/2;if eT(X(cO))then eO=cO else eU=cO end end end;local eV=eB;local eW=eO/ez;for eX=1,ez do local speed=X(eX*eW)eN=eN+(speed+eV)*eW/2;eV=speed end;if eO<2*eH then return eN,eO end;eB=eV end;local eE=ex*math.asin(eB/ex)local eY=(ex*math.asin(eD/ex)-eE)/eM;local eZ=ey*math.cos(eE/ex)/eM;local ck=eZ-ey*math.cos((eM*eY+eE)/ex)/eM;return ck+eN,eY+eO end;function Kinematic.computeTravelTime(eB,eC,ck)if ck==0 then return 0 end;if eC>0 then local eE=ex*math.asin(eB/ex)local eZ=ey*math.cos(eE/ex)/eC;return(ex*math.acos(eC*(eZ-ck)/ey)-eE)/eC end;assert(eB>0,'Acceleration and initial speed are both zero.')return ck/eB end;function Kinematic.lorentz(X)return eA(X)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(ck)local e_=ck>100000;local Y=""if e_ then Y=round(ck/1000/200,1).." SU"elseif ck<1000 then Y=round(ck,1).." M"else Y=round(ck/1000,1).." KM"end;return Y end;function getDistanceDisplayString2(ck)local e_=ck>100000;local Y=""if e_ then Y=round(ck/1000/200,2).." SU"elseif ck<1000 then Y=round(ck,2).." M"else Y=round(ck/1000,2).." KM"end;return Y end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(f0)local f1=a(f0/3600)local f2=a(f0/60%60)local f0=a(f0%60)if f0<0 or f1<0 or f2<0 then return"0s"end;if f1>0 then return f1 .."h "..f2 .."m "elseif f2>0 then return f2 .."m "..f0 .."s"else return f0 .."s"end end;function getMagnitudeInDirection(bf,dL)bf=vec3(bf)dL=vec3(dL):normalize()local Y=bf*dL;return Y.x+Y.y+Y.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f3=AtlasOrdered[AutopilotTargetIndex].index;local f4=atlas[0][f3]if f4.center then AutopilotTargetName=f4.name;AutopilotTargetPlanet=galaxyReference[0][f3]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=f4 end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f5=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return f5 end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local f6,f7=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local f8,f9;if not TurnBurn then f8,f9=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else f8,f9=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fa;if not TurnBurn then _,fa=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,fa=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local fb=0;local fc=0;if f8+f6<AutopilotDistance then fb=AutopilotDistance-(f8+f6)fc=Kinematic.computeTravelTime(8333.0556,0,fb)else local fd=(AutopilotDistance-f8)/f6;f6=AutopilotDistance-f8;f7=f7*fd end;if AutopilotBraking then return fa elseif AutopilotCruising then return fc+fa else return f7+f9+fc end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fe=Nav.axisCommandManager:getAxisCommandType(0)local bz="TRAVEL"if fe==1 then bz="CRUISE"end;if Autopilot then bz="AUTOPILOT"end;return bz end;function hoverDetectGround()local ff=-1;if vBooster then ff=vBooster.distance()elseif hover then ff=hover.distance()end;return ff end;function round(cX,fg)local fh=10^(fg or 0)return a(cX*fh+0.5)/fh end;function tablelength(fi)local fj=0;for _ in pairs(fi)do fj=fj+1 end;return fj end;function BeginProfile(fk)ProfileTimeStart=system.getTime()end;function EndProfile(fk)local fl=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fl;ProfileCount=ProfileCount+1;if fl>ProfileTimeMax then ProfileTimeMax=fl end;if fl<ProfileTimeMin then ProfileTimeMin=fl end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fm=ProfileTimeSum;local fn=ProfileTimeSum/ProfileCount;local fo=ProfileTimeMin;local fp=ProfileTimeMax;local fq=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fm,fn,fo,fp,fq))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fr=unit.getAtmosphereDensity()if door and(fr>0 or fr==0 and CoreAltitude<10000)then for _,X in pairs(door)do X.activate()end end;if forcefield and(fr>0 or fr==0 and CoreAltitude<10000)then for _,X in pairs(forcefield)do X.activate()end end;if dbHud then if not WipedDatabank then for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fs)if fs=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=AutopilotDistance;if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"MsgTimer=5;unit.setTimer("emergencyWarpTick",5)InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end elseif fs=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local ft;ft=radar_1.getData():find('identifiedConstructs":%[%]')if HasSpaceRadar and EmergencyWarp then local an,ck=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if an~=nil and an~=""then if math.floor(ck)<EmergencyWarpDistance and NotTriedEmergencyWarp then InEmergencyWarp=true;NotTriedEmergencyWarp=false end end end;if ft==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if ft~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fu=radar_1.getEntries()RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fu)local fv={}for W,X in pairs(fu)do if radar_1.hasMatchingTransponder(X)==1 then fv[#fv+1]=X end end;if#fv>0 then local af=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,af)for W,X in pairs(fv)do af=af+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,af,radar_1.getConstructName(X))end end elseif radar_1 then local fw;fw=radar_1.getData():find('worksInEnvironment":false')if fw then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end;local aq={}local bz=GetFlightStyle()DrawOdometer(aq,TotalDistanceTrip,TotalDistanceTravelled,bz,FlightTime)checkDamage(aq)LastOdometerOutput=table.concat(aq,"")collectgarbage("collect")elseif fs=="reEmergencyWarp"then NotTriedEmergencyWarp=true;InEmergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif fs=="msgTick"then local aq={}DisplayMessage(aq,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fs=="emergencyWarpTick"then if EmergencyWarp then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end;unit.stopTimer("emergencyWarpTick")elseif fs=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fs=="apTick"then local l=Nav.control.isRemoteControlled;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fx=system.getMouseDeltaX()local fy=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fz=0.002;local fA=velMag>8334;if not fA and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fA;if antigrav and(antigrav.getState()==1 and not desiredBaseAltitude or AntigravJustToggledOn)then desiredBaseAltitude=antigrav.getBaseAltitude()if AntigravJustToggledOn then AntigravJustToggledOn=false end end;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local aq={}HUDPrologue(aq)if showHud then updateHud(aq)else DisplayOrbitScreen(aq)DrawWarnings(aq)end;HUDEpilogue(aq)aq[#aq+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(aq,MsgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(aq)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(aq)if screen_1.getMouseState()==1 then CheckButtons()end;aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fx;SimulatedY=SimulatedY+fy end;SetButtonContains()DrawButtons(aq)if not Animating and not Animated then local fB=table.concat(aq,"")aq={}aq[#aq+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aq[#aq+1]=GalaxyMapHTML;aq[#aq+1]=fB;aq[#aq+1]="</body>"Animating=true;aq[#aq+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(aq,"")system.setScreen(content)elseif Animated then local fB=table.concat(aq,"")aq={}aq[#aq+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aq[#aq+1]=GalaxyMapHTML;aq[#aq+1]=fB;aq[#aq+1]="</body>"end;if not Animating then aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fx;SimulatedY=SimulatedY+fy;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="Mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fy,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fx,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(aq)end else SetButtonContains()DrawButtons(aq)end;aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;aq[#aq+1]=[[</svg></body>]]content=table.concat(aq,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local f8,f9;if not TurnBurn then f8,f9=GetAutopilotBrakeDistanceAndTime(velMag)else f8,f9=GetAutopilotTBBrakeDistanceAndTime(velMag)end;f8=f8;f9=f9;local fC=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fD=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fE=getMagnitudeInDirection(fD,AutopilotShipUp)local fF=getMagnitudeInDirection(fD,AutopilotShipRight)local fG=-fF*AutopilotDistance*velMag*fz;local fH=-fE*AutopilotDistance*velMag*fz;fC=AutopilotTargetCoords+-fG*vec3(AutopilotShipRight)+-fH*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fC)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fI=true;local fJ=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fJ)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fI=AlignToWorldVector((fC-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fI=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fI then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=f8 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(aq,"Autopilot completed, orbit established")BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=f8 then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fI then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fI then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fK=0;local bA=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fL=bA-vec3(core.getConstructWorldPos())local fM=vec3(fL):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fN=vec3(fL):project_on(vec3(core.getConstructWorldOrientationRight())):len()local ck=math.sqrt(fM*fM+fN*fN)AlignToWorldVector(fL:normalize())local fO=40;local fP=ck<fO;local fQ=100;local fR=utils.clamp((ck-fO)/2,10,fQ)PitchInput2=0;local fI=math.abs(YawInput2)<0.1;if fI and velMag<fR and not fP then BrakeIsOn=false;fK=-10 else BrakeIsOn=true;fK=0 end;local bq=vec3(core.getConstructWorldOrientationForward())local br=vec3(core.getConstructWorldOrientationRight())local bp=vec3(core.getWorldVertical())local aI=getPitch(bp,bq,br)local fS=1.0;if math.abs(fK-aI)>fS then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fK-aI)local fT=pitchPID:get()PitchInput2=fT end end;local bR=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then local bo=CoreAltitude;local fU=HoldAltitude-bo;local fV=500+velMag;local fK=(utils.smoothstep(fU,-fV,fV)-0.5)*2*MaxPitch;if not AltitudeHold then fK=0 end;autoRoll=true;if Reentry then if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then fK=-80;if unit.getAtmosphereDensity()>0.05 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;fK=0 end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false end end;local fW=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bh=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bh)local fX=bh:len()-bh:project_on(bR):len()local a9=json.decode(unit.getData()).maxBrake;local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;local fY=velocity:len()-math.abs(bS)local fZ=vec3(core.getWorldAirFrictionAcceleration())if a9~=nil then LastMaxBrake=a9;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(fY,0,core.getConstructMass(),0,0,a9+(fZ:len()-fZ:project_on(bR):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(fY,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if fX<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and fX>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=fX end;PitchInput2=fW;local bq=vec3(core.getConstructWorldOrientationForward())local br=vec3(core.getConstructWorldOrientationRight())local bp=vec3(core.getWorldVertical())local ff=-1;local aI=getPitch(bp,bq,br)local fS=0.1;if BrakeLanding then fK=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;ff=hoverDetectGround()if ff>-1 then if math.abs(fK-aI)<fS then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bR)<0.99 then BrakeIsOn=true elseif bS<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fK<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;if math.abs(fK-aI)>fS then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fK-aI)local fT=pitchPID:get()PitchInput2=PitchInput2+fT end end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local f_=CoreAltitude-antigrav.getBaseAltitude()if CoreAltitude>800 and f_<-200 then desiredBaseAltitude=math.max(CoreAltitude+100,1000)elseif f_>200 then desiredBaseAltitude=CoreAltitude-100 end else local f_=AntigravTargetAltitude-CoreAltitude;local velocity=vec3(core.getWorldVelocity())local bR=vec3(core.getWorldVertical())*-1;local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;local g0=290;local g1=-290;if unit.getClosestPlanetInfluence()>0.3 then g1=-190 end;g1=math.min(math.max(g1,-math.abs(f_)/20.0),-10)g0=math.max(math.min(g0,math.abs(f_)/20.0),10)if bS<g1 then desiredBaseAltitude=CoreAltitude+100 elseif bS>g0 then desiredBaseAltitude=math.max(CoreAltitude-100,1000)elseif math.abs(f_)>150 or math.abs(bS)>15 then if math.abs(bS)>10 then desiredBaseAltitude=CoreAltitude+math.max(math.min(f_-bS/10.0,100),-100)else desiredBaseAltitude=CoreAltitude+math.max(math.min(f_,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bS)<10 and math.abs(f_)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local g2=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)g2=math.max(g2,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local g3=PitchInput+PitchInput2+system.getControlDeviceForwardInput()local g4=RollInput+RollInput2+system.getControlDeviceYawInput()local g5=YawInput+YawInput2-system.getControlDeviceLeftRightInput()local g6=BrakeInput;local g7=vec3(core.getWorldVertical())local g8=vec3(core.getConstructWorldOrientationUp())local g9=vec3(core.getConstructWorldOrientationForward())local ga=vec3(core.getConstructWorldOrientationRight())local gb=vec3(core.getWorldVelocity())local gc=vec3(core.getWorldVelocity()):normalize()local gd=getRoll(g7,g9,ga)local ge=math.abs(gd)local gf=utils.sign(gd)local gg=vec3(core.getWorldAngularVelocity())local gh=g3*pitchSpeedFactor*ga+g4*rollSpeedFactor*g9+g5*yawSpeedFactor*g8;if g7:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local gi=1.0;if autoRoll==true and ge>gi and g4==0 then local gj=utils.clamp(0,ge-30,ge+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gj-gd)local gk=rollPID:get()gh=gh+gk*g9 end;local gl=20.0;if turnAssist==true and ge>gl and g3==0 and g5==0 then local gm=turnAssistFactor*0.1;local gn=turnAssistFactor*0.025;local go=(ge-gl)/(180-gl)*180;local gp=0;if go<90 then gp=go/90 elseif go<180 then gp=(180-go)/90 end;gp=gp*gp;local gq=-gf*gn*(1.0-gp)local gr=gm*gp;gh=gh+gr*ga+gq*g8 end end;local gs=1;local gt=0;local gu=1;local gv=g2*(gh-gg)local gw=vec3(core.getWorldAirFrictionAngularAcceleration())gv=gv-gw;Nav:setEngineTorqueCommand('torque',gv,gs,'airfoil','','',gu)local gx=-g6*(brakeSpeedFactor*gb+brakeFlatFactor*gc)Nav:setEngineForceCommand('brake',gx)local gy=''local gz=vec3()local gA=false;local gB='thrust analog longitudinal'local gC=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gC==axisCommandType.byThrottle then local gD=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gB,axisCommandId.longitudinal)Nav:setEngineForceCommand(gB,gD,gs)elseif gC==axisCommandType.byTargetSpeed then local gD=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gy=gy..' , '..gB;gz=gz+gD;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gA=true end end;local gE='thrust analog lateral'local gF=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gF==axisCommandType.byThrottle then local gG=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gE,axisCommandId.lateral)Nav:setEngineForceCommand(gE,gG,gs)elseif gF==axisCommandType.byTargetSpeed then local gH=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gy=gy..' , '..gE;gz=gz+gH end;local gI='thrust analog vertical'local gJ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gJ==axisCommandType.byThrottle then local gK=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gI,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gI,gK,gs,'airfoil','ground','',gu)else Nav:setEngineForceCommand(gI,vec3(),gs)end elseif gJ==axisCommandType.byTargetSpeed then local gL=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gy=gy..' , '..gI;gz=gz+gL end;if gz:len()>constants.epsilon then if BrakeInput~=0 or gA or math.abs(gc:dot(g9))<0.95 then gy=gy..', brake'end;Nav:setEngineForceCommand(gy,gz,gt,'','','',gu)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif IsBoosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,Y=coroutine.resume(beginSetup)if Y then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gM)if gM=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gM=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gM=="forward"then PitchInput=PitchInput-1 elseif gM=="backward"then PitchInput=PitchInput+1 elseif gM=="left"then RollInput=RollInput-1 elseif gM=="right"then RollInput=RollInput+1 elseif gM=="yawright"then YawInput=YawInput-1 elseif gM=="yawleft"then YawInput=YawInput+1 elseif gM=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gM=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gM=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gM=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gM=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gM=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gM=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif gM=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif gM=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif gM=="option4"then ToggleAutopilot()ToggleView=false elseif gM=="option5"then ToggleTurnBurn()ToggleView=false elseif gM=="option6"then ToggleAltitudeHold()ToggleView=false elseif gM=="option7"then wipeSaveVariables()ToggleView=false elseif gM=="option8"then ToggleFollowMode()ToggleView=false elseif gM=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif gM=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gM=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gM=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gM=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gM=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gM=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gM=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gM=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gM=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gM)if gM=="forward"then PitchInput=PitchInput+1 elseif gM=="backward"then PitchInput=PitchInput-1 elseif gM=="left"then RollInput=RollInput+1 elseif gM=="right"then RollInput=RollInput-1 elseif gM=="yawright"then YawInput=YawInput+1 elseif gM=="yawleft"then YawInput=YawInput-1 elseif gM=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gM=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gM=="up"then UpAmount=UpAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gM=="down"then UpAmount=UpAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gM=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gM=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gM=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gM=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gM=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gM)if gM=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gM=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gM=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gM=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(aq,gN)if gN~="empty"then aq[#aq+1]=[[<text class="msg" x="50%%" y="310" >]]for gO in string.gmatch(gN,"([^\n]+)")do aq[#aq+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gO)end;aq[#aq+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a4=system.getTime()local velocity=vec3(core.getWorldVelocity())local bx=vec3(velocity):len()local gP=a4-LastTravelTime;if bx>1.38889 then bx=bx/1000;local gQ=bx*(a4-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+gQ;TotalDistanceTrip=TotalDistanceTrip+gQ end;FlightTime=FlightTime+gP;TotalFlightTime=TotalFlightTime+gP;LastTravelTime=a4 end;function updateMass()local gR=0;for W in pairs(ElementsID)do gR=gR+core.getElementMassById(ElementsID[W])end;return gR end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
