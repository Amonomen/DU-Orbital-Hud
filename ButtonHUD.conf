name: ButtonsHud - Dimencia and Archaegeo v4.835 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        IgnoreEmergencyWarpDistance = 500 --export: Any targets within this distance are ignored for emergency warp.
        RequireLock = false --export: Set to true to require a target to lock onto you before starting an emergency warp.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.835;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;SpaceLand=false;SpaceLaunch=false;FinalLand=false;HovGndDet=-1;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=16;local S=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","RequireLock","StallAngle"}AutoVariables={"EmergencyWarp","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo","AntigravTargetAltitude"}if dbHud then local T=dbHud.hasKey;if not useTheseSettings then for U,V in pairs(SaveableVariables)do if T(V)then local W=c(dbHud.getStringValue(V))if W~=nil then system.print(V.." "..dbHud.getStringValue(V))_G[V]=W;A=true end end end end;for U,V in pairs(AutoVariables)do if T(V)then local W=c(dbHud.getStringValue(V))if W~=nil then system.print(V.." "..dbHud.getStringValue(V))_G[V]=W;A=true end end end;if useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then MsgText="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local X=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for U in pairs(ElementsID)do local type=h(ElementsID[U])if type=="landing gear"then HasGear=true end;if type=="dynamic core"then local Y=e(ElementsID[U])if Y>10000 then R=128 elseif Y>1000 then R=64 elseif Y>150 then R=32 end end;H=H+e(ElementsID[U])if fuelX~=0 and fuelY~=0 then if type=="atmospheric fuel-tank"or type=="space fuel-tank"or type=="rocket fuel-tank"then local Y=e(ElementsID[U])local Z=j(ElementsID[U])local a0=0;local a1=system.getTime()if type=="atmospheric fuel-tank"then local a2=400;local a3=35.03;if Y>10000 then a2=51200;a3=5480 elseif Y>1300 then a2=6400;a3=988.67 elseif Y>150 then a2=1600;a3=182.67 end;a0=Z-a3;if fuelTankHandlingAtmo>0 then a2=a2+a2*fuelTankHandlingAtmo*0.2 end;if a0>a2 then a2=a0 end;E[#E+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a2,a3,a0,a1}end;if type=="rocket fuel-tank"then local a2=320;local a3=173.42;if Y>65000 then a2=40000;a3=25740 elseif Y>6000 then a2=5120;a3=4720 elseif Y>700 then a2=640;a3=886.72 end;a0=Z-a3;if fuelTankHandlingRocket>0 then a2=a2+a2*fuelTankHandlingRocket*0.2 end;if a0>a2 then a2=a0 end;G[#G+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a2,a3,a0,a1}end;if type=="space fuel-tank"then local a2=2400;local a3=182.67;if Y>10000 then a2=76800;a3=5480 elseif Y>1300 then a2=9600;a3=988.67 end;a0=Z-a3;if fuelTankHandlingSpace>0 then a2=a2+a2*fuelTankHandlingSpace*0.2 end;if a0>a2 then a2=a0 end;F[#F+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a2,a3,a0,a1}end end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,V in pairs(door)do V.deactivate()end end;if forcefield then for _,V in pairs(forcefield)do V.deactivate()end end;if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a4,a5)if a4==nil then a4=core.g()end;a4=round(a4,5)if a5~=nil and a5 or(D==nil or D~=a4)then local a6=c(unit.getData()).maxBrake;if a6~=nil then LastMaxBrake=a6 end;if f()>0 then LastMaxBrakeInAtmo=a6 end;D=a4 end end;function MakeButton(a7,a8,a9,aa,ab,ac,ad,ae,af)local ag={enableName=a7,disableName=a8,width=a9,height=aa,x=ab,y=ac,toggleVar=ad,toggleFunction=ae,drawCondition=af,hovered=false}table.insert(r,ag)return ag end;function UpdateAtlasLocationsList()AtlasOrdered={}for U,V in pairs(atlas[0])do table.insert(AtlasOrdered,{name=V.name,index=U})end;local function ah(ai,aj)return ai.name<aj.name end;table.sort(AtlasOrdered,ah)end;function AddLocationsToAtlas()for U,V in pairs(SavedLocations)do table.insert(atlas[0],V)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local ak=planet.name..". "..#SavedLocations;if radar_1 then local al,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if al~=nil and al~=""then ak=ak.." "..radar_1.getConstructName(al)end end;local am={position=position,name=ak,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=am;table.insert(atlas[0],am)UpdateAtlasLocationsList()MsgText="Location saved as "..ak else MsgText="Databank must be installed to save locations"end end;function UpdatePosition()local an=-1;local am;for U,V in pairs(SavedLocations)do if V.name and V.name==CustomTarget.name then an=U;break end end;if an~=-1 then am={position=vec3(core.getConstructWorldPos()),name=SavedLocations[an].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[an]=am;an=-1;for U,V in pairs(atlas[0])do if V.name and V.name==CustomTarget.name then an=U end end;if an>-1 then atlas[0][an]=am end;UpdateAtlasLocationsList()MsgText=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local an=-1;for U,V in pairs(atlas[0])do if V.name and V.name==CustomTarget.name then an=U end end;if an>-1 then table.remove(atlas[0],an)end;an=-1;for U,V in pairs(SavedLocations)do if V.name and V.name==CustomTarget.name then MsgText=V.name.." saved location cleared"an=U;break end end;if an~=-1 then table.remove(SavedLocations,an)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(ao)ao[#ao+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ap,aq,ab,ac,a9,aa)if ap>ab and ap<ab+a9 and aq>ac and aq<ac+aa then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not GearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=CoreAltitude;if not SpaceLaunch and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if SpaceLaunch then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else SpaceLand=true end else SpaceLaunch=true;if unit.getAtmosphereDensity()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;APThrottleSet=false else SpaceLaunch=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;APThrottleSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(ao)local ar=0;p=""local as=H;local at=0;local au=0;local av=0;local aw=0;local ax=""for U in pairs(ElementsID)do local Y=0;local ay=0;ay=e(ElementsID[U])Y=g(ElementsID[U])at=at+Y;if Y<ay then if Y==0 then av=av+1 else au=au+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[U]))local ab=position.x-R;local ac=position.y-R;local az=position.z-R;table.insert(m,core.spawnArrowSticker(ab,ac,az+1,"down"))table.insert(m,core.spawnArrowSticker(ab,ac,az+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ab+1,ac,az,"north"))table.insert(m,core.spawnArrowSticker(ab+1,ac,az,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ab-1,ac,az,"south"))table.insert(m,core.spawnArrowSticker(ab-1,ac,az,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ab,ac-1,az,"east"))table.insert(m,core.spawnArrowSticker(ab,ac-1,az,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ab,ac+1,az,"west"))table.insert(m,core.spawnArrowSticker(ab,ac+1,az,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[U])end elseif I and#m>0 and m[11]==ElementsID[U]then for aA in pairs(m)do core.deleteSticker(m[aA])end;m={}end end;ar=a(at/as*100)if ar<100 then ao[#ao+1]=[[<g class="pbright txt">]]aw=a(ar*2.55)ax=b("rgb(%d,%d,%d)",255-aw,aw,0)if ar<100 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],ax,ar)if av>0 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],ax,av,au)elseif au>0 then ao[#ao+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],ax,au)end end;ao[#ao+1]=[[<\g>]]end end;function DrawCursorLine(ao)local aB=a(utils.clamp(Distance/(u/4)*255,0,255))ao[#ao+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aB,a(PrimaryG+0.5)-aB,a(PrimaryB+0.5)-aB)end;function getPitch(aC,aD,aj)local aE=aC:cross(aj):normalize_inplace()local aF=math.acos(utils.clamp(aE:dot(-aD),-1,1))*constants.rad2deg;if aE:cross(-aD):dot(aj)<0 then aF=-aF end;return aF end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 else if B then for U,V in pairs(SaveableVariables)do dbHud.setStringValue(V,d(nil))end;for U,V in pairs(AutoVariables)do if V~="SavedLocations"then dbHud.setStringValue(V,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe of ALL data"B=true end end end;function CheckButtons()for _,V in pairs(r)do if V.hovered then if not V.drawCondition or V.drawCondition()then V.toggleFunction()end;V.hovered=false end end end;function SetButtonContains()local ab=SimulatedX+u/2;local ac=SimulatedY+v/2;for _,V in pairs(r)do V.hovered=Contains(ab,ac,V.x,V.y,V.width,V.height)end end;function DrawButton(ao,aG,hover,ab,ac,aH,aI,aJ,aK,aL,aM)if type(aL)=="function"then aL=aL()end;if type(aM)=="function"then aM=aM()end;ao[#ao+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ab,ac,aH,aI)if aG then ao[#ao+1]=b("%s'",aJ)else ao[#ao+1]=aK end;if hover then ao[#ao+1]=" style='stroke:white; stroke-width:2'"else ao[#ao+1]=" style='stroke:black; stroke-width:1'"end;ao[#ao+1]="></rect>"ao[#ao+1]=b("<text x='%f' y='%f' font-size='24' fill='",ab+aH/2,ac+aI/2+5)if aG then ao[#ao+1]="black"else ao[#ao+1]="white"end;ao[#ao+1]="' text-anchor='middle' font-family='Montserrat'>"if aG then ao[#ao+1]=b("%s</text>",aL)else ao[#ao+1]=b("%s</text>",aM)end end;function DrawButtons(ao)local aN="rgb(50,50,50)'"local aO="rgb(210,200,200)"local aP=DrawButton;for _,V in pairs(r)do local a8=V.disableName;local a7=V.enableName;if type(a8)=="function"then a8=a8()end;if type(a7)=="function"then a7=a7()end;if not V.drawCondition or V.drawCondition()then aP(ao,V.toggleVar(),V.hovered,V.x,V.y,V.width,V.height,aO,aN,a8,a7)end end end;function DrawTank(ao,Q,ab,aQ,aR,aS,aT,aU)local aV=1;local aW=2;local aX=3;local aY=4;local aZ=5;local a_=6;local b0=""local b1=0;local b2=fuelY;local b3=fuelY+10;if l()==1 and not RemoteHud then b2=b2-50;b3=b3-50 end;ao[#ao+1]=[[<g class="pdim txtfuel">]]if aR=="ATMO"then b0="atmofueltank"elseif aR=="SPACE"then b0="spacefueltank"else b0="rocketfueltank"end;b1=_G[b0 .."_size"]if#aS>0 then for i=1,#aS do local ak=string.sub(aS[i][aW],1,12)local b4=0;for aA=1,b1 do if aS[i][aW]==json.decode(unit[b0 .."_"..aA].getData()).name then b4=aA;break end end;if Q or aT[i]==nil or aU[i]==nil then local b5=0;local b6=0;local b7=0;local b8=0;local a1=system.getTime()if b4~=0 then aU[i]=json.decode(unit[b0 .."_"..b4].getData()).percentage;aT[i]=json.decode(unit[b0 .."_"..b4].getData()).timeLeft;if aT[i]=="n/a"then aT[i]=0 end else b7=j(aS[i][aV])-aS[i][aY]b5=aS[i][aX]aU[i]=a(0.5+b7*100/b5)b6=aS[i][aZ]b8=aS[i][a_]if b6<=b7 then aT[i]=0 else aT[i]=a(0.5+b7/((b6-b7)/(a1-b8)))end;aS[i][aZ]=b7;aS[i][a_]=a1 end end;if ak==aQ then ak=b("%s %d",aR,i)end;if b4==0 then ak=ak.." *"end;local b9;if aT[i]==0 then b9="n/a"else b9=FormatTimeString(aT[i])end;if aU[i]~=nil then local aw=a(aU[i]*2.55)local ax=b("rgb(%d,%d,%d)",255-aw,aw,0)local ba=""if b9~="n/a"and aT[i]<120 or aU[i]<5 then if Q then ba=[[class="red"]]end end;ao[#ao+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ab,b2,ba,ak,ab,b3,ax,aU[i],b9)b2=b2+30;b3=b3+30 end end end;ao[#ao+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aF=-math.deg(math.atan(velocity.y,velocity.z))+180;aF=aF-90;if aF<0 then aF=360+aF end;if aF>180 then aF=-180+aF-180 end;return-aF end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bb=math.deg(math.atan(velocity.y,velocity.x))-90;if bb<-180 then bb=360+bb end;return bb end;function AlignToWorldVector(bc,bd)if f()==0 or RateOfChange>MinimumRateOfChange+0.08 then if bd==nil then bd=t end;bc=vec3(bc):normalize()local be=vec3(core.getConstructWorldOrientationForward())-bc;local bf=-getMagnitudeInDirection(be,core.getConstructWorldOrientationRight())*s;local bg=-getMagnitudeInDirection(be,core.getConstructWorldOrientationUp())*s;if n==0 then n=bf/2 end;if o==0 then o=bg/2 end;YawInput2=YawInput2-(bf+(bf-n)*DampingMultiplier)PitchInput2=PitchInput2+bg+(bg-o)*DampingMultiplier;n=bf;o=bg;if math.abs(bf)<bd and math.abs(bg)<bd then return true end;return false end end;function getAPEnableName()local ak=AutopilotTargetName;if ak==nil then ak=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if ak==nil then ak="None"end;return"Engage Autopilot: "..ak end;function getAPDisableName()local ak=AutopilotTargetName;if ak==nil then ak=CustomTarget.name end;if ak==nil then ak="None"end;return"Disable Autopilot: "..ak end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bh=50;local bi=260;local bj=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bi,bh,u/2-bi/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bi,bh,u/2-bi/2-50-bj.width,v/2-bh+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bi,bh,u/2-bi/2+bj.width+50,v/2-bh+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bk=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bk.height,bk.x+bk.width+30,bk.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,bk.height,bk.x+bk.width+30,bk.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,bk.height,bk.x-200-30,bk.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bh=60;bi=300;local ab=10;local ac=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bi,bh,ab,ac,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bi,bh,ab+bi+20,ac,function()return AltitudeHold end,ToggleAltitudeHold)ac=ac+bh+20;MakeButton("Engage Autoland","Disable Autoland",bi,bh,ab,ac,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bi,bh,ab+bi+20,ac,function()return AutoTakeoff end,ToggleAutoTakeoff)ac=ac+bh+20;MakeButton("Show Orbit Display","Hide Orbit Display",bi,bh,ab,ac,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bi,bh,ab+bi+20,ac,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)ac=ac+bh+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bi,bh,ab,ac,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bi,bh,ab+bi+20,ac,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)ac=ac+bh+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bi,bh,ab,ac,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bi,bh,ab+bi+20,ac,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)ac=ac+bh+20;MakeButton("Enable AGG","Disable AGG",bi,bh,ab,ac,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)ac=ac+bh+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bi*2,bh,ab,ac,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function updateHud(ao)local bl=CoreAltitude;local velocity=core.getVelocity()local bm=vec3(velocity):len()local bn=vec3(core.getWorldVertical())local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local aF=getPitch(bn,bo,bp)local bq=getRoll(bn,bo,bp)local br=bq;local bs=aF;local bt=f()local bu=a(unit.getThrottle())local bv=bm*3.6;local bw=unit.getAxisCommandValue(0)local bx=GetFlightStyle()local by="ROLL"local bz=unit.getClosestPlanetInfluence()>0;if bu==nil then bu=0 end;if not bz then if bm>5 then aF=getRelativePitch(velocity)bq=getRelativeYaw(velocity)else aF=0;bq=0 end;by="YAW"end;ao[#ao+1]=LastOdometerOutput;ao[#ao+1]=p;ao[#ao+1]=RadarMessage;if S%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(ao,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(ao,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(ao,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;S=0 end;S=S+1;DrawVerticalSpeed(ao,bl,bt)if l()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if bz then DrawRollLines(ao,centerX,centerY,br,by,bz)DrawArtificialHorizon(ao,bs,br,bt,centerX,centerY,bz,a(getRelativeYaw(velocity)),bm)DrawAltitudeDisplay(ao,bl,bt)else DrawRollLines(ao,centerX,centerY,bq,by,bz)DrawArtificialHorizon(ao,aF,bq,bt,centerX,centerY,bz)end;DrawPrograde(ao,bt,velocity,bm,centerX,centerY)end end;DrawThrottle(ao,bx,bu,bw)DrawSpeed(ao,bv)DrawWarnings(ao)DisplayOrbitScreen(ao)if screen_2 then local bA=vec3(core.getConstructWorldPos())local ab=960+bA.x/MapXRatio;local ac=450+bA.y/MapYRatio;screen_2.moveContent(YouAreHere,(ab-80)/19.2,(ac-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and l()==0 end;function HUDPrologue(ao)local bB=rgb;local bC=X;local bD=rgb;local bE=X;if IsInFreeLook()and not brightHud then bB=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bC=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;ao[#ao+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bB,bB,bD,bD,bC,bC,bE,bE)end;function HUDEpilogue(ao)ao[#ao+1]="</svg>"end;function DrawSpeed(ao,bv)local bF=throtPosY-10;local bG=throtPosX+10;ao[#ao+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bF=75 end;ao[#ao+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bG,bF,a(bv))end;function DrawOdometer(ao,TotalDistanceTrip,TotalDistanceTravelled,bx,bH)local bI=1240;local bJ=55;local bK=65;local bt=f()local a4=core.g()local bL=0;local bM=0;refreshLastMaxBrake(a4)maxThrust=Nav:maxForceForward()C=k()if not ShowOdometer then return end;local bN=vec3(core.getWorldAcceleration()):len()/9.80665;if a4>0.1 then bM=C*a4;bL=maxThrust/a4 end;ao[#ao+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bI=1120;bJ=55;bK=65 elseif bt>0 then ao[#ao+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bt)end;ao[#ao+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bI,bJ,bI,bK,a4/9.80665,bI,bJ+20,bI,bK+20,bN)ao[#ao+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 or RemoteHud then ao[#ao+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="180">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bH),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bx)if a4>0.1 then ao[#ao+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bL/1000,bM/1000)else ao[#ao+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else ao[#ao+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bx)end;ao[#ao+1]="</g>"end;function DrawThrottle(ao,bx,bu,bw)local b2=throtPosY+10;local b3=throtPosY+20;if l()==1 and not RemoteHud then b2=55;b3=65 end;local bO="CRUISE"local unit="km/h"local bP=bw;if bx=="TRAVEL"or bx=="AUTOPILOT"then bO="THROT"unit="%"bP=bu;local bQ="dim"if bu<0 then bQ="red"end;ao[#ao+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bQ,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(bu),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;ao[#ao+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,b2,bO,throtPosX+10,b3,bP,unit)end;function DrawVerticalSpeed(ao,bl,bt)if bl<200000 and bt==0 or bl and bt>0 then local bR=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local bS=0;if math.abs(bR)>1 then bS=45*math.log(math.abs(bR),10)if bR<0 then bS=-bS end end;ao[#ao+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bR),a(bS))end end;function getHeading(aD)local bT=-vec3(core.getWorldVertical())aD=aD-aD:project_on(bT)local bU=vec3(0,0,1)bU=bU-bU:project_on(bT)local bV=bU:cross(bT)local bS=bU:angle_between(aD)*constants.rad2deg;if aD:dot(bV)<0 then bS=360-bS end;return bS end;function DrawRollLines(ao,centerX,centerY,br,by,bz)local bW=circleRad;local bX=20;bX=math.floor(bX)local bY=a(br)if bz then for i=-45,45,5 do local bZ=i;ao[#ao+1]=b([[<g transform="rotate(%f,%d,%d)">]],bZ,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;ao[#ao+1]=b([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+bW+bX-len,centerX,centerY+bW+bX)end;ao[#ao+1]=b([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+bW+bX-35,by,centerX,centerY+bW+bX-25,bY)ao[#ao+1]=b([[<g transform="rotate(%f,%d,%d)">]],-br,centerX,centerY)ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+bW+bX-20,centerX+5,centerY+bW+bX-20,centerX,centerY+bW+bX-15)ao[#ao+1]="</g>"end;local bb=bY;if bz then bb=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local b_=20;local c0=a(bb)local c1=0;local c2=centerY+bW+bX+20;local c3=centerX;if by~="YAW"then c2=130;c3=960 end;local c4=[[<path class="txttick line" d="]]for i=a(c0-(b_+10)-c0%5+0.5),a(c0+b_+10+c0%5+0.5),5 do local ab=c3+-i*5+bb*5;if i%10==0 then c1=10;local c5=i;if c5==360 then c5=0 elseif c5>360 then c5=c5-360 elseif c5<0 then c5=c5+360 end;ao[#ao+1]=b([[
                                    <text x="%f" y="%f">%d</text>]],ab+5,c2-12,c5)elseif i%5==0 then c1=5 end;if c1==10 then c4=b([[%s M %f %f v %d]],c4,ab,c2-5,c1)else c4=b([[%s M %f %f v %d]],c4,ab,c2-2.5,c1)end end;ao[#ao+1]=c4 ..[["/>]]ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],c3-5,c2+10,c3+5,c2+10,c3,c2+5)if bz then by="HDG"end;ao[#ao+1]=b([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],c3,c2+25,c0,c3,c2+35,by)end;function DrawArtificialHorizon(ao,bs,br,bt,centerX,centerY,bz,c6,bm)local bW=circleRad;local c7=math.floor(bW*3/5)if bW>0 then local c8=a(bs)local len=0;local c4=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*br,centerX,centerY)if bt==0 then c4=b([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;ao[#ao+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bW-1,centerX,centerY)ao[#ao+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(c8-30-c8%5+0.5),a(c8+30+c8%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local ac=centerY+-i*5+bs*5;if len==30 then c4=b([[%s M %d %f h %d]],c4,centerX-c7-len,ac,len)if bt>0 then ao[#ao+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*br,centerX,centerY,centerX-c7+10,ac,i)ao[#ao+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*br,centerX,centerY,centerX+c7-10,ac,i)if i==0 or i==180 or i==-180 then ao[#ao+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*br,centerX,centerY,centerX-c7+10,ac,c7*2-20)end else ao[#ao+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-c7+10,ac,i)ao[#ao+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+c7-10,ac,i)end;c4=b([[%s M %d %f h %d]],c4,centerX+c7,ac,len)else c4=b([[%s M %d %f h %d]],c4,centerX-c7-len,ac,len)c4=b([[%s M %d %f h %d]],c4,centerX+c7,ac,len)end end;ao[#ao+1]=c4 ..[["/>]]local c9="PITCH"if not bz then c9="REL PITCH"end;if bs>90 and bt==0 then bs=90-(bs-90)elseif bs<-90 and bt==0 then bs=-90-(bs+90)end;if bW>200 then if bt>0 then if bm>MinAutopilotSpeed then ao[#ao+1]=b([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,c6)end;ao[#ao+1]=b([[<g transform="rotate(%f,%d,%d)">]],-br,centerX,centerY)else ao[#ao+1]=b([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-c7+25,centerY-5,centerX-c7+20,centerY,centerX-c7+25,centerY+5,centerX-c7+50,centerY+4,c8)ao[#ao+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+c7-25,centerY-5,centerX+c7-20,centerY,centerX+c7-25,centerY+5,centerX+c7-30,centerY+4,c8)ao[#ao+1]="</g>"end;ao[#ao+1]=b([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-math.floor(bW/2)+15,centerY,bW-10)if bt==0 and bz then ao[#ao+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*br,centerX,centerY,centerX-c7+10,centerY,c7*2-20)end;ao[#ao+1]="</g>"if bW<200 then if bt>0 and bm>MinAutopilotSpeed then ao[#ao+1]=b([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-bW,c9,centerX,centerY-bW+10,c8,centerX,centerY-15,"Yaw",centerX,centerY+20,c6)else ao[#ao+1]=b([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-bW,c9,centerX,centerY-bW+15,c8)end end end end;function DrawAltitudeDisplay(ao,bl,bt)if bl<200000 and bt==0 or bl and bt>0 then local ca=altMeterX;local cb=altMeterY;local cc=78;local cd=19;table.insert(ao,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],ca-1,cb-4,cc+2,cd+6,ca+1,cb-1,cc-4,cd))local an=0;local ce=1;local cf=0;local cg=bl<0;local ch=9;if cg then ch=0 end;local bl=math.abs(bl)while an<6 do local ci=11;local cj=16;local ck=9;local cl=14;local ba="altsm"if an>2 then cj=cj+3;ci=ci+2;cl=cl+2;ck=ck-6;ba="altbig"end;if cg then ba=ba.." red"end;local cm=bl/ce%10;local cn=a(cm)local co=a((cn+1)%10)local cp=cf;if an==0 then cp=cm-cn;if cg then cp=1-cp end end;if cg and(an==0 or cf~=0)then local cq=co;co=cn;cn=cq end;local cr=cj*(cp-1)local cs=cr+cj;local ab=ca+ck+(6-an)*ci;local ac=cb+cl;table.insert(ao,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],ba,ab,ac+cr,co,ab,ac+cs,cn))an=an+1;ce=ce*10;if cn==ch then cf=cp else cf=0 end end;table.insert(ao,[[</g></g>]])end end;function DrawPrograde(ao,bt,velocity,bm,centerX,centerY)if bm>5 and bt==0 or bm>MinAutopilotSpeed then local bW=circleRad;local ct=20;local cu=20;local cv=vec3(velocity)local cw=getRelativePitch(cv)local cx=getRelativeYaw(cv)local cy=-cx/cu*bW;local cz=cw/ct*bW;local ab=centerX+cy;local ac=centerY+cz;local cA=math.sqrt(cy^2+cz^2)if cA<bW then ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ab,ac)else local bS=math.atan(cz,cy)local cB=centerX+bW*math.cos(bS)local cC=centerY+bW*math.sin(bS)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cB,cC)end;cw=getRelativePitch(-cv)cx=getRelativeYaw(-cv)cy=-cx/cu*bW;cz=cw/ct*bW;ab=centerX+cy;ac=centerY+cz;cA=math.sqrt(cy^2+cz^2)if bt==0 then if cA<bW then ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ab,ac)else local bS=math.atan(cz,cy)local cB=centerX+bW*math.cos(bS)local cC=centerY+bW*math.sin(bS)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cB,cC)end end end end;function DrawWarnings(ao)ao[#ao+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)ao[#ao+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ao[#ao+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]ao[#ao+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]ao[#ao+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cD=960;local cE=860;local cF=880;local cG=900;local cH=960;local cI=200;local cJ=150;local cK=960;if l()==1 and not RemoteHud then cE=135;cF=155;cG=175;cI=115;cJ=95 end;if BrakeIsOn then ao[#ao+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cD,cE)end;if f()~=0 and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then ao[#ao+1]=b([[<text x="%d" y="%d">** STALL WARNING **</text>]],cD,cI+25)end;if GyroIsOn then ao[#ao+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cD,cK)end;if GearExtended then if HasGear then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cD,cF)else ao[#ao+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cD,cF)end;ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cD,cG,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cD,cH)end;if IsBoosting then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cD,cH+20)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cD,cI+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))else ao[#ao+1]=b([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cD,cI+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cD,cI,AutopilotStatus)elseif FollowMode then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cD,cI)elseif AltitudeHold then if AutoTakeoff then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cD,cI,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cD,cI+50)end else ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cD,cI,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cD,cI)end;if BrakeLanding then if StrongBrakes then ao[#ao+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cD,cI)else ao[#ao+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cD,cI)end end;if ProgradeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],cD,cI)end;if RetrogradeIsOn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],cD,cI)end;if TurnBurn then ao[#ao+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cD,cJ)end;if VectorToTarget then ao[#ao+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cD,cJ,VectorStatus)end;ao[#ao+1]="</g>"end;function DisplayOrbitScreen(ao)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cL=75;local cM=0;local cN=250;local cO=4;cM=cM+cO;local cP=15;local ab=cL+cN+cL/2+cO;local ac=cM+cN/2+5+cO;local cQ,cR,cS,cT;cQ=cN/4;cT=0;ao[#ao+1]=[[<g class="pbright txtorb txtmid">]]ao[#ao+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cN+cL*2,cN+cM,cO,cO)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cS=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cQ*2)cR=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cS*(1-orbit.eccentricity)cT=cQ-orbit.periapsis.altitude/cS-planet.radius/cS;local cU=""if orbit.periapsis.altitude<=0 then cU='redout'end;ao[#ao+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cU,cL+cN/2+cT+cO,cM+cN/2+cO,cQ,cR)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cL+cN/2+cO,cM+cN/2+cO,planet.radius/cS)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ao[#ao+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ab-35,ac-5,cL+cN/2+cQ+cT,ac-5)ao[#ao+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ab,ac)ac=ac+cP;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getDistanceDisplayString(orbit.apoapsis.altitude))ac=ac+cP;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,FormatTimeString(orbit.timeToApoapsis))ac=ac+cP;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getSpeedDisplayString(orbit.apoapsis.speed))end;ac=cM+cN/2+5+cO;ab=cL-cL/2+10+cO;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ao[#ao+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ab+35,ac-5,cL+cN/2-cQ+cT,ac-5)ao[#ao+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ab,ac)ac=ac+cP;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getDistanceDisplayString(orbit.periapsis.altitude))ac=ac+cP;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,FormatTimeString(orbit.timeToPeriapsis))ac=ac+cP;ao[#ao+1]=b([[<text x="%f" y="%f">%s</text>]],ab,ac,getSpeedDisplayString(orbit.periapsis.speed))end;ao[#ao+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cL+cN/2+cO,20+cO,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cV=orbit.timeToApoapsis/orbit.period*2*math.pi;local cW=cQ*math.cos(cV)local cX=cR*math.sin(cV)ao[#ao+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cL+cN/2+cW+cT+cO,cM+cN/2+cX+cO)end;ao[#ao+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for U,V in pairs(atlas[0])do if w==nil or V.center.x<w then w=V.center.x end;if x==nil or V.center.x>x then x=V.center.x end;if y==nil or V.center.y<y then y=V.center.y end;if z==nil or V.center.y>z then z=V.center.y end end;GalaxyMapHTML=""local cY=1.1*(x-w)/1920;local cZ=1.4*(z-y)/1080;for U,V in pairs(atlas[0])do local ab=960+V.center.x/cY;local ac=540+V.center.y/cZ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ab..'" cy="'..ac..'" r="'..V.radius/cY*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(V.name,"Moon")and not string.match(V.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ab.."' y='"..ac+V.radius/cY*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..V.name.."</text>"end end;local bA=vec3(core.getConstructWorldPos())local ab=960+bA.x/cY;local ac=540+bA.y/cZ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ab..'" cy="'..ac..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ab.."' y='"..ac-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cY;MapYRatio=cZ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bA=vec3(core.getConstructWorldPos())local ab=960+bA.x/cY;local ac=540+bA.y/cZ;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ab-80)/19.20,(ac-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function c_(d0)return type(d0)=='number'end;local function d1(d0)return type(tonumber(d0))=='number'end;local function d2(d3)return type(d3)=='table'end;local function d4(d5)return type(d5)=='string'end;local function d6(V)return d2(V)and c_(V.x and V.y and V.z)end;local function d7(d8)return d2(d8)and c_(d8.latitude and d8.longitude and d8.altitude and d8.bodyId and d8.systemId)end;local d9=math.pi/180;local da=180/math.pi;local db=1e-10;local c5=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dc='::pos{'..c5 ..','..c5 ..','..c5 ..','..c5 ..','..c5 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dd=utils.clamp;local function de(df,dg)if df==0 then return math.abs(dg)<1e-09 end;if dg==0 then return math.abs(df)<1e-09 end;return math.abs(df-dg)<math.max(math.abs(df),math.abs(dg))*db end;local function dh(d0)local W=string.gsub(string.reverse(b('%.4f',d0)),'^0*%.?','')return W==''and'0'or string.reverse(W)end;local function di(dj)if d6(dj)then return b('{x=%.3f,y=%.3f,z=%.3f}',dj.x,dj.y,dj.z)end;if d2(dj)and not getmetatable(dj)then local dk={}local dl=next(dj)if type(dl)=='nil'or dl==1 then dk=dj else for U,V in pairs(dj)do local bP=di(V)if type(U)=='number'then table.insert(dk,b('[%s]=%s',U,bP))else table.insert(dk,b('%s=%s',U,bP))end end end;return b('{%s}',table.concat(dk,','))end;if d4(dj)then return b("'%s'",dj:gsub("'",[[\']]))end;return tostring(dj)end;local dm={}dm.__index=dm;dm.__tostring=function(dj,dn)local dp={}for U in pairs(dj)do table.insert(dp,U)end;table.sort(dp)local dk={}for _,U in ipairs(dp)do local bP=di(dj[U])if type(U)=='number'then table.insert(dk,b('[%s]=%s',U,bP))else table.insert(dk,b('%s=%s',U,bP))end end;if dn then return b('%s%s',dn,table.concat(dk,',\n'..dn))end;return b('{%s}',table.concat(dk,','))end;dm.__eq=function(dq,dr)return dq.planetarySystemId==dr.planetarySystemId and dq.bodyId==dr.bodyId and de(dq.radius,dr.radius)and de(dq.center.x,dr.center.x)and de(dq.center.y,dr.center.y)and de(dq.center.z,dr.center.z)and de(dq.GM,dr.GM)end;local function ds(dt,du,dv,dw,dx)assert(d1(dt),'Argument 1 (planetarySystemId) must be a number:'..type(dt))assert(d1(du),'Argument 2 (bodyId) must be a number:'..type(du))assert(d1(dv),'Argument 3 (radius) must be a number:'..type(dv))assert(d2(dw),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dw))assert(d1(dx),'Argument 5 (GM) must be a number:'..type(dx))return setmetatable({planetarySystemId=tonumber(dt),bodyId=tonumber(du),radius=tonumber(dv),center=vec3(dw),GM=tonumber(dx)},dm)end;local dy={}dy.__index=dy;dy.__tostring=function(dz)return b('::pos{%d,%d,%s,%s,%s}',dz.systemId,dz.bodyId,dh(dz.latitude*da),dh(dz.longitude*da),dh(dz.altitude))end;dy.__eq=function(dq,dr)return dq.bodyId==dr.bodyId and dq.systemId==dr.systemId and de(dq.latitude,dr.latitude)and de(dq.altitude,dr.altitude)and(de(dq.longitude,dr.longitude)or de(dq.latitude,math.pi/2)or de(dq.latitude,-math.pi/2))end;local function dA(dB,du,dC,dD,bl)local dt=dB;if d4(dB)and not dD and not bl and not du and not dC then dt,du,dC,dD,bl=string.match(dB,dc)assert(dt,'Argument 1 (position string) is malformed.')else assert(d1(dt),'Argument 1 (systemId) must be a number:'..type(dt))assert(d1(du),'Argument 2 (bodyId) must be a number:'..type(du))assert(d1(dC),'Argument 3 (latitude) must be in degrees:'..type(dC))assert(d1(dD),'Argument 4 (longitude) must be in degrees:'..type(dD))assert(d1(bl),'Argument 5 (altitude) must be in meters:'..type(bl))end;dt=tonumber(dt)du=tonumber(du)dC=tonumber(dC)dD=tonumber(dD)bl=tonumber(bl)if du==0 then return setmetatable({latitude=dC,longitude=dD,altitude=bl,bodyId=du,systemId=dt},dy)end;return setmetatable({latitude=d9*dd(dC,-90,90),longitude=d9*(dD%360),altitude=bl,bodyId=du,systemId=dt},dy)end;local dE={}dE.__index=dE;dE.__tostring=function(dj,dn)local dF=dn and dn..'  'local dG={}local dp={}for U in pairs(dj)do table.insert(dp,U)end;table.sort(dp)for _,dH in ipairs(dp)do bdy=dj[dH]local dI=dm.__tostring(bdy,dF)if dn then table.insert(dG,b('[%s]={\n%s\n%s}',dH,dI,dn))else table.insert(dG,b('  [%s]=%s',dH,dI))end end;if dn then return b('\n%s%s%s',dn,table.concat(dG,',\n'..dn),dn)end;return b('{\n%s\n}',table.concat(dG,',\n'))end;local function dJ(dK)local atlas={}local pid;for _,V in pairs(dK)do local al=V.planetarySystemId;if type(al)~='number'then error('Invalid planetary system ID: '..tostring(al))elseif pid and al~=pid then error('Mismatch planetary system IDs: '..al..' and '..pid)end;local dL=V.bodyId;if type(dL)~='number'then error('Invalid body ID: '..tostring(dL))elseif atlas[dL]then error('Duplicate body ID: '..tostring(dL))end;setmetatable(V.center,getmetatable(vec3.unit_x))atlas[dL]=setmetatable(V,dm)pid=al end;return setmetatable(atlas,dE)end;PlanetaryReference={}local function dM(dK)return setmetatable({galaxyAtlas=dK or{}},PlanetaryReference)end;PlanetaryReference.__index=function(d3,i)if type(i)=='number'then local system=d3.galaxyAtlas[i]return dJ(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(dj)return function(d3,U)local dN,nv=next(d3,U)return dN,nv and dJ(nv)end,dj.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(dj)local dO={}for _,dP in pairs(dj or{})do local dQ=dP:getPlanetarySystemId()local dR=dE.__tostring(dP,'    ')table.insert(dO,b('  [%s]={%s\n  }',dQ,dR))end;return b('{\n%s\n}\n',table.concat(dO,',\n'))end;PlanetaryReference.BodyParameters=ds;PlanetaryReference.MapPosition=dA;PlanetaryReference.PlanetarySystem=dJ;function PlanetaryReference.createBodyParameters(dS,du,dT,dU,dV,dW,dX)assert(d1(dS),'Argument 1 (planetarySystemId) must be a number:'..type(dS))assert(d1(du),'Argument 2 (bodyId) must be a number:'..type(du))assert(d1(dT),'Argument 3 (surfaceArea) must be a number:'..type(dT))assert(d2(dU),'Argument 4 (aPosition) must be an array or vec3:'..type(dU))assert(d2(dV),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dV))assert(d1(dW),'Argument 6 (altitude) must be in meters:'..type(dW))assert(d1(dX),'Argument 7 (gravityAtPosition) must be number:'..type(dX))local dv=math.sqrt(dT/4/math.pi)local cA=dv+dW;local dY=vec3(dU)+cA*vec3(dV)local dx=dX*cA*cA;return ds(dS,du,dv,dY,dx)end;PlanetaryReference.isMapPosition=d7;function PlanetaryReference:getPlanetarySystem(dB)if i==nil then i=0 end;if nv==nil then nv=0 end;local dS=dB;if d7(dB)then dS=dB.systemId end;if type(dS)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dE then system=dJ(system)end;return system end end end;function dE:castIntersections(dZ,d_,e0,e1)local e0=e0 or function(e2)return 1.05*e2.radius end;local e3={}if e1 then for _,i in ipairs(e1)do e3[i]=self[i]end else e1={}for U,e2 in pairs(self)do table.insert(e1,U)e3[U]=e2 end end;local function e4(e5,e6)local e7=e3[e5].center-dZ;local e8=e3[e6].center-dZ;return e7:len()<e8:len()end;table.sort(e1,e4)local e9=d_:normalize()for i,al in ipairs(e1)do local e2=e3[al]local ea=e2.center-dZ;local dv=e0(e2)local eb=ea:dot(e9)local ec=eb^2-(ea:len2()-dv^2)if ec>=0 then local ed=math.sqrt(ec)local ee=eb+ed;local ef=eb-ed;if ef>0 then return e2,ee,ef elseif ee>0 then return e2,ee,nil end end end;return nil,nil,nil end;function dE:closestBody(eg)assert(type(eg)=='table','Invalid coordinates.')local eh,e2;local ei=vec3(eg)for _,ej in pairs(self)do local ek=(ej.center-ei):len2()if not e2 or ek<eh then e2=ej;eh=ek end end;return e2 end;function dE:convertToBodyIdAndWorldCoordinates(dB)local el=dB;if d4(dB)then el=dA(dB)end;if el.bodyId==0 then return 0,vec3(el.latitude,el.longitude,el.altitude)end;local ej=self:getBodyParameters(el)if ej then return el.bodyId,ej:convertToWorldCoordinates(el)end end;function dE:getBodyParameters(dB)local du=dB;if d7(dB)then du=dB.bodyId end;assert(d1(du),'Argument 1 (bodyId) must be a number:'..type(du))return self[du]end;function dE:getPlanetarySystemId()local _,V=next(self)return V and V.planetarySystemId end;function dm:convertToMapPosition(dw)assert(d2(dw),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dw))local em=vec3(dw)if self.bodyId==0 then return setmetatable({latitude=em.x,longitude=em.y,altitude=em.z,bodyId=0,systemId=self.planetarySystemId},dy)end;local en=em-self.center;local cA=en:len()local bl=cA-self.radius;local dC=0;local dD=0;if not de(cA,0)then local eo=math.atan(en.y,en.x)dD=eo>=0 and eo or 2*math.pi+eo;dC=math.pi/2-math.acos(en.z/cA)end;return setmetatable({latitude=dC,longitude=dD,altitude=bl,bodyId=self.bodyId,systemId=self.planetarySystemId},dy)end;function dm:convertToWorldCoordinates(dB)local el=d4(dB)and dA(dB)or dB;if el.bodyId==0 then return vec3(el.latitude,el.longitude,el.altitude)end;assert(d7(el),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(el.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(el.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ep=math.cos(el.latitude)return self.center+(self.radius+el.altitude)*vec3(ep*math.cos(el.longitude),ep*math.sin(el.longitude),math.sin(el.latitude))end;function dm:getAltitude(dw)return(vec3(dw)-self.center):len()-self.radius end;function dm:getDistance(dw)return(vec3(dw)-self.center):len()end;function dm:getGravity(dw)local eq=self.center-vec3(dw)local er=eq:len2()return self.GM/er*eq/math.sqrt(er)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dM(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function d4(d5)return type(d5)=='string'end;local function d2(d3)return type(d3)=='table'end;local function de(df,dg)if df==0 then return math.abs(dg)<1e-09 end;if dg==0 then return math.abs(df)<1e-09 end;return math.abs(df-dg)<math.max(math.abs(df),math.abs(dg))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bl)assert(self.body)local cA=bl+self.body.radius;if not de(cA,0)then local orbit=math.sqrt(self.body.GM/cA)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dB,velocity)assert(self.body)assert(d2(dB)or d4(dB))assert(d2(velocity))local bA=(d4(dB)or PlanetRef.isMapPosition(dB))and self.body:convertToWorldCoordinates(dB)or vec3(dB)local V=vec3(velocity)local es=bA-self.body.center;local e8=V:len2()local et=es:len()local eu=self.body.GM;local ev=((e8-eu/et)*es-es:dot(V)*V)/eu;local df=eu/(2*eu/et-e8)local ew=ev:len()local e9=ev:normalize()local ex=df*(1-ew)local ey=df*(1+ew)local ez=ex*e9+self.body.center;local eA=ew<=1 and-ey*e9+self.body.center or nil;local eB=math.sqrt(df*eu*(1-ew*ew))local eC=eA and 2*math.pi*math.sqrt(df^3/eu)local eD=math.acos(ev:dot(es)/(ew*et))if es:dot(V)<0 then eD=-(eD-2*math.pi)end;local eE=math.acos((math.cos(eD)+ew)/(1+ew*math.cos(eD)))local eF=eE;if eF<0 then eF=eF+2*math.pi end;local eG=eF-ew*math.sin(eF)local eH=0;local eI=0;local eJ=0;if eC~=nil then eH=eG/(2*math.pi/eC)eI=eC-eH;eJ=eI+eC/2;if eD-math.pi>0 then eI=eH;eJ=eI+eC/2 end;if eJ>eC then eJ=eJ-eC end end;return{periapsis={position=ez,speed=eB/ex,circularOrbitSpeed=math.sqrt(eu/ex),altitude=ex-self.body.radius},apoapsis=eA and{position=eA,speed=eB/ey,circularOrbitSpeed=math.sqrt(eu/ey),altitude=ey-self.body.radius},currentVelocity=V,currentPosition=bA,eccentricity=ew,period=eC,eccentricAnomaly=eE,meanAnomaly=eG,timeToPeriapsis=eI,timeToApoapsis=eJ}end;local function eK(eL)local ej=PlanetRef.BodyParameters(eL.planetarySystemId,eL.bodyId,eL.radius,eL.center,eL.GM)return setmetatable({body=ej},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eK(...)end})end;function Kinematics()local Kinematic={}local eM=30000000/3600;local eN=eM*eM;local eO=100;local function eP(V)return 1/math.sqrt(1-V*V/eN)end;function Kinematic.computeAccelerationTime(eQ,eR,eS)local eT=eM*math.asin(eQ/eM)return(eM*math.asin(eS/eM)-eT)/eR end;function Kinematic.computeDistanceAndTime(eQ,eS,eU,eV,eW,eX)eW=eW or 0;eX=eX or 0;local eY=eQ<=eS;local eZ=eV*(eY and 1 or-1)/eU;local e_=-eX/eU;local f0=eZ+e_;if eY and f0<=0 or not eY and f0>=0 then return-1,-1 end;local f1,f2=0,0;if eZ~=0 and eW>0 then local eT=math.asin(eQ/eM)local f3=math.pi*(eZ/2+e_)local f4=eZ*eW;local f5=eM*math.pi;local V=function(d3)local aH=(f3*d3-f4*math.sin(math.pi*d3/2/eW)+f5*eT)/f5;local f6=math.tan(aH)return eM*f6/math.sqrt(f6*f6+1)end;local f7=eY and function(d5)return d5>=eS end or function(d5)return d5<=eS end;f2=2*eW;if f7(V(f2))then local f8=0;while math.abs(f2-f8)>0.5 do local d3=(f2+f8)/2;if f7(V(d3))then f2=d3 else f8=d3 end end end;local f9=eQ;local fa=f2/eO;for fb=1,eO do local bm=V(fb*fa)f1=f1+(bm+f9)*fa/2;f9=bm end;if f2<2*eW then return f1,f2 end;eQ=f9 end;local eT=eM*math.asin(eQ/eM)local fc=(eM*math.asin(eS/eM)-eT)/f0;local fd=eN*math.cos(eT/eM)/f0;local cA=fd-eN*math.cos((f0*fc+eT)/eM)/f0;return cA+f1,fc+f2 end;function Kinematic.computeTravelTime(eQ,eR,cA)if cA==0 then return 0 end;if eR>0 then local eT=eM*math.asin(eQ/eM)local fd=eN*math.cos(eT/eM)/eR;return(eM*math.acos(eR*(fd-cA)/eN)-eT)/eR end;assert(eQ>0,'Acceleration and initial speed are both zero.')return cA/eQ end;function Kinematic.lorentz(V)return eP(V)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cA)local fe=cA>100000;local W=""if fe then W=round(cA/1000/200,1).." SU"elseif cA<1000 then W=round(cA,1).." M"else W=round(cA/1000,1).." KM"end;return W end;function getDistanceDisplayString2(cA)local fe=cA>100000;local W=""if fe then W=round(cA/1000/200,2).." SU"elseif cA<1000 then W=round(cA,2).." M"else W=round(cA/1000,2).." KM"end;return W end;function getSpeedDisplayString(bm)return a(round(bm*3.6,0)+0.5).." km/h"end;function FormatTimeString(ff)local fg=a(ff/86400)local fh=a(ff/3600)local fi=a(ff/60%60)local ff=a(ff%60)if ff<0 or fh<0 or fi<0 then return"0s"end;if fg>0 then return fg.."d "..fh.."h "elseif fh>0 then return fh.."h "..fi.."m "elseif fi>0 then return fi.."m "..ff.."s"else return ff.."s"end end;function getMagnitudeInDirection(bc,d_)bc=vec3(bc)d_=vec3(d_):normalize()local W=bc*d_;return W.x+W.y+W.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local fj=AtlasOrdered[AutopilotTargetIndex].index;local fk=atlas[0][fj]if fk.center then AutopilotTargetName=fk.name;AutopilotTargetPlanet=galaxyReference[0][fj]if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=fk;for _,V in pairs(galaxyReference[0])do if V.name==CustomTarget.planetname then AutopilotTargetPlanet=V;AutopilotTargetName=nil;break end end end;AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fl=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return fl end;function GetAutopilotTravelTime()if not Autopilot then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()end;local velocity=core.getWorldVelocity()local fm,fn=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local fo,fp;if not TurnBurn then fo,fp=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fo,fp=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fq;if not TurnBurn then _,fq=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,fq=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local fr=0;local fs=0;if AutopilotCruising then fs=Kinematic.computeTravelTime(vec3(velocity):len(),0,AutopilotDistance)elseif fo+fm<AutopilotDistance then fr=AutopilotDistance-(fo+fm)fs=Kinematic.computeTravelTime(8333.0556,0,fr)else local ft=(AutopilotDistance-fo)/fm;fm=AutopilotDistance-fo;fn=fn*ft end;if AutopilotBraking then return fq elseif AutopilotCruising then return fs+fq else return fn+fp+fs end end;function GetAutopilotBrakeDistanceAndTime(bm)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(bm,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(bm,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bm)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(bm,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fu=Nav.axisCommandManager:getAxisCommandType(0)local bx="TRAVEL"if fu==1 then bx="CRUISE"end;if Autopilot then bx="AUTOPILOT"end;return bx end;function hoverDetectGround()local fv=-1;if vBooster then fv=vBooster.distance()elseif hover then fv=hover.distance()end;return fv end;function round(c5,fw)local fx=10^(fw or 0)return a(c5*fx+0.5)/fx end;function tablelength(fy)local fz=0;for _ in pairs(fy)do fz=fz+1 end;return fz end;function BeginProfile(fA)ProfileTimeStart=system.getTime()end;function EndProfile(fA)local fB=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fB;ProfileCount=ProfileCount+1;if fB>ProfileTimeMax then ProfileTimeMax=fB end;if fB<ProfileTimeMin then ProfileTimeMin=fB end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fC=ProfileTimeSum;local fD=ProfileTimeSum/ProfileCount;local fE=ProfileTimeMin;local fF=ProfileTimeMax;local fG=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fC,fD,fE,fF,fG))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fH=radar_1.getEntries()local fI=radar_1.getData()if#fH>0 then if HasSpaceRadar and EmergencyWarp then local fJ=fI:gmatch('{"constructId[^}]*}[^}]*}')for V in fJ do local al,cA=V:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*)]])if al~=nil and al~=""then cA=math.floor(cA)if cA<EmergencyWarpDistance and cA>IgnoreEmergencyWarpDistance then if NotTriedEmergencyWarp and json.decode(warpdrive.getData()).errorMsg~="PLANET TOO CLOSE"then if radar_1.hasMatchingTransponder(al)~=1 then if RequireLock then if not V:find('targetThreatState":0')then InEmergencyWarp=true;NotTriedEmergencyWarp=false;break end else InEmergencyWarp=true;NotTriedEmergencyWarp=false;break end end end end end end end;local fK=fI:find('identifiedConstructs":%[%]')if fK==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fK~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fH)local fL={}for U,V in pairs(fH)do if radar_1.hasMatchingTransponder(V)==1 then fL[#fL+1]=V end end;if#fL>0 then local ac=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,ac)for U,V in pairs(fL)do ac=ac+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,ac,radar_1.getConstructName(V))end end else local fJ;fJ=fI:find('worksInEnvironment":false')if fJ then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fM=unit.getAtmosphereDensity()if door and(fM>0 or fM==0 and CoreAltitude<10000)then for _,V in pairs(door)do V.activate()end end;if forcefield and(fM>0 or fM==0 and CoreAltitude<10000)then for _,V in pairs(forcefield)do V.activate()end end;if dbHud then if not WipedDatabank then for U,V in pairs(AutoVariables)do dbHud.setStringValue(V,json.encode(_G[V]))end;for U,V in pairs(SaveableVariables)do dbHud.setStringValue(V,json.encode(_G[V]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fN)if fN=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;EmergencyWarp=false;InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).destination~="Unknown"and json.decode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fN=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local ao={}local bx=GetFlightStyle()DrawOdometer(ao,TotalDistanceTrip,TotalDistanceTravelled,bx,FlightTime)checkDamage(ao)LastOdometerOutput=table.concat(ao,"")collectgarbage("collect")elseif fN=="reEmergencyWarp"then if EmergencyWarp then NotTriedEmergencyWarp=true;InEmergencyWarp=true end;unit.stopTimer("reEmergencyWarp")elseif fN=="msgTick"then local ao={}DisplayMessage(ao,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fN=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fN=="apTick"then local l=Nav.control.isRemoteControlled;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)HovGndDet=hoverDetectGround()local fO=system.getMouseDeltaX()local fP=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fQ=velMag>8334;if not fQ and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fQ;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local ao={}HUDPrologue(ao)if showHud then updateHud(ao)else DisplayOrbitScreen(ao)DrawWarnings(ao)end;HUDEpilogue(ao)ao[#ao+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(ao,MsgText)end;if l()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(ao)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(ao)if screen_1.getMouseState()==1 then CheckButtons()end;ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fO;SimulatedY=SimulatedY+fP end;SetButtonContains()DrawButtons(ao)if not Animating and not Animated then local fR=table.concat(ao,"")ao={}ao[#ao+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ao[#ao+1]=GalaxyMapHTML;ao[#ao+1]=fR;ao[#ao+1]="</body>"Animating=true;ao[#ao+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ao,"")system.setScreen(content)elseif Animated then local fR=table.concat(ao,"")ao={}ao[#ao+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ao[#ao+1]=GalaxyMapHTML;ao[#ao+1]=fR;ao[#ao+1]="</body>"end;if not Animating then ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fO;SimulatedY=SimulatedY+fP;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="virtual joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fP,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fO,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(ao)end else SetButtonContains()DrawButtons(ao)end;ao[#ao+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;ao[#ao+1]=[[</svg></body>]]content=table.concat(ao,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then local fS=AlignToWorldVector(vec3(velocity),0.01)if SpaceLand then autoRoll=true;if fS then ProgradeIsOn=false;ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and SpaceLand then if unit.getAtmosphereDensity()==0 then ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true else SpaceLand=false;ToggleAutopilot()end end;if FinalLand and CoreAltitude<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()FinalLand=false end;if Autopilot and unit.getAtmosphereDensity()==0 then local fo,fp;if not TurnBurn then fo,fp=GetAutopilotBrakeDistanceAndTime(velMag)else fo,fp=GetAutopilotTBBrakeDistanceAndTime(velMag)end;fo=fo;fp=fp;local fT=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fU=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fV=getMagnitudeInDirection(fU,AutopilotShipUp)local fW=getMagnitudeInDirection(fU,AutopilotShipRight)local fX=-fW*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local fY=-fV*AutopilotDistance*velMag*TrajectoryAlignmentStrength;fT=AutopilotTargetCoords+-fX*vec3(AutopilotShipRight)+-fY*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fT)-vec3(core.getConstructWorldPos())):len()local fZ=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(fZ)..'", "unit":""}')local f_=true;local g0=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(g0)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then f_=AlignToWorldVector((fT-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then f_=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not f_ or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false elseif not APThrottleSet then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(g0-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and APThrottleSet then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end;if AutopilotDistance<=fo then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"MsgText="Autopilot completed, orbit established"BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false;if CustomTarget~=nil then ProgradeIsOn=true;SpaceLand=true end end end elseif AutopilotCruising then if AutopilotDistance<=fo then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if f_ then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif f_ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not APThrottleSet then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true;BrakeIsOn=false end end end end end;if FollowMode then autoRoll=true;local g1=0;local bA=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local g2=bA-vec3(core.getConstructWorldPos())local g3=vec3(g2):project_on(vec3(core.getConstructWorldOrientationForward())):len()local g4=vec3(g2):project_on(vec3(core.getConstructWorldOrientationRight())):len()local cA=math.sqrt(g3*g3+g4*g4)AlignToWorldVector(g2:normalize())local g5=40;local g6=cA<g5;local g7=100;local g8=utils.clamp((cA-g5)/2,10,g7)PitchInput2=0;local f_=math.abs(YawInput2)<0.1;if f_ and velMag<g8 and not g6 then BrakeIsOn=false;g1=-20 else BrakeIsOn=true;g1=0 end;local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local aF=getPitch(bn,bo,bp)local g9=1.0;if math.abs(g1-aF)>g9 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(g1-aF)local ga=pitchPID:get()PitchInput2=ga end end;local bT=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then local bl=CoreAltitude;local gb=HoldAltitude-bl;local gc=500+velMag;local g1=(utils.smoothstep(gb,-gc,gc)-0.5)*2*MaxPitch;if not AltitudeHold then g1=0 end;autoRoll=true;if Reentry then local gd=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=gd then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,gd)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then g1=-80;if unit.getAtmosphereDensity()>0.02 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;g1=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false;autoRoll=autoRollPreference end end;local ge=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local be=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(be)local gf=be:len()-be:project_on(bT):len()local a6=json.decode(unit.getData()).maxBrake;local bR=velocity.x*bT.x+velocity.y*bT.y+velocity.z*bT.z;local gg=velocity:len()-math.abs(bR)local gh=vec3(core.getWorldAirFrictionAcceleration())if a6~=nil then LastMaxBrake=a6;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gg,0,core.getConstructMass(),0,0,a6+(gh:len()-gh:project_on(bT):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gg,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if gf<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and gf>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=gf end;PitchInput2=ge;local bo=vec3(core.getConstructWorldOrientationForward())local bp=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local fv=-1;local aF=getPitch(bn,bo,bp)local g9=0.1;if BrakeLanding then g1=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bR=velocity.x*bT.x+velocity.y*bT.y+velocity.z*bT.z;fv=HovGndDet;if fv>-1 then if math.abs(g1-aF)<g9 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bT)<0.99 then BrakeIsOn=true elseif bR<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or SpaceLaunch then if g1<20 then AutoTakeoff=false;if not SpaceLaunch then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;SpaceLaunch=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif SpaceLaunch and unit.getAtmosphereDensity()==0 and CoreAltitude>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(g1-aF)>g9 then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(g1-aF)local ga=pitchPID:get()PitchInput2=PitchInput2+ga end end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 then if antigrav.getState()==1 then local velocity=vec3(core.getWorldVelocity())local bT=vec3(core.getWorldVertical())*-1;local bR=velocity.x*bT.x+velocity.y*bT.y+velocity.z*bT.z;local gi=antigrav.getBaseAltitude()if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;local gj=unit.getThrottle()if Nav.axisCommandManager:getAxisCommandType(0)==1 then gj=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)end;local gk=math.abs(CoreAltitude-gi)if gj>-1 and gj<1 and gk>10 and gk<501 and unit.getAtmosphereDensity()<0.01 then if CoreAltitude>antigrav.getBaseAltitude()and AntigravTargetAltitude>CoreAltitude and bR<0 or CoreAltitude<antigrav.getBaseAltitude()and AntigravTargetAltitude<CoreAltitude and bR>0 then BrakeIsOn=true else BrakeIsOn=false end end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()if antigrav then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local gl=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)gl=math.max(gl,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local gm=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local gn=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local go=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local gp=BrakeInput;local gq=vec3(core.getWorldVertical())local gr=vec3(core.getConstructWorldOrientationUp())local gs=vec3(core.getConstructWorldOrientationForward())local gt=vec3(core.getConstructWorldOrientationRight())local gu=vec3(core.getWorldVelocity())local gv=vec3(core.getWorldVelocity()):normalize()local gw=getRoll(gq,gs,gt)local gx=math.abs(gw)local gy=utils.sign(gw)local f=unit.getAtmosphereDensity()local gz=vec3(core.getWorldAngularVelocity())local gA=gm*pitchSpeedFactor*gt+gn*rollSpeedFactor*gs+go*yawSpeedFactor*gr;if gq:len()>0.01 and f>0.0 or ProgradeIsOn then local gB=1.0;if autoRoll==true and gx>gB and gn==0 then local gC=utils.clamp(0,gx-30,gx+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gC-gw)local gD=rollPID:get()gA=gA+gD*gs end end;if gq:len()>0.01 and f>0.0 then local gE=20.0;if turnAssist==true and gx>gE and gm==0 and go==0 then local gF=turnAssistFactor*0.1;local gG=turnAssistFactor*0.025;local gH=(gx-gE)/(180-gE)*180;local gI=0;if gH<90 then gI=gH/90 elseif gH<180 then gI=(180-gH)/90 end;gI=gI*gI;local gJ=-gy*gG*(1.0-gI)local gK=gF*gI;gA=gA+gK*gt+gJ*gr end end;local gL=1;local gM=0;local gN=1;local gO=gl*(gA-gz)local gP=vec3(core.getWorldAirFrictionAngularAcceleration())gO=gO-gP;Nav:setEngineTorqueCommand('torque',gO,gL,'airfoil','','',gN)local gQ=-gp*(brakeSpeedFactor*gu+brakeFlatFactor*gv)Nav:setEngineForceCommand('brake',gQ)local gR=''local gS=vec3()local gT=false;local gU='thrust analog longitudinal'local gV=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gV==axisCommandType.byThrottle then local gW=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gU,axisCommandId.longitudinal)Nav:setEngineForceCommand(gU,gW,gL)elseif gV==axisCommandType.byTargetSpeed then local gW=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gR=gR..' , '..gU;gS=gS+gW;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gT=true end end;local gX='thrust analog lateral'local gY=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gY==axisCommandType.byThrottle then local gZ=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gX,axisCommandId.lateral)Nav:setEngineForceCommand(gX,gZ,gL)elseif gY==axisCommandType.byTargetSpeed then local g_=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gR=gR..' , '..gX;gS=gS+g_ end;local h0='thrust analog vertical'local h1=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if h1==axisCommandType.byThrottle then local h2=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(h0,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(h0,h2,gL,'airfoil','ground','',gN)else Nav:setEngineForceCommand(h0,vec3(),gL)Nav:setEngineForceCommand('airfoil vertical',h2,gL,'airfoil','','',gN)Nav:setEngineForceCommand('ground vertical',h2,gL,'ground','','',gN)end elseif h1==axisCommandType.byTargetSpeed then if UpAmount==0 then Nav:setEngineForceCommand('hover',vec3(),gL)end;local h3=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gR=gR..' , '..h0;gS=gS+h3 end;if gS:len()>constants.epsilon then if BrakeInput~=0 or gT or math.abs(gv:dot(gs))<0.95 then gR=gR..', brake'end;Nav:setEngineForceCommand(gR,gS,gM,'','','',gN)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local bm=vec3(core.getVelocity()):len()local h4=unit.setEngineThrust;local h5=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local gj=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bm*3.6>gj*(1-h5)then h4('rocket_engine',0)elseif IsBoosting then h4('rocket_engine',1)end else local h6=unit.getThrottle()local g8=h6/100;if f==0 then g8=g8*MaxGameVelocity;if bm>=g8*(1-h5)then h4('rocket_engine',0)elseif IsBoosting then h4('rocket_engine',1)end else g8=g8*1050/3.6;if bm>=g8*(1-h5)then h4('rocket_engine',0)elseif IsBoosting then h4('rocket_engine',1)end end end end end;function script.onUpdate()if not SetupComplete then local _,W=coroutine.resume(beginSetup)if W then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(h7)if h7=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and HovGndDet==-1 and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif h7=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif h7=="forward"then PitchInput=PitchInput-1 elseif h7=="backward"then PitchInput=PitchInput+1 elseif h7=="left"then RollInput=RollInput-1 elseif h7=="right"then RollInput=RollInput+1 elseif h7=="yawright"then YawInput=YawInput-1 elseif h7=="yawleft"then YawInput=YawInput+1 elseif h7=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif h7=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif h7=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif h7=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif h7=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif h7=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif h7=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif h7=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif h7=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif h7=="option4"then ToggleAutopilot()ToggleView=false elseif h7=="option5"then ToggleTurnBurn()ToggleView=false elseif h7=="option6"then ToggleAltitudeHold()ToggleView=false elseif h7=="option7"then wipeSaveVariables()ToggleView=false elseif h7=="option8"then ToggleFollowMode()ToggleView=false elseif h7=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif h7=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif h7=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif h7=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif h7=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif h7=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif h7=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif h7=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif h7=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif h7=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(h7)if h7=="forward"then PitchInput=0 elseif h7=="backward"then PitchInput=0 elseif h7=="left"then RollInput=0 elseif h7=="right"then RollInput=0 elseif h7=="yawright"then YawInput=0 elseif h7=="yawleft"then YawInput=0 elseif h7=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif h7=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif h7=="up"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif h7=="down"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif h7=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif h7=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif h7=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif h7=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif h7=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(h7)if h7=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif h7=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif h7=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif h7=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(ao,h8)if h8~="empty"then ao[#ao+1]=[[<text class="msg" x="50%%" y="310" >]]for h9 in string.gmatch(h8,"([^\n]+)")do ao[#ao+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],h9)end;ao[#ao+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a1=system.getTime()local velocity=vec3(core.getWorldVelocity())local bv=vec3(velocity):len()local ha=a1-LastTravelTime;if bv>1.38889 then bv=bv/1000;local hb=bv*(a1-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+hb;TotalDistanceTrip=TotalDistanceTrip+hb end;FlightTime=FlightTime+ha;TotalFlightTime=TotalFlightTime+ha;LastTravelTime=a1 end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
