name: ButtonsHud - Dimencia and Archaegeo v4.910 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        ResolutionY = 1080 --export: Default is 1080, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;DisplayOrbit=true;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav"}local b={"BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj={}local ak=0;local al=0;local am=""local an=true;local ao={}local ap=1;local aq=0.001;local ar=ResolutionX;local as=ResolutionY;local at=nil;local au=nil;local av=nil;local aw=nil;local ax=false;local ay=false;local az=0;local aA=nil;local aB={}local aC={}local aD={}local aE=0;local aF=false;local aG={}local aH={}local aI=d(1/apTickRate)*2;local aJ={}local aK={}local aL={}local aM={}local aN=false;local aO=16;local aP=0;function script.onStart()VERSION_NUMBER=4.910;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})if dbHud_1 then local aQ=dbHud_1.hasKey;if not useTheseSettings then for aR,aS in pairs(a)do if aQ(aS)then local aT=f(dbHud_1.getStringValue(aS))if aT~=nil then c(aS.." "..dbHud_1.getStringValue(aS))_G[aS]=aT;ax=true end end end end;coroutine.yield()for aR,aS in pairs(b)do if aQ(aS)then local aT=f(dbHud_1.getStringValue(aS))if aT~=nil then c(aS.." "..dbHud_1.getStringValue(aS))_G[aS]=aT;ax=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"elseif ax then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;coroutine.yield()local aU=system.getTime()if LastStartTime+180<aU then LastMaxBrakeInAtmo=0 end;s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)LastStartTime=aU;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;local aV=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local aW=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]for aR in pairs(af)do local type=l(af[aR])if type=="landing gear"then A=true end;if type=="dynamic core"then local aX=h(af[aR])if aX>10000 then aO=128 elseif aX>1000 then aO=64 elseif aX>150 then aO=32 end end;aE=aE+h(af[aR])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local aX=h(af[aR])local aY=m(af[aR])local aZ=0;local a_=system.getTime()if type=="Atmospheric Fuel Tank"then local b0=400;local b1=35.03;if aX>10000 then b0=51200;b1=5480 elseif aX>1300 then b0=6400;b1=988.67 elseif aX>150 then b0=1600;b1=182.67 end;aZ=aY-b1;if fuelTankHandlingAtmo>0 then b0=b0+b0*fuelTankHandlingAtmo*0.2 end;if aZ>b0 then b0=aZ end;aB[#aB+1]={af[aR],core.getElementNameById(af[aR]),b0,b1,aZ,a_}end;if type=="Rocket Fuel Tank"then local b0=320;local b1=173.42;if aX>65000 then b0=40000;b1=25740 elseif aX>6000 then b0=5120;b1=4720 elseif aX>700 then b0=640;b1=886.72 end;aZ=aY-b1;if fuelTankHandlingRocket>0 then b0=b0+b0*fuelTankHandlingRocket*0.2 end;if aZ>b0 then b0=aZ end;aD[#aD+1]={af[aR],core.getElementNameById(af[aR]),b0,b1,aZ,a_}end;if type=="Space Fuel Tank"then local b0=2400;local b1=182.67;if aX>10000 then b0=76800;b1=5480 elseif aX>1300 then b0=9600;b1=988.67 end;aZ=aY-b1;if fuelTankHandlingSpace>0 then b0=b0+b0*fuelTankHandlingSpace*0.2 end;if aZ>b0 then b0=aZ end;aC[#aC+1]={af[aR],core.getElementNameById(af[aR]),b0,b1,aZ,a_}end end end end;coroutine.yield()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,aS in pairs(door)do aS.toggle()end end;if switch then for _,aS in pairs(switch)do aS.toggle()end end;if forcefield then for _,aS in pairs(forcefield)do aS.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not A then GearExtended=true end else if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad;unit.hide()function ConvertResolutionX(aS)if ResolutionX==1920 then return aS else return round(ResolutionX*aS/1920,0)end end;function ConvertResolutionY(aS)if ResolutionY==1080 then return aS else return round(ResolutionY*aS/1080,0)end end;function RefreshLastMaxBrake(b2,b3)if b2==nil then b2=core.g()end;b2=round(b2,5)local b4=j()if b3~=nil and b3 or(aA==nil or aA~=b2)then local velocity=core.getVelocity()local b5=vec3(velocity):len()local b6=f(unit.getData()).maxBrake;if b6~=nil and b6>0 and ad then b6=b6/utils.clamp(b5/100,0.1,1)b6=b6/b4;if b6>LastMaxBrakeInAtmo and b4>0.10 then LastMaxBrakeInAtmo=b6 end end;if b6~=nil and b6>0 then LastMaxBrake=b6 end;aA=b2 end end;function MakeButton(b7,b8,b9,ba,bb,bc,bd,be,bf)local bg={enableName=b7,disableName=b8,width=b9,height=ba,x=bb,y=bc,toggleVar=bd,toggleFunction=be,drawCondition=bf,hovered=false}table.insert(ao,bg)return bg end;function UpdateAtlasLocationsList()AtlasOrdered={}for aR,aS in pairs(atlas[0])do table.insert(AtlasOrdered,{name=aS.name,index=aR})end;local function bh(bi,bj)return bi.name<bj.name end;table.sort(AtlasOrdered,bh)end;function AddLocationsToAtlas()for aR,aS in pairs(SavedLocations)do table.insert(atlas[0],aS)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bk=planet.name..". "..#SavedLocations;if radar_1 then local bl,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bl~=nil and bl~=""then bk=bk.." "..radar_1.getConstructName(bl)end end;local bm={position=position,name=bk,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=bm;table.insert(atlas[0],bm)UpdateAtlasLocationsList()K="Location saved as "..bk else K="Databank must be installed to save locations"end end;function UpdatePosition()local bn=-1;local bm;for aR,aS in pairs(SavedLocations)do if aS.name and aS.name==CustomTarget.name then bn=aR;break end end;if bn~=-1 then bm={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bn].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[bn]=bm;bn=-1;for aR,aS in pairs(atlas[0])do if aS.name and aS.name==CustomTarget.name then bn=aR end end;if bn>-1 then atlas[0][bn]=bm end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local bn=-1;for aR,aS in pairs(atlas[0])do if aS.name and aS.name==CustomTarget.name then bn=aR end end;if bn>-1 then table.remove(atlas[0],bn)end;bn=-1;for aR,aS in pairs(SavedLocations)do if aS.name and aS.name==CustomTarget.name then K=aS.name.." saved location cleared"bn=aR;break end end;if bn~=-1 then table.remove(SavedLocations,bn)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bo)bo[#bo+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if an then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;an=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;an=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bp,bq,bb,bc,b9,ba)if bp>bb and bp<bb+b9 and bq>bc and bq<bc+ba then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bt=vec3(core.getWorldVertical())local bu=getPitch(bt,br,bs)LockPitch=bu;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else a7=true end else a8=true;RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function CheckDamage(bo)local bv=0;am=""local bw=aE;local bx=0;local by=0;local bz=0;local bA=0;local bB=""for aR in pairs(af)do local aX=0;local bC=0;bC=h(af[aR])aX=k(af[aR])bx=bx+aX;if aX<bC then if aX==0 then bz=bz+1 else by=by+1 end;if aF and#aj==0 then position=vec3(core.getElementPositionById(af[aR]))local bb=position.x-aO;local bc=position.y-aO;local bD=position.z-aO;table.insert(aj,core.spawnArrowSticker(bb,bc,bD+1,"down"))table.insert(aj,core.spawnArrowSticker(bb,bc,bD+1,"down"))core.rotateSticker(aj[2],0,0,90)table.insert(aj,core.spawnArrowSticker(bb+1,bc,bD,"north"))table.insert(aj,core.spawnArrowSticker(bb+1,bc,bD,"north"))core.rotateSticker(aj[4],90,90,0)table.insert(aj,core.spawnArrowSticker(bb-1,bc,bD,"south"))table.insert(aj,core.spawnArrowSticker(bb-1,bc,bD,"south"))core.rotateSticker(aj[6],90,-90,0)table.insert(aj,core.spawnArrowSticker(bb,bc-1,bD,"east"))table.insert(aj,core.spawnArrowSticker(bb,bc-1,bD,"east"))core.rotateSticker(aj[8],90,0,90)table.insert(aj,core.spawnArrowSticker(bb,bc+1,bD,"west"))table.insert(aj,core.spawnArrowSticker(bb,bc+1,bD,"west"))core.rotateSticker(aj[10],-90,0,90)table.insert(aj,af[aR])end elseif aF and#aj>0 and aj[11]==af[aR]then for bE in pairs(aj)do core.deleteSticker(aj[bE])end;aj={}end end;bv=d(bx/bw*100)if bv<100 then bo[#bo+1]=[[<g class="pbright txt">]]bA=d(bv*2.55)bB=e("rgb(%d,%d,%d)",255-bA,bA,0)if bv<100 then bo[#bo+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],bB,bv)if bz>0 then bo[#bo+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],bB,bz,by)elseif by>0 then bo[#bo+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],bB,by)end end;bo[#bo+1]=[[<\g>]]end end;function DrawCursorLine(bo)local bF=d(utils.clamp(a3/(ar/4)*255,0,255))bo[#bo+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+bF,d(PrimaryG+0.5)-bF,d(PrimaryB+0.5)-bF)end;function getPitch(bG,bH,bj)local bI=bG:cross(bj):normalize_inplace()local bu=math.acos(utils.clamp(bI:dot(-bH),-1,1))*constants.rad2deg;if bI:cross(-bH):dot(bj)<0 then bu=-bu end;return bu end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if ay then for aR,aS in pairs(a)do dbHud_1.setStringValue(aS,g(nil))end;for aR,aS in pairs(b)do if aS~="SavedLocations"then dbHud_1.setStringValue(aS,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;ay=false;ax=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"ay=true end end end;function CheckButtons()for _,aS in pairs(ao)do if aS.hovered then if not aS.drawCondition or aS.drawCondition()then aS.toggleFunction()end;aS.hovered=false end end end;function SetButtonContains()local bb=a0+ar/2;local bc=a1+as/2;for _,aS in pairs(ao)do aS.hovered=Contains(bb,bc,aS.x,aS.y,aS.width,aS.height)end end;function DrawButton(bo,bJ,hover,bb,bc,bK,bL,bM,bN,bO,bP)if type(bO)=="function"then bO=bO()end;if type(bP)=="function"then bP=bP()end;bo[#bo+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bb,bc,bK,bL)if bJ then bo[#bo+1]=e("%s'",bM)else bo[#bo+1]=bN end;if hover then bo[#bo+1]=" style='stroke:white; stroke-width:2'"else bo[#bo+1]=" style='stroke:black; stroke-width:1'"end;bo[#bo+1]="></rect>"bo[#bo+1]=e("<text x='%f' y='%f' font-size='24' fill='",bb+bK/2,bc+bL/2+5)if bJ then bo[#bo+1]="black"else bo[#bo+1]="white"end;bo[#bo+1]="' text-anchor='middle' font-family='Montserrat'>"if bJ then bo[#bo+1]=e("%s</text>",bO)else bo[#bo+1]=e("%s</text>",bP)end end;function DrawButtons(bo)local bQ="rgb(50,50,50)'"local bR="rgb(210,200,200)"local bS=DrawButton;for _,aS in pairs(ao)do local b8=aS.disableName;local b7=aS.enableName;if type(b8)=="function"then b8=b8()end;if type(b7)=="function"then b7=b7()end;if not aS.drawCondition or aS.drawCondition()then bS(bo,aS.toggleVar(),aS.hovered,aS.x,aS.y,aS.width,aS.height,bR,bQ,b8,b7)end end end;function DrawTank(bo,aN,bb,bT,bU,bV,bW,bX)local bY=1;local bZ=2;local b_=3;local c0=4;local c1=5;local c2=6;local c3=""local c4=0;local c5=fuelY;local c6=fuelY+10;if o()==1 and not RemoteHud then c5=c5-50;c6=c6-50 end;bo[#bo+1]=[[<g class="pdim txtfuel">]]if bU=="ATMO"then c3="atmofueltank"elseif bU=="SPACE"then c3="spacefueltank"else c3="rocketfueltank"end;c4=_G[c3 .."_size"]if#bV>0 then for i=1,#bV do local bk=string.sub(bV[i][bZ],1,12)local c7=0;for bE=1,c4 do if bV[i][bZ]==f(unit[c3 .."_"..bE].getData()).name then c7=bE;break end end;if aN or bW[i]==nil or bX[i]==nil then local c8=0;local c9=0;local ca=0;local cb=0;local a_=system.getTime()if c7~=0 then bX[i]=f(unit[c3 .."_"..c7].getData()).percentage;bW[i]=f(unit[c3 .."_"..c7].getData()).timeLeft;if bW[i]=="n/a"then bW[i]=0 end else ca=m(bV[i][bY])-bV[i][c0]c8=bV[i][b_]bX[i]=d(0.5+ca*100/c8)c9=bV[i][c1]cb=bV[i][c2]if c9<=ca then bW[i]=0 else bW[i]=d(0.5+ca/((c9-ca)/(a_-cb)))end;bV[i][c1]=ca;bV[i][c2]=a_ end end;if bk==bT then bk=e("%s %d",bU,i)end;if c7==0 then bk=bk.." *"end;local cc;if bW[i]==0 then cc="n/a"else cc=FormatTimeString(bW[i])end;if bX[i]~=nil then local bA=d(bX[i]*2.55)local bB=e("rgb(%d,%d,%d)",255-bA,bA,0)local cd=""if cc~="n/a"and bW[i]<120 or bX[i]<5 then if aN then cd=[[class="red"]]end end;bo[#bo+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],bb,c5,cd,bk,bb,c6,bB,bX[i],cc)c5=c5+30;c6=c6+30 end end end;bo[#bo+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local bu=-math.deg(math.atan(velocity.y,velocity.z))+180;bu=bu-90;if bu<0 then bu=360+bu end;if bu>180 then bu=-180+bu-180 end;return-bu end;function getRelativeYaw(velocity)velocity=vec3(velocity)local ce=math.deg(math.atan(velocity.y,velocity.x))-90;if ce<-180 then ce=360+ce end;return ce end;function AlignToWorldVector(cf,cg)if not ad or RateOfChange>MinimumRateOfChange+0.08 or aa~=-1 then if cg==nil then cg=aq end;cf=vec3(cf):normalize()local ch=vec3(core.getConstructWorldOrientationForward())-cf;local ci=-getMagnitudeInDirection(ch,core.getConstructWorldOrientationRight())*ap;local cj=-getMagnitudeInDirection(ch,core.getConstructWorldOrientationUp())*ap;if ak==0 then ak=ci/2 end;if al==0 then al=cj/2 end;D=D-(ci+(ci-ak)*DampingMultiplier)C=C+cj+(cj-al)*DampingMultiplier;ak=ci;al=cj;if math.abs(ci)<cg and math.abs(cj)<cg then return true end;return false end end;function getAPEnableName()local bk=AutopilotTargetName;if bk==nil then bk=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bk==nil then bk="None"end;return"Engage Autopilot: "..bk end;function getAPDisableName()local bk=AutopilotTargetName;if bk==nil then bk=CustomTarget.name end;if bk==nil then bk="None"end;return"Disable Autopilot: "..bk end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local ck=50;local cl=260;local cm=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cl,ck,ar/2-cl/2,as/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cl,ck,ar/2-cl/2-50-cm.width,as/2-ck+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cl,ck,ar/2-cl/2+cm.width+50,as/2-ck+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cn=MakeButton(getAPEnableName,getAPDisableName,600,60,ar/2-600/2,as/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cn.height,cn.x+cn.width+30,cn.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cn.height,cn.x+cn.width+30,cn.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cn.height,cn.x-200-30,cn.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ck=60;cl=300;local bb=10;local bc=as/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cl,ck,bb,bc,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cl,ck,bb+cl+20,bc,function()return AltitudeHold end,ToggleAltitudeHold)bc=bc+ck+20;MakeButton("Engage Autoland","Disable Autoland",cl,ck,bb,bc,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cl,ck,bb+cl+20,bc,function()return AutoTakeoff end,ToggleAutoTakeoff)bc=bc+ck+20;MakeButton("Show Orbit Display","Hide Orbit Display",cl,ck,bb,bc,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bc=bc+ck+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cl,ck,bb,bc,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cl,ck,bb+cl+20,bc,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bc=bc+ck+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cl,ck,bb,bc,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cl,ck,bb+cl+20,bc,function()return aF end,function()aF=not aF;if aF then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bc=bc+ck+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cl,ck,bb,bc,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bc=bc+ck+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cl*2,ck,bb,bc,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function GetFlightStyle()local co=Nav.axisCommandManager:getAxisCommandType(0)local cp="TRAVEL"if co==1 then cp="CRUISE"end;if Autopilot then cp="AUTOPILOT"end;return cp end;function updateHud(bo)local cq=ae;local velocity=core.getVelocity()local b5=vec3(velocity):len()local bt=vec3(core.getWorldVertical())local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local cr=vec3(core.getConstructWorldOrientationUp())local cs=getRoll(bt,br,bs)local ct=cs/180*math.pi;local cu=math.cos(ct)local cv=math.sin(ct)local bu=getPitch(bt,br,bs*cu+cr*cv)local cw=cs;local cx=bu;local cy=j()local cz=d(unit.getThrottle())local cA=b5*3.6;local cB=unit.getAxisCommandValue(0)local cp=GetFlightStyle()local cC="ROLL"local cD=unit.getClosestPlanetInfluence()>0;if cz==nil then cz=0 end;if not cD then if b5>5 then bu=getRelativePitch(velocity)cs=getRelativeYaw(velocity)else bu=0;cs=0 end;cC="YAW"end;bo[#bo+1]=a5;bo[#bo+1]=am;bo[#bo+1]=a4;if aP%aI==0 then aN=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bo,aN,fuelX,"Atmospheric ","ATMO",aB,aL,aM)DrawTank(bo,aN,fuelX+100,"Space fuel t","SPACE",aC,aJ,aK)DrawTank(bo,aN,fuelX+200,"Rocket fuel ","ROCKET",aD,aG,aH)end;if aN then aN=false;aP=0 end;aP=aP+1;DrawVerticalSpeed(bo,cq)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cD then DrawRollLines(bo,centerX,centerY,cw,cC,cD)DrawArtificialHorizon(bo,cx,cw,centerX,centerY,cD,d(getRelativeYaw(velocity)),b5)else DrawRollLines(bo,centerX,centerY,cs,cC,cD)DrawArtificialHorizon(bo,bu,cs,centerX,centerY,cD,d(cs),b5)end;DrawAltitudeDisplay(bo,cq,cD)DrawPrograde(bo,velocity,b5,centerX,centerY)end end;DrawThrottle(bo,cp,cz,cB)DrawSpeed(bo,cA)DrawWarnings(bo)DisplayOrbitScreen(bo)if screen_2 then local cE=vec3(core.getConstructWorldPos())local bb=960+cE.x/MapXRatio;local bc=450+cE.y/MapYRatio;screen_2.moveContent(YouAreHere,(bb-80)/19.2,(bc-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bo)local cF=aV;local cG=aW;local cH=aV;local cI=aW;if IsInFreeLook()and not brightHud then cF=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]cG=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bo[#bo+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],cF,cF,cH,cH,cG,cG,cI,cI,ResolutionX,ResolutionY)end;function HUDEpilogue(bo)bo[#bo+1]="</svg>"end;function DrawSpeed(bo,cA)local cJ=throtPosY-10;local cK=throtPosX+10;bo[#bo+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cJ=75 end;bo[#bo+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],cK,cJ,d(cA))end;function DrawOdometer(bo,W,TotalDistanceTravelled,cp,X,cy)local cL=ConvertResolutionX(1240)local cM=ConvertResolutionY(55)local cN=cM+10;local cy=j()local b2=core.g()local cO=0;local cP=0;local cQ=0;RefreshLastMaxBrake(b2)if ad then cQ=LastMaxBrakeInAtmo else cQ=LastMaxBrake end;maxThrust=Nav:maxForceForward()az=n()if not ShowOdometer then return end;local cR=vec3(core.getWorldAcceleration()):len()/9.80665;if b2>0.1 then cP=az*b2;cO=maxThrust/b2 end;bo[#bo+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cL=ConvertResolutionX(1120)cM=ConvertResolutionY(55)cN=cM+10 elseif ad then local cS=ConvertResolutionX(770)bo[#bo+1]=e([[
                            <text x="%d" y="%d">ATMOSPHERE</text>
                            <text x="%d" y="%d">%.2f</text>
                        ]],cS,cM,cS,cN,cy)end;bo[#bo+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],cL,cM,cL,cN,b2/9.80665,cL,cM+20,cL,cN+20,cR)bo[#bo+1]=e([[
                        <g class="pbright txt">
                        <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bo[#bo+1]=e([[
                            <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                            <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                            <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                            <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),az/1000,ConvertResolutionX(1240),ConvertResolutionY(10),cQ/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cp)if b2>0.1 then bo[#bo+1]=e([[
                                    <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                            ]],ConvertResolutionX(970),ConvertResolutionY(30),cO/1000,ConvertResolutionX(1240),ConvertResolutionY(20),cP/1000)else bo[#bo+1]=e([[
                                <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                            ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bo[#bo+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cp)end;bo[#bo+1]="</g>"end;function DrawThrottle(bo,cp,cz,cB)local c5=throtPosY+10;local c6=throtPosY+20;if o()==1 and not RemoteHud then c5=55;c6=65 end;local cT="CRUISE"local unit="km/h"local cU=cB;if cp=="TRAVEL"or cp=="AUTOPILOT"then cT="THROT"unit="%"cU=cz;local cV="dim"if cz<0 then cV="red"end;bo[#bo+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],cV,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(cz),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bo[#bo+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,c5,cT,throtPosX+10,c6,cU,unit)end;function DrawVerticalSpeed(bo,cq)if cq<200000 and not ad or cq and ad then local cW=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local cX=0;if math.abs(cW)>1 then cX=45*math.log(math.abs(cW),10)if cW<0 then cX=-cX end end;bo[#bo+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(cW),d(cX))end end;function getHeading(bH)local cY=-vec3(core.getWorldVertical())bH=bH-bH:project_on(cY)local cZ=vec3(0,0,1)cZ=cZ-cZ:project_on(cY)local c_=cZ:cross(cY)local cX=cZ:angle_between(bH)*constants.rad2deg;if bH:dot(c_)<0 then cX=360-cX end;return cX end;function DrawRollLines(bo,centerX,centerY,cw,cC,cD)local d0=circleRad;local d1=20;d1=d(d1)local d2=d(cw)if cD then for i=-45,45,5 do local d3=i;bo[#bo+1]=e([[<g transform="rotate(%f,%d,%d)">]],d3,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bo[#bo+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+d0+d1-len,centerX,centerY+d0+d1)end;bo[#bo+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+d0+d1-35,cC,centerX,centerY+d0+d1-25,d2)bo[#bo+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cw,centerX,centerY)bo[#bo+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+d0+d1-20,centerX+5,centerY+d0+d1-20,centerX,centerY+d0+d1-15)bo[#bo+1]="</g>"end;local ce=d2;if cD then ce=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local d4=20;local d5=d(ce)local d6=0;local d7=centerY+d0+d1+20;local d8=centerX;if cC~="YAW"then d7=ConvertResolutionY(130)d8=ConvertResolutionX(960)end;local d9=[[<path class="txttick line" d="]]for i=d(d5-(d4+10)-d5%5+0.5),d(d5+d4+10+d5%5+0.5),5 do local bb=d8+-i*5+ce*5;if i%10==0 then d6=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bo[#bo+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],bb+5,d7-12,p)elseif i%5==0 then d6=5 end;if d6==10 then d9=e([[%s M %f %f v %d]],d9,bb,d7-5,d6)else d9=e([[%s M %f %f v %d]],d9,bb,d7-2.5,d6)end end;bo[#bo+1]=d9 ..[["/>]]bo[#bo+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],d8-5,d7+10,d8+5,d7+10,d8,d7+5)if cD then cC="HDG"end;bo[#bo+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],d8,d7+25,d5,d8,d7+35,cC)end;function DrawArtificialHorizon(bo,cx,cw,centerX,centerY,cD,da,b5)local d0=circleRad;local db=d(d0*3/5)if d0>0 then local dc=d(cx)local len=0;local d9=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cw,centerX,centerY)if not ad then d9=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bo[#bo+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],d0-1,centerX,centerY)bo[#bo+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dc-30-dc%5+0.5),d(dc+30+dc%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bc=centerY+-i*5+cx*5;if len==30 then d9=e([[%s M %d %f h %d]],d9,centerX-db-len,bc,len)if ad then bo[#bo+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cw,centerX,centerY,centerX-db+10,bc,i)bo[#bo+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cw,centerX,centerY,centerX+db-10,bc,i)if i==0 or i==180 or i==-180 then bo[#bo+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cw,centerX,centerY,centerX-db+20,bc,db*2-40)end else bo[#bo+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-db+10,bc,i)bo[#bo+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+db-10,bc,i)end;d9=e([[%s M %d %f h %d]],d9,centerX+db,bc,len)else d9=e([[%s M %d %f h %d]],d9,centerX-db-len,bc,len)d9=e([[%s M %d %f h %d]],d9,centerX+db,bc,len)end end;bo[#bo+1]=d9 ..[["/>]]local dd="PITCH"if not cD then dd="REL PITCH"end;if cx>90 and not ad then cx=90-(cx-90)elseif cx<-90 and not ad then cx=-90-(cx+90)end;if d0>200 then if ad then if b5>w then bo[#bo+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,da)end;bo[#bo+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cw,centerX,centerY)else bo[#bo+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bo[#bo+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-db+25,centerY-5,centerX-db+20,centerY,centerX-db+25,centerY+5,centerX-db+50,centerY+4,dc)bo[#bo+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+db-25,centerY-5,centerX+db-20,centerY,centerX+db-25,centerY+5,centerX+db-30,centerY+4,dc)bo[#bo+1]="</g>"end;local de=d(d0/3)bo[#bo+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-de,centerY,d0-de)if not ad and cD then bo[#bo+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cw,centerX,centerY,centerX-db+10,centerY,db*2-20)end;bo[#bo+1]="</g>"if d0<200 then if ad and b5>w then bo[#bo+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-d0,dd,centerX,centerY-d0+10,dc,centerX,centerY-15,"Yaw",centerX,centerY+20,da)else bo[#bo+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-d0,dd,centerX,centerY-d0+15,dc)end end end end;function DrawAltitudeDisplay(bo,cq,cD)local df=altMeterX;local dg=altMeterY;local dh=78;local di=19;local dj=AboveGroundLevel()if dj~=-1 then table.insert(bo,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],df+dh,dg+di+20,dj))end;if cD and(cq<200000 and not ad or cq and ad)then table.insert(bo,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],df-1,dg-4,dh+2,di+6,df+1,dg-1,dh-4,di))local bn=0;local dk=1;local dl=0;local dm=cq<0;local dn=9;if dm then dn=0 end;local cq=math.abs(cq)while bn<6 do local dp=11;local dq=16;local dr=9;local ds=14;local cd="altsm"if bn>2 then dq=dq+3;dp=dp+2;ds=ds+2;dr=dr-6;cd="altbig"end;if dm then cd=cd.." red"end;local dt=cq/dk%10;local du=d(dt)local dv=d((du+1)%10)local dw=dl;if bn==0 then dw=dt-du;if dm then dw=1-dw end end;if dm and(bn==0 or dl~=0)then local dx=dv;dv=du;du=dx end;local dy=dq*(dw-1)local dz=dy+dq;local bb=df+dr+(6-bn)*dp;local bc=dg+ds;table.insert(bo,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],cd,bb,bc+dy,dv,bb,bc+dz,du))bn=bn+1;dk=dk*10;if du==dn then dl=dw else dl=0 end end;table.insert(bo,[[</g></g>]])end end;function DrawPrograde(bo,velocity,b5,centerX,centerY)if b5>5 and not ad or b5>w then local d0=circleRad;local dA=20;local dB=20;local dC=vec3(velocity)local dD=getRelativePitch(dC)local dE=getRelativeYaw(dC)local dF=-dE/dB*d0;local dG=dD/dA*d0;local bb=centerX+dF;local bc=centerY+dG;local a3=math.sqrt(dF^2+dG^2)if a3<d0 then bo[#bo+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bb,bc)else local cX=math.atan(dG,dF)local dH=centerX+d0*math.cos(cX)local dI=centerY+d0*math.sin(cX)bo[#bo+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',dH,dI)end;dD=getRelativePitch(-dC)dE=getRelativeYaw(-dC)dF=-dE/dB*d0;dG=dD/dA*d0;bb=centerX+dF;bc=centerY+dG;a3=math.sqrt(dF^2+dG^2)if not ad then if a3<d0 then bo[#bo+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bb,bc)else local cX=math.atan(dG,dF)local dH=centerX+d0*math.cos(cX)local dI=centerY+d0*math.sin(cX)bo[#bo+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',dH,dI)end end end end;function DrawWarnings(bo)bo[#bo+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bo[#bo+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bo[#bo+1]=e([[
                            <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bo[#bo+1]=e([[
                            <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bo[#bo+1]=e([[
                            <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local dJ=ConvertResolutionX(960)local dK=ConvertResolutionY(860)local dL=ConvertResolutionY(880)local dM=ConvertResolutionY(900)local dN=ConvertResolutionY(960)local dO=ConvertResolutionY(200)local dP=ConvertResolutionY(150)local dQ=ConvertResolutionY(960)if o()==1 and not RemoteHud then dK=ConvertResolutionY(135)dL=ConvertResolutionY(155)dM=ConvertResolutionY(175)dO=ConvertResolutionY(115)dP=ConvertResolutionY(95)end;if BrakeIsOn then bo[#bo+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],dJ,dK)end;if ad and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bo[#bo+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],dJ,dO+50)end;if ah then bo[#bo+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],dJ,dQ)end;if GearExtended then if A then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],dJ,dL)else bo[#bo+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],dJ,dL)end;bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],dJ,dM,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],dJ,dN+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dJ,dO+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bo[#bo+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dJ,dO+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],dJ,dO+20,AutopilotStatus)elseif LockPitch~=nil then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],dJ,dO+20,d(LockPitch))elseif I then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],dJ,dO+20)elseif Reentry then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],dJ,dO+20)end;if AltitudeHold then if AutoTakeoff then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],dJ,dO,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bo[#bo+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],dJ,dO+50)end else bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],dJ,dO,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bo[#bo+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],dJ,dO)else bo[#bo+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],dJ,dO)end end;if ProgradeIsOn then bo[#bo+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],dJ,dO)end;if RetrogradeIsOn then bo[#bo+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],dJ,dO)end;if TurnBurn then bo[#bo+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],dJ,dP)end;if VectorToTarget then bo[#bo+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],dJ,dO+30,VectorStatus)end;bo[#bo+1]="</g>"end;function DisplayOrbitScreen(bo)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local dR=75;local dS=0;local dT=250;local dU=4;dS=dS+dU;local dV=15;local bb=dR+dT+dR/2+dU;local bc=dS+dT/2+5+dU;local dW,dX,dY,dZ;dW=dT/4;dZ=0;bo[#bo+1]=[[<g class="pbright txtorb txtmid">]]bo[#bo+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',dT+dR*2,dT+dS,dU,dU)if orbit.periapsis~=nil and orbit.apoapsis~=nil then dY=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(dW*2)dX=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/dY*(1-orbit.eccentricity)dZ=dW-orbit.periapsis.altitude/dY-planet.radius/dY;local d_=""if orbit.periapsis.altitude<=0 then d_='redout'end;bo[#bo+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],d_,dR+dT/2+dZ+dU,dS+dT/2+dU,dW,dX)bo[#bo+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',dR+dT/2+dU,dS+dT/2+dU,planet.radius/dY)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bo[#bo+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bb-35,bc-5,dR+dT/2+dW+dZ,bc-5)bo[#bo+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bb,bc)bc=bc+dV;bo[#bo+1]=e([[<text x="%f" y="%f">%s</text>]],bb,bc,getDistanceDisplayString(orbit.apoapsis.altitude))bc=bc+dV;bo[#bo+1]=e([[<text x="%f" y="%f">%s</text>]],bb,bc,FormatTimeString(orbit.timeToApoapsis))bc=bc+dV;bo[#bo+1]=e([[<text x="%f" y="%f">%s</text>]],bb,bc,getSpeedDisplayString(orbit.apoapsis.speed))end;bc=dS+dT/2+5+dU;bb=dR-dR/2+10+dU;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bo[#bo+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bb+35,bc-5,dR+dT/2-dW+dZ,bc-5)bo[#bo+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bb,bc)bc=bc+dV;bo[#bo+1]=e([[<text x="%f" y="%f">%s</text>]],bb,bc,getDistanceDisplayString(orbit.periapsis.altitude))bc=bc+dV;bo[#bo+1]=e([[<text x="%f" y="%f">%s</text>]],bb,bc,FormatTimeString(orbit.timeToPeriapsis))bc=bc+dV;bo[#bo+1]=e([[<text x="%f" y="%f">%s</text>]],bb,bc,getSpeedDisplayString(orbit.periapsis.speed))end;bo[#bo+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],dR+dT/2+dU,20+dU,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local e0=orbit.timeToApoapsis/orbit.period*2*math.pi;local e1=dW*math.cos(e0)local e2=dX*math.sin(e0)bo[#bo+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',dR+dT/2+e1+dZ+dU,dS+dT/2+e2+dU)end;bo[#bo+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for aR,aS in pairs(atlas[0])do if at==nil or aS.center.x<at then at=aS.center.x end;if au==nil or aS.center.x>au then au=aS.center.x end;if av==nil or aS.center.y<av then av=aS.center.y end;if aw==nil or aS.center.y>aw then aw=aS.center.y end end;GalaxyMapHTML=""local e3=1.1*(au-at)/1920;local e4=1.4*(aw-av)/1080;for aR,aS in pairs(atlas[0])do local bb=960+aS.center.x/e3;local bc=540+aS.center.y/e4;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..bb..'" cy="'..bc..'" r="'..aS.radius/e3*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(aS.name,"Moon")and not string.match(aS.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..bb.."' y='"..bc+aS.radius/e3*30+20 .."' font-size='28' fill="..aV.." text-anchor='middle' font-family='Montserrat'>"..aS.name.."</text>"end end;local cE=vec3(core.getConstructWorldPos())local bb=960+cE.x/e3;local bc=540+cE.y/e4;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..bb..'" cy="'..bc..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..bb.."' y='"..bc-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=e3;MapYRatio=e4;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local cE=vec3(core.getConstructWorldPos())local bb=960+cE.x/e3;local bc=540+cE.y/e4;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..aV.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((bb-80)/19.20,(bc-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function e5(e6)return type(e6)=='number'end;local function e7(e6)return type(tonumber(e6))=='number'end;local function e8(e9)return type(e9)=='table'end;local function ea(eb)return type(eb)=='string'end;local function ec(aS)return e8(aS)and e5(aS.x and aS.y and aS.z)end;local function ed(ee)return e8(ee)and e5(ee.latitude and ee.longitude and ee.altitude and ee.bodyId and ee.systemId)end;local ef=math.pi/180;local eg=180/math.pi;local eh=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ei='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local ej=utils.clamp;local function ek(el,em)if el==0 then return math.abs(em)<1e-09 end;if em==0 then return math.abs(el)<1e-09 end;return math.abs(el-em)<math.max(math.abs(el),math.abs(em))*eh end;local function en(e6)local aT=string.gsub(string.reverse(e('%.4f',e6)),'^0*%.?','')return aT==''and'0'or string.reverse(aT)end;local function eo(ep)if ec(ep)then return e('{x=%.3f,y=%.3f,z=%.3f}',ep.x,ep.y,ep.z)end;if e8(ep)and not getmetatable(ep)then local eq={}local er=next(ep)if type(er)=='nil'or er==1 then eq=ep else for aR,aS in pairs(ep)do local cU=eo(aS)if type(aR)=='number'then table.insert(eq,e('[%s]=%s',aR,cU))else table.insert(eq,e('%s=%s',aR,cU))end end end;return e('{%s}',table.concat(eq,','))end;if ea(ep)then return e("'%s'",ep:gsub("'",[[\']]))end;return tostring(ep)end;local es={}es.__index=es;es.__tostring=function(ep,et)local eu={}for aR in pairs(ep)do table.insert(eu,aR)end;table.sort(eu)local eq={}for _,aR in ipairs(eu)do local cU=eo(ep[aR])if type(aR)=='number'then table.insert(eq,e('[%s]=%s',aR,cU))else table.insert(eq,e('%s=%s',aR,cU))end end;if et then return e('%s%s',et,table.concat(eq,',\n'..et))end;return e('{%s}',table.concat(eq,','))end;es.__eq=function(ev,ew)return ev.planetarySystemId==ew.planetarySystemId and ev.bodyId==ew.bodyId and ek(ev.radius,ew.radius)and ek(ev.center.x,ew.center.x)and ek(ev.center.y,ew.center.y)and ek(ev.center.z,ew.center.z)and ek(ev.GM,ew.GM)end;local function ex(ey,ez,eA,eB,eC)assert(e7(ey),'Argument 1 (planetarySystemId) must be a number:'..type(ey))assert(e7(ez),'Argument 2 (bodyId) must be a number:'..type(ez))assert(e7(eA),'Argument 3 (radius) must be a number:'..type(eA))assert(e8(eB),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(eB))assert(e7(eC),'Argument 5 (GM) must be a number:'..type(eC))return setmetatable({planetarySystemId=tonumber(ey),bodyId=tonumber(ez),radius=tonumber(eA),center=vec3(eB),GM=tonumber(eC)},es)end;local eD={}eD.__index=eD;eD.__tostring=function(eE)return e('::pos{%d,%d,%s,%s,%s}',eE.systemId,eE.bodyId,en(eE.latitude*eg),en(eE.longitude*eg),en(eE.altitude))end;eD.__eq=function(ev,ew)return ev.bodyId==ew.bodyId and ev.systemId==ew.systemId and ek(ev.latitude,ew.latitude)and ek(ev.altitude,ew.altitude)and(ek(ev.longitude,ew.longitude)or ek(ev.latitude,math.pi/2)or ek(ev.latitude,-math.pi/2))end;local function eF(eG,ez,eH,eI,cq)local ey=eG;if ea(eG)and not eI and not cq and not ez and not eH then ey,ez,eH,eI,cq=string.match(eG,ei)assert(ey,'Argument 1 (position string) is malformed.')else assert(e7(ey),'Argument 1 (systemId) must be a number:'..type(ey))assert(e7(ez),'Argument 2 (bodyId) must be a number:'..type(ez))assert(e7(eH),'Argument 3 (latitude) must be in degrees:'..type(eH))assert(e7(eI),'Argument 4 (longitude) must be in degrees:'..type(eI))assert(e7(cq),'Argument 5 (altitude) must be in meters:'..type(cq))end;ey=tonumber(ey)ez=tonumber(ez)eH=tonumber(eH)eI=tonumber(eI)cq=tonumber(cq)if ez==0 then return setmetatable({latitude=eH,longitude=eI,altitude=cq,bodyId=ez,systemId=ey},eD)end;return setmetatable({latitude=ef*ej(eH,-90,90),longitude=ef*(eI%360),altitude=cq,bodyId=ez,systemId=ey},eD)end;local eJ={}eJ.__index=eJ;eJ.__tostring=function(ep,et)local eK=et and et..'  'local eL={}local eu={}for aR in pairs(ep)do table.insert(eu,aR)end;table.sort(eu)for _,eM in ipairs(eu)do bdy=ep[eM]local eN=es.__tostring(bdy,eK)if et then table.insert(eL,e('[%s]={\n%s\n%s}',eM,eN,et))else table.insert(eL,e('  [%s]=%s',eM,eN))end end;if et then return e('\n%s%s%s',et,table.concat(eL,',\n'..et),et)end;return e('{\n%s\n}',table.concat(eL,',\n'))end;local function eO(eP)local atlas={}local pid;for _,aS in pairs(eP)do local bl=aS.planetarySystemId;if type(bl)~='number'then error('Invalid planetary system ID: '..tostring(bl))elseif pid and bl~=pid then error('Mismatch planetary system IDs: '..bl..' and '..pid)end;local eQ=aS.bodyId;if type(eQ)~='number'then error('Invalid body ID: '..tostring(eQ))elseif atlas[eQ]then error('Duplicate body ID: '..tostring(eQ))end;setmetatable(aS.center,getmetatable(vec3.unit_x))atlas[eQ]=setmetatable(aS,es)pid=bl end;return setmetatable(atlas,eJ)end;PlanetaryReference={}local function eR(eP)return setmetatable({galaxyAtlas=eP or{}},PlanetaryReference)end;PlanetaryReference.__index=function(e9,i)if type(i)=='number'then local system=e9.galaxyAtlas[i]return eO(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(ep)return function(e9,aR)local eS,nv=next(e9,aR)return eS,nv and eO(nv)end,ep.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(ep)local eT={}for _,eU in pairs(ep or{})do local eV=eU:getPlanetarySystemId()local eW=eJ.__tostring(eU,'    ')table.insert(eT,e('  [%s]={%s\n  }',eV,eW))end;return e('{\n%s\n}\n',table.concat(eT,',\n'))end;PlanetaryReference.BodyParameters=ex;PlanetaryReference.MapPosition=eF;PlanetaryReference.PlanetarySystem=eO;function PlanetaryReference.createBodyParameters(eX,ez,eY,eZ,e_,f0,f1)assert(e7(eX),'Argument 1 (planetarySystemId) must be a number:'..type(eX))assert(e7(ez),'Argument 2 (bodyId) must be a number:'..type(ez))assert(e7(eY),'Argument 3 (surfaceArea) must be a number:'..type(eY))assert(e8(eZ),'Argument 4 (aPosition) must be an array or vec3:'..type(eZ))assert(e8(e_),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(e_))assert(e7(f0),'Argument 6 (altitude) must be in meters:'..type(f0))assert(e7(f1),'Argument 7 (gravityAtPosition) must be number:'..type(f1))local eA=math.sqrt(eY/4/math.pi)local a3=eA+f0;local f2=vec3(eZ)+a3*vec3(e_)local eC=f1*a3*a3;return ex(eX,ez,eA,f2,eC)end;PlanetaryReference.isMapPosition=ed;function PlanetaryReference:getPlanetarySystem(eG)if i==nil then i=0 end;if nv==nil then nv=0 end;local eX=eG;if ed(eG)then eX=eG.systemId end;if type(eX)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=eJ then system=eO(system)end;return system end end end;function eJ:castIntersections(f3,f4,f5,f6)local f5=f5 or function(f7)return 1.05*f7.radius end;local f8={}if f6 then for _,i in ipairs(f6)do f8[i]=self[i]end else f6={}for aR,f7 in pairs(self)do table.insert(f6,aR)f8[aR]=f7 end end;local function f9(fa,fb)local fc=f8[fa].center-f3;local fd=f8[fb].center-f3;return fc:len()<fd:len()end;table.sort(f6,f9)local fe=f4:normalize()for i,bl in ipairs(f6)do local f7=f8[bl]local ff=f7.center-f3;local eA=f5(f7)local fg=ff:dot(fe)local fh=fg^2-(ff:len2()-eA^2)if fh>=0 then local fi=math.sqrt(fh)local fj=fg+fi;local fk=fg-fi;if fk>0 then return f7,fj,fk elseif fj>0 then return f7,fj,nil end end end;return nil,nil,nil end;function eJ:closestBody(fl)assert(type(fl)=='table','Invalid coordinates.')local fm,f7;local fn=vec3(fl)for _,fo in pairs(self)do local fp=(fo.center-fn):len2()if not f7 or fp<fm then f7=fo;fm=fp end end;return f7 end;function eJ:convertToBodyIdAndWorldCoordinates(eG)local fq=eG;if ea(eG)then fq=eF(eG)end;if fq.bodyId==0 then return 0,vec3(fq.latitude,fq.longitude,fq.altitude)end;local fo=self:getBodyParameters(fq)if fo then return fq.bodyId,fo:convertToWorldCoordinates(fq)end end;function eJ:getBodyParameters(eG)local ez=eG;if ed(eG)then ez=eG.bodyId end;assert(e7(ez),'Argument 1 (bodyId) must be a number:'..type(ez))return self[ez]end;function eJ:getPlanetarySystemId()local _,aS=next(self)return aS and aS.planetarySystemId end;function es:convertToMapPosition(eB)assert(e8(eB),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(eB))local fr=vec3(eB)if self.bodyId==0 then return setmetatable({latitude=fr.x,longitude=fr.y,altitude=fr.z,bodyId=0,systemId=self.planetarySystemId},eD)end;local fs=fr-self.center;local a3=fs:len()local cq=a3-self.radius;local eH=0;local eI=0;if not ek(a3,0)then local ft=math.atan(fs.y,fs.x)eI=ft>=0 and ft or 2*math.pi+ft;eH=math.pi/2-math.acos(fs.z/a3)end;return setmetatable({latitude=eH,longitude=eI,altitude=cq,bodyId=self.bodyId,systemId=self.planetarySystemId},eD)end;function es:convertToWorldCoordinates(eG)local fq=ea(eG)and eF(eG)or eG;if fq.bodyId==0 then return vec3(fq.latitude,fq.longitude,fq.altitude)end;assert(ed(fq),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(fq.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(fq.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local fu=math.cos(fq.latitude)return self.center+(self.radius+fq.altitude)*vec3(fu*math.cos(fq.longitude),fu*math.sin(fq.longitude),math.sin(fq.latitude))end;function es:getAltitude(eB)return(vec3(eB)-self.center):len()-self.radius end;function es:getDistance(eB)return(vec3(eB)-self.center):len()end;function es:getGravity(eB)local fv=self.center-vec3(eB)local fw=fv:len2()return self.GM/fw*fv/math.sqrt(fw)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return eR(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function ea(eb)return type(eb)=='string'end;local function e8(e9)return type(e9)=='table'end;local function ek(el,em)if el==0 then return math.abs(em)<1e-09 end;if em==0 then return math.abs(el)<1e-09 end;return math.abs(el-em)<math.max(math.abs(el),math.abs(em))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cq)assert(self.body)local a3=cq+self.body.radius;if not ek(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(eG,velocity)assert(self.body)assert(e8(eG)or ea(eG))assert(e8(velocity))local cE=(ea(eG)or PlanetRef.isMapPosition(eG))and self.body:convertToWorldCoordinates(eG)or vec3(eG)local aS=vec3(velocity)local fx=cE-self.body.center;local fd=aS:len2()local fy=fx:len()local fz=self.body.GM;local fA=((fd-fz/fy)*fx-fx:dot(aS)*aS)/fz;local el=fz/(2*fz/fy-fd)local fB=fA:len()local fe=fA:normalize()local fC=el*(1-fB)local fD=el*(1+fB)local fE=fC*fe+self.body.center;local fF=fB<=1 and-fD*fe+self.body.center or nil;local fG=math.sqrt(el*fz*(1-fB*fB))local fH=fF and 2*math.pi*math.sqrt(el^3/fz)local fI=math.acos(fA:dot(fx)/(fB*fy))if fx:dot(aS)<0 then fI=-(fI-2*math.pi)end;local fJ=math.acos((math.cos(fI)+fB)/(1+fB*math.cos(fI)))local fK=fJ;if fK<0 then fK=fK+2*math.pi end;local fL=fK-fB*math.sin(fK)local fM=0;local fN=0;local fO=0;if fH~=nil then fM=fL/(2*math.pi/fH)fN=fH-fM;fO=fN+fH/2;if fI-math.pi>0 then fN=fM;fO=fN+fH/2 end;if fO>fH then fO=fO-fH end end;return{periapsis={position=fE,speed=fG/fC,circularOrbitSpeed=math.sqrt(fz/fC),altitude=fC-self.body.radius},apoapsis=fF and{position=fF,speed=fG/fD,circularOrbitSpeed=math.sqrt(fz/fD),altitude=fD-self.body.radius},currentVelocity=aS,currentPosition=cE,eccentricity=fB,period=fH,eccentricAnomaly=fJ,meanAnomaly=fL,timeToPeriapsis=fN,timeToApoapsis=fO}end;local function fP(fQ)local fo=PlanetRef.BodyParameters(fQ.planetarySystemId,fQ.bodyId,fQ.radius,fQ.center,fQ.GM)return setmetatable({body=fo},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fP(...)end})end;function Kinematics()local Kinematic={}local fR=30000000/3600;local fS=fR*fR;local fT=100;local function fU(aS)return 1/math.sqrt(1-aS*aS/fS)end;function Kinematic.computeAccelerationTime(fV,fW,fX)local fY=fR*math.asin(fV/fR)return(fR*math.asin(fX/fR)-fY)/fW end;function Kinematic.computeDistanceAndTime(fV,fX,fZ,f_,g0,g1)g0=g0 or 0;g1=g1 or 0;local g2=fV<=fX;local g3=f_*(g2 and 1 or-1)/fZ;local g4=-g1/fZ;local g5=g3+g4;if g2 and g5<=0 or not g2 and g5>=0 then return-1,-1 end;local g6,g7=0,0;if g3~=0 and g0>0 then local fY=math.asin(fV/fR)local g8=math.pi*(g3/2+g4)local g9=g3*g0;local ga=fR*math.pi;local aS=function(e9)local bK=(g8*e9-g9*math.sin(math.pi*e9/2/g0)+ga*fY)/ga;local gb=math.tan(bK)return fR*gb/math.sqrt(gb*gb+1)end;local gc=g2 and function(eb)return eb>=fX end or function(eb)return eb<=fX end;g7=2*g0;if gc(aS(g7))then local gd=0;while math.abs(g7-gd)>0.5 do local e9=(g7+gd)/2;if gc(aS(e9))then g7=e9 else gd=e9 end end end;local ge=fV;local gf=g7/fT;for gg=1,fT do local b5=aS(gg*gf)g6=g6+(b5+ge)*gf/2;ge=b5 end;if g7<2*g0 then return g6,g7 end;fV=ge end;local fY=fR*math.asin(fV/fR)local aU=(fR*math.asin(fX/fR)-fY)/g5;local gh=fS*math.cos(fY/fR)/g5;local a3=gh-fS*math.cos((g5*aU+fY)/fR)/g5;return a3+g6,aU+g7 end;function Kinematic.computeTravelTime(fV,fW,a3)if a3==0 then return 0 end;if fW>0 then local fY=fR*math.asin(fV/fR)local gh=fS*math.cos(fY/fR)/fW;return(fR*math.acos(fW*(gh-a3)/fS)-fY)/fW end;assert(fV>0,'Acceleration and initial speed are both zero.')return a3/fV end;function Kinematic.lorentz(aS)return fU(aS)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(a3)local gi=a3>100000;local aT=""if gi then aT=round(a3/1000/200,1).." SU"elseif a3<1000 then aT=round(a3,1).." M"else aT=round(a3/1000,1).." KM"end;return aT end;function getDistanceDisplayString2(a3)local gi=a3>100000;local aT=""if gi then aT=round(a3/1000/200,2).." SU"elseif a3<1000 then aT=round(a3,2).." M"else aT=round(a3/1000,2).." KM"end;return aT end;function getSpeedDisplayString(b5)return d(round(b5*3.6,0)+0.5).." km/h"end;function FormatTimeString(gj)local gk=0;local gl=0;local gm=0;if gj<60 then gj=d(gj)elseif gj<3600 then gk=d(gj/60)gj=d(gj%60)elseif gj<86400 then gl=d(gj/3600)gk=d(gj%3600/60)else gm=d(gj/86400)gl=d(gj%86400/60)end;if gm>0 then return gm.."d "..gl.."h "elseif gl>0 then return gl.."h "..gk.."m "elseif gk>0 then return gk.."m "..gj.."s"elseif gj>0 then return gj.."s"else return"0s"end end;function getMagnitudeInDirection(cf,f4)cf=vec3(cf)f4=vec3(f4):normalize()local aT=cf*f4;return aT.x+aT.y+aT.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local gn=AtlasOrdered[AutopilotTargetIndex].index;local go=atlas[0][gn]if go.center then AutopilotTargetName=go.name;V=galaxyReference[0][gn]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=go;for _,aS in pairs(galaxyReference[0])do if aS.name==CustomTarget.planetname then V=aS;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(V.center)_,AutopilotEndSpeed=Kep(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local gp=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return gp end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local b5=vec3(velocity):len()local gq,gr=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,gs;if not TurnBurn then _,gs=GetAutopilotBrakeDistanceAndTime(b5)else _,gs=GetAutopilotTBBrakeDistanceAndTime(b5)end;local gt=0;local gu=0;if AutopilotCruising or not Autopilot and b5>5 then gu=Kinematic.computeTravelTime(b5,0,AutopilotDistance)elseif P+gq<AutopilotDistance then gt=AutopilotDistance-(P+gq)gu=Kinematic.computeTravelTime(8333.0556,0,gt)else local gv=(AutopilotDistance-P)/gq;gq=AutopilotDistance-P;gr=gr*gv end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return gu elseif AutopilotBraking then return gs elseif AutopilotCruising then return gu+gs else return gr+Q+gu end end;function GetAutopilotBrakeDistanceAndTime(b5)if not ad then RefreshLastMaxBrake()return Kinematic.computeDistanceAndTime(b5,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return Kinematic.computeDistanceAndTime(b5,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(b5)RefreshLastMaxBrake()return Kinematic.computeDistanceAndTime(b5,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local gw=-1;local gx=-1;if vBooster then gw=vBooster.distance()end;if hover then gx=hover.distance()end;if gw~=-1 and gx~=-1 then if gw<gx then return gw else return gx end elseif gw~=-1 then return gw elseif gx~=-1 then return gx else return-1 end end;function AboveGroundLevel()local gy=-1;local gz=aa;if telemeter_1 then gy=telemeter_1.getDistance()end;if gz~=-1 and gy~=-1 then if gz<gy then return gz else return gy end elseif gz~=-1 then return gz else return gy end end;function tablelength(gA)local gB=0;for _ in pairs(gA)do gB=gB+1 end;return gB end;function BeginProfile(gC)ProfileTimeStart=system.getTime()end;function EndProfile(gC)local gD=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gD;ProfileCount=ProfileCount+1;if gD>ProfileTimeMax then ProfileTimeMax=gD end;if gD<ProfileTimeMin then ProfileTimeMin=gD end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gE=ProfileTimeSum;local gF=ProfileTimeSum/ProfileCount;local gG=ProfileTimeMin;local gH=ProfileTimeMax;local gI=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gE,gF,gG,gH,gI))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gJ=radar_1.getEntries()local gK=radar_1.getData()local gL=ConvertResolutionX(1770)local gM=ConvertResolutionY(330)if#gJ>0 then local gN=gK:find('identifiedConstructs":%[%]')if gN==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if gN~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],gL,gM,#gJ)local gO={}for aR,aS in pairs(gJ)do if radar_1.hasMatchingTransponder(aS)==1 then gO[#gO+1]=aS end end;if#gO>0 then local bc=ConvertResolutionY(15)local bb=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bb,bc)for aR,aS in pairs(gO)do bc=bc+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bb,bc,radar_1.getConstructName(aS))end end else local gP;gP=gK:find('worksInEnvironment":false')if gP then a4=e([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],gL,gM)else a4=e([[
                                    <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],gL,gM)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local gQ=j()if door and(gQ>0 or gQ==0 and ae<10000)then for _,aS in pairs(door)do aS.toggle()end end;if switch then for _,aS in pairs(switch)do aS.toggle()end end;if forcefield and(gQ>0 or gQ==0 and ae<10000)then for _,aS in pairs(forcefield)do aS.toggle()end end;if dbHud_1 then if not Y then for aR,aS in pairs(b)do dbHud_1.setStringValue(aS,g(_G[aS]))end;for aR,aS in pairs(a)do dbHud_1.setStringValue(aS,g(_G[aS]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(gR)if gR=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local gS=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if gS then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif gR=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bo={}local cp=GetFlightStyle()DrawOdometer(bo,W,TotalDistanceTravelled,cp,X)CheckDamage(bo)a5=table.concat(bo,"")collectgarbage("collect")elseif gR=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local aT=json.decode(dbHud_1.getStringValue("SavedLocations"))if aT~=nil then _G["SavedLocations"]=aT;local bn=-1;local bm;for aR,aS in pairs(SavedLocations)do if aS.name and aS.name=="SatNav Location"then bn=aR;break end end;if bn~=-1 then bm=SavedLocations[bn]bn=-1;for aR,aS in pairs(atlas[0])do if aS.name and aS.name=="SatNav Location"then bn=aR;break end end;if bn>-1 then atlas[0][bn]=bm end;UpdateAtlasLocationsList()K=bm.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif gR=="msgTick"then local bo={}DisplayMessage(bo,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif gR=="animateTick"then Animated=true;Animating=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif gR=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)aa=hoverDetectGround()local gT=system.getMouseDeltaX()local gU=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local gV=velMag>8334;if not gV and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=gV;if ad then if not ai then if velMag>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if velMag<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bo={}HUDPrologue(bo)if showHud then updateHud(bo)else DisplayOrbitScreen(bo)DrawWarnings(bo)end;HUDEpilogue(bo)bo[#bo+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bo,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bo)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bo)if screen_1.getMouseState()==1 then CheckButtons()end;bo[#bo+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not Animating then a0=a0+gT;a1=a1+gU end;SetButtonContains()DrawButtons(bo)if not Animating and not Animated then local gW=table.concat(bo,"")bo={}bo[#bo+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%w%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bo[#bo+1]=GalaxyMapHTML;bo[#bo+1]=gW;bo[#bo+1]="</body>"Animating=true;bo[#bo+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bo,"")system.setScreen(content)elseif Animated then local gW=table.concat(bo,"")bo={}bo[#bo+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bo[#bo+1]=GalaxyMapHTML;bo[#bo+1]=gW;bo[#bo+1]="</body>"end;if not Animating then bo[#bo+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+gT;a1=a1+gU;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(gU,-100,100)+0.5)*2*y;D=(-utils.smoothstep(gT,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bo)end else SetButtonContains()DrawButtons(bo)end;bo[#bo+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bo[#bo+1]=[[</svg></body>]]content=table.concat(bo,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>w then local gX=AlignToWorldVector(vec3(velocity),0.01)if a7 then autoRoll=true;if gX then ProgradeIsOn=false;x=true;BeginReentry()a7=false;a9=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif velMag>w then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)end;P=P;Q=Q;local gY=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local gZ=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local g_=getMagnitudeInDirection(gZ,AutopilotShipUp)local h0=getMagnitudeInDirection(gZ,AutopilotShipRight)local h1=-h0*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local h2=-g_*AutopilotDistance*velMag*TrajectoryAlignmentStrength;gY=AutopilotTargetCoords+-h1*vec3(AutopilotShipRight)+-h2*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(gY)-vec3(core.getConstructWorldPos())):len()local h3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(h3)..'", "unit":""}')local h4=true;local h5=(V.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(h5)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then h4=AlignToWorldVector((gY-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then h4=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not h4 or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(h5-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if h4 then if not AutopilotRealigned then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif h4 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then autoRoll=true;local h6=0;local cE=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local h7=cE-vec3(core.getConstructWorldPos())local h8=vec3(h7):project_on(vec3(core.getConstructWorldOrientationForward())):len()local h9=vec3(h7):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(h8*h8+h9*h9)AlignToWorldVector(h7:normalize())local ha=40;local hb=a3<ha;local hc=100;local hd=utils.clamp((a3-ha)/2,10,hc)C=0;local h4=math.abs(D)<0.1;if h4 and velMag<hd and not hb then BrakeIsOn=false;h6=-20 else BrakeIsOn=true;h6=0 end;local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bt=vec3(core.getWorldVertical())local bu=getPitch(bt,br,bs)local he=1.0;if math.abs(h6-bu)>he then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(h6-bu)local hf=pitchPID:get()C=hf end end;local cY=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cD=unit.getClosestPlanetInfluence()>0;local cq=ae;local hg=HoldAltitude-cq;local hh=500+velMag;local h6=(utils.smoothstep(hg,-hh,hh)-0.5)*2*MaxPitch;if not AltitudeHold then h6=0 end;if LockPitch~=nil then if cD then h6=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local hi=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hi then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hi)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then h6=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;h6=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;autoRoll=autoRollPreference end end;local hj=C;if velMag>w then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local ch=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(ch)local hk=ch:len()-ch:project_on(cY):len()local b6=LastMaxBrakeInAtmo;local cW=velocity.x*cY.x+velocity.y*cY.y+velocity.z*cY.z;local hl=velocity:len()-math.abs(cW)local hm=vec3(core.getWorldAirFrictionAcceleration())if b6~=nil then P,Q=Kinematic.computeDistanceAndTime(hl,0,n(),0,0,b6+(hm:len()-hm:project_on(cY):len())*n())else P,Q=Kinematic.computeDistanceAndTime(hl,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hk<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hk>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hk end;C=hj;local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bt=vec3(core.getWorldVertical())local gy=-1;local bu=getPitch(bt,br,bs)local he=0.1;if BrakeLanding then h6=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local cW=velocity.x*cY.x+velocity.y*cY.y+velocity.z*cY.z;gy=aa;if gy>-1 then if math.abs(h6-bu)<he then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-cY)<0.99 then BrakeIsOn=true elseif cW<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if h6<20 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif a8 and j()==0 and ae>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(h6-bu)>he then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(h6-bu)local hf=pitchPID:get()C=C+hf end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local hn=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)hn=math.max(hn,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local ho=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hp=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hq=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hr=G;local hs=vec3(core.getWorldVertical())local ht=vec3(core.getConstructWorldOrientationUp())local hu=vec3(core.getConstructWorldOrientationForward())local hv=vec3(core.getConstructWorldOrientationRight())local hw=vec3(core.getWorldVelocity())local hx=vec3(core.getWorldVelocity()):normalize()local hy=getRoll(hs,hu,hv)local hz=math.abs(hy)local hA=utils.sign(hy)local j=j()local hB=vec3(core.getWorldAngularVelocity())local hC=ho*pitchSpeedFactor*hv+hp*rollSpeedFactor*hu+hq*yawSpeedFactor*ht;if hs:len()>0.01 and j>0.0 or ProgradeIsOn then local hD=1.0;if autoRoll==true and hz>hD and hp==0 then local hE=utils.clamp(0,hz-30,hz+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hE-hy)local hF=rollPID:get()hC=hC+hF*hu end end;if hs:len()>0.01 and j>0.0 then local hG=20.0;if turnAssist==true and hz>hG and ho==0 and hq==0 then local hH=turnAssistFactor*0.1;local hI=turnAssistFactor*0.025;local hJ=(hz-hG)/(180-hG)*180;local hK=0;if hJ<90 then hK=hJ/90 elseif hJ<180 then hK=(180-hJ)/90 end;hK=hK*hK;local hL=-hA*hI*(1.0-hK)local hM=hH*hK;hC=hC+hM*hv+hL*ht end end;local hN=1;local hO=0;local hP=1;local hQ=hn*(hC-hB)local hR=vec3(core.getWorldAirFrictionAngularAcceleration())hQ=hQ-hR;Nav:setEngineTorqueCommand('torque',hQ,hN,'airfoil','','',hP)local hS=-hr*(brakeSpeedFactor*hw+brakeFlatFactor*hx)Nav:setEngineForceCommand('brake',hS)local hT=''local hU=vec3()local hV=false;local hW='thrust analog longitudinal'local hX=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if hX==axisCommandType.byThrottle then local hY=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hW,axisCommandId.longitudinal)Nav:setEngineForceCommand(hW,hY,hN)elseif hX==axisCommandType.byTargetSpeed then local hY=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)hT=hT..' , '..hW;hU=hU+hY;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then hV=true end end;local hZ='thrust analog lateral'local h_=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if h_==axisCommandType.byThrottle then local i0=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hZ,axisCommandId.lateral)Nav:setEngineForceCommand(hZ,i0,hN)elseif h_==axisCommandType.byTargetSpeed then local i1=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)hT=hT..' , '..hZ;hU=hU+i1 end;local i2='thrust analog vertical'local i3=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if i3==axisCommandType.byThrottle then local i4=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(i2,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(i2,i4,hN,'airfoil','ground','',hP)else Nav:setEngineForceCommand(i2,vec3(),hN)Nav:setEngineForceCommand('airfoil vertical',i4,hN,'airfoil','','',hP)Nav:setEngineForceCommand('ground vertical',i4,hN,'ground','','',hP)end elseif i3==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),hN)end;local i5=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)hT=hT..' , '..i2;hU=hU+i5 end;if hU:len()>constants.epsilon then if G~=0 or hV or math.abs(hx:dot(hu))<0.95 then hT=hT..', brake'end;Nav:setEngineForceCommand(hT,hU,hO,'','','',hP)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local b5=vec3(core.getVelocity()):len()local i6=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local i7=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if b5*3.6>i7*(1-i6)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b5*3.6<i7*(1-i6)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local i8=unit.getThrottle()local hd=i8/100;if j==0 then hd=hd*MaxGameVelocity;if b5>=hd*(1-i6)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b5<hd*(1-i6)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hd=hd*ReentrySpeed/3.6;if b5>=hd*(1-i6)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif b5<hd*(1-i6)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,aT=coroutine.resume(beginSetup)if aT then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(i9)if i9=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif i9=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif i9=="forward"then B=B-1 elseif i9=="backward"then B=B+1 elseif i9=="left"then E=E-1 elseif i9=="right"then E=E+1 elseif i9=="yawright"then F=F-1 elseif i9=="yawleft"then F=F+1 elseif i9=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif i9=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif i9=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif i9=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif i9=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif i9=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif i9=="option1"then IncrementAutopilotTargetIndex()v=false elseif i9=="option2"then DecrementAutopilotTargetIndex()v=false elseif i9=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif i9=="option4"then ToggleAutopilot()v=false elseif i9=="option5"then ToggleLockPitch()v=false elseif i9=="option6"then ToggleAltitudeHold()v=false elseif i9=="option7"then wipeSaveVariables()v=false elseif i9=="option8"then ToggleFollowMode()v=false elseif i9=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif i9=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;Animated=false;Animating=false end elseif i9=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif i9=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif i9=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif i9=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif i9=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif i9=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif i9=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(i9)if i9=="forward"then B=0 elseif i9=="backward"then B=0 elseif i9=="left"then E=0 elseif i9=="right"then E=0 elseif i9=="yawright"then F=0 elseif i9=="yawleft"then F=0 elseif i9=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif i9=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif i9=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif i9=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif i9=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif i9=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif i9=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;Animated=false;Animating=false end elseif i9=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif i9=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(i9)if i9=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif i9=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif i9=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif i9=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(bo,ia)if ia~="empty"then bo[#bo+1]=[[<text class="msg" x="50%%" y="310" >]]for ib in string.gmatch(ia,"([^\n]+)")do bo[#bo+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],ib)end;bo[#bo+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local a_=system.getTime()local velocity=vec3(core.getWorldVelocity())local cA=vec3(velocity):len()local ic=a_-ag;if cA>1.38889 then cA=cA/1000;local id=cA*(a_-ag)TotalDistanceTravelled=TotalDistanceTravelled+id;W=W+id end;X=X+ic;TotalFlightTime=TotalFlightTime+ic;ag=a_ end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
