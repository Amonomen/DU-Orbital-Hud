name: ButtonsHud - Dimencia and Archaegeo v4.94 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=false;local b2=false;local b3=autoRollPreference;local b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b5=vec3(core.getWorldVelocity())local b6=vec3(b5):len()local b7=math.cos(StallAngle*constants.deg2rad)local b8=LandingGearGroundHeight;local b9=system.getMouseDeltaX()local ba=system.getMouseDeltaY()local bb=false;local bc=false;local bd=system.getTime()local be=0;function LoadVariables()if dbHud_1 then local bf=dbHud_1.hasKey;if not useTheseSettings then for bg,bh in pairs(a)do if bf(bh)then local bi=f(dbHud_1.getStringValue(bh))if bi~=nil then c(bh.." "..dbHud_1.getStringValue(bh))_G[bh]=bi;az=true end end end end;coroutine.yield()for bg,bh in pairs(b)do if bf(bh)then local bi=f(dbHud_1.getStringValue(bh))if bi~=nil then c(bh.." "..dbHud_1.getStringValue(bh))_G[bh]=bi;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bj=system.getTime()if LastStartTime+180<bj then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b3=autoRollPreference end;LastStartTime=bj;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b7=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bk,bl)if bk>bl then bl=bk end;if ContainerOptimization>0 then bl=bl-bl*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bl=bl-bl*FuelTankOptimization*0.05 end;return bl end;function ProcessElements()local bm=fuelX~=0 and fuelY~=0;for bg in pairs(af)do local type=l(af[bg])if type=="Landing Gear"then A=true end;if type=="Dynamic Core Unit"then local bn=h(af[bg])if bn>10000 then aQ=128 elseif bn>1000 then aQ=64 elseif bn>150 then aQ=32 end end;aG=aG+h(af[bg])if bm and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bn=h(af[bg])local bo=m(af[bg])local bk=0;local bp=system.getTime()if type=="Atmospheric Fuel Tank"then local bl=400;local bq=35.03;if bn>10000 then bl=51200;bq=5480 elseif bn>1300 then bl=6400;bq=988.67 elseif bn>150 then bl=1600;bq=182.67 end;bk=bo-bq;if fuelTankHandlingAtmo>0 then bl=bl+bl*fuelTankHandlingAtmo*0.2 end;bl=CalculateFuelVolume(bk,bl)aD[#aD+1]={af[bg],core.getElementNameById(af[bg]),bl,bq,bk,bp}end;if type=="Rocket Fuel Tank"then local bl=320;local bq=173.42;if bn>65000 then bl=40000;bq=25740 elseif bn>6000 then bl=5120;bq=4720 elseif bn>700 then bl=640;bq=886.72 end;bk=bo-bq;if fuelTankHandlingRocket>0 then bl=bl+bl*fuelTankHandlingRocket*0.1 end;bl=CalculateFuelVolume(bk,bl)aF[#aF+1]={af[bg],core.getElementNameById(af[bg]),bl,bq,bk,bp}end;if type=="Space Fuel Tank"then local bl=2400;local bq=182.67;if bn>10000 then bl=76800;bq=5480 elseif bn>1300 then bl=9600;bq=988.67 end;bk=bo-bq;if fuelTankHandlingSpace>0 then bl=bl+bl*fuelTankHandlingSpace*0.2 end;bl=CalculateFuelVolume(bk,bl)aE[#aE+1]={af[bg],core.getElementNameById(af[bg]),bl,bq,bk,bp}end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,bh in pairs(door)do bh.toggle()end end;if switch then for _,bh in pairs(switch)do bh.toggle()end end;if forcefield then for _,bh in pairs(forcefield)do bh.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local br=AboveGroundLevel()if br~=-1 or not ad and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not A then GearExtended=true end else BrakeIsOn=false end;if b8~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b8)if b8==0 and not A then GearExtended=true;BrakeIsOn=true end else b8=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and br~=-1 then a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ad end;function ConvertResolutionX(bh)if ResolutionX==1920 then return bh else return round(ResolutionX*bh/1920,0)end end;function ConvertResolutionY(bh)if ResolutionY==1080 then return bh else return round(ResolutionY*bh/1080,0)end end;function RefreshLastMaxBrake(bs,bt)if bs==nil then bs=core.g()end;bs=round(bs,5)local bu=j()if bt~=nil and bt or(aC==nil or aC~=bs)then local b5=core.getVelocity()local bv=vec3(b5):len()local bw=f(unit.getData()).maxBrake;if bw~=nil and bw>0 and ad then bw=bw/utils.clamp(bv/100,0.1,1)bw=bw/bu;if bu>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bw)/2 else LastMaxBrakeInAtmo=bw end end end;if bw~=nil and bw>0 then LastMaxBrake=bw end;aC=bs end end;function MakeButton(bx,by,bz,bA,bB,bC,bD,bE,bF)local bG={enableName=bx,disableName=by,width=bz,height=bA,x=bB,y=bC,toggleVar=bD,toggleFunction=bE,drawCondition=bF,hovered=false}table.insert(aq,bG)return bG end;function UpdateAtlasLocationsList()AtlasOrdered={}for bg,bh in pairs(aS[0])do table.insert(AtlasOrdered,{name=bh.name,index=bg})end;local function bH(bI,bJ)return bI.name<bJ.name end;table.sort(AtlasOrdered,bH)end;function AddLocationsToAtlas()for bg,bh in pairs(SavedLocations)do table.insert(aS[0],bh)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bK)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bL='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bM,bN,bO,bP,bQ=string.match(bK,bL)if bM=="0"and bN=="0"then return vec3(tonumber(bO),tonumber(bP),tonumber(bQ))end;bP=math.rad(bP)bO=math.rad(bO)local planet=aS[tonumber(bM)][tonumber(bN)]local bR=math.cos(bO)local bS=vec3(bR*math.cos(bP),bR*math.sin(bP),math.sin(bO))return planet.center+(planet.radius+bQ)*bS end;function AddNewLocationByWaypoint(bT,planet,bK)if dbHud_1 then local bU={}local position=zeroConvertToWorldCoordinates(bK)if planet.name=="Space"then bU={position=position,name=bT,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bV=false;if planet.hasAtmosphere then bV=true else bV=false end;bU={position=position,name=bT,atmosphere=bV,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bU;table.insert(aS[0],bU)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bW=planet.name..". "..#SavedLocations;if radar_1 then local bX,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bX~=nil and bX~=""then bW=bW.." "..radar_1.getConstructName(bX)end end;local bU={}local bV=false;if planet.hasAtmosphere then bV=true end;bU={position=position,name=bW,atmosphere=bV,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bU;table.insert(aS[0],bU)UpdateAtlasLocationsList()K="Location saved as "..bW else K="Databank must be installed to save locations"end end;function UpdatePosition(bY)local bZ=-1;local bU;for bg,bh in pairs(SavedLocations)do if bh.name and bh.name==CustomTarget.name then bZ=bg;break end end;if bZ~=-1 then local b_;if bY~=nil then bU={position=SavedLocations[bZ].position,name=bY,atmosphere=SavedLocations[bZ].atmosphere,planetname=SavedLocations[bZ].planetname,gravity=SavedLocations[bZ].gravity}else bU={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bZ].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bZ]=bU;bZ=-1;for bg,bh in pairs(aS[0])do if bh.name and bh.name==CustomTarget.name then bZ=bg end end;if bZ>-1 then aS[0][bZ]=bU end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bZ=-1;for bg,bh in pairs(aS[0])do if bh.name and bh.name==CustomTarget.name then bZ=bg end end;if bZ>-1 then table.remove(aS[0],bZ)end;bZ=-1;for bg,bh in pairs(SavedLocations)do if bh.name and bh.name==CustomTarget.name then K=bh.name.." saved location cleared"bZ=bg;break end end;if bZ~=-1 then table.remove(SavedLocations,bZ)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(c0)c0[#c0+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(c1,c2,bB,bC,bz,bA)if c1>bB and c1<bB+bz and c2>bC and c2<bC+bA then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local c3=vec3(core.getConstructWorldOrientationForward())local c4=vec3(core.getConstructWorldOrientationRight())local c5=vec3(core.getWorldVertical())local c6=getPitch(c5,c3,c4)LockPitch=c6;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b3=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b3=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b3=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b3=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b3=autoRollPreference end end;function CheckDamage(c0)local c7=0;ao=""local c8=aG;local c9=0;local ca=0;local cb=0;local cc=0;local cd=""for bg in pairs(af)do local bn=0;local ce=0;ce=h(af[bg])bn=k(af[bg])c9=c9+bn;if bn<ce then if bn==0 then cb=cb+1 else ca=ca+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bg]))local bB=position.x-aQ;local bC=position.y-aQ;local cf=position.z-aQ;table.insert(al,core.spawnArrowSticker(bB,bC,cf+1,"down"))table.insert(al,core.spawnArrowSticker(bB,bC,cf+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bB+1,bC,cf,"north"))table.insert(al,core.spawnArrowSticker(bB+1,bC,cf,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bB-1,bC,cf,"south"))table.insert(al,core.spawnArrowSticker(bB-1,bC,cf,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bB,bC-1,cf,"east"))table.insert(al,core.spawnArrowSticker(bB,bC-1,cf,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bB,bC+1,cf,"west"))table.insert(al,core.spawnArrowSticker(bB,bC+1,cf,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bg])end elseif aH and#al>0 and al[11]==af[bg]then for cg in pairs(al)do core.deleteSticker(al[cg])end;al={}end end;c7=d(c9/c8*100)if c7<100 then c0[#c0+1]=[[<g class="pbright txt">]]cc=d(c7*2.55)cd=e("rgb(%d,%d,%d)",255-cc,cc,0)if c7<100 then c0[#c0+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cd,c7)if cb>0 then c0[#c0+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cd,cb,ca)elseif ca>0 then c0[#c0+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cd,ca)end end;c0[#c0+1]=[[<\g>]]end end;function DrawCursorLine(c0)local ch=d(utils.clamp(a3/(at/4)*255,0,255))c0[#c0+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+ch,d(PrimaryG+0.5)-ch,d(PrimaryB+0.5)-ch)end;function getPitch(ci,cj,bJ)local ck=ci:cross(bJ):normalize_inplace()local c6=math.acos(utils.clamp(ck:dot(-cj),-1,1))*constants.rad2deg;if ck:cross(-cj):dot(bJ)<0 then c6=-c6 end;return c6 end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b3=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bg,bh in pairs(a)do dbHud_1.setStringValue(bh,g(nil))end;for bg,bh in pairs(b)do if bh~="SavedLocations"then dbHud_1.setStringValue(bh,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bh in pairs(aq)do if bh.hovered then if not bh.drawCondition or bh.drawCondition()then bh.toggleFunction()end;bh.hovered=false end end end;function SetButtonContains()local bB=a0+at/2;local bC=a1+au/2;for _,bh in pairs(aq)do bh.hovered=Contains(bB,bC,bh.x,bh.y,bh.width,bh.height)end end;function DrawButton(c0,cl,hover,bB,bC,cm,cn,co,cp,cq,cr)if type(cq)=="function"then cq=cq()end;if type(cr)=="function"then cr=cr()end;c0[#c0+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bB,bC,cm,cn)if cl then c0[#c0+1]=e("%s'",co)else c0[#c0+1]=cp end;if hover then c0[#c0+1]=" style='stroke:white; stroke-width:2'"else c0[#c0+1]=" style='stroke:black; stroke-width:1'"end;c0[#c0+1]="></rect>"c0[#c0+1]=e("<text x='%f' y='%f' font-size='24' fill='",bB+cm/2,bC+cn/2+5)if cl then c0[#c0+1]="black"else c0[#c0+1]="white"end;c0[#c0+1]="' text-anchor='middle' font-family='Montserrat'>"if cl then c0[#c0+1]=e("%s</text>",cq)else c0[#c0+1]=e("%s</text>",cr)end end;function DrawButtons(c0)local cs="rgb(50,50,50)'"local ct="rgb(210,200,200)"local cu=DrawButton;for _,bh in pairs(aq)do local by=bh.disableName;local bx=bh.enableName;if type(by)=="function"then by=by()end;if type(bx)=="function"then bx=bx()end;if not bh.drawCondition or bh.drawCondition()then cu(c0,bh.toggleVar(),bh.hovered,bh.x,bh.y,bh.width,bh.height,ct,cs,by,bx)end end end;function DrawTank(c0,aP,bB,cv,cw,cx,cy,cz)local cA=1;local cB=2;local cC=3;local cD=4;local cE=5;local cF=6;local cG=""local cH=0;local cI=fuelY;local cJ=fuelY+10;if o()==1 and not RemoteHud then cI=cI-50;cJ=cJ-50 end;c0[#c0+1]=[[<g class="pdim txtfuel">]]if cw=="ATMO"then cG="atmofueltank"elseif cw=="SPACE"then cG="spacefueltank"else cG="rocketfueltank"end;cH=_G[cG.."_size"]if#cx>0 then for i=1,#cx do local bW=string.sub(cx[i][cB],1,12)local cK=0;for cg=1,cH do if cx[i][cB]==f(unit[cG.."_"..cg].getData()).name then cK=cg;break end end;if aP or cy[i]==nil or cz[i]==nil then local cL=0;local cM=0;local cN=0;local cO=0;local bp=system.getTime()if cK~=0 then cz[i]=f(unit[cG.."_"..cK].getData()).percentage;cy[i]=f(unit[cG.."_"..cK].getData()).timeLeft;if cy[i]=="n/a"then cy[i]=0 end else cN=m(cx[i][cA])-cx[i][cD]cL=cx[i][cC]cz[i]=d(0.5+cN*100/cL)cM=cx[i][cE]cO=cx[i][cF]if cM<=cN then cy[i]=0 else cy[i]=d(0.5+cN/((cM-cN)/(bp-cO)))end;cx[i][cE]=cN;cx[i][cF]=bp end end;if bW==cv then bW=e("%s %d",cw,i)end;if cK==0 then bW=bW.." *"end;local cP;if cy[i]==0 then cP="n/a"else cP=FormatTimeString(cy[i])end;if cz[i]~=nil then local cc=d(cz[i]*2.55)local cd=e("rgb(%d,%d,%d)",255-cc,cc,0)local cQ=""if cP~="n/a"and cy[i]<120 or cz[i]<5 then if aP then cQ=[[class="red"]]end end;c0[#c0+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bB,cI,cQ,bW,bB,cJ,cd,cz[i],cP)cI=cI+30;cJ=cJ+30 end end end;c0[#c0+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b5)b5=vec3(b5)local c6=-math.deg(math.atan(b5.y,b5.z))+180;c6=c6-90;if c6<0 then c6=360+c6 end;if c6>180 then c6=-180+c6-180 end;return-c6 end;function getRelativeYaw(b5)b5=vec3(b5)local cR=math.deg(math.atan(b5.y,b5.x))-90;if cR<-180 then cR=360+cR end;return cR end;function AlignToWorldVector(cS,cT,cU)if not ad or not bc or aa~=-1 or b6<w then local cV=cU;if cV==nil then cV=DampingMultiplier end;if cT==nil then cT=as end;cS=vec3(cS):normalize()local cW=vec3(core.getConstructWorldOrientationForward())-cS;local cX=-getMagnitudeInDirection(cW,core.getConstructWorldOrientationRight())*ar;local cY=-getMagnitudeInDirection(cW,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cX/2 end;if an==0 then an=cY/2 end;if math.abs(cX)<0.1 then D=D-cX*2 else D=D-(cX+(cX-am)*cV)end;if math.abs(cY)<0.1 then C=C+cY*2 else C=C+cY+(cY-an)*cV end;am=cX;an=cY;if math.abs(cX)<cT and math.abs(cY)<cT then return true end;return false elseif bc and aa==-1 then cS=vec3(core.getWorldVelocity())local cV=cU;if cV==nil then cV=DampingMultiplier end;if cT==nil then cT=as end;cS=vec3(cS):normalize()local cW=vec3(core.getConstructWorldOrientationForward())-cS;local cX=-getMagnitudeInDirection(cW,core.getConstructWorldOrientationRight())*ar;local cY=-getMagnitudeInDirection(cW,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cX/2 end;if an==0 then an=cY/2 end;if math.abs(cX)<0.1 then D=D-cX*5 else D=D-(cX+(cX-am)*cV)end;if math.abs(cY)<0.1 then C=C+cY*5 else C=C+cY+(cY-an)*cV end;am=cX;an=cY;if math.abs(cX)<cT and math.abs(cY)<cT then return true end;return false end end;function getAPEnableName()local bW=AutopilotTargetName;if bW==nil then bW=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bW==nil then bW="None"end;return"Engage Autopilot: "..bW end;function getAPDisableName()local bW=AutopilotTargetName;if bW==nil then bW=CustomTarget.name end;if bW==nil then bW="None"end;return"Disable Autopilot: "..bW end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b3=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b3=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b3=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cZ=50;local c_=260;local d0=MakeButton("Enable Brake Toggle","Disable Brake Toggle",c_,cZ,at/2-c_/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",c_,cZ,at/2-c_/2-50-d0.width,au/2-cZ+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",c_,cZ,at/2-c_/2+d0.width+50,au/2-cZ+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local d1=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,d1.height,d1.x+d1.width+30,d1.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,d1.height,d1.x+d1.width+30,d1.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,d1.height,d1.x-200-30,d1.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cZ=60;c_=300;local bB=10;local bC=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",c_,cZ,bB,bC,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",c_,cZ,bB+c_+20,bC,function()return AltitudeHold end,ToggleAltitudeHold)bC=bC+cZ+20;MakeButton("Engage Autoland","Disable Autoland",c_,cZ,bB,bC,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",c_,cZ,bB+c_+20,bC,function()return AutoTakeoff end,ToggleAutoTakeoff)bC=bC+cZ+20;MakeButton("Show Orbit Display","Hide Orbit Display",c_,cZ,bB,bC,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bC=bC+cZ+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",c_,cZ,bB,bC,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",c_,cZ,bB+c_+20,bC,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bC=bC+cZ+20;MakeButton("Engage Follow Mode","Disable Follow Mode",c_,cZ,bB,bC,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",c_,cZ,bB+c_+20,bC,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bC=bC+cZ+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",c_,cZ,bB,bC,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bC=bC+cZ+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,c_*2,cZ,bB,bC,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local d2=Nav.axisCommandManager:getAxisCommandType(0)local d3="TRAVEL"if d2==1 then d3="CRUISE"end;if Autopilot then d3="AUTOPILOT"end;return d3 end;function UpdateHud(c0)local bQ=ae;local b5=core.getVelocity()local bv=vec3(b5):len()local c5=vec3(core.getWorldVertical())local c3=vec3(core.getConstructWorldOrientationForward())local c4=vec3(core.getConstructWorldOrientationRight())local d4=vec3(core.getConstructWorldOrientationUp())local d5=getRoll(c5,c3,c4)local d6=d5/180*math.pi;local d7=math.cos(d6)local d8=math.sin(d6)local c6=getPitch(c5,c3,c4*d7+d4*d8)local d9=d5;local da=c6;local db=j()local dc=d(unit.getThrottle())local dd=bv*3.6;local de=unit.getAxisCommandValue(0)local d3=GetFlightStyle()local df="ROLL"local dg=unit.getClosestPlanetInfluence()>0;if dc==nil then dc=0 end;if not dg then if bv>5 then c6=getRelativePitch(b5)d5=getRelativeYaw(b5)else c6=0;d5=0 end;df="YAW"end;c0[#c0+1]=a5;c0[#c0+1]=ao;c0[#c0+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(c0,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(c0,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(c0,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(c0,bQ)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if dg then DrawRollLines(c0,centerX,centerY,d9,df,dg)DrawArtificialHorizon(c0,da,d9,centerX,centerY,dg,d(getRelativeYaw(b5)),bv)else DrawRollLines(c0,centerX,centerY,d5,df,dg)DrawArtificialHorizon(c0,c6,d5,centerX,centerY,dg,d(d5),bv)end;DrawAltitudeDisplay(c0,bQ,dg)DrawPrograde(c0,b5,bv,centerX,centerY)end end;DrawThrottle(c0,d3,dc,de)DrawSpeed(c0,dd)DrawWarnings(c0)DisplayOrbitScreen(c0)if screen_2 then local bK=vec3(core.getConstructWorldPos())local bB=960+bK.x/aU;local bC=450+bK.y/aV;screen_2.moveContent(aW,(bB-80)/19.2,(bC-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(c0)local dh=aj;local di=ak;local dj=aj;local dk=ak;if IsInFreeLook()and not brightHud then dh=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]di=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;c0[#c0+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],dh,dh,dj,dj,di,di,dk,dk,ResolutionX,ResolutionY)end;function HUDEpilogue(c0)c0[#c0+1]="</svg>"end;function DrawSpeed(c0,dd)local dl=throtPosY-10;local dm=throtPosX+10;c0[#c0+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dl=75 end;c0[#c0+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dm,dl,d(dd))end;function DrawOdometer(c0,W,TotalDistanceTravelled,d3,X,db)local dn=ConvertResolutionX(1240)local dp=ConvertResolutionY(55)local dq=dp+10;local db=j()local bs=core.g()local dr=0;local ds=0;local dt=0;RefreshLastMaxBrake(bs)if ad then dt=LastMaxBrakeInAtmo else dt=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local du=vec3(core.getWorldAcceleration()):len()/9.80665;if bs>0.1 then ds=aB*bs;dr=maxThrust/bs end;c0[#c0+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dn=ConvertResolutionX(1120)dp=ConvertResolutionY(55)dq=dp+10 elseif ad then local dv=ConvertResolutionX(770)c0[#c0+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dv,dp,dv,dq,db)end;c0[#c0+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dn,dp,dn,dq,bs/9.80665,dn,dp+20,dn,dq+20,du)c0[#c0+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then c0[#c0+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dt/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),d3)if bs>0.1 then c0[#c0+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dr/1000,ConvertResolutionX(1240),ConvertResolutionY(20),ds/1000)else c0[#c0+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else c0[#c0+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),d3)end;c0[#c0+1]="</g>"end;function DrawThrottle(c0,d3,dc,de)local cI=throtPosY+10;local cJ=throtPosY+20;if o()==1 and not RemoteHud then cI=55;cJ=65 end;local dw="CRUISE"local unit="km/h"local dx=de;if d3=="TRAVEL"or d3=="AUTOPILOT"then dw="THROT"unit="%"dx=dc;local dy="dim"if dc<0 then dy="red"end;c0[#c0+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dy,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(dc),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;c0[#c0+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cI,dw,throtPosX+10,cJ,dx,unit)end;function DrawVerticalSpeed(c0,bQ)if bQ<200000 and not ad or bQ and ad then local dz=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dA=0;if math.abs(dz)>1 then dA=45*math.log(math.abs(dz),10)if dz<0 then dA=-dA end end;c0[#c0+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dz),d(dA))end end;function getHeading(cj)local dB=-vec3(core.getWorldVertical())cj=cj-cj:project_on(dB)local dC=vec3(0,0,1)dC=dC-dC:project_on(dB)local dD=dC:cross(dB)local dA=dC:angle_between(cj)*constants.rad2deg;if cj:dot(dD)<0 then dA=360-dA end;return dA end;function DrawRollLines(c0,centerX,centerY,d9,df,dg)local dE=circleRad;local dF=20;dF=d(dF)local dG=d(d9)if dg then for i=-45,45,5 do local dH=i;c0[#c0+1]=e([[<g transform="rotate(%f,%d,%d)">]],dH,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;c0[#c0+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dE+dF-len,centerX,centerY+dE+dF)end;c0[#c0+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dE+dF-35,df,centerX,centerY+dE+dF-25,dG)c0[#c0+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d9,centerX,centerY)c0[#c0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dE+dF-20,centerX+5,centerY+dE+dF-20,centerX,centerY+dE+dF-15)c0[#c0+1]="</g>"end;local cR=dG;if dg then cR=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dI=20;local dJ=d(cR)local dK=0;local dL=centerY+dE+dF+20;local dM=centerX;if df~="YAW"then dL=ConvertResolutionY(130)dM=ConvertResolutionX(960)end;local dN=[[<path class="txttick line" d="]]for i=d(dJ-(dI+10)-dJ%5+0.5),d(dJ+dI+10+dJ%5+0.5),5 do local bB=dM+-i*5+cR*5;if i%10==0 then dK=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;c0[#c0+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bB+5,dL-12,p)elseif i%5==0 then dK=5 end;if dK==10 then dN=e([[%s M %f %f v %d]],dN,bB,dL-5,dK)else dN=e([[%s M %f %f v %d]],dN,bB,dL-2.5,dK)end end;c0[#c0+1]=dN..[["/>]]c0[#c0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dM-5,dL+10,dM+5,dL+10,dM,dL+5)if dg then df="HDG"end;c0[#c0+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dM,dL+25,dJ,dM,dL+35,df)end;function DrawArtificialHorizon(c0,da,d9,centerX,centerY,dg,dO,bv)local dE=circleRad;local dP=d(dE*3/5)if dE>0 then local dQ=d(da)local len=0;local dN=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*d9,centerX,centerY)if not ad then dN=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;c0[#c0+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dE-1,centerX,centerY)c0[#c0+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dQ-30-dQ%5+0.5),d(dQ+30+dQ%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bC=centerY+-i*5+da*5;if len==30 then dN=e([[%s M %d %f h %d]],dN,centerX-dP-len,bC,len)if ad then c0[#c0+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d9,centerX,centerY,centerX-dP+10,bC,i)c0[#c0+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d9,centerX,centerY,centerX+dP-10,bC,i)if i==0 or i==180 or i==-180 then c0[#c0+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d9,centerX,centerY,centerX-dP+20,bC,dP*2-40)end else c0[#c0+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dP+10,bC,i)c0[#c0+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dP-10,bC,i)end;dN=e([[%s M %d %f h %d]],dN,centerX+dP,bC,len)else dN=e([[%s M %d %f h %d]],dN,centerX-dP-len,bC,len)dN=e([[%s M %d %f h %d]],dN,centerX+dP,bC,len)end end;c0[#c0+1]=dN..[["/>]]local dR="PITCH"if not dg then dR="REL PITCH"end;if da>90 and not ad then da=90-(da-90)elseif da<-90 and not ad then da=-90-(da+90)end;if dE>200 then if ad then if bv>w then c0[#c0+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dO)end;c0[#c0+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d9,centerX,centerY)else c0[#c0+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;c0[#c0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dP+25,centerY-5,centerX-dP+20,centerY,centerX-dP+25,centerY+5,centerX-dP+50,centerY+4,dQ)c0[#c0+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dP-25,centerY-5,centerX+dP-20,centerY,centerX+dP-25,centerY+5,centerX+dP-30,centerY+4,dQ)c0[#c0+1]="</g>"end;local dS=d(dE/3)c0[#c0+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dS,centerY,dE-dS)if not ad and dg then c0[#c0+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d9,centerX,centerY,centerX-dP+10,centerY,dP*2-20)end;c0[#c0+1]="</g>"if dE<200 then if ad and bv>w then c0[#c0+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dE,dR,centerX,centerY-dE+10,dQ,centerX,centerY-15,"Yaw",centerX,centerY+20,dO)else c0[#c0+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dE,dR,centerX,centerY-dE+15,dQ)end end end end;function DrawAltitudeDisplay(c0,bQ,dg)local dT=altMeterX;local dU=altMeterY;local dV=78;local dW=19;local dX=AboveGroundLevel()if dX~=-1 then table.insert(c0,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dT+dV,dU+dW+20,dX))end;if dg and(bQ<200000 and not ad or bQ and ad)then table.insert(c0,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dT-1,dU-4,dV+2,dW+6,dT+1,dU-1,dV-4,dW))local bZ=0;local dY=1;local dZ=0;local d_=bQ<0;local e0=9;if d_ then e0=0 end;local bQ=math.abs(bQ)while bZ<6 do local e1=11;local e2=16;local e3=9;local e4=14;local cQ="altsm"if bZ>2 then e2=e2+3;e1=e1+2;e4=e4+2;e3=e3-6;cQ="altbig"end;if d_ then cQ=cQ.." red"end;local e5=bQ/dY%10;local e6=d(e5)local e7=d((e6+1)%10)local e8=dZ;if bZ==0 then e8=e5-e6;if d_ then e8=1-e8 end end;if d_ and(bZ==0 or dZ~=0)then local e9=e7;e7=e6;e6=e9 end;local ea=e2*(e8-1)local eb=ea+e2;local bB=dT+e3+(6-bZ)*e1;local bC=dU+e4;table.insert(c0,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cQ,bB,bC+ea,e7,bB,bC+eb,e6))bZ=bZ+1;dY=dY*10;if e6==e0 then dZ=e8 else dZ=0 end end;table.insert(c0,[[</g></g>]])end end;function DrawPrograde(c0,b5,bv,centerX,centerY)if bv>5 and not ad or bv>w then local dE=circleRad;local ec=20;local ed=20;local ee=vec3(b5)local ef=getRelativePitch(ee)local eg=getRelativeYaw(ee)local eh=14;local ei=eh/2;local ej=-eg/ed*dE;local ek=ef/ec*dE;local bB=centerX+ej;local bC=centerY+ek;local a3=math.sqrt(ej^2+ek^2)local el=[[<circle
                cx="]]..bB..[["
                cy="]]..bC..[["
                r="]]..ei/eh..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bB..[["
                cy="]]..bC..[["
                r="]]..ei..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bB-eh..[[,]]..bC..[[ h ]]..ei..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bB+ei..[[,]]..bC..[[ h ]]..ei..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bB..[[,]]..bC-eh..[[ v ]]..ei..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a3<dE then c0[#c0+1]=el else local dA=math.atan(ek,ej)local em=4;local en=centerX+dE*math.cos(dA)local eo=centerY+dE*math.sin(dA)c0[#c0+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dA*180/math.pi,en,eo,en-em,eo-em/2,em*2,em,en+em,eo-em,em,em,-em,em)end;if not ad then ef=getRelativePitch(-ee)eg=getRelativeYaw(-ee)ej=-eg/ed*dE;ek=ef/ec*dE;bB=centerX+ej;bC=centerY+ek;a3=math.sqrt(ej^2+ek^2)if a3<dE then local ep=[[<circle
                        cx="]]..bB..[["
                        cy="]]..bC..[["
                        r="]]..ei..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bB..[[,]]..bC-eh..[[ v ]]..ei..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bB..[[,]]..bC..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bB..[[,]]..bC..[[)" />
                     <path
                        d="M ]]..bB-ei..[[,]]..bC..[[ h ]]..eh..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bB..[[,]]..bC..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bB..[[,]]..bC..[[)"/>]]c0[#c0+1]=ep end end end end;function DrawWarnings(c0)c0[#c0+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)c0[#c0+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then c0[#c0+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))c0[#c0+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))c0[#c0+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eq=ConvertResolutionX(960)local er=ConvertResolutionY(860)local es=ConvertResolutionY(880)local et=ConvertResolutionY(900)local eu=ConvertResolutionY(960)local ev=ConvertResolutionY(200)local ew=ConvertResolutionY(150)local ex=ConvertResolutionY(960)if o()==1 and not RemoteHud then er=ConvertResolutionY(135)es=ConvertResolutionY(155)et=ConvertResolutionY(175)ev=ConvertResolutionY(115)ew=ConvertResolutionY(95)end;if BrakeIsOn then c0[#c0+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eq,er)end;if ad and bc and hoverDetectGround()==-1 then c0[#c0+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eq,ev+50)end;if ah then c0[#c0+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eq,ex)end;if GearExtended then if A then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eq,es)else c0[#c0+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eq,es)end;c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eq,et,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eq,eu+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eq,ev+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else c0[#c0+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eq,ev+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eq,ev+20,AutopilotStatus)elseif LockPitch~=nil then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eq,ev+20,d(LockPitch))elseif I then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eq,ev+20)elseif Reentry then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],eq,ev+20)end;if AltitudeHold then if AutoTakeoff then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eq,ev,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then c0[#c0+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eq,ev+50)end else c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eq,ev,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then c0[#c0+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eq,ev)else c0[#c0+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eq,ev)end end;if ProgradeIsOn then c0[#c0+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eq,ev)end;if RetrogradeIsOn then c0[#c0+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eq,ev)end;if TurnBurn then c0[#c0+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eq,ew)end;if VectorToTarget then c0[#c0+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eq,ev+30,VectorStatus)end;c0[#c0+1]="</g>"end;function DisplayOrbitScreen(c0)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ey=OrbitMapX;local ez=OrbitMapY;local eA=OrbitMapSize;local eB=4;ez=ez+eB;local eC=15;local bB=ey+eA+ey/2+eB;local bC=ez+eA/2+5+eB;local eD,eE,eF,eG;eD=eA/4;eG=0;c0[#c0+1]=[[<g class="pbright txtorb txtmid">]]c0[#c0+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eA+ey*2,eA+ez,eB,eB)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eF=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eD*2)eE=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eF*(1-orbit.eccentricity)eG=eD-orbit.periapsis.altitude/eF-planet.radius/eF;local eH=""if orbit.periapsis.altitude<=0 then eH='redout'end;c0[#c0+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eH,ey+eA/2+eG+eB,ez+eA/2+eB,eD,eE)c0[#c0+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ey+eA/2+eB,ez+eA/2+eB,planet.radius/eF)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then c0[#c0+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bB-35,bC-5,ey+eA/2+eD+eG,bC-5)c0[#c0+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bB,bC)bC=bC+eC;c0[#c0+1]=e([[<text x="%f" y="%f">%s</text>]],bB,bC,getDistanceDisplayString(orbit.apoapsis.altitude))bC=bC+eC;c0[#c0+1]=e([[<text x="%f" y="%f">%s</text>]],bB,bC,FormatTimeString(orbit.timeToApoapsis))bC=bC+eC;c0[#c0+1]=e([[<text x="%f" y="%f">%s</text>]],bB,bC,getSpeedDisplayString(orbit.apoapsis.speed))end;bC=ez+eA/2+5+eB;bB=ey-ey/2+10+eB;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then c0[#c0+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bB+35,bC-5,ey+eA/2-eD+eG,bC-5)c0[#c0+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bB,bC)bC=bC+eC;c0[#c0+1]=e([[<text x="%f" y="%f">%s</text>]],bB,bC,getDistanceDisplayString(orbit.periapsis.altitude))bC=bC+eC;c0[#c0+1]=e([[<text x="%f" y="%f">%s</text>]],bB,bC,FormatTimeString(orbit.timeToPeriapsis))bC=bC+eC;c0[#c0+1]=e([[<text x="%f" y="%f">%s</text>]],bB,bC,getSpeedDisplayString(orbit.periapsis.speed))end;c0[#c0+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ey+eA/2+eB,20+eB,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eI=orbit.timeToApoapsis/orbit.period*2*math.pi;local eJ=eD*math.cos(eI)local eK=eE*math.sin(eI)c0[#c0+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ey+eA/2+eJ+eG+eB,ez+eA/2+eK+eB)end;c0[#c0+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local eL=a3>100000;local bi=""if eL then bi=round(a3/1000/200,1).." SU"elseif a3<1000 then bi=round(a3,1).." M"else bi=round(a3/1000,1).." KM"end;return bi end;function getDistanceDisplayString2(a3)local eL=a3>100000;local bi=""if eL then bi=round(a3/1000/200,2).." SU"elseif a3<1000 then bi=round(a3,2).." M"else bi=round(a3/1000,2).." KM"end;return bi end;function getSpeedDisplayString(bv)return d(round(bv*3.6,0)+0.5).." km/h"end;function FormatTimeString(eM)local eN=0;local eO=0;local eP=0;if eM<60 then eM=d(eM)elseif eM<3600 then eN=d(eM/60)eM=d(eM%60)elseif eM<86400 then eO=d(eM/3600)eN=d(eM%3600/60)else eP=d(eM/86400)eO=d(eM%86400/3600)end;if eP>0 then return eP.."d "..eO.."h "elseif eO>0 then return eO.."h "..eN.."m "elseif eN>0 then return eN.."m "..eM.."s"elseif eM>0 then return eM.."s"else return"0s"end end;function getMagnitudeInDirection(cS,eQ)cS=vec3(cS)eQ=vec3(eQ):normalize()local bi=cS*eQ;return bi.x+bi.y+bi.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eR=AtlasOrdered[AutopilotTargetIndex].index;local eS=aS[0][eR]if eS.center then AutopilotTargetName=eS.name;V=aY[0][eR]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eS;for _,bh in pairs(aY[0])do if bh.name==CustomTarget.planetname then V=bh;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eT=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eT end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b5=core.getWorldVelocity()local bv=vec3(b5):len()local eU,eV=aZ.computeDistanceAndTime(vec3(b5):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eW;if not TurnBurn then _,eW=GetAutopilotBrakeDistanceAndTime(bv)else _,eW=GetAutopilotTBBrakeDistanceAndTime(bv)end;local eX=0;local eY=0;if AutopilotCruising or not Autopilot and bv>5 then eY=aZ.computeTravelTime(bv,0,AutopilotDistance)elseif P+eU<AutopilotDistance then eX=AutopilotDistance-(P+eU)eY=aZ.computeTravelTime(8333.0556,0,eX)else local eZ=(AutopilotDistance-P)/eU;eU=AutopilotDistance-P;eV=eV*eZ end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eY elseif AutopilotBraking then return eW elseif AutopilotCruising then return eY+eW else return eV+Q+eY end end;function GetAutopilotBrakeDistanceAndTime(bv)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bv,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bv,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bv)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bv,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local e_=-1;local f0=-1;if vBooster then e_=vBooster.distance()end;if hover then f0=hover.distance()end;if e_~=-1 and f0~=-1 then if e_<f0 then return e_ else return f0 end elseif e_~=-1 then return e_ elseif f0~=-1 then return f0 else return-1 end end;function AboveGroundLevel()local f1=-1;local f2=hoverDetectGround()if telemeter_1 then f1=telemeter_1.getDistance()end;if f2~=-1 and f1~=-1 then if f2<f1 then return f2 else return f1 end elseif f2~=-1 then return f2 else return f1 end end;function tablelength(f3)local f4=0;for _ in pairs(f3)do f4=f4+1 end;return f4 end;function BeginProfile(f5)ProfileTimeStart=system.getTime()end;function EndProfile(f5)local f6=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+f6;ProfileCount=ProfileCount+1;if f6>ProfileTimeMax then ProfileTimeMax=f6 end;if f6<ProfileTimeMin then ProfileTimeMin=f6 end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local f7=ProfileTimeSum;local f8=ProfileTimeSum/ProfileCount;local f9=ProfileTimeMin;local fa=ProfileTimeMax;local fb=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",f7,f8,f9,fa,fb))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fc=radar_1.getEntries()local fd=radar_1.getData()local fe=ConvertResolutionX(1770)local ff=ConvertResolutionY(330)if#fc>0 then local fg=fd:find('identifiedConstructs":%[%]')if fg==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if fg~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fe,ff,#fc)local fh={}for bg,bh in pairs(fc)do if radar_1.hasMatchingTransponder(bh)==1 then table.insert(fh,bh)end end;if#fh>0 then local bC=ConvertResolutionY(15)local bB=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bB,bC)for bg,bh in pairs(fh)do bC=bC+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bB,bC,radar_1.getConstructName(bh))end end else local fi;fi=fd:find('worksInEnvironment":false')if fi then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fe,ff)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fe,ff)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(c0,fj)if fj~="empty"then c0[#c0+1]=[[<text class="msg" x="50%%" y="310" >]]for fk in string.gmatch(fj,"([^\n]+)")do c0[#c0+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fk)end;c0[#c0+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bp=system.getTime()local b5=vec3(core.getWorldVelocity())local dd=vec3(b5):len()local fl=bp-ag;if dd>1.38889 then dd=dd/1000;local fm=dd*(bp-ag)TotalDistanceTravelled=TotalDistanceTravelled+fm;W=W+fm end;X=X+fl;TotalFlightTime=TotalFlightTime+fl;ag=bp end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aS=Atlas()for bg,bh in pairs(aS[0])do if av==nil or bh.center.x<av then av=bh.center.x end;if aw==nil or bh.center.x>aw then aw=bh.center.x end;if ax==nil or bh.center.y<ax then ax=bh.center.y end;if ay==nil or bh.center.y>ay then ay=bh.center.y end end;aT=""local fn=1.1*(aw-av)/1920;local fo=1.4*(ay-ax)/1080;for bg,bh in pairs(aS[0])do local bB=960+bh.center.x/fn;local bC=540+bh.center.y/fo;aT=aT..'<circle cx="'..bB..'" cy="'..bC..'" r="'..bh.radius/fn*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bh.name,"Moon")and not string.match(bh.name,"Sanctuary")and not string.match(bh.name,"Space")then aT=aT.."<text x='"..bB.."' y='"..bC+bh.radius/fn*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bh.name.."</text>"end end;local bK=vec3(core.getConstructWorldPos())local bB=960+bK.x/fn;local bC=540+bK.y/fo;aT=aT..'<circle cx="'..bB..'" cy="'..bC..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bB.."' y='"..bC-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fn;aV=fo;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bK=vec3(core.getConstructWorldPos())local bB=960+bK.x/fn;local bC=540+bK.y/fo;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bB-80)/19.20,(bC-80)/10.80,aT)end end;function PlanetRef()local function fp(fq)return type(fq)=='number'end;local function fr(fq)return type(tonumber(fq))=='number'end;local function fs(ft)return type(ft)=='table'end;local function fu(fv)return type(fv)=='string'end;local function fw(bh)return fs(bh)and fp(bh.x and bh.y and bh.z)end;local function fx(fy)return fs(fy)and fp(fy.latitude and fy.longitude and fy.altitude and fy.bodyId and fy.systemId)end;local fz=math.pi/180;local fA=180/math.pi;local fB=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bL='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fC=utils.clamp;local function fD(fE,fF)if fE==0 then return math.abs(fF)<1e-09 end;if fF==0 then return math.abs(fE)<1e-09 end;return math.abs(fE-fF)<math.max(math.abs(fE),math.abs(fF))*fB end;local function fG(fq)local bi=string.gsub(string.reverse(e('%.4f',fq)),'^0*%.?','')return bi==''and'0'or string.reverse(bi)end;local function fH(fI)if fw(fI)then return e('{x=%.3f,y=%.3f,z=%.3f}',fI.x,fI.y,fI.z)end;if fs(fI)and not getmetatable(fI)then local fJ={}local fK=next(fI)if type(fK)=='nil'or fK==1 then fJ=fI else for bg,bh in pairs(fI)do local dx=fH(bh)if type(bg)=='number'then table.insert(fJ,e('[%s]=%s',bg,dx))else table.insert(fJ,e('%s=%s',bg,dx))end end end;return e('{%s}',table.concat(fJ,','))end;if fu(fI)then return e("'%s'",fI:gsub("'",[[\']]))end;return tostring(fI)end;local fL={}fL.__index=fL;fL.__tostring=function(fI,fM)local fN={}for bg in pairs(fI)do table.insert(fN,bg)end;table.sort(fN)local fJ={}for _,bg in ipairs(fN)do local dx=fH(fI[bg])if type(bg)=='number'then table.insert(fJ,e('[%s]=%s',bg,dx))else table.insert(fJ,e('%s=%s',bg,dx))end end;if fM then return e('%s%s',fM,table.concat(fJ,',\n'..fM))end;return e('{%s}',table.concat(fJ,','))end;fL.__eq=function(fO,fP)return fO.planetarySystemId==fP.planetarySystemId and fO.bodyId==fP.bodyId and fD(fO.radius,fP.radius)and fD(fO.center.x,fP.center.x)and fD(fO.center.y,fP.center.y)and fD(fO.center.z,fP.center.z)and fD(fO.GM,fP.GM)end;local function fQ(bM,bN,fR,fS,fT)assert(fr(bM),'Argument 1 (planetarySystemId) must be a number:'..type(bM))assert(fr(bN),'Argument 2 (bodyId) must be a number:'..type(bN))assert(fr(fR),'Argument 3 (radius) must be a number:'..type(fR))assert(fs(fS),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fS))assert(fr(fT),'Argument 5 (GM) must be a number:'..type(fT))return setmetatable({planetarySystemId=tonumber(bM),bodyId=tonumber(bN),radius=tonumber(fR),center=vec3(fS),GM=tonumber(fT)},fL)end;local fU={}fU.__index=fU;fU.__tostring=function(fV)return e('::pos{%d,%d,%s,%s,%s}',fV.systemId,fV.bodyId,fG(fV.latitude*fA),fG(fV.longitude*fA),fG(fV.altitude))end;fU.__eq=function(fO,fP)return fO.bodyId==fP.bodyId and fO.systemId==fP.systemId and fD(fO.latitude,fP.latitude)and fD(fO.altitude,fP.altitude)and(fD(fO.longitude,fP.longitude)or fD(fO.latitude,math.pi/2)or fD(fO.latitude,-math.pi/2))end;local function fW(fX,bN,bO,bP,bQ)local bM=fX;if fu(fX)and not bP and not bQ and not bN and not bO then bM,bN,bO,bP,bQ=string.match(fX,bL)assert(bM,'Argument 1 (position string) is malformed.')else assert(fr(bM),'Argument 1 (systemId) must be a number:'..type(bM))assert(fr(bN),'Argument 2 (bodyId) must be a number:'..type(bN))assert(fr(bO),'Argument 3 (latitude) must be in degrees:'..type(bO))assert(fr(bP),'Argument 4 (longitude) must be in degrees:'..type(bP))assert(fr(bQ),'Argument 5 (altitude) must be in meters:'..type(bQ))end;bM=tonumber(bM)bN=tonumber(bN)bO=tonumber(bO)bP=tonumber(bP)bQ=tonumber(bQ)if bN==0 then return setmetatable({latitude=bO,longitude=bP,altitude=bQ,bodyId=bN,systemId=bM},fU)end;return setmetatable({latitude=fz*fC(bO,-90,90),longitude=fz*(bP%360),altitude=bQ,bodyId=bN,systemId=bM},fU)end;local fY={}fY.__index=fY;fY.__tostring=function(fI,fM)local fZ=fM and fM..'  'local f_={}local fN={}for bg in pairs(fI)do table.insert(fN,bg)end;table.sort(fN)for _,g0 in ipairs(fN)do bdy=fI[g0]local g1=fL.__tostring(bdy,fZ)if fM then table.insert(f_,e('[%s]={\n%s\n%s}',g0,g1,fM))else table.insert(f_,e('  [%s]=%s',g0,g1))end end;if fM then return e('\n%s%s%s',fM,table.concat(f_,',\n'..fM),fM)end;return e('{\n%s\n}',table.concat(f_,',\n'))end;local function g2(g3)local aS={}local pid;for _,bh in pairs(g3)do local bX=bh.planetarySystemId;if type(bX)~='number'then error('Invalid planetary system ID: '..tostring(bX))elseif pid and bX~=pid then error('Mismatch planetary system IDs: '..bX..' and '..pid)end;local g4=bh.bodyId;if type(g4)~='number'then error('Invalid body ID: '..tostring(g4))elseif aS[g4]then error('Duplicate body ID: '..tostring(g4))end;setmetatable(bh.center,getmetatable(vec3.unit_x))aS[g4]=setmetatable(bh,fL)pid=bX end;return setmetatable(aS,fY)end;aX={}local function g5(g3)return setmetatable({galaxyAtlas=g3 or{}},aX)end;aX.__index=function(ft,i)if type(i)=='number'then local system=ft.galaxyAtlas[i]return g2(system)end;return rawget(aX,i)end;aX.__pairs=function(fI)return function(ft,bg)local g6,nv=next(ft,bg)return g6,nv and g2(nv)end,fI.galaxyAtlas,nil end;aX.__tostring=function(fI)local g7={}for _,g8 in pairs(fI or{})do local g9=g8:getPlanetarySystemId()local ga=fY.__tostring(g8,'    ')table.insert(g7,e('  [%s]={%s\n  }',g9,ga))end;return e('{\n%s\n}\n',table.concat(g7,',\n'))end;aX.BodyParameters=fQ;aX.MapPosition=fW;aX.PlanetarySystem=g2;function aX.createBodyParameters(gb,bN,gc,gd,ge,gf,gg)assert(fr(gb),'Argument 1 (planetarySystemId) must be a number:'..type(gb))assert(fr(bN),'Argument 2 (bodyId) must be a number:'..type(bN))assert(fr(gc),'Argument 3 (surfaceArea) must be a number:'..type(gc))assert(fs(gd),'Argument 4 (aPosition) must be an array or vec3:'..type(gd))assert(fs(ge),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ge))assert(fr(gf),'Argument 6 (altitude) must be in meters:'..type(gf))assert(fr(gg),'Argument 7 (gravityAtPosition) must be number:'..type(gg))local fR=math.sqrt(gc/4/math.pi)local a3=fR+gf;local gh=vec3(gd)+a3*vec3(ge)local fT=gg*a3*a3;return fQ(gb,bN,fR,gh,fT)end;aX.isMapPosition=fx;function aX:getPlanetarySystem(fX)if i==nil then i=0 end;if nv==nil then nv=0 end;local gb=fX;if fx(fX)then gb=fX.systemId end;if type(gb)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fY then system=g2(system)end;return system end end end;function fY:castIntersections(gi,eQ,gj,gk)local gj=gj or function(gl)return 1.05*gl.radius end;local gm={}if gk then for _,i in ipairs(gk)do gm[i]=self[i]end else gk={}for bg,gl in pairs(self)do table.insert(gk,bg)gm[bg]=gl end end;local function gn(go,gp)local gq=gm[go].center-gi;local gr=gm[gp].center-gi;return gq:len()<gr:len()end;table.sort(gk,gn)local gs=eQ:normalize()for i,bX in ipairs(gk)do local gl=gm[bX]local gt=gl.center-gi;local fR=gj(gl)local gu=gt:dot(gs)local gv=gu^2-(gt:len2()-fR^2)if gv>=0 then local gw=math.sqrt(gv)local gx=gu+gw;local gy=gu-gw;if gy>0 then return gl,gx,gy elseif gx>0 then return gl,gx,nil end end end;return nil,nil,nil end;function fY:closestBody(gz)assert(type(gz)=='table','Invalid coordinates.')local gA,gl;local gB=vec3(gz)for _,gC in pairs(self)do local gD=(gC.center-gB):len2()if(not gl or gD<gA)and gC.name~="Space"then gl=gC;gA=gD end end;return gl end;function fY:convertToBodyIdAndWorldCoordinates(fX)local gE=fX;if fu(fX)then gE=fW(fX)end;if gE.bodyId==0 then return 0,vec3(gE.latitude,gE.longitude,gE.altitude)end;local gC=self:getBodyParameters(gE)if gC then return gE.bodyId,gC:convertToWorldCoordinates(gE)end end;function fY:getBodyParameters(fX)local bN=fX;if fx(fX)then bN=fX.bodyId end;assert(fr(bN),'Argument 1 (bodyId) must be a number:'..type(bN))return self[bN]end;function fY:getPlanetarySystemId()local _,bh=next(self)return bh and bh.planetarySystemId end;function fL:convertToMapPosition(fS)assert(fs(fS),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fS))local gF=vec3(fS)if self.bodyId==0 then return setmetatable({latitude=gF.x,longitude=gF.y,altitude=gF.z,bodyId=0,systemId=self.planetarySystemId},fU)end;local gG=gF-self.center;local a3=gG:len()local bQ=a3-self.radius;local bO=0;local bP=0;if not fD(a3,0)then local gH=math.atan(gG.y,gG.x)bP=gH>=0 and gH or 2*math.pi+gH;bO=math.pi/2-math.acos(gG.z/a3)end;return setmetatable({latitude=bO,longitude=bP,altitude=bQ,bodyId=self.bodyId,systemId=self.planetarySystemId},fU)end;function fL:convertToWorldCoordinates(fX)local gE=fu(fX)and fW(fX)or fX;if gE.bodyId==0 then return vec3(gE.latitude,gE.longitude,gE.altitude)end;assert(fx(gE),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gE.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gE.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bR=math.cos(gE.latitude)return self.center+(self.radius+gE.altitude)*vec3(bR*math.cos(gE.longitude),bR*math.sin(gE.longitude),math.sin(gE.latitude))end;function fL:getAltitude(fS)return(vec3(fS)-self.center):len()-self.radius end;function fL:getDistance(fS)return(vec3(fS)-self.center):len()end;function fL:getGravity(fS)local gI=self.center-vec3(fS)local gJ=gI:len2()return self.GM/gJ*gI/math.sqrt(gJ)end;return setmetatable(aX,{__call=function(_,...)return g5(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fu(fv)return type(fv)=='string'end;local function fs(ft)return type(ft)=='table'end;local function fD(fE,fF)if fE==0 then return math.abs(fF)<1e-09 end;if fF==0 then return math.abs(fE)<1e-09 end;return math.abs(fE-fF)<math.max(math.abs(fE),math.abs(fF))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bQ)assert(self.body)local a3=bQ+self.body.radius;if not fD(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fX,b5)assert(self.body)assert(fs(fX)or fu(fX))assert(fs(b5))local bK=(fu(fX)or PlanetRef.isMapPosition(fX))and self.body:convertToWorldCoordinates(fX)or vec3(fX)local bh=vec3(b5)local gK=bK-self.body.center;local gr=bh:len2()local gL=gK:len()local gM=self.body.GM;local gN=((gr-gM/gL)*gK-gK:dot(bh)*bh)/gM;local fE=gM/(2*gM/gL-gr)local gO=gN:len()local gs=gN:normalize()local gP=fE*(1-gO)local gQ=fE*(1+gO)local gR=gP*gs+self.body.center;local gS=gO<=1 and-gQ*gs+self.body.center or nil;local gT=math.sqrt(fE*gM*(1-gO*gO))local gU=gS and 2*math.pi*math.sqrt(fE^3/gM)local gV=math.acos(gN:dot(gK)/(gO*gL))if gK:dot(bh)<0 then gV=-(gV-2*math.pi)end;local gW=math.acos((math.cos(gV)+gO)/(1+gO*math.cos(gV)))local gX=gW;if gX<0 then gX=gX+2*math.pi end;local gY=gX-gO*math.sin(gX)local gZ=0;local g_=0;local h0=0;if gU~=nil then gZ=gY/(2*math.pi/gU)g_=gU-gZ;h0=g_+gU/2;if gV-math.pi>0 then g_=gZ;h0=g_+gU/2 end;if h0>gU then h0=h0-gU end end;return{periapsis={position=gR,speed=gT/gP,circularOrbitSpeed=math.sqrt(gM/gP),altitude=gP-self.body.radius},apoapsis=gS and{position=gS,speed=gT/gQ,circularOrbitSpeed=math.sqrt(gM/gQ),altitude=gQ-self.body.radius},currentVelocity=bh,currentPosition=bK,eccentricity=gO,period=gU,eccentricAnomaly=gW,meanAnomaly=gY,timeToPeriapsis=g_,timeToApoapsis=h0}end;local function h1(h2)local gC=PlanetRef.BodyParameters(h2.planetarySystemId,h2.bodyId,h2.radius,h2.center,h2.GM)return setmetatable({body=gC},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return h1(...)end})end;function Kinematics()local aZ={}local h3=30000000/3600;local h4=h3*h3;local h5=100;local function h6(bh)return 1/math.sqrt(1-bh*bh/h4)end;function aZ.computeAccelerationTime(h7,h8,h9)local ha=h3*math.asin(h7/h3)return(h3*math.asin(h9/h3)-ha)/h8 end;function aZ.computeDistanceAndTime(h7,h9,hb,hc,hd,he)hd=hd or 0;he=he or 0;local hf=h7<=h9;local hg=hc*(hf and 1 or-1)/hb;local hh=-he/hb;local hi=hg+hh;if hf and hi<=0 or not hf and hi>=0 then return-1,-1 end;local hj,hk=0,0;if hg~=0 and hd>0 then local ha=math.asin(h7/h3)local hl=math.pi*(hg/2+hh)local hm=hg*hd;local hn=h3*math.pi;local bh=function(ft)local cm=(hl*ft-hm*math.sin(math.pi*ft/2/hd)+hn*ha)/hn;local ho=math.tan(cm)return h3*ho/math.sqrt(ho*ho+1)end;local hp=hf and function(fv)return fv>=h9 end or function(fv)return fv<=h9 end;hk=2*hd;if hp(bh(hk))then local hq=0;while math.abs(hk-hq)>0.5 do local ft=(hk+hq)/2;if hp(bh(ft))then hk=ft else hq=ft end end end;local hr=h7;local hs=hk/h5;for ht=1,h5 do local bv=bh(ht*hs)hj=hj+(bv+hr)*hs/2;hr=bv end;if hk<2*hd then return hj,hk end;h7=hr end;local ha=h3*math.asin(h7/h3)local bj=(h3*math.asin(h9/h3)-ha)/hi;local hu=h4*math.cos(ha/h3)/hi;local a3=hu-h4*math.cos((hi*bj+ha)/h3)/hi;return a3+hj,bj+hk end;function aZ.computeTravelTime(h7,h8,a3)if a3==0 then return 0 end;if h8>0 then local ha=h3*math.asin(h7/h3)local hu=h4*math.cos(ha/h3)/h8;return(h3*math.acos(h8*(hu-a3)/h4)-ha)/h8 end;assert(h7>0,'Acceleration and initial speed are both zero.')return a3/h7 end;function aZ.lorentz(bh)return h6(bh)end;return aZ end;function script.onStart()VERSION_NUMBER=4.94;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})SetupChecks()LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()b0=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(hv)if dbHud_1 then if not Y then for bg,bh in pairs(b)do dbHud_1.setStringValue(bh,g(_G[bh]))if hv and dbHud_2 then dbHud_2.setStringValue(bh,g(_G[bh]))end end;for bg,bh in pairs(a)do dbHud_1.setStringValue(bh,g(_G[bh]))if hv and dbHud_2 then dbHud_2.setStringValue(bh,g(_G[bh]))end end;c("Saved Variables to Datacore")if hv and dbHud_2 then K="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bV=j()if door and(bV>0 or bV==0 and ae<10000)then for _,bh in pairs(door)do bh.toggle()end end;if switch then for _,bh in pairs(switch)do bh.toggle()end end;if forcefield and(bV>0 or bV==0 and ae<10000)then for _,bh in pairs(forcefield)do bh.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(hw)if hw=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hx=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hx then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hw=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local c0={}local d3=GetFlightStyle()DrawOdometer(c0,W,TotalDistanceTravelled,d3,X)if ShouldCheckDamage then CheckDamage(c0)end;a5=table.concat(c0,"")collectgarbage("collect")elseif hw=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bi=json.decode(dbHud_1.getStringValue("SavedLocations"))if bi~=nil then _G["SavedLocations"]=bi;local bZ=-1;local bU;for bg,bh in pairs(SavedLocations)do if bh.name and bh.name=="SatNav Location"then bZ=bg;break end end;if bZ~=-1 then bU=SavedLocations[bZ]bZ=-1;for bg,bh in pairs(aS[0])do if bh.name and bh.name=="SatNav Location"then bZ=bg;break end end;if bZ>-1 then aS[0][bZ]=bU end;UpdateAtlasLocationsList()K=bU.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hw=="msgTick"then local c0={}DisplayMessage(c0,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hw=="animateTick"then b2=true;b1=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hw=="hudTick"then local c0={}HUDPrologue(c0)if showHud then UpdateHud(c0)else DisplayOrbitScreen(c0)DrawWarnings(c0)end;HUDEpilogue(c0)c0[#c0+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(c0,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(c0)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(c0)if screen_1.getMouseState()==1 then CheckButtons()end;c0[#c0+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(c0)if not b1 and not b2 then local hy=table.concat(c0,"")c0={}c0[#c0+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)c0[#c0+1]=aT;c0[#c0+1]=hy;c0[#c0+1]="</body>"b1=true;c0[#c0+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(c0,"")system.setScreen(content)elseif b2 then local hy=table.concat(c0,"")c0={}c0[#c0+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)c0[#c0+1]=aT;c0[#c0+1]=hy;c0[#c0+1]="</body>"end;if not b1 then c0[#c0+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(c0)end else SetButtonContains()DrawButtons(c0)end;c0[#c0+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;c0[#c0+1]=[[</svg></body>]]content=table.concat(c0,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hw=="apTick"then b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;local bj=system.getTime()local hz=bj-bd;bd=bj;local hA=core.getVelocity()local hB=getRelativeYaw(hA)local hC=getRelativePitch(hA)bc=ad and hB<-StallAngle or hB>StallAngle or hC<-StallAngle or hC>StallAngle;b9=system.getMouseDeltaX()ba=system.getMouseDeltaY()if InvertMouse and not J then ba=-ba end;D=0;H=0;C=0;b5=vec3(core.getWorldVelocity())b6=vec3(b5):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b0(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b5)aa=hoverDetectGround()local c3=vec3(core.getConstructWorldOrientationForward())local c4=vec3(core.getConstructWorldOrientationRight())local c5=vec3(core.getWorldVertical())local c6=getPitch(c5,c3,c4)local bs=planet:getGravity(core.getConstructWorldPos()):len()*n()be=0;local d5=getRoll(c5,c3,c4)local d6=math.abs(d5/180*math.pi)local d7=math.cos(d6)local d8=math.sin(d6)local hD=getPitch(c5,c3,c4*d7+vec3(core.getConstructWorldOrientationUp())*d8)a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b1 then a0=a0+b9;a1=a1+ba end else a0=0;a1=0 end else a0=a0+b9;a1=a1+ba;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(ba,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b9,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hE=b6>8334;if b6>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hE then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hE and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hE;if ad and j()>0.09 then if not ai then if b6>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b6<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b6>w then local hF=AlignToWorldVector(vec3(b5),0.01)if a7 then b3=true;if b6<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b3=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b6>w then AlignToWorldVector(-vec3(b5))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b6*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)end;P=P;Q=Q;local hG=AutopilotTargetCoords;if orbit.apoapsis==nil and b6>300 and AutopilotAccelerating then local hH=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b5):normalize()local hI=getMagnitudeInDirection(hH,AutopilotShipUp)local hJ=getMagnitudeInDirection(hH,AutopilotShipRight)local hK=-hJ*AutopilotDistance*b6*TrajectoryAlignmentStrength;local hL=-hI*AutopilotDistance*b6*TrajectoryAlignmentStrength;hG=AutopilotTargetCoords+-hK*vec3(AutopilotShipRight)+-hL*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hG)-vec3(core.getConstructWorldPos())):len()local hM=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hM)..'", "unit":""}')local hN=true;local hO=(V.center-(vec3(core.getConstructWorldPos())+vec3(b5):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hO)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hN=AlignToWorldVector((hG-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hN=AlignToWorldVector(-vec3(b5):normalize())end;if AutopilotAccelerating then if not hN or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b5)<0 and b6>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hO-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b6<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hN then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hN then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b3=true;local hP=0;local bK=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hQ=bK-vec3(core.getConstructWorldPos())local hR=vec3(hQ):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hS=vec3(hQ):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hR*hR+hS*hS)AlignToWorldVector(hQ:normalize())local hT=40;local hU=a3<hT;local hV=100;local hW=utils.clamp((a3-hT)/2,10,hV)C=0;local hN=math.abs(D)<0.1;if hN and b6<hW and not hU then BrakeIsOn=false;hP=-20 else BrakeIsOn=true;hP=0 end;local hX=1.0;if math.abs(hP-c6)>hX then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hP-c6)local hY=pitchPID:get()C=hY end end;local dB=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local dg=unit.getClosestPlanetInfluence()>0;local hZ=HoldAltitude-ae;local h_=500+b6;local hP=(utils.smoothstep(hZ,-h_,h_)-0.5)*2*MaxPitch*utils.clamp(b6/100,0.1,1)if not AltitudeHold then hP=0 end;if LockPitch~=nil then if dg then hP=LockPitch else LockPitch=nil end end;b3=true;if Reentry then local i0=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=i0 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,i0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hP=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hP=0;b3=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b3=autoRollPreference end end;local i1=C;if b6>w and not a8 and not VectorToTarget and not BrakeLanding then AlignToWorldVector(vec3(b5))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 and not AutoTakeoff then local cW=CustomTarget.position-vec3(core.getConstructWorldPos())local i2=vec3(core.getConstructWorldOrientationUp())local i3=cW:project_on_plane(c5):normalize()local i4=b5:normalize():project_on_plane(c5):normalize()local i5=math.deg(math.acos(i3:dot(i4)))*-utils.sign(i3:dot(i4:perpendicular()))*2;local i6=math.rad(math.abs(d5))if b6>100 then be=utils.clamp(i5,-90,90)local i7=i5;i5=utils.clamp(hB-i5,hB-StallAngle*0.85,hB+StallAngle*0.85)*math.cos(i6)+utils.clamp(hP-hD,-StallAngle*0.85,StallAngle*0.85)*math.sin(math.rad(d5))hP=utils.clamp(hP*math.cos(i6),-StallAngle*0.85,StallAngle*0.85)+utils.clamp(math.abs(i7),-StallAngle*0.85,StallAngle*0.85)*math.sin(i6)end;local i8=i5;if not bc then if yawPID==nil then yawPID=pid.new(8*0.01,0,8*0.1)end;yawPID:inject(i8)local i9=utils.clamp(yawPID:get(),-1,1)D=D+i9 elseif aa>-1 then AlignToWorldVector(cW)else AlignToWorldVector(b5)end;local ia=planet:getAltitude(CustomTarget.position)local ib=math.sqrt(cW:len()^2-(ae-ia)^2)local ic=LastMaxBrakeInAtmo;if ic then ic=ic*utils.clamp(b6/100,0.1,1)*j()else ic=LastMaxBrake end;local dz=b5.x*dB.x+b5.y*dB.y+b5.z*dB.z;local id=b5:len()-math.abs(dz)local ie=vec3(core.getWorldAirFrictionAcceleration())local ig=math.sqrt(ie:len()-ie:project_on(dB):len())*n()if b6>100 then P,Q=aZ.computeDistanceAndTime(b6,100,n(),0,0,ic+ig)local ih,ii=aZ.computeDistanceAndTime(100,0,n(),0,0,ic/2)P=P+ih else P,Q=aZ.computeDistanceAndTime(b6,0,n(),0,0,ic/2)end;StrongBrakes=true;if ib<=P+b6*hz/2 then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if AltitudeHold then ToggleAltitudeHold()end;BrakeLanding=true;VectorToTarget=false elseif not AutoTakeoff then BrakeIsOn=false end end;C=i1;local f1=-1;local hX=0.1;if BrakeLanding then hP=0;local dz=b5.x*dB.x+b5.y*dB.y+b5.z*dB.z;local ij=false;local ik=30;if a_~=nil and a_>0 then local ig=0;local db=utils.clamp(j(),0.4,2)local ic=LastMaxBrakeInAtmo*utils.clamp(b6/100,0.1,1)*db;local il=a_*db+ic+ig-bs;local im=ic+ig-bs;local io=ic/2+ig-bs;local ip=b6-math.sqrt(math.abs(io/2)*20/(0.5*n()))*utils.sign(io)if ip<0 then ip=0 end;local iq;if b6>100 then local ir,_=aZ.computeDistanceAndTime(b6,100,n(),0,0,ic)local is,_=aZ.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(ic))iq=ir+is else iq=aZ.computeDistanceAndTime(b6,0,n(),0,0,math.sqrt(ic))end;if iq<20 then BrakeIsOn=false else local it=0;if ip>100 then local iu,_=aZ.computeDistanceAndTime(ip,100,n(),0,0,il)local iv,_=aZ.computeDistanceAndTime(100,0,n(),0,0,a_*db+math.sqrt(ic)+ig-bs)it=iu+iv else it,_=aZ.computeDistanceAndTime(ip,0,n(),0,0,a_*db+math.sqrt(ic)+ig-bs)end;it=(it+15+b6*hz)*1.1;local iw=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0;if iw then local ia=planet:getAltitude(CustomTarget.position)local ix=ae-ia-100;local cW=CustomTarget.position-vec3(core.getConstructWorldPos())local iy=math.sqrt(cW:len()^2-(ae-ia)^2)if iy>100 then iw=false elseif ix<=it or it==-1 then BrakeIsOn=true else BrakeIsOn=false end;ij=true end;if not iw then if it>=ik then BrakeIsOn=true else BrakeIsOn=false end;ij=true end end;if bb then ij=false end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)f1=aa;if f1>-1 then b3=autoRollPreference;if b6<1 or b5:normalize():dot(c5)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;bb=false;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and b5:normalize():dot(-dB)<0.999 then BrakeIsOn=true elseif dz<-brakeLandingRate and not ij then BrakeIsOn=true elseif not ij then BrakeIsOn=false end end;if AutoTakeoff or a8 then if hP<15 and ae/HoldAltitude>0.75 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b6<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;local iz=hoverDetectGround()>-1;local iA=c6;if VectorToTarget and not iz and b6>100 then local i6=math.rad(math.abs(d5))iA=c6*math.cos(i6)+hC*math.sin(i6)end;local iB=utils.clamp(hP-iA,-StallAngle*0.85,StallAngle*0.85)if math.abs(iB)>hX and(not bc and(math.abs(d5)<5 or VectorToTarget)or BrakeLanding or iz)then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(iB)local hY=pitchPID:get()C=C+hY end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local iC=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local iD=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local iE=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local iF=G;local iG=vec3(core.getWorldVertical())local iH=vec3(core.getConstructWorldOrientationUp())local iI=vec3(core.getConstructWorldOrientationForward())local iJ=vec3(core.getConstructWorldOrientationRight())local iK=vec3(core.getWorldVelocity())local iL=vec3(core.getWorldVelocity()):normalize()local iM=getRoll(iG,iI,iJ)local iN=math.abs(iM)local iO=utils.sign(iM)local j=j()local iP=vec3(core.getWorldAngularVelocity())local iQ=iC*pitchSpeedFactor*iJ+iD*rollSpeedFactor*iI+iE*yawSpeedFactor*iH;if iG:len()>0.01 and j>0.0 or ProgradeIsOn then local iR=1.0;if b3==true and math.abs(be-iM)>iR and iD==0 then local iS=be;local iT=autoRollFactor;if rollPID==nil then rollPID=pid.new(iT*0.01,0,iT*0.1)end;rollPID:inject(iS-iM)local iU=rollPID:get()iQ=iQ+iU*iI end end;if iG:len()>0.01 and j>0.0 then local iV=20.0;if turnAssist==true and iN>iV and iC==0 and iE==0 then local iW=turnAssistFactor*0.1;local iX=turnAssistFactor*0.025;local iY=(iN-iV)/(180-iV)*180;local iZ=0;if iY<90 then iZ=iY/90 elseif iY<180 then iZ=(180-iY)/90 end;iZ=iZ*iZ;local i_=-iO*iX*(1.0-iZ)local j0=iW*iZ;iQ=iQ+j0*iJ+i_*iH end end;local j1=1;local j2=0;local j3=1;local j4=torqueFactor*(iQ-iP)local j5=vec3(core.getWorldAirFrictionAngularAcceleration())j4=j4-j5;Nav:setEngineTorqueCommand('torque',j4,j1,'airfoil','','',j3)local j6=-iF*(brakeSpeedFactor*iK+brakeFlatFactor*iL)Nav:setEngineForceCommand('brake',j6)local j7=''local j8=vec3()local j9=false;local ja='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then ja=ja..ExtraLongitudeTags end;local jb=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if jb==axisCommandType.byThrottle then local jc=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ja,axisCommandId.longitudinal)Nav:setEngineForceCommand(ja,jc,j1)elseif jb==axisCommandType.byTargetSpeed then local jc=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)j7=j7 ..' , '..ja;j8=j8+jc;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then j9=true end end;local jd='thrust analog lateral 'if ExtraLateralTags~="none"then jd=jd..ExtraLateralTags end;local je=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if je==axisCommandType.byThrottle then local jf=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jd,axisCommandId.lateral)Nav:setEngineForceCommand(jd,jf,j1)elseif je==axisCommandType.byTargetSpeed then local jg=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)j7=j7 ..' , '..jd;j8=j8+jg end;local jh='thrust analog vertical 'if ExtraVerticalTags~="none"then jh=jh..ExtraVerticalTags end;local ji=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ji==axisCommandType.byThrottle then local jj=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jh,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jh,jj,j1,'airfoil','ground','',j3)else Nav:setEngineForceCommand(jh,vec3(),j1)Nav:setEngineForceCommand('airfoil vertical',jj,j1,'airfoil','','',j3)Nav:setEngineForceCommand('ground vertical',jj,j1,'ground','','',j3)end elseif ji==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),j1)end;local jk=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)j7=j7 ..' , '..jh;j8=j8+jk end;if j8:len()>constants.epsilon then if G~=0 or j9 or math.abs(iL:dot(iI))<0.95 then j7=j7 ..', brake'end;Nav:setEngineForceCommand(j7,j8,j2,'','','',j3)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bv=vec3(core.getVelocity()):len()local jl=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jm=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bv*3.6>jm*(1-jl)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bv*3.6<jm*(1-jl)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jn=unit.getThrottle()local hW=jn/100;if j==0 then hW=hW*MaxGameVelocity;if bv>=hW*(1-jl)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bv<hW*(1-jl)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hW=hW*ReentrySpeed/3.6;if bv>=hW*(1-jl)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bv<hW*(1-jl)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bi=coroutine.resume(beginSetup)if bi then SetupComplete=true end else Nav:update()if not b1 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jo)if jo=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;bb=true;b3=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if A and not BrakeLanding then Nav.control.extendLandingGears()end else if A then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jo=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif jo=="forward"then B=B-1 elseif jo=="backward"then B=B+1 elseif jo=="left"then E=E-1 elseif jo=="right"then E=E+1 elseif jo=="yawright"then F=F-1 elseif jo=="yawleft"then F=F+1 elseif jo=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif jo=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif jo=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jo=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jo=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jo=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jo=="option1"then IncrementAutopilotTargetIndex()v=false elseif jo=="option2"then DecrementAutopilotTargetIndex()v=false elseif jo=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif jo=="option4"then ToggleAutopilot()v=false elseif jo=="option5"then ToggleLockPitch()v=false elseif jo=="option6"then ToggleAltitudeHold()v=false elseif jo=="option7"then wipeSaveVariables()v=false elseif jo=="option8"then ToggleFollowMode()v=false elseif jo=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif jo=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b2=false;b1=false end elseif jo=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jo=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jo=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif jo=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif jo=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif jo=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif jo=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jo)if jo=="forward"then B=0 elseif jo=="backward"then B=0 elseif jo=="left"then E=0 elseif jo=="right"then E=0 elseif jo=="yawright"then F=0 elseif jo=="yawleft"then F=0 elseif jo=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif jo=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif jo=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jo=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jo=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jo=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jo=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b2=false;b1=false end elseif jo=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jo=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(jo)if jo=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jo=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jo=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif jo=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(jp)local i;local jq="/commands /setname /G /agg /addlocation /copydatabank"local jr,js=nil,nil;local jt="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(jp," ")jr=jp;if i~=nil then jr=string.sub(jp,0,i-1)js=string.sub(jp,i+1)elseif not string.find(jq,jr)then for fk in string.gmatch(jt,"([^\n]+)")do c(fk)end;return end;if jr=="/setname"then if js==nil or js==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(js)else K="Select a saved target to rename first"end elseif jr=="/addlocation"then if js==nil or js==""or string.find(js,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(js,"::")local bT=string.sub(js,1,i-2)local bK=string.sub(js,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bL='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bM,bN,bO,bP,bQ=string.match(bK,bL)local planet=aS[tonumber(bM)][tonumber(bN)]AddNewLocationByWaypoint(bT,planet,bK)K="Added "..bT.." to saved locations,\nplanet "..planet.name.." at "..bK;a2=5 elseif jr=="/agg"then if js==nil or js==""then K="Usage: /agg targetheight"return end;js=tonumber(js)if js<1000 then js=1000 end;AntigravTargetAltitude=js;K="AGG Target Height set to "..js elseif jr=="/G"then if js==nil or js==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if js=="dump"then for bg,bh in pairs(a)do if type(_G[bh])=="boolean"then if _G[bh]==true then c(bh.." true")else c(bh.." false")end elseif _G[bh]==nil then c(bh.." nil")else c(bh.." ".._G[bh])end end;return end;i=string.find(js," ")local ju=string.sub(js,0,i-1)local jv=string.sub(js,i+1)for bg,bh in pairs(a)do if bh==ju then K="Variable "..ju.." changed to "..jv;local jw=type(_G[bh])if jw=="number"then jv=tonumber(jv)elseif jw=="boolean"then if string.lower(jv)=="true"then jv=true else jv=false end end;_G[bh]=jv;return end end;K="No such global variable: "..ju elseif jr=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else K="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
