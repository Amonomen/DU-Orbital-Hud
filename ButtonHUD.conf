name: ButtonsHud - Dimencia and Archaegeo v4.80 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=980 for lower left placement. 
        throtPosX = 1110 --export: X position of Throttle Indicator, default 1110 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        opacityTop = 0.1 --export: 0 to 1 for opacity of AH top half, default 0.1
        opacityBottom = 0.3 --export: 0 to 1 for opacity of AH bottom, default 0.3
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.80;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=0;local S=k()local T=16;local U=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","opacityBottom","opacityTop","RemoteHud"}AutoVariables={"EmergencyWarp","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo","AntigravTargetAltitude"}if dbHud then local V=dbHud.hasKey;if not useTheseSettings then for W,X in pairs(SaveableVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end end;for W,X in pairs(AutoVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end;if useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;R=S-updateMass()if antigrav then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for W in pairs(ElementsID)do local a0=h(ElementsID[W])if a0=="landing gear"then HasGear=true end;if a0=="dynamic core"then local a1=e(ElementsID[W])if a1>10000 then T=128 elseif a1>1000 then T=64 elseif a1>150 then T=32 end end;H=H+e(ElementsID[W])if fuelX~=0 and fuelY~=0 then if a0=="atmospheric fuel-tank"or a0=="space fuel-tank"or a0=="rocket fuel-tank"then local a1=e(ElementsID[W])local a2=j(ElementsID[W])local a3=0;local a4=system.getTime()if a0=="atmospheric fuel-tank"then local a5=400;local a6=35.03;if a1>10000 then a5=51200;a6=5480 elseif a1>1300 then a5=6400;a6=988.67 elseif a1>150 then a5=1600;a6=182.67 end;a3=a2-a6;if fuelTankHandlingAtmo>0 then a5=a5+a5*fuelTankHandlingAtmo*0.2 end;if a3>a5 then a5=a3 end;E[#E+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="rocket fuel-tank"then local a5=320;local a6=173.42;if a1>65000 then a5=40000;a6=25740 elseif a1>6000 then a5=5120;a6=4720 elseif a1>700 then a5=640;a6=886.72 end;a3=a2-a6;if fuelTankHandlingRocket>0 then a5=a5+a5*fuelTankHandlingRocket*0.2 end;if a3>a5 then a5=a3 end;G[#G+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="space fuel-tank"then local a5=2400;local a6=182.67;if a1>10000 then a5=76800;a6=5480 elseif a1>1300 then a5=9600;a6=988.67 end;a3=a2-a6;if fuelTankHandlingSpace>0 then a5=a5+a5*fuelTankHandlingSpace*0.2 end;if a3>a5 then a5=a3 end;F[#F+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,X in pairs(door)do X.deactivate()end end;if forcefield then for _,X in pairs(forcefield)do X.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a7,a8)if a7==nil then a7=core.g()end;a7=round(a7,5)if a8~=nil and a8 or(D==nil or D~=a7)then local a9=c(unit.getData()).maxBrake;if a9~=nil then LastMaxBrake=a9 end;if f()>0 then LastMaxBrakeInAtmo=a9 end;D=a7 end end;function MakeButton(aa,ab,ac,ad,ae,af,ag,ah,ai)local aj={enableName=aa,disableName=ab,width=ac,height=ad,x=ae,y=af,toggleVar=ag,toggleFunction=ah,drawCondition=ai,hovered=false}table.insert(r,aj)return aj end;function UpdateAtlasLocationsList()AtlasOrdered={}for W,X in pairs(atlas[0])do table.insert(AtlasOrdered,{name=X.name,index=W})end;local function ak(al,am)return al.name<am.name end;table.sort(AtlasOrdered,ak)end;function AddLocationsToAtlas()for W,X in pairs(SavedLocations)do table.insert(atlas[0],X)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a0=planet.name..". "..#SavedLocations;if radar_1 then local an,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if an~=nil and an~=""then a0=a0 .." "..radar_1.getConstructName(an)end end;local ao={position=position,name=a0,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=ao;table.insert(atlas[0],ao)UpdateAtlasLocationsList()MsgText="Location saved as "..a0 else MsgText="Databank must be installed to save locations"end end;function UpdatePosition()local ap=-1;local ao;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then ap=W;break end end;if ap~=-1 then ao={position=vec3(core.getConstructWorldPos()),name=SavedLocations[ap].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[ap]=ao;ap=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then ap=W end end;if ap>-1 then atlas[0][ap]=ao end;UpdateAtlasLocationsList()MsgText=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local ap=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then ap=W end end;if ap>-1 then table.remove(atlas[0],ap)end;ap=-1;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then MsgText=X.name.." saved location cleared"ap=W;break end end;if ap~=-1 then table.remove(SavedLocations,ap)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(aq)aq[#aq+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ar,as,ae,af,ac,ad)if ar>ae and ar<ae+ac and as>af and as<af+ad then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not GearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=CoreAltitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;APThrottleSet=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;APThrottleSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(aq)local at=0;local au=vec3(velocity):len()p=""currentConstructMass=k()local av=H;local aw=0;local ax=100;local ay=0;local az=0;local aA=0;local aB=""for W in pairs(ElementsID)do local a1=0;local aC=0;aC=e(ElementsID[W])a1=g(ElementsID[W])aw=aw+a1;if a1<aC then if a1==0 then az=az+1 else ay=ay+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[W]))local ae=position.x-T;local af=position.y-T;local aD=position.z-T;table.insert(m,core.spawnArrowSticker(ae,af,aD+1,"down"))table.insert(m,core.spawnArrowSticker(ae,af,aD+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ae+1,af,aD,"north"))table.insert(m,core.spawnArrowSticker(ae+1,af,aD,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ae-1,af,aD,"south"))table.insert(m,core.spawnArrowSticker(ae-1,af,aD,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ae,af-1,aD,"east"))table.insert(m,core.spawnArrowSticker(ae,af-1,aD,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ae,af+1,aD,"west"))table.insert(m,core.spawnArrowSticker(ae,af+1,aD,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[W])end elseif I and#m>0 and m[11]==ElementsID[W]then for aE in pairs(m)do core.deleteSticker(m[aE])end;m={}end end;at=a(aw/av*100)if au<5 and currentConstructMass<S then ax=math.ceil((currentConstructMass-updateMass())/R*100)S=currentConstructMass end;if ax<100 or at<100 then aq[#aq+1]=[[<g class="pbright txt">]]if ax<100 then aA=a(ax*2.55)aB=b("rgb(%d,%d,%d)",255-aA,aA,0)aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],aB,ax)end;aA=a(at*2.55)aB=b("rgb(%d,%d,%d)",255-aA,aA,0)if at<100 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aB,at)if az>0 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aB,az,ay)elseif ay>0 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aB,ay)end end;aq[#aq+1]=[[<\g>]]end end;function DrawCursorLine(aq)local aF=a(utils.clamp(Distance/(u/4)*255,0,255))aq[#aq+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aF,a(PrimaryG+0.5)-aF,a(PrimaryB+0.5)-aF)end;function getPitch(aG,aH,am)local aI=aG:cross(am):normalize_inplace()local aJ=math.acos(utils.clamp(aI:dot(-aH),-1,1))*constants.rad2deg;if aI:cross(-aH):dot(am)<0 then aJ=-aJ end;return aJ end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 else if B then for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,d(nil))end;for W,X in pairs(AutoVariables)do if X~="SavedLocations"then dbHud.setStringValue(X,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe of ALL data"B=true end end end;function CheckButtons()for _,X in pairs(r)do if X.hovered then if not X.drawCondition or X.drawCondition()then X.toggleFunction()end;X.hovered=false end end end;function SetButtonContains()local ae=SimulatedX+u/2;local af=SimulatedY+v/2;for _,X in pairs(r)do X.hovered=Contains(ae,af,X.x,X.y,X.width,X.height)end end;function DrawButton(aq,aK,hover,ae,af,aL,aM,aN,aO,aP,aQ)if type(aP)=="function"then aP=aP()end;if type(aQ)=="function"then aQ=aQ()end;aq[#aq+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ae,af,aL,aM)if aK then aq[#aq+1]=b("%s'",aN)else aq[#aq+1]=aO end;if hover then aq[#aq+1]=" style='stroke:white; stroke-width:2'"else aq[#aq+1]=" style='stroke:black; stroke-width:1'"end;aq[#aq+1]="></rect>"aq[#aq+1]=b("<text x='%f' y='%f' font-size='24' fill='",ae+aL/2,af+aM/2+5)if aK then aq[#aq+1]="black"else aq[#aq+1]="white"end;aq[#aq+1]="' text-anchor='middle' font-family='Montserrat'>"if aK then aq[#aq+1]=b("%s</text>",aP)else aq[#aq+1]=b("%s</text>",aQ)end end;function DrawButtons(aq)local aR="rgb(50,50,50)'"local aS="rgb(210,200,200)"local aT=DrawButton;for _,X in pairs(r)do local ab=X.disableName;local aa=X.enableName;if type(ab)=="function"then ab=ab()end;if type(aa)=="function"then aa=aa()end;if not X.drawCondition or X.drawCondition()then aT(aq,X.toggleVar(),X.hovered,X.x,X.y,X.width,X.height,aS,aR,ab,aa)end end end;function DrawTank(aq,Q,ae,aU,aV,aW,aX,aY)local aZ=1;local a_=2;local b0=3;local b1=4;local b2=5;local b3=6;local b4=""local b5=0;local b6=fuelY;local b7=fuelY+10;if l()==1 and not RemoteHud then b6=b6-50;b7=b7-50 end;aq[#aq+1]=[[<g class="pdim txtfuel">]]if aV=="ATMO"then b4="atmofueltank"elseif aV=="SPACE"then b4="spacefueltank"else b4="rocketfueltank"end;b5=_G[b4 .."_size"]if#aW>0 then for i=1,#aW do local a0=string.sub(aW[i][a_],1,12)local b8=0;for aE=1,b5 do if aW[i][a_]==json.decode(unit[b4 .."_"..aE].getData()).name then b8=aE;break end end;if Q or aX[i]==nil or aY[i]==nil then local b9=0;local ba=0;local bb=0;local bc=0;local a4=system.getTime()if b8~=0 then aY[i]=json.decode(unit[b4 .."_"..b8].getData()).percentage;aX[i]=json.decode(unit[b4 .."_"..b8].getData()).timeLeft;if aX[i]=="n/a"then aX[i]=0 end else bb=j(aW[i][aZ])-aW[i][b1]b9=aW[i][b0]aY[i]=a(0.5+bb*100/b9)ba=aW[i][b2]bc=aW[i][b3]if ba<=bb then aX[i]=0 else aX[i]=a(0.5+bb/((ba-bb)/(a4-bc)))end;aW[i][b2]=bb;aW[i][b3]=a4 end end;if a0==aU then a0=b("%s %d",aV,i)end;if b8==0 then a0=a0 .." *"end;local bd;if aX[i]==0 then bd="n/a"else bd=FormatTimeString(aX[i])end;if aY[i]~=nil then local aA=a(aY[i]*2.55)local aB=b("rgb(%d,%d,%d)",255-aA,aA,0)local be=""if bd~="n/a"and aX[i]<120 or aY[i]<5 then if Q then be=[[class="red"]]end end;aq[#aq+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ae,b6,be,a0,ae,b7,aB,aY[i],bd)b6=b6+30;b7=b7+30 end end end;aq[#aq+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aJ=-math.deg(math.atan(velocity.y,velocity.z))+180;aJ=aJ-90;if aJ<0 then aJ=360+aJ end;if aJ>180 then aJ=-180+aJ-180 end;return-aJ end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bf=math.deg(math.atan(velocity.y,velocity.x))-90;if bf<-180 then bf=360+bf end;return bf end;function AlignToWorldVector(bg,bh)if bh==nil then bh=t end;bg=vec3(bg):normalize()local bi=vec3(core.getConstructWorldOrientationForward())-bg;local bj=-getMagnitudeInDirection(bi,core.getConstructWorldOrientationRight())*s;local bk=-getMagnitudeInDirection(bi,core.getConstructWorldOrientationUp())*s;YawInput2=YawInput2-(bj+(bj-n)*DampingMultiplier)PitchInput2=PitchInput2+bk+(bk-o)*DampingMultiplier;n=bj;o=bk;if math.abs(bj)<bh and math.abs(bk)<bh then return true end;return false end;function getAPEnableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a0==nil then a0="None"end;return"Engage Autopilot: "..a0 end;function getAPDisableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name end;if a0==nil then a0="None"end;return"Disable Autopilot: "..a0 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoroll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bl=50;local bm=260;local bn=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bm,bl,u/2-bm/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bm,bl,u/2-bm/2-50-bn.width,v/2-bl+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bm,bl,u/2-bm/2+bn.width+50,v/2-bl+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bo=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bo.height,bo.x+bo.width+30,bo.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,bo.height,bo.x+bo.width+30,bo.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,bo.height,bo.x-200-30,bo.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bl=60;bm=300;local ae=10;local af=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bm,bl,ae,af,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bm,bl,ae+bm+20,af,function()return AltitudeHold end,ToggleAltitudeHold)af=af+bl+20;MakeButton("Engage Autoland","Disable Autoland",bm,bl,ae,af,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bm,bl,ae+bm+20,af,function()return AutoTakeoff end,ToggleAutoTakeoff)af=af+bl+20;MakeButton("Show Orbit Display","Hide Orbit Display",bm,bl,ae,af,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bm,bl,ae+bm+20,af,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)af=af+bl+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bm,bl,ae,af,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bm,bl,ae+bm+20,af,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)af=af+bl+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bm,bl,ae,af,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bm,bl,ae+bm+20,af,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)af=af+bl+20;MakeButton("Enable AGG","Disable AGG",bm,bl,ae,af,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)af=af+bl+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bm*2,bl,ae,af,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(aq)local bp=CoreAltitude;local velocity=core.getVelocity()local au=vec3(velocity):len()local bq=vec3(core.getWorldVertical())local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local aJ=getPitch(bq,br,bs)local bt=getRoll(bq,br,bs)local bu=bt;local bv=aJ;local bw=f()local bx=a(unit.getThrottle())local by=au*3.6;local bz=unit.getAxisCommandValue(0)local bA=GetFlightStyle()if bw==0 then if au>5 then aJ=getRelativePitch(velocity)bt=getRelativeYaw(velocity)else aJ=0;bt=0 end;bottomText="YAW"end;aq[#aq+1]=LastOdometerOutput;aq[#aq+1]=p;aq[#aq+1]=RadarMessage;if U%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(aq,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(aq,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(aq,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;U=0 end;U=U+1;DrawVerticalSpeed(aq,bp,bw)if l()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawRollLines(aq,centerX,centerY,bu,bv)DrawArtificialHorizon(aq,bv,bu,bw,centerX,centerY,"ROLL")DrawPrograde(aq,bw,velocity,au,centerX,centerY)DrawAltitudeDisplay(aq,bp,bw)else DrawArtificialHorizon(aq,aJ,bt,bw,centerX,centerY,"YAW")DrawPrograde(aq,bw,velocity,au,centerX,centerY)end end end;DrawThrottle(aq,bA,bx,bz)DrawSpeed(aq,by)DrawWarnings(aq)DisplayOrbitScreen(aq)if screen_2 then local bB=vec3(core.getConstructWorldPos())local ae=960+bB.x/MapXRatio;local af=450+bB.y/MapYRatio;screen_2.moveContent(YouAreHere,(ae-80)/19.2,(af-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(aq)local bC=rgb;local bD=Z;local bE=rgb;local bF=Z;if IsInFreeLook()and not brightHud then bC=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bD=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;aq[#aq+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:%f;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:%f;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bC,bC,bE,bE,bD,bD,bF,bF,opacityTop,opacityBottom)end;function HUDEpilogue(aq)aq[#aq+1]="</svg>"end;function DrawSpeed(aq,by)local bG=altMeterY+40;local bH=altMeterX;aq[#aq+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bG=75 end;aq[#aq+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bH,bG,a(by))end;function DrawOdometer(aq,TotalDistanceTrip,TotalDistanceTravelled,bA,bI)local bJ=1240;local bK=55;local bL=65;local bw=f()local a7=core.g()local bM=0;local bN=0;refreshLastMaxBrake(a7)maxThrust=Nav:maxForceForward()C=k()local bO=vec3(core.getWorldAcceleration()):len()/9.80665;if a7>0.1 then bN=C*a7;bM=maxThrust/a7 end;aq[#aq+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bJ=1120;bK=55;bL=65 elseif bw>0 then aq[#aq+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bw)end;aq[#aq+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bJ,bK,bJ,bL,a7/9.80665,bJ,bK+20,bJ,bL+20,bO)aq[#aq+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 or RemoteHud then aq[#aq+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bI),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bA)if a7>0.1 then aq[#aq+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bM/1000,bN/1000)else aq[#aq+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else aq[#aq+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bA)end;aq[#aq+1]="</g>"end;function DrawThrottle(aq,bA,bx,bz)local b6=throtPosY+65;local b7=throtPosY+75;if l()==1 and not RemoteHud then b6=55;b7=65 end;local bP="CRUISE"local unit="km/h"local bQ=bz;if bA=="TRAVEL"or bA=="AUTOPILOT"then bP="THROT"unit="%"bQ=bx;local bR="dim"if bx<0 then bR="red"end;aq[#aq+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bR,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(bx),throtPosX-20,throtPosY+50,throtPosX-25,throtPosY+53,throtPosX-25,throtPosY+47)end;aq[#aq+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX,b6,bP,throtPosX,b7,bQ,unit)end;function DrawVerticalSpeed(aq,bp,bw)if bp<200000 and bw==0 or bp and bw>0 then local velocity=vec3(core.getWorldVelocity())local bS=vec3(core.getWorldVertical())*-1;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local bU=0;if math.abs(bT)>1 then bU=45*math.log(math.abs(bT),10)if bT<0 then bU=-bU end end;aq[#aq+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bT),a(bU))end end;function getHeading(aH)local bS=-vec3(core.getWorldVertical())aH=aH-aH:project_on(bS)local bV=vec3(0,0,1)bV=bV-bV:project_on(bS)local bW=bV:cross(bS)local bU=bV:angle_between(aH)*constants.rad2deg;if aH:dot(bW)<0 then bU=360-bU end;return bU end;function DrawRollLines(aq,centerX,centerY,bu,bv)local bX=a(bu)local bY=circleRad;local bZ=100;for i=-45,45,5 do local b_=i;aq[#aq+1]=b([[<g transform="rotate(%f,%d,%d)">]],b_,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;aq[#aq+1]=b([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+bY+bZ-len,centerX,centerY+bY+bZ)end;if bX>45 then bX=45 elseif bX<-45 then bX=-45 end;local bf=getHeading(vec3(core.getConstructWorldOrientationForward()))local c0=20;local c1=a(bf)local c2=0;local c3=centerY+bY+20;local c4=[[<path class="txttick line" d="]]for i=a(c1-(c0+10)-c1%5+0.5),a(c1+c0+10+c1%5+0.5),5 do local ae=centerX+-i*5+bf*5;if i%10==0 then c2=10;local c5=i;if c5==360 then c5=0 elseif c5>360 then c5=c5-360 elseif c5<0 then c5=c5+360 end;aq[#aq+1]=b([[
                                    <text x="%f" y="%f">%d</text>]],ae+5,c3-12,c5)elseif i%5==0 then c2=5 end;if c2==10 then c4=b([[%s M %f %f v %d]],c4,ae,c3-5,c2)else c4=b([[%s M %f %f v %d]],c4,ae,c3-2.5,c2)end end;aq[#aq+1]=c4 ..[["/>]]aq[#aq+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bX,centerX,centerY)aq[#aq+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+bY+bZ-20,centerX+5,centerY+bY+bZ-20,centerX,centerY+bY+bZ-15)aq[#aq+1]="</g>"end;function DrawArtificialHorizon(aq,bv,bu,bw,centerX,centerY,bottomText)local bY=circleRad;local c6=math.floor(bY*3/5)if bY>0 then local c7=a(bv)local bX=a(bu)local len=0;local c4=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bu,centerX,centerY)aq[#aq+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bY-1,centerX,centerY)aq[#aq+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(c7-30-c7%5+0.5),a(c7+30+c7%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local af=centerY+-i*5+bv*5;if len==30 then c4=b([[%s M %d %f h %d]],c4,centerX-c6-len,af,len)aq[#aq+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bu,centerX,centerY,centerX-c6+5,af,i)c4=b([[%s M %d %f h %d]],c4,centerX+c6,af,len)aq[#aq+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bu,centerX,centerY,centerX+c6-5,af,i)else c4=b([[%s M %d %f h %d]],c4,centerX-c6-len,af,len)c4=b([[%s M %d %f h %d]],c4,centerX+c6,af,len)end end;aq[#aq+1]=c4 ..[["/>]]local c8="PITCH"if bottomText=="YAW"then c8="REL PITCH"end;if bv>90 and bw==0 then bv=90-(bv-90)elseif bv<-90 and bw==0 then bv=-90-(bv+90)end;aq[#aq+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)aq[#aq+1]="</g>"aq[#aq+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-bY-20,c8,centerX,centerY-bY-10,c7)aq[#aq+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX-bY,centerY,bottomText,centerX-bY,centerY+10,bX)end end;function DrawAltitudeDisplay(aq,bp,bw)if bp<200000 and bw==0 or bp and bw>0 then local c9=altMeterX;local ca=altMeterY;local cb=78;local cc=19;table.insert(aq,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],c9-1,ca-4,cb+2,cc+6,c9+1,ca-1,cb-4,cc))local ap=0;local cd=1;local ce=0;local cf=bp<0;local cg=9;if cf then cg=0 end;local bp=math.abs(bp)while ap<6 do local ch=11;local ci=16;local cj=9;local ck=14;local be="altsm"if ap>2 then ci=ci+3;ch=ch+2;ck=ck+2;cj=cj-6;be="altbig"end;if cf then be=be.." red"end;local cl=bp/cd%10;local cm=a(cl)local cn=a((cm+1)%10)local co=ce;if ap==0 then co=cl-cm;if cf then co=1-co end end;if cf and(ap==0 or ce~=0)then local cp=cn;cn=cm;cm=cp end;local cq=ci*(co-1)local cr=cq+ci;local ae=c9+cj+(6-ap)*ch;local af=ca+ck;table.insert(aq,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],be,ae,af+cq,cn,ae,af+cr,cm))ap=ap+1;cd=cd*10;if cm==cg then ce=co else ce=0 end end;table.insert(aq,[[</g></g>]])end end;function DrawPrograde(aq,bw,velocity,au,centerX,centerY)if au>5 and bw==0 or au>MinAutopilotSpeed then local bY=circleRad;local cs=20;local ct=20;local cu=vec3(velocity)local cv=getRelativePitch(cu)local cw=getRelativeYaw(cu)local cx=-cw/ct*bY;local cy=cv/cs*bY;local ae=centerX+cx;local af=centerY+cy;local cz=math.sqrt(cx^2+cy^2)if cz<bY then aq[#aq+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ae,af)else local bU=math.atan(cy,cx)local cA=centerX+bY*math.cos(bU)local cB=centerY+bY*math.sin(bU)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cA,cB)end;cv=getRelativePitch(-cu)cw=getRelativeYaw(-cu)cx=-cw/ct*bY;cy=cv/cs*bY;ae=centerX+cx;af=centerY+cy;cz=math.sqrt(cx^2+cy^2)if bw==0 then if cz<bY then aq[#aq+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ae,af)else local bU=math.atan(cy,cx)local cA=centerX+bY*math.cos(bU)local cB=centerY+bY*math.sin(bU)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cA,cB)end end end end;function DrawWarnings(aq)aq[#aq+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)aq[#aq+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then aq[#aq+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]aq[#aq+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]aq[#aq+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cC=960;local cD=860;local cE=900;local cF=930;local cG=960;local cH=200;local cI=150;local cJ=960;if l()==1 and not RemoteHud then cD=135;cE=155;cF=175;cH=115;cI=95 end;if BrakeIsOn then aq[#aq+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cC,cD)end;if GyroIsOn then aq[#aq+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cC,cJ)end;if GearExtended then if HasGear then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cC,cE)else aq[#aq+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cC,cE)end;aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cC,cF,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cC,cG)end;if IsBoosting then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cC,cG+20)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cC,cH+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))else aq[#aq+1]=b([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cC,cH+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cC,cH,AutopilotStatus)elseif FollowMode then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cC,cH)elseif AltitudeHold then if AutoTakeoff then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cC,cH,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then aq[#aq+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cC,cH+50)end else aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cC,cH,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cC,cH)end;if BrakeLanding then if StrongBrakes then aq[#aq+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cC,cH)else aq[#aq+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cC,cH)end end;if TurnBurn then aq[#aq+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cC,cI)end;if VectorToTarget then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cC,cI,VectorStatus)end;aq[#aq+1]="</g>"end;function DisplayOrbitScreen(aq)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cK=75;local cL=0;local cM=250;local cN=4;cL=cL+cN;local cO=15;local ae=cK+cM+cK/2+cN;local af=cL+cM/2+5+cN;local cP,cQ,cR,cS;cP=cM/4;cS=0;aq[#aq+1]=[[<g class="pbright txtorb txtmid">]]aq[#aq+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cM+cK*2,cM+cL,cN,cN)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cR=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cP*2)cQ=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cR*(1-orbit.eccentricity)cS=cP-orbit.periapsis.altitude/cR-planet.radius/cR;local cT=""if orbit.periapsis.altitude<=0 then cT='redout'end;aq[#aq+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cT,cK+cM/2+cS+cN,cL+cM/2+cN,cP,cQ)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cK+cM/2+cN,cL+cM/2+cN,planet.radius/cR)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then aq[#aq+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae-35,af-5,cK+cM/2+cP+cS,af-5)aq[#aq+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ae,af)af=af+cO;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.apoapsis.altitude))af=af+cO;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToApoapsis))af=af+cO;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.apoapsis.speed))end;af=cL+cM/2+5+cN;ae=cK-cK/2+10+cN;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then aq[#aq+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae+35,af-5,cK+cM/2-cP+cS,af-5)aq[#aq+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ae,af)af=af+cO;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.periapsis.altitude))af=af+cO;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToPeriapsis))af=af+cO;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.periapsis.speed))end;aq[#aq+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cK+cM/2+cN,20+cN,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cU=orbit.timeToApoapsis/orbit.period*2*math.pi;local cV=cP*math.cos(cU)local cW=cQ*math.sin(cU)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cK+cM/2+cV+cS+cN,cL+cM/2+cW+cN)end;aq[#aq+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for W,X in pairs(atlas[0])do if w==nil or X.center.x<w then w=X.center.x end;if x==nil or X.center.x>x then x=X.center.x end;if y==nil or X.center.y<y then y=X.center.y end;if z==nil or X.center.y>z then z=X.center.y end end;GalaxyMapHTML=""local cX=1.1*(x-w)/1920;local cY=1.4*(z-y)/1080;for W,X in pairs(atlas[0])do local ae=960+X.center.x/cX;local af=540+X.center.y/cY;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="'..X.radius/cX*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(X.name,"Moon")and not string.match(X.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af+X.radius/cX*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..X.name.."</text>"end end;local bB=vec3(core.getConstructWorldPos())local ae=960+bB.x/cX;local af=540+bB.y/cY;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cX;MapYRatio=cY;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bB=vec3(core.getConstructWorldPos())local ae=960+bB.x/cX;local af=540+bB.y/cY;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ae-80)/19.20,(af-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cZ(c_)return type(c_)=='number'end;local function d0(c_)return type(tonumber(c_))=='number'end;local function d1(d2)return type(d2)=='table'end;local function d3(d4)return type(d4)=='string'end;local function d5(X)return d1(X)and cZ(X.x and X.y and X.z)end;local function d6(d7)return d1(d7)and cZ(d7.latitude and d7.longitude and d7.altitude and d7.bodyId and d7.systemId)end;local d8=math.pi/180;local d9=180/math.pi;local da=1e-10;local c5=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local db='::pos{'..c5 ..','..c5 ..','..c5 ..','..c5 ..','..c5 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dc=utils.clamp;local function dd(de,df)if de==0 then return math.abs(df)<1e-09 end;if df==0 then return math.abs(de)<1e-09 end;return math.abs(de-df)<math.max(math.abs(de),math.abs(df))*da end;local function dg(c_)local Y=string.gsub(string.reverse(b('%.4f',c_)),'^0*%.?','')return Y==''and'0'or string.reverse(Y)end;local function dh(di)if d5(di)then return b('{x=%.3f,y=%.3f,z=%.3f}',di.x,di.y,di.z)end;if d1(di)and not getmetatable(di)then local dj={}local dk=next(di)if type(dk)=='nil'or dk==1 then dj=di else for W,X in pairs(di)do local bQ=dh(X)if type(W)=='number'then table.insert(dj,b('[%s]=%s',W,bQ))else table.insert(dj,b('%s=%s',W,bQ))end end end;return b('{%s}',table.concat(dj,','))end;if d3(di)then return b("'%s'",di:gsub("'",[[\']]))end;return tostring(di)end;local dl={}dl.__index=dl;dl.__tostring=function(di,dm)local dn={}for W in pairs(di)do table.insert(dn,W)end;table.sort(dn)local dj={}for _,W in ipairs(dn)do local bQ=dh(di[W])if type(W)=='number'then table.insert(dj,b('[%s]=%s',W,bQ))else table.insert(dj,b('%s=%s',W,bQ))end end;if dm then return b('%s%s',dm,table.concat(dj,',\n'..dm))end;return b('{%s}',table.concat(dj,','))end;dl.__eq=function(dp,dq)return dp.planetarySystemId==dq.planetarySystemId and dp.bodyId==dq.bodyId and dd(dp.radius,dq.radius)and dd(dp.center.x,dq.center.x)and dd(dp.center.y,dq.center.y)and dd(dp.center.z,dq.center.z)and dd(dp.GM,dq.GM)end;local function dr(ds,dt,du,dv,dw)assert(d0(ds),'Argument 1 (planetarySystemId) must be a number:'..type(ds))assert(d0(dt),'Argument 2 (bodyId) must be a number:'..type(dt))assert(d0(du),'Argument 3 (radius) must be a number:'..type(du))assert(d1(dv),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dv))assert(d0(dw),'Argument 5 (GM) must be a number:'..type(dw))return setmetatable({planetarySystemId=tonumber(ds),bodyId=tonumber(dt),radius=tonumber(du),center=vec3(dv),GM=tonumber(dw)},dl)end;local dx={}dx.__index=dx;dx.__tostring=function(dy)return b('::pos{%d,%d,%s,%s,%s}',dy.systemId,dy.bodyId,dg(dy.latitude*d9),dg(dy.longitude*d9),dg(dy.altitude))end;dx.__eq=function(dp,dq)return dp.bodyId==dq.bodyId and dp.systemId==dq.systemId and dd(dp.latitude,dq.latitude)and dd(dp.altitude,dq.altitude)and(dd(dp.longitude,dq.longitude)or dd(dp.latitude,math.pi/2)or dd(dp.latitude,-math.pi/2))end;local function dz(dA,dt,dB,dC,bp)local ds=dA;if d3(dA)and not dC and not bp and not dt and not dB then ds,dt,dB,dC,bp=string.match(dA,db)assert(ds,'Argument 1 (position string) is malformed.')else assert(d0(ds),'Argument 1 (systemId) must be a number:'..type(ds))assert(d0(dt),'Argument 2 (bodyId) must be a number:'..type(dt))assert(d0(dB),'Argument 3 (latitude) must be in degrees:'..type(dB))assert(d0(dC),'Argument 4 (longitude) must be in degrees:'..type(dC))assert(d0(bp),'Argument 5 (altitude) must be in meters:'..type(bp))end;ds=tonumber(ds)dt=tonumber(dt)dB=tonumber(dB)dC=tonumber(dC)bp=tonumber(bp)if dt==0 then return setmetatable({latitude=dB,longitude=dC,altitude=bp,bodyId=dt,systemId=ds},dx)end;return setmetatable({latitude=d8*dc(dB,-90,90),longitude=d8*(dC%360),altitude=bp,bodyId=dt,systemId=ds},dx)end;local dD={}dD.__index=dD;dD.__tostring=function(di,dm)local dE=dm and dm..'  'local dF={}local dn={}for W in pairs(di)do table.insert(dn,W)end;table.sort(dn)for _,dG in ipairs(dn)do bdy=di[dG]local dH=dl.__tostring(bdy,dE)if dm then table.insert(dF,b('[%s]={\n%s\n%s}',dG,dH,dm))else table.insert(dF,b('  [%s]=%s',dG,dH))end end;if dm then return b('\n%s%s%s',dm,table.concat(dF,',\n'..dm),dm)end;return b('{\n%s\n}',table.concat(dF,',\n'))end;local function dI(dJ)local atlas={}local pid;for _,X in pairs(dJ)do local an=X.planetarySystemId;if type(an)~='number'then error('Invalid planetary system ID: '..tostring(an))elseif pid and an~=pid then error('Mismatch planetary system IDs: '..an..' and '..pid)end;local dK=X.bodyId;if type(dK)~='number'then error('Invalid body ID: '..tostring(dK))elseif atlas[dK]then error('Duplicate body ID: '..tostring(dK))end;setmetatable(X.center,getmetatable(vec3.unit_x))atlas[dK]=setmetatable(X,dl)pid=an end;return setmetatable(atlas,dD)end;PlanetaryReference={}local function dL(dJ)return setmetatable({galaxyAtlas=dJ or{}},PlanetaryReference)end;PlanetaryReference.__index=function(d2,i)if type(i)=='number'then local system=d2.galaxyAtlas[i]return dI(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(di)return function(d2,W)local dM,nv=next(d2,W)return dM,nv and dI(nv)end,di.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(di)local dN={}for _,dO in pairs(di or{})do local dP=dO:getPlanetarySystemId()local dQ=dD.__tostring(dO,'    ')table.insert(dN,b('  [%s]={%s\n  }',dP,dQ))end;return b('{\n%s\n}\n',table.concat(dN,',\n'))end;PlanetaryReference.BodyParameters=dr;PlanetaryReference.MapPosition=dz;PlanetaryReference.PlanetarySystem=dI;function PlanetaryReference.createBodyParameters(dR,dt,dS,dT,dU,dV,dW)assert(d0(dR),'Argument 1 (planetarySystemId) must be a number:'..type(dR))assert(d0(dt),'Argument 2 (bodyId) must be a number:'..type(dt))assert(d0(dS),'Argument 3 (surfaceArea) must be a number:'..type(dS))assert(d1(dT),'Argument 4 (aPosition) must be an array or vec3:'..type(dT))assert(d1(dU),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dU))assert(d0(dV),'Argument 6 (altitude) must be in meters:'..type(dV))assert(d0(dW),'Argument 7 (gravityAtPosition) must be number:'..type(dW))local du=math.sqrt(dS/4/math.pi)local cz=du+dV;local dX=vec3(dT)+cz*vec3(dU)local dw=dW*cz*cz;return dr(dR,dt,du,dX,dw)end;PlanetaryReference.isMapPosition=d6;function PlanetaryReference:getPlanetarySystem(dA)if i==nil then i=0 end;if nv==nil then nv=0 end;local dR=dA;if d6(dA)then dR=dA.systemId end;if type(dR)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dD then system=dI(system)end;return system end end end;function dD:castIntersections(dY,dZ,d_,e0)local d_=d_ or function(e1)return 1.05*e1.radius end;local e2={}if e0 then for _,i in ipairs(e0)do e2[i]=self[i]end else e0={}for W,e1 in pairs(self)do table.insert(e0,W)e2[W]=e1 end end;local function e3(e4,e5)local e6=e2[e4].center-dY;local e7=e2[e5].center-dY;return e6:len()<e7:len()end;table.sort(e0,e3)local e8=dZ:normalize()for i,an in ipairs(e0)do local e1=e2[an]local e9=e1.center-dY;local du=d_(e1)local ea=e9:dot(e8)local eb=ea^2-(e9:len2()-du^2)if eb>=0 then local ec=math.sqrt(eb)local ed=ea+ec;local ee=ea-ec;if ee>0 then return e1,ed,ee elseif ed>0 then return e1,ed,nil end end end;return nil,nil,nil end;function dD:closestBody(ef)assert(type(ef)=='table','Invalid coordinates.')local eg,e1;local eh=vec3(ef)for _,ei in pairs(self)do local ej=(ei.center-eh):len2()if not e1 or ej<eg then e1=ei;eg=ej end end;return e1 end;function dD:convertToBodyIdAndWorldCoordinates(dA)local ek=dA;if d3(dA)then ek=dz(dA)end;if ek.bodyId==0 then return 0,vec3(ek.latitude,ek.longitude,ek.altitude)end;local ei=self:getBodyParameters(ek)if ei then return ek.bodyId,ei:convertToWorldCoordinates(ek)end end;function dD:getBodyParameters(dA)local dt=dA;if d6(dA)then dt=dA.bodyId end;assert(d0(dt),'Argument 1 (bodyId) must be a number:'..type(dt))return self[dt]end;function dD:getPlanetarySystemId()local _,X=next(self)return X and X.planetarySystemId end;function dl:convertToMapPosition(dv)assert(d1(dv),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dv))local el=vec3(dv)if self.bodyId==0 then return setmetatable({latitude=el.x,longitude=el.y,altitude=el.z,bodyId=0,systemId=self.planetarySystemId},dx)end;local em=el-self.center;local cz=em:len()local bp=cz-self.radius;local dB=0;local dC=0;if not dd(cz,0)then local en=math.atan(em.y,em.x)dC=en>=0 and en or 2*math.pi+en;dB=math.pi/2-math.acos(em.z/cz)end;return setmetatable({latitude=dB,longitude=dC,altitude=bp,bodyId=self.bodyId,systemId=self.planetarySystemId},dx)end;function dl:convertToWorldCoordinates(dA)local ek=d3(dA)and dz(dA)or dA;if ek.bodyId==0 then return vec3(ek.latitude,ek.longitude,ek.altitude)end;assert(d6(ek),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ek.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ek.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local eo=math.cos(ek.latitude)return self.center+(self.radius+ek.altitude)*vec3(eo*math.cos(ek.longitude),eo*math.sin(ek.longitude),math.sin(ek.latitude))end;function dl:getAltitude(dv)return(vec3(dv)-self.center):len()-self.radius end;function dl:getDistance(dv)return(vec3(dv)-self.center):len()end;function dl:getGravity(dv)local ep=self.center-vec3(dv)local eq=ep:len2()return self.GM/eq*ep/math.sqrt(eq)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dL(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function d3(d4)return type(d4)=='string'end;local function d1(d2)return type(d2)=='table'end;local function dd(de,df)if de==0 then return math.abs(df)<1e-09 end;if df==0 then return math.abs(de)<1e-09 end;return math.abs(de-df)<math.max(math.abs(de),math.abs(df))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bp)assert(self.body)local cz=bp+self.body.radius;if not dd(cz,0)then local orbit=math.sqrt(self.body.GM/cz)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dA,velocity)assert(self.body)assert(d1(dA)or d3(dA))assert(d1(velocity))local bB=(d3(dA)or PlanetRef.isMapPosition(dA))and self.body:convertToWorldCoordinates(dA)or vec3(dA)local X=vec3(velocity)local er=bB-self.body.center;local e7=X:len2()local es=er:len()local et=self.body.GM;local eu=((e7-et/es)*er-er:dot(X)*X)/et;local de=et/(2*et/es-e7)local ev=eu:len()local e8=eu:normalize()local ew=de*(1-ev)local ex=de*(1+ev)local ey=ew*e8+self.body.center;local ez=ev<=1 and-ex*e8+self.body.center or nil;local eA=math.sqrt(de*et*(1-ev*ev))local eB=ez and 2*math.pi*math.sqrt(de^3/et)local eC=math.acos(eu:dot(er)/(ev*es))if er:dot(X)<0 then eC=-(eC-2*math.pi)end;local eD=math.acos((math.cos(eC)+ev)/(1+ev*math.cos(eC)))local eE=eD;if eE<0 then eE=eE+2*math.pi end;local eF=eE-ev*math.sin(eE)local eG=0;local eH=0;local eI=0;if eB~=nil then eG=eF/(2*math.pi/eB)eH=eB-eG;eI=eH+eB/2;if eC-math.pi>0 then eH=eG;eI=eH+eB/2 end;if eI>eB then eI=eI-eB end end;return{periapsis={position=ey,speed=eA/ew,circularOrbitSpeed=math.sqrt(et/ew),altitude=ew-self.body.radius},apoapsis=ez and{position=ez,speed=eA/ex,circularOrbitSpeed=math.sqrt(et/ex),altitude=ex-self.body.radius},currentVelocity=X,currentPosition=bB,eccentricity=ev,period=eB,eccentricAnomaly=eD,meanAnomaly=eF,timeToPeriapsis=eH,timeToApoapsis=eI}end;local function eJ(eK)local ei=PlanetRef.BodyParameters(eK.planetarySystemId,eK.bodyId,eK.radius,eK.center,eK.GM)return setmetatable({body=ei},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eJ(...)end})end;function Kinematics()local Kinematic={}local eL=30000000/3600;local eM=eL*eL;local eN=100;local function eO(X)return 1/math.sqrt(1-X*X/eM)end;function Kinematic.computeAccelerationTime(eP,eQ,eR)local eS=eL*math.asin(eP/eL)return(eL*math.asin(eR/eL)-eS)/eQ end;function Kinematic.computeDistanceAndTime(eP,eR,eT,eU,eV,eW)eV=eV or 0;eW=eW or 0;local eX=eP<=eR;local eY=eU*(eX and 1 or-1)/eT;local eZ=-eW/eT;local e_=eY+eZ;if eX and e_<=0 or not eX and e_>=0 then return-1,-1 end;local f0,f1=0,0;if eY~=0 and eV>0 then local eS=math.asin(eP/eL)local f2=math.pi*(eY/2+eZ)local f3=eY*eV;local f4=eL*math.pi;local X=function(d2)local aL=(f2*d2-f3*math.sin(math.pi*d2/2/eV)+f4*eS)/f4;local f5=math.tan(aL)return eL*f5/math.sqrt(f5*f5+1)end;local f6=eX and function(d4)return d4>=eR end or function(d4)return d4<=eR end;f1=2*eV;if f6(X(f1))then local f7=0;while math.abs(f1-f7)>0.5 do local d2=(f1+f7)/2;if f6(X(d2))then f1=d2 else f7=d2 end end end;local f8=eP;local f9=f1/eN;for fa=1,eN do local au=X(fa*f9)f0=f0+(au+f8)*f9/2;f8=au end;if f1<2*eV then return f0,f1 end;eP=f8 end;local eS=eL*math.asin(eP/eL)local fb=(eL*math.asin(eR/eL)-eS)/e_;local fc=eM*math.cos(eS/eL)/e_;local cz=fc-eM*math.cos((e_*fb+eS)/eL)/e_;return cz+f0,fb+f1 end;function Kinematic.computeTravelTime(eP,eQ,cz)if cz==0 then return 0 end;if eQ>0 then local eS=eL*math.asin(eP/eL)local fc=eM*math.cos(eS/eL)/eQ;return(eL*math.acos(eQ*(fc-cz)/eM)-eS)/eQ end;assert(eP>0,'Acceleration and initial speed are both zero.')return cz/eP end;function Kinematic.lorentz(X)return eO(X)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cz)local fd=cz>100000;local Y=""if fd then Y=round(cz/1000/200,1).." SU"elseif cz<1000 then Y=round(cz,1).." M"else Y=round(cz/1000,1).." KM"end;return Y end;function getDistanceDisplayString2(cz)local fd=cz>100000;local Y=""if fd then Y=round(cz/1000/200,2).." SU"elseif cz<1000 then Y=round(cz,2).." M"else Y=round(cz/1000,2).." KM"end;return Y end;function getSpeedDisplayString(au)return a(round(au*3.6,0)+0.5).." km/h"end;function FormatTimeString(fe)local ff=a(fe/86400)local fg=a(fe/3600)local fh=a(fe/60%60)local fe=a(fe%60)if fe<0 or fg<0 or fh<0 then return"0s"end;if ff>0 then return ff.."d "..fg.."h "elseif fg>0 then return fg.."h "..fh.."m "elseif fh>0 then return fh.."m "..fe.."s"else return fe.."s"end end;function getMagnitudeInDirection(bg,dZ)bg=vec3(bg)dZ=vec3(dZ):normalize()local Y=bg*dZ;return Y.x+Y.y+Y.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local fi=AtlasOrdered[AutopilotTargetIndex].index;local fj=atlas[0][fi]if fj.center then AutopilotTargetName=fj.name;AutopilotTargetPlanet=galaxyReference[0][fi]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=fj end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fk=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return fk end;function GetAutopilotTravelTime()if not Autopilot then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()end;local velocity=core.getWorldVelocity()local fl,fm=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local fn,fo;if not TurnBurn then fn,fo=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fn,fo=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fp;if not TurnBurn then _,fp=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,fp=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local fq=0;local fr=0;if AutopilotCruising then fr=Kinematic.computeTravelTime(vec3(velocity):len(),0,AutopilotDistance)elseif fn+fl<AutopilotDistance then fq=AutopilotDistance-(fn+fl)fr=Kinematic.computeTravelTime(8333.0556,0,fq)else local fs=(AutopilotDistance-fn)/fl;fl=AutopilotDistance-fn;fm=fm*fs end;if AutopilotBraking then return fp elseif AutopilotCruising then return fr+fp else return fm+fo+fr end end;function GetAutopilotBrakeDistanceAndTime(au)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(au,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(au,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(au)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(au,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local ft=Nav.axisCommandManager:getAxisCommandType(0)local bA="TRAVEL"if ft==1 then bA="CRUISE"end;if Autopilot then bA="AUTOPILOT"end;return bA end;function hoverDetectGround()local fu=-1;if vBooster then fu=vBooster.distance()elseif hover then fu=hover.distance()end;return fu end;function round(c5,fv)local fw=10^(fv or 0)return a(c5*fw+0.5)/fw end;function tablelength(fx)local fy=0;for _ in pairs(fx)do fy=fy+1 end;return fy end;function BeginProfile(fz)ProfileTimeStart=system.getTime()end;function EndProfile(fz)local fA=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fA;ProfileCount=ProfileCount+1;if fA>ProfileTimeMax then ProfileTimeMax=fA end;if fA<ProfileTimeMin then ProfileTimeMin=fA end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fB=ProfileTimeSum;local fC=ProfileTimeSum/ProfileCount;local fD=ProfileTimeMin;local fE=ProfileTimeMax;local fF=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fB,fC,fD,fE,fF))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fG=unit.getAtmosphereDensity()if door and(fG>0 or fG==0 and CoreAltitude<10000)then for _,X in pairs(door)do X.activate()end end;if forcefield and(fG>0 or fG==0 and CoreAltitude<10000)then for _,X in pairs(forcefield)do X.activate()end end;if dbHud then if not WipedDatabank then for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fH)if fH=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"MsgTimer=5;unit.setTimer("emergencyWarpTick",5)InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).destination~="Unknown"and json.decode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fH=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fI;fI=radar_1.getData():find('identifiedConstructs":%[%]')if HasSpaceRadar and EmergencyWarp then local an,cz=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if an~=nil and an~=""then if math.floor(cz)<EmergencyWarpDistance and NotTriedEmergencyWarp and json.decode(warpdrive.getData()).errorMsg~="PLANET TOO CLOSE"then InEmergencyWarp=true;NotTriedEmergencyWarp=false end end end;if fI==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fI~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fJ=radar_1.getEntries()RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fJ)local fK={}for W,X in pairs(fJ)do if radar_1.hasMatchingTransponder(X)==1 then fK[#fK+1]=X end end;if#fK>0 then local af=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,af)for W,X in pairs(fK)do af=af+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,af,radar_1.getConstructName(X))end end elseif radar_1 then local fL;fL=radar_1.getData():find('worksInEnvironment":false')if fL then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end;local aq={}local bA=GetFlightStyle()DrawOdometer(aq,TotalDistanceTrip,TotalDistanceTravelled,bA,FlightTime)checkDamage(aq)LastOdometerOutput=table.concat(aq,"")collectgarbage("collect")elseif fH=="reEmergencyWarp"then if EmergencyWarp then NotTriedEmergencyWarp=true;InEmergencyWarp=true end;unit.stopTimer("reEmergencyWarp")elseif fH=="msgTick"then local aq={}DisplayMessage(aq,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fH=="emergencyWarpTick"then if EmergencyWarp then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;EmergencyWarp=false end;unit.stopTimer("emergencyWarpTick")elseif fH=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fH=="apTick"then local l=Nav.control.isRemoteControlled;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fM=system.getMouseDeltaX()local fN=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fO=velMag>8334;if not fO and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fO;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local aq={}HUDPrologue(aq)if showHud then updateHud(aq)else DisplayOrbitScreen(aq)DrawWarnings(aq)end;HUDEpilogue(aq)aq[#aq+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(aq,MsgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(aq)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(aq)if screen_1.getMouseState()==1 then CheckButtons()end;aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fM;SimulatedY=SimulatedY+fN end;SetButtonContains()DrawButtons(aq)if not Animating and not Animated then local fP=table.concat(aq,"")aq={}aq[#aq+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aq[#aq+1]=GalaxyMapHTML;aq[#aq+1]=fP;aq[#aq+1]="</body>"Animating=true;aq[#aq+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(aq,"")system.setScreen(content)elseif Animated then local fP=table.concat(aq,"")aq={}aq[#aq+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aq[#aq+1]=GalaxyMapHTML;aq[#aq+1]=fP;aq[#aq+1]="</body>"end;if not Animating then aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fM;SimulatedY=SimulatedY+fN;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="Mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fN,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fM,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(aq)end else SetButtonContains()DrawButtons(aq)end;aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;aq[#aq+1]=[[</svg></body>]]content=table.concat(aq,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local fn,fo;if not TurnBurn then fn,fo=GetAutopilotBrakeDistanceAndTime(velMag)else fn,fo=GetAutopilotTBBrakeDistanceAndTime(velMag)end;fn=fn;fo=fo;local fQ=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fR=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fS=getMagnitudeInDirection(fR,AutopilotShipUp)local fT=getMagnitudeInDirection(fR,AutopilotShipRight)local fU=-fT*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local fV=-fS*AutopilotDistance*velMag*TrajectoryAlignmentStrength;fQ=AutopilotTargetCoords+-fU*vec3(AutopilotShipRight)+-fV*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fQ)-vec3(core.getConstructWorldPos())):len()local fW=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(fW)..'", "unit":""}')local fX=true;local fY=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fY)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fX=AlignToWorldVector((fQ-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fX=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fX or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false elseif not APThrottleSet then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(fY-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and APThrottleSet then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end;if AutopilotDistance<=fn then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(aq,"Autopilot completed, orbit established")BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end end elseif AutopilotCruising then if AutopilotDistance<=fn then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if fX then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fX then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not APThrottleSet then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true;BrakeIsOn=false end end end end end;if FollowMode then autoRoll=true;local fZ=0;local bB=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local f_=bB-vec3(core.getConstructWorldPos())local g0=vec3(f_):project_on(vec3(core.getConstructWorldOrientationForward())):len()local g1=vec3(f_):project_on(vec3(core.getConstructWorldOrientationRight())):len()local cz=math.sqrt(g0*g0+g1*g1)AlignToWorldVector(f_:normalize())local g2=40;local g3=cz<g2;local g4=100;local g5=utils.clamp((cz-g2)/2,10,g4)PitchInput2=0;local fX=math.abs(YawInput2)<0.1;if fX and velMag<g5 and not g3 then BrakeIsOn=false;fZ=-10 else BrakeIsOn=true;fZ=0 end;local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getWorldVertical())local aJ=getPitch(bq,br,bs)local g6=1.0;if math.abs(fZ-aJ)>g6 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fZ-aJ)local g7=pitchPID:get()PitchInput2=g7 end end;local bS=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then local bp=CoreAltitude;local g8=HoldAltitude-bp;local g9=500+velMag;local fZ=(utils.smoothstep(g8,-g9,g9)-0.5)*2*MaxPitch;if not AltitudeHold then fZ=0 end;autoRoll=true;if Reentry then local ga=ReentrySpeed;if CoreAltitude>15000 and not ReentryMode then ga=ga*math.floor(CoreAltitude/10000)end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ga then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ga)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then fZ=-80;if unit.getAtmosphereDensity()>0.02 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;fZ=0 end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false end end;local gb=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bi=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bi)local gc=bi:len()-bi:project_on(bS):len()local a9=json.decode(unit.getData()).maxBrake;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local gd=velocity:len()-math.abs(bT)local ge=vec3(core.getWorldAirFrictionAcceleration())if a9~=nil then LastMaxBrake=a9;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gd,0,core.getConstructMass(),0,0,a9+(ge:len()-ge:project_on(bS):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(gd,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if gc<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and gc>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=gc end;PitchInput2=gb;local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getWorldVertical())local fu=-1;local aJ=getPitch(bq,br,bs)local g6=0.1;if BrakeLanding then fZ=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;fu=hoverDetectGround()if fu>-1 then if math.abs(fZ-aJ)<g6 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bS)<0.99 then BrakeIsOn=true elseif bT<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fZ<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;if math.abs(fZ-aJ)>g6 then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fZ-aJ)local g7=pitchPID:get()PitchInput2=PitchInput2+g7 end end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 then if antigrav.getState()==1 then local velocity=vec3(core.getWorldVelocity())local bS=vec3(core.getWorldVertical())*-1;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local gf=antigrav.getBaseAltitude()if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;local gg=unit.getThrottle()if Nav.axisCommandManager:getAxisCommandType(0)==1 then gg=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)end;local gh=math.abs(CoreAltitude-gf)if gg>-1 and gg<1 and gh>10 and gh<501 and unit.getAtmosphereDensity()<0.01 then if CoreAltitude>antigrav.getBaseAltitude()and AntigravTargetAltitude>CoreAltitude and bT<0 or CoreAltitude<antigrav.getBaseAltitude()and AntigravTargetAltitude<CoreAltitude and bT>0 then BrakeIsOn=true else BrakeIsOn=false end end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()local gi=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)gi=math.max(gi,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local gj=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local gk=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local gl=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local gm=BrakeInput;local gn=vec3(core.getWorldVertical())local go=vec3(core.getConstructWorldOrientationUp())local gp=vec3(core.getConstructWorldOrientationForward())local gq=vec3(core.getConstructWorldOrientationRight())local gr=vec3(core.getWorldVelocity())local gs=vec3(core.getWorldVelocity()):normalize()local gt=getRoll(gn,gp,gq)local gu=math.abs(gt)local gv=utils.sign(gt)local f=unit.getAtmosphereDensity()local gw=vec3(core.getWorldAngularVelocity())local gx=gj*pitchSpeedFactor*gq+gk*rollSpeedFactor*gp+gl*yawSpeedFactor*go;if gn:len()>0.01 and f>0.0 then local gy=1.0;if autoRoll==true and gu>gy and gk==0 then local gz=utils.clamp(0,gu-30,gu+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gz-gt)local gA=rollPID:get()gx=gx+gA*gp end;local gB=20.0;if turnAssist==true and gu>gB and gj==0 and gl==0 then local gC=turnAssistFactor*0.1;local gD=turnAssistFactor*0.025;local gE=(gu-gB)/(180-gB)*180;local gF=0;if gE<90 then gF=gE/90 elseif gE<180 then gF=(180-gE)/90 end;gF=gF*gF;local gG=-gv*gD*(1.0-gF)local gH=gC*gF;gx=gx+gH*gq+gG*go end end;local gI=1;local gJ=0;local gK=1;local gL=gi*(gx-gw)local gM=vec3(core.getWorldAirFrictionAngularAcceleration())gL=gL-gM;Nav:setEngineTorqueCommand('torque',gL,gI,'airfoil','','',gK)local gN=-gm*(brakeSpeedFactor*gr+brakeFlatFactor*gs)Nav:setEngineForceCommand('brake',gN)local gO=''local gP=vec3()local gQ=false;local gR='thrust analog longitudinal'local gS=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gS==axisCommandType.byThrottle then local gT=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gR,axisCommandId.longitudinal)Nav:setEngineForceCommand(gR,gT,gI)elseif gS==axisCommandType.byTargetSpeed then local gT=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gO=gO..' , '..gR;gP=gP+gT;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gQ=true end end;local gU='thrust analog lateral'local gV=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gV==axisCommandType.byThrottle then local gW=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gU,axisCommandId.lateral)Nav:setEngineForceCommand(gU,gW,gI)elseif gV==axisCommandType.byTargetSpeed then local gX=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gO=gO..' , '..gU;gP=gP+gX end;local gY='thrust analog vertical'local gZ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gZ==axisCommandType.byThrottle then local g_=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gY,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gY,g_,gI,'airfoil','ground','',gK)else Nav:setEngineForceCommand(gY,vec3(),gI)Nav:setEngineForceCommand('airfoil vertical',g_,gI,'airfoil','','',gK)Nav:setEngineForceCommand('ground vertical',g_,gI,'ground','','',gK)end elseif gZ==axisCommandType.byTargetSpeed then local h0=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gO=gO..' , '..gY;gP=gP+h0 end;if gP:len()>constants.epsilon then if BrakeInput~=0 or gQ or math.abs(gs:dot(gp))<0.95 then gO=gO..', brake'end;Nav:setEngineForceCommand(gO,gP,gJ,'','','',gK)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local au=vec3(core.getVelocity()):len()local h1=unit.setEngineThrust;local h2=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local gg=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if au*3.6>gg*(1-h2)then h1('rocket_engine',0)elseif IsBoosting then h1('rocket_engine',1)end else local h3=unit.getThrottle()local g5=h3/100;if f==0 then g5=g5*MaxGameVelocity;if au>=g5*(1-h2)then h1('rocket_engine',0)elseif IsBoosting then h1('rocket_engine',1)end else g5=g5*1050/3.6;if au>=g5*(1-h2)then h1('rocket_engine',0)elseif IsBoosting then h1('rocket_engine',1)end end end end end;function script.onUpdate()if not SetupComplete then local _,Y=coroutine.resume(beginSetup)if Y then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(h4)if h4=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;if(vBooster or hover)and hoverDetectGround()==-1 and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif h4=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif h4=="forward"then PitchInput=PitchInput-1 elseif h4=="backward"then PitchInput=PitchInput+1 elseif h4=="left"then RollInput=RollInput-1 elseif h4=="right"then RollInput=RollInput+1 elseif h4=="yawright"then YawInput=YawInput-1 elseif h4=="yawleft"then YawInput=YawInput+1 elseif h4=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif h4=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif h4=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif h4=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif h4=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif h4=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif h4=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif h4=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif h4=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif h4=="option4"then ToggleAutopilot()ToggleView=false elseif h4=="option5"then ToggleTurnBurn()ToggleView=false elseif h4=="option6"then ToggleAltitudeHold()ToggleView=false elseif h4=="option7"then wipeSaveVariables()ToggleView=false elseif h4=="option8"then ToggleFollowMode()ToggleView=false elseif h4=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif h4=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif h4=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif h4=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif h4=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif h4=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif h4=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif h4=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif h4=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif h4=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(h4)if h4=="forward"then PitchInput=PitchInput+1 elseif h4=="backward"then PitchInput=PitchInput-1 elseif h4=="left"then RollInput=RollInput+1 elseif h4=="right"then RollInput=RollInput-1 elseif h4=="yawright"then YawInput=YawInput+1 elseif h4=="yawleft"then YawInput=YawInput-1 elseif h4=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif h4=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif h4=="up"then UpAmount=UpAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif h4=="down"then UpAmount=UpAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif h4=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif h4=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif h4=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif h4=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif h4=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(h4)if h4=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif h4=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif h4=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif h4=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(aq,h5)if h5~="empty"then aq[#aq+1]=[[<text class="msg" x="50%%" y="310" >]]for h6 in string.gmatch(h5,"([^\n]+)")do aq[#aq+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],h6)end;aq[#aq+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a4=system.getTime()local velocity=vec3(core.getWorldVelocity())local by=vec3(velocity):len()local h7=a4-LastTravelTime;if by>1.38889 then by=by/1000;local h8=by*(a4-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+h8;TotalDistanceTrip=TotalDistanceTrip+h8 end;FlightTime=FlightTime+h7;TotalFlightTime=TotalFlightTime+h7;LastTravelTime=a4 end;function updateMass()local h9=0;for W in pairs(ElementsID)do h9=h9+core.getElementMassById(ElementsID[W])end;return h9 end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
