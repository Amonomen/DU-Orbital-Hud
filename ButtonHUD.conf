name: ButtonsHud - Dimencia and Archaegeo v4.63 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        freeLookToggle = true --export: Set to false for default free look behavior.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), use 6944.4444 for 25000km/hr
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        AutopilotInterplanetaryThrottle = 100 --export: How much throttle, in percent, you want it to use when autopiloting to another planet
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        centerX = 700 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale)
        centerY = 980 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale)
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.63;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;markers={}MinAutopilotSpeed=55;LastMaxBrake=0;EmergencyWarp=false;ReentryMode=false;brakeToggle=BrakeToggleDefault;brakeToggle=true;displayOrbit=true;mousePitchFactor=1;mouseYawFactor=1;hasGear=false;pitchInput=0;rollInput=0;yawInput=0;brakeInput=0;pitchInput2=0;rollInput2=0;yawInput2=0;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;Reentry=false;Autopilot=false;FollowMode=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotRealigned=false;VectorToTarget=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"simulatedX=0;simulatedY=0;HoldingCtrl=false;PrevViewLock=1;PreviousYawAmount=0;PreviousPitchAmount=0;msgText="empty"msgTimer=3;targetGroundAltitude=nil;gearExtended=nil;LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;isBoosting=false;distance=0;brakeDistance,brakeTime=0;maxBrakeDistance,maxBrakeTime=0;hasGear=false;hasDB=false;hasSpaceRadar=false;hasAtmoRadar=false;damageMessage=""radarMessage=""LastOdometerOutput=""peris=0;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;AutopilotPlanetGravity=0;UnitHidden=true;totalDistanceTravelled=0.0;totalDistanceTrip=0;emergencyWarp=false;notTriedEmergencyWarp=true;AntigravTargetAltitude=nil;lastTravelTime=system.getTime()core_altitude=core.getAltitude()elementsID=core.getElementIdList()atmoTanks={}spaceTanks={}rocketTanks={}eleTotalMaxHp=0;flightTime=0;totalFlightTime=0;RepairArrows=false;wipedDatabank=false;fuelTimeLeftR={}fuelPercentR={}FuelUpdateDelay=a(1/apTickRate)*2;fuelTimeLeftS={}fuelPercentS={}fuelTimeLeft={}fuelPercent={}SavedLocations={}LocationIndex=0;updateTanks=false;honeyCombMass=0;upAmount=0;local m={}local n=1;local o=0.001;local p=2560;local q=1440;local r=nil;local s=nil;local t=nil;local u=nil;local v=false;local w=false;local x=0;local y=nil;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","useTheseSettings","centerX","centerY"}AutoVariables={"EmergencyWarp","hasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","AutoBrake","Autopilot","TurnBurn","AltitudeHold","displayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","gearExtended","targetGroundAltitude","totalDistanceTravelled","totalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake"}if dbHud then local z=dbHud.hasKey;if not useTheseSettings then for A,B in pairs(SaveableVariables)do if z(B)then local C=c(dbHud.getStringValue(B))if C~=nil then system.print(B.." "..dbHud.getStringValue(B))_G[B]=C;v=true end end end end;for A,B in pairs(AutoVariables)do if z(B)then local C=c(dbHud.getStringValue(B))if C~=nil then system.print(B.." "..dbHud.getStringValue(B))_G[B]=C;v=true end end end;if v then msgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then msgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off newSettings to use saved values"useTheseSettings=false else msgText="No Saved Variables Found - Stand up / leave remote to save settings"end else msgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;autoRoll=autoRollPreference;lastConstructMass=k()honeyCombMass=lastConstructMass-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]rgbdim=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]UpdateCount=0;titlecolR=rgb;titlecol=rgb;titlecolS=rgb;coroutine.yield()for A in pairs(elementsID)do local D=h(elementsID[A])if D=="landing gear"then hasGear=true end;if D=="dynamic core"then local E=e(elementsID[A])coreOffset=16;if E>10000 then coreOffset=128 elseif E>1000 then coreOffset=64 elseif E>150 then coreOffset=32 end end;eleTotalMaxHp=eleTotalMaxHp+e(elementsID[A])if D=="atmospheric fuel-tank"or D=="space fuel-tank"or D=="rocket fuel-tank"then local E=e(elementsID[A])local F=j(elementsID[A])local G=0;local H=system.getTime()if D=="atmospheric fuel-tank"then local I=400;local J=35.03;if E>10000 then I=51200;J=5480 elseif E>1300 then I=6400;J=988.67 elseif E>150 then I=1600;J=182.67 end;G=F-J;if fuelTankOptimizationAtmo>0 then I=I+I*fuelTankOptimizationAtmo*0.2 end;if G>I then I=G end;atmoTanks[#atmoTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end;if D=="rocket fuel-tank"then local I=320;local J=173.42;if E>65000 then I=40000;J=25740 elseif E>6000 then I=5120;J=4720 elseif E>700 then I=640;J=886.72 end;G=F-J;if fuelTankOptimizationRocket>0 then I=I+I*fuelTankOptimizationRocket*0.1 end;if G>I then I=G end;rocketTanks[#rocketTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end;if D=="space fuel-tank"then local I=2400;local J=182.67;if E>10000 then I=76800;J=5480 elseif E>1300 then I=9600;J=988.67 end;G=F-J;if fuelTankOptimizationSpace>0 then I=I+I*fuelTankOptimizationSpace*0.2 end;if G>I then I=G end;spaceTanks[#spaceTanks+1]={elementsID[A],core.getElementNameById(elementsID[A]),I,J,G,H}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then hasSpaceRadar=true else hasAtmoRadar=true end end;if door then for _,B in pairs(door)do B.deactivate()end end;if forcefield then for _,B in pairs(forcefield)do B.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if targetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(targetGroundAltitude)end;if hasGear then if gearExtended==nil then gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if targetGroundAltitude==nil then if gearExtended then Nav.axisCommandManager:setTargetGroundAltitude(0)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end elseif targetGroundAltitude==nil then if f()==0 then gearExtended=false;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else gearExtended=true;Nav.axisCommandManager:setTargetGroundAltitude(0)end end;if f()>0 and not dbHud and(gearExtended or not hasGear)then BrakeIsOn=true end;unit.hide()function refreshLastMaxBrake(K,L)if K==nil then K=core.g()end;K=round(K,5)if L~=nil and L or(y==nil or y~=K)then local M=c(unit.getData()).maxBrake;if M~=nil then LastMaxBrake=M end;y=K end end;function MakeButton(N,O,P,Q,R,S,T,U,V)local W={enableName=N,disableName=O,width=P,height=Q,x=R,y=S,toggleVar=T,toggleFunction=U,drawCondition=V,hovered=false}table.insert(m,W)return W end;function AddLocationsToAtlas()for A,B in pairs(SavedLocations)do table.insert(atlas[0],B)end end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local D=#SavedLocations..". "..planet.name;if radar_1 then local X,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if X~=nil and X~=""then D=D.." "..radar_1.getConstructName(X)end end;local Y={position=position,name=D,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=Y;table.insert(atlas[0],Y)msgText="Location saved as "..D else msgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local Z=-1;for A,B in pairs(atlas[0])do if B.name and B.name==CustomTarget.name then Z=A end end;if Z>-1 then table.remove(atlas[0],Z)end;Z=-1;for A,B in pairs(SavedLocations)do if B.name and B.name==CustomTarget.name then msgText=B.name.." saved location cleared"Z=A;break end end;if Z~=-1 then table.remove(SavedLocations,Z)end;DecrementAutopilotTargetIndex()end;function DrawDeadZone(a0)a0[#a0+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;peris=0 end end;function ToggleWidgets()if UnitHidden then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;UnitHidden=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;UnitHidden=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(a1,a2,R,S,P,Q)if a1>R and a1<R+P and a2>S and a2<S+Q then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then AutoBrake=false;Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not gearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=core_altitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=core_altitude+AutoTakeoffAltitude;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AutoBrake=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=gearExtended;gearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;gearExtended=OldGearExtended;if gearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end end else msgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;AutoBrake=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(a0)local a3=0;damageMessage=""currentConstructMass=k()local a4=eleTotalMaxHp;local a5=0;local a6=100;local a7=0;local a8=0;local a9=0;local aa=""for A in pairs(elementsID)do local E=0;local ab=0;ab=e(elementsID[A])E=g(elementsID[A])a5=a5+E;if E<ab then if E==0 then a8=a8+1 else a7=a7+1 end;if RepairArrows and#markers==0 then position=vec3(core.getElementPositionById(elementsID[A]))local coreOffset=16;local R=position.x-coreOffset;local S=position.y-coreOffset;local ac=position.z-coreOffset;table.insert(markers,core.spawnArrowSticker(R,S,ac+1,"down"))table.insert(markers,core.spawnArrowSticker(R,S,ac+1,"down"))core.rotateSticker(markers[2],0,0,90)table.insert(markers,core.spawnArrowSticker(R+1,S,ac,"north"))table.insert(markers,core.spawnArrowSticker(R+1,S,ac,"north"))core.rotateSticker(markers[4],90,90,0)table.insert(markers,core.spawnArrowSticker(R-1,S,ac,"south"))table.insert(markers,core.spawnArrowSticker(R-1,S,ac,"south"))core.rotateSticker(markers[6],90,-90,0)table.insert(markers,core.spawnArrowSticker(R,S-1,ac,"east"))table.insert(markers,core.spawnArrowSticker(R,S-1,ac,"east"))core.rotateSticker(markers[8],90,0,90)table.insert(markers,core.spawnArrowSticker(R,S+1,ac,"west"))table.insert(markers,core.spawnArrowSticker(R,S+1,ac,"west"))core.rotateSticker(markers[10],-90,0,90)table.insert(markers,elementsID[A])end elseif RepairArrows and#markers>0 and markers[11]==elementsID[A]then for ad in pairs(markers)do core.deleteSticker(markers[ad])end;markers={}end end;a3=a(a5*100/a4)if currentConstructMass<lastConstructMass then a6=math.ceil(100*(currentConstructMass-updateMass())/honeyCombMass)lastConstructMass=currentConstructMass end;if a6<100 or a3<100 then a0[#a0+1]=[[<g class="pbright txt">]]if a6<100 then a9=a(a6*2.55)aa=b("rgb(%d,%d,%d)",255-a9,a9,0)a0[#a0+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],aa,a6)end;a9=a(a3*2.55)aa=b("rgb(%d,%d,%d)",255-a9,a9,0)if a3<100 then a0[#a0+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aa,a3)if a8>0 then a0[#a0+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aa,a8,a7)elseif a7>0 then a0[#a0+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aa,a7)end end;a0[#a0+1]=[[<\g>]]end end;function DrawCursorLine(a0)local ae=a(utils.clamp(distance/(p/4)*255,0,255))a0[#a0+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",simulatedX,simulatedY,a(PrimaryR+0.5)+ae,a(PrimaryG+0.5)-ae,a(PrimaryB+0.5)-ae)end;function getPitch(af,ag,ah)local ai=af:cross(ah):normalize_inplace()local aj=math.acos(utils.clamp(ai:dot(-ag),-1,1))*constants.rad2deg;if ai:cross(-ag):dot(ah)<0 then aj=-aj end;return aj end;function wipeSaveVariables()if not dbHud then msgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"msgTimer=5 elseif v then if w then for A,B in pairs(SaveableVariables)do dbHud.setStringValue(B,d(nil))end;for A,B in pairs(AutoVariables)do dbHud.setStringValue(B,d(nil))end;msgText="Databank wiped. New variables will save after re-enter seat and exit"msgTimer=5;w=false;v=false;wipedDatabank=true else msgText="Press ALT-7 again to confirm wipe"w=true end end end;function CheckButtons()for _,B in pairs(m)do if B.hovered then B.toggleFunction()B.hovered=false end end end;function SetButtonContains()local R=simulatedX+p/2;local S=simulatedY+q/2;for _,B in pairs(m)do B.hovered=Contains(R,S,B.x,B.y,B.width,B.height)end end;function DrawButton(a0,ak,hover,R,S,al,am,an,ao,ap,aq)if type(ap)=="function"then ap=ap()end;if type(aq)=="function"then aq=aq()end;a0[#a0+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",R,S,al,am)if ak then a0[#a0+1]=b("%s'",an)else a0[#a0+1]=ao end;if hover then a0[#a0+1]=" style='stroke:white; stroke-width:2'"else a0[#a0+1]=" style='stroke:black; stroke-width:1'"end;a0[#a0+1]="></rect>"a0[#a0+1]=b("<text x='%f' y='%f' font-size='24' fill='",R+al/2,S+am/2+5)if ak then a0[#a0+1]="black"else a0[#a0+1]="white"end;a0[#a0+1]="' text-anchor='middle' font-family='Montserrat'>"if ak then a0[#a0+1]=b("%s</text>",ap)else a0[#a0+1]=b("%s</text>",aq)end end;function DrawButtons(a0)local ar="rgb(50,50,50)'"local as="rgb(210,200,200)"local at=DrawButton;for _,B in pairs(m)do local O=B.disableName;local N=B.enableName;if type(O)=="function"then O=O()end;if type(N)=="function"then N=N()end;if not B.drawCondition or B.drawCondition()then at(a0,B.toggleVar(),B.hovered,B.x,B.y,B.width,B.height,as,ar,O,N)end end end;function DrawTank(a0,updateTanks,R,au,av,aw,ax,ay)local az=1;local aA=2;local aB=3;local aC=4;local aD=5;local aE=6;local aF=""local aG=0;local aH=350;local aI=360;if l()==1 then aH=aH-50;aI=aI-50 end;a0[#a0+1]=[[<g class="pdim txtfuel">]]if av=="ATMO"then aF="atmofueltank"elseif av=="SPACE"then aF="spacefueltank"else aF="rocketfueltank"end;aG=_G[aF.."_size"]if#aw>0 then for i=1,#aw do local D=string.sub(aw[i][aA],1,12)local aJ=0;for ad=1,aG do if aw[i][aA]==json.decode(unit[aF.."_"..ad].getData()).name then aJ=ad;break end end;if updateTanks or ax[i]==nil or ay[i]==nil then local aK=0;local aL=0;local aM=0;local aN=0;local H=system.getTime()if aJ~=0 then ay[i]=json.decode(unit[aF.."_"..aJ].getData()).percentage;ax[i]=json.decode(unit[aF.."_"..aJ].getData()).timeLeft;if ax[i]=="n/a"then ax[i]=0 end else aM=j(aw[i][az])-aw[i][aC]aK=aw[i][aB]ay[i]=a(0.5+aM*100/aK)aL=aw[i][aD]aN=aw[i][aE]if aL<=aM then ax[i]=0 else ax[i]=a(0.5+aM/((aL-aM)/(H-aN)))end;aw[i][aD]=aM;aw[i][aE]=H end end;if D==au then D=b("%s %d",av,i)end;if aJ==0 then D=D.." *"end;local aO;if ax[i]==0 then aO="n/a"else aO=FormatTimeString(ax[i])end;if ay[i]~=nil then local a9=a(ay[i]*2.55)local aa=b("rgb(%d,%d,%d)",255-a9,a9,0)local aP=""if aO~="n/a"and ax[i]<120 or ay[i]<5 then if updateTanks then aP=[[class="red"]]end end;a0[#a0+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],R,aH,aP,D,R,aI,aa,ay[i],aO)aH=aH+30;aI=aI+30 end end end;a0[#a0+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aj=-math.deg(math.atan(velocity.y,velocity.z))+180;aj=aj-90;if aj<0 then aj=360+aj end;if aj>180 then aj=-180+aj-180 end;return-aj end;function getRelativeYaw(velocity)velocity=vec3(velocity)local aQ=math.deg(math.atan(velocity.y,velocity.x))-90;if aQ<-180 then aQ=360+aQ end;return aQ end;function AlignToWorldVector(aR,aS)if aS==nil then aS=o end;aR=vec3(aR):normalize()local aT=vec3(core.getConstructWorldOrientationForward())-aR;local aU=-getMagnitudeInDirection(aT,core.getConstructWorldOrientationRight())*n;local aV=-getMagnitudeInDirection(aT,core.getConstructWorldOrientationUp())*n;yawInput2=yawInput2-(aU+(aU-PreviousYawAmount)*DampingMultiplier)pitchInput2=pitchInput2+aV+(aV-PreviousPitchAmount)*DampingMultiplier;PreviousYawAmount=aU;PreviousPitchAmount=aV;if math.abs(aU)<aS and math.abs(aV)<aS then return true end;return false end;function getAPEnableName()local D=AutopilotTargetName;if D==nil then D=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if D==nil then D="None"end;return"Engage Autopilot: "..D end;function getAPDisableName()local D=AutopilotTargetName;if D==nil then D=CustomTarget.name end;if D==nil then D="None"end;return"Disable Autopilot: "..D end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()else AntigravTargetAltitude=core_altitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;local aW=50;local aX=260;local aY=MakeButton("Enable Brake Toggle","Disable Brake Toggle",aX,aW,p/2-aX/2,q/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then msgText="Brakes in Toggle Mode"else msgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",aX,aW,p/2-aX/2-50-aY.width,q/2-aW+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",aX,aW,p/2-aX/2+aY.width+50,q/2-aW+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local aZ=MakeButton(getAPEnableName,getAPDisableName,600,60,p/2-600/2,q/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,aZ.height,aZ.x+aZ.width+30,aZ.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,aZ.height,aZ.x-200-30,aZ.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)aW=60;aX=300;local R=10;local S=q/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",aX,aW,R,S,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",aX,aW,R+aX+20,S,function()return AltitudeHold end,ToggleAltitudeHold)S=S+aW+20;MakeButton("Engage Autoland","Disable Autoland",aX,aW,R,S,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",aX,aW,R+aX+20,S,function()return AutoTakeoff end,ToggleAutoTakeoff)S=S+aW+20;MakeButton("Engage Follow Mode","Disable Follow Mode",aX,aW,R,S,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Engage Glide Reentry","Disable Glide Reentry",aX,aW,R+aX+20,S,function()return ReentryMode end,function()ReentryMode=not ReentryMode;if ReentryMode then msgText="Reentry Mode Enabled. Press G when aligned with planet for reentry"else msgText="Reentry Mode Disabled.  Normal Landing with G"end end)S=S+aW+20;MakeButton("Enable Emergency Warp","Disable Emergency Warp",aX,aW,R,S,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then msgText="Emergency Warp Enabled"else msgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)MakeButton("Show Orbit Display","Hide Orbit Display",aX,aW,R+aX+20,S,function()return displayOrbit end,function()displayOrbit=not displayOrbit;if displayOrbit then msgText="Orbit Display Enabled"else msgText="Orbit Display Disabled"end end)S=S+aW+20;MakeButton("Enable AGG","Disable AGG",aX,aW,R,S,function()return AntigravTargetAltitude==nil end,ToggleAntigrav,function()return antigrav~=nil end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",aX,aW,R,S,function()return RepairArrows end,function()RepairArrows=not RepairArrows;if RepairArrows then msgText="Repair Arrows Enabled"else msgText="Repair Arrows Diabled"end end,function()return l()==1 end)S=S+aW+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,aX*2,aW,R,S,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(a0)local a_=core_altitude;local velocity=core.getVelocity()local speed=vec3(velocity):len()local b0=vec3(core.getWorldVertical())local b1=vec3(core.getConstructWorldOrientationForward())local b2=vec3(core.getConstructWorldOrientationRight())local aj=getPitch(b0,b1,b2)local b3=getRoll(b0,b1,b2)local b4=b3;local b5=aj;local b6=f()local b7=a(unit.getThrottle())local b8=speed*3.6;local b9=unit.getAxisCommandValue(0)local ba=GetFlightStyle()if b6==0 then if speed>5 then aj=getRelativePitch(velocity)b3=getRelativeYaw(velocity)else aj=0;b3=0 end;bottomText="YAW"end;a0[#a0+1]=LastOdometerOutput;a0[#a0+1]=damageMessage;a0[#a0+1]=radarMessage;if UpdateCount%FuelUpdateDelay==0 then updateTanks=true end;DrawTank(a0,updateTanks,100,"Atmospheric ","ATMO",atmoTanks,fuelTimeLeft,fuelPercent)DrawTank(a0,updateTanks,200,"Space fuel t","SPACE",spaceTanks,fuelTimeLeftS,fuelPercentS)DrawTank(a0,updateTanks,300,"Rocket fuel ","ROCKET",rocketTanks,fuelTimeLeftR,fuelPercentR)if updateTanks then updateTanks=false;UpdateCount=0 end;UpdateCount=UpdateCount+1;DrawVerticalSpeed(a0,a_,b6)if l()==0 then if unit.getClosestPlanetInfluence()>0 then if not IsInFreeLook()then DrawArtificialHorizon(a0,b5,b4,b6,centerX,centerY,"ROLL")DrawPrograde(a0,b5,b4,b6,velocity,speed,centerX,centerY)end else if not IsInFreeLook()then DrawArtificialHorizon(a0,aj,b3,b6,centerX,centerY,"YAW")DrawPrograde(a0,b5,b4,b6,velocity,speed,centerX,centerY)end end;DrawAltitudeDisplay(a0,a_,b6)end;DrawThrottle(a0,ba,b7,b9)DrawSpeed(a0,b8)DrawWarnings(a0)DisplayOrbit(a0)if screen_2 then local bb=vec3(core.getConstructWorldPos())local R=960+bb.x/MapXRatio;local S=450+bb.y/MapYRatio;screen_2.moveContent(YouAreHere,(R-80)/19.2,(S-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(a0)local bc=rgb;local bd=rgbdim;local be=rgb;local bf=rgbdim;if IsInFreeLook()and not brightHud then bc=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bd=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;a0[#a0+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bc,bc,be,be,bd,bd,bf,bf)end;function HUDEpilogue(a0)a0[#a0+1]="</svg>"end;function DrawSpeed(a0,b8)local bg=560;a0[#a0+1]=[[<g class="pdim txt txtend">]]if l()==1 then bg=75 end;a0[#a0+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="718" y="%d">%d km/h</text>
                        </g>
                    </g>]],bg,a(b8))end;function DrawOdometer(a0,totalDistanceTrip,totalDistanceTravelled,ba,flightTime)local bh=1240;local bi=55;local bj=65;local b6=f()local K=core.g()local bk=0;local bl=0;refreshLastMaxBrake(K)maxThrust=Nav:maxForceForward()x=k()local bm=vec3(core.getWorldAcceleration()):len()/9.80665;if K>0.1 then bl=x*K;bk=maxThrust/K end;a0[#a0+1]=[[<g class="pdim txt txtend">]]if l()==1 then bh=1120;bi=55;bj=65 elseif b6>0 then a0[#a0+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],b6)end;a0[#a0+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bh,bi,bh,bj,K/9.80665,bh,bi+20,bh,bj+20,bm)a0[#a0+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then a0[#a0+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],totalDistanceTrip,totalDistanceTravelled/1000,FormatTimeString(flightTime),FormatTimeString(totalFlightTime),x/1000,LastMaxBrake/1000,maxThrust/1000,ba)if K>0.1 then a0[#a0+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bk/1000,bl/1000)else a0[#a0+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else a0[#a0+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ba)end;a0[#a0+1]="</g>"end;function DrawThrottle(a0,ba,b7,b9)local aH=centerY+65;local aI=centerY+75;if l()==1 then aH=55;aI=65 end;local bn="CRUISE"local unit="km/h"local bo=b9;if ba=="TRAVEL"or ba=="AUTOPILOT"then bn="THROT"unit="%"bo=b7;local bp="dim"if b7<0 then bp="red"end;a0[#a0+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bp,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(b7),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;a0[#a0+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,aH,bn,centerX-150,aI,bo,unit)end;function DrawVerticalSpeed(a0,a_,b6)if a_<200000 and b6==0 or a_ and b6>0 then local velocity=vec3(core.getWorldVelocity())local bq=vec3(core.getWorldVertical())*-1;local br=velocity.x*bq.x+velocity.y*bq.y+velocity.z*bq.z;local bs=0;if math.abs(br)>1 then bs=45*math.log(math.abs(br),10)if br<0 then bs=-bs end end;a0[#a0+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(1525 250) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],a(br),a(bs))end end;function DrawArtificialHorizon(a0,b5,b4,b6,centerX,centerY,bottomText)local bt=circleRad;if bt>0 then local bu=a(b5)local bv=0;local bw=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*b4,centerX,centerY)a0[#a0+1]=[[<g class="dim txttick">]]for i=a(bu-15-bu%5+0.5),a(bu+15+bu%5+0.5),5 do if i%10==0 then bv=30 elseif i%5==0 then bv=20 end;local S=centerY+-i*5+b5*5;if bv==30 then bw=b([[%s M %d %f h %d]],bw,centerX-15,S,bv)else bw=b([[%s M %d %f h %d]],bw,centerX-10,S,bv)end end;a0[#a0+1]="</g>"a0[#a0+1]=bw;local bx="PITCH"if bottomText=="YAW"then bx="REL PITCH"end;a0[#a0+1]=b([["/>
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                        ]],centerX,centerY-circleRad-20,bx,centerX,centerY-circleRad-10,bu)if b5>90 and b6==0 then b5=90-(b5-90)elseif b5<-90 and b6==0 then b5=-90-(b5+90)end;a0[#a0+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)a0[#a0+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                <clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" clip-path="url(#cut)" transform="rotate(%f %d %d)"/>]],bt,centerX,centerY,bt-1,centerX,centerY,centerX-bt,centerY+bt*b5/90,bt*2,bt*2,-1*b4,centerX,centerY)end end;function DrawAltitudeDisplay(a0,a_,b6)if a_<200000 and b6==0 or a_ and b6>0 then local by=718;local bz=520;local bA=67;local bB=21;table.insert(a0,b([[
                            <g class="pdim txtbig">
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/>        
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],by,bz,bA,bB,by+2,bz+2,bA-4,bB-4))local bC=10;local bD=15;local Z=0;local bE=1;local bF=0;while Z<6 do local bG=a_/bE%10;local bH=a(bG)local bI=a((bH+1)%10)local bJ=bF;if Z==0 then bJ=bG-bH end;local bK=bD*(bJ-1)local bL=bK+bD;local R=by+3+(6-Z)*bC;local S=bz+15;table.insert(a0,b([[
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                            ]],R,S+bK,bI,R,S+bL,bH))Z=Z+1;bE=bE*10;if bH==9 then bF=bJ else bF=0 end end;table.insert(a0,[[</g></g>]])end end;function DrawPrograde(a0,b5,b4,b6,velocity,speed,centerX,centerY)if b6==0 and speed>5 then local bt=circleRad;local bM=20;local bN=20;local bO=getRelativePitch(velocity)local bP=getRelativeYaw(velocity)local bQ=-bP/bN*bt;local bR=bO/bM*bt;local R=centerX+bQ;local S=centerY+bR;local distance=math.sqrt(bQ^2+bR^2)if distance<bt then a0[#a0+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',R,S)else local bs=math.atan(bR,bQ)local bS=centerX+bt*math.cos(bs)local bT=centerY+bt*math.sin(bs)a0[#a0+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',bS,bT)end end end;function DrawWarnings(a0)a0[#a0+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)a0[#a0+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then a0[#a0+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]a0[#a0+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]a0[#a0+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local bU=960;local bV=860;local bW=900;local bX=930;local bY=225;local bZ=150;local b_=960;if l()==1 then bV=135;bW=155;bX=175;bY=115;bZ=95 end;if BrakeIsOn then a0[#a0+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],bU,bV)end;if GyroIsOn then a0[#a0+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],bU,b_)end;if gearExtended then if hasGear then a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],bU,bW)else a0[#a0+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],bU,bW)end;a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],bU,bX,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],bU,bY,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],bU,bY,AutopilotStatus)elseif FollowMode then a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],bU,bY)elseif AltitudeHold then if AutoTakeoff then a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],bU,bY,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then a0[#a0+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],bU,bY+50)end else a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],bU,bY,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then a0[#a0+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],bU,bY)else a0[#a0+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],bU,bY)end end;if TurnBurn then a0[#a0+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],bU,bZ)end;if VectorToTarget then a0[#a0+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],bU,bZ,VectorStatus)end;a0[#a0+1]="</g>"end;function DisplayOrbit(a0)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and displayOrbit then local c0=75;local c1=0;local c2=250;local c3=4;c1=c1+c3;local c4=15;local R=c0+c2+c0/2+c3;local S=c1+c2/2+5+c3;local c5,c6,c7,c8;c5=c2/4;c8=0;a0[#a0+1]=[[<g class="pbright txtorb txtmid">]]a0[#a0+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',c2+c0*2,c2+c1,c3,c3)if orbit.periapsis~=nil and orbit.apoapsis~=nil then c7=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(c5*2)c6=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/c7*(1-orbit.eccentricity)c8=c5-orbit.periapsis.altitude/c7-planet.radius/c7;local c9=""if orbit.periapsis.altitude<=0 then c9='redout'end;a0[#a0+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],c9,c0+c2/2+c8+c3,c1+c2/2+c3,c5,c6)a0[#a0+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',c0+c2/2+c3,c1+c2/2+c3,planet.radius/c7)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then a0[#a0+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],R-35,S-5,c0+c2/2+c5+c8,S-5)a0[#a0+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],R,S)S=S+c4;a0[#a0+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getDistanceDisplayString(orbit.apoapsis.altitude))S=S+c4;a0[#a0+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,FormatTimeString(orbit.timeToApoapsis))S=S+c4;a0[#a0+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getSpeedDisplayString(orbit.apoapsis.speed))end;S=c1+c2/2+5+c3;R=c0-c0/2+10+c3;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then a0[#a0+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],R+35,S-5,c0+c2/2-c5+c8,S-5)a0[#a0+1]=b([[<text x="%f" y="%f">Periapsis</text>]],R,S)S=S+c4;a0[#a0+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getDistanceDisplayString(orbit.periapsis.altitude))S=S+c4;a0[#a0+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,FormatTimeString(orbit.timeToPeriapsis))S=S+c4;a0[#a0+1]=b([[<text x="%f" y="%f">%s</text>]],R,S,getSpeedDisplayString(orbit.periapsis.speed))end;a0[#a0+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],c0+c2/2+c3,20+c3,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local ca=orbit.timeToApoapsis/orbit.period*2*math.pi;local cb=c5*math.cos(ca)local cc=c6*math.sin(ca)a0[#a0+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',c0+c2/2+cb+c8+c3,c1+c2/2+cc+c3)end;a0[#a0+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000}}}end;atlas=Atlas()for A,B in pairs(atlas[0])do if r==nil or B.center.x<r then r=B.center.x end;if s==nil or B.center.x>s then s=B.center.x end;if t==nil or B.center.y<t then t=B.center.y end;if u==nil or B.center.y>u then u=B.center.y end end;GalaxyMapHTML=""local cd=1.1*(s-r)/1920;local ce=1.4*(u-t)/1080;for A,B in pairs(atlas[0])do local R=960+B.center.x/cd;local S=540+B.center.y/ce;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..R..'" cy="'..S..'" r="'..B.radius/cd*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(B.name,"Moon")and not string.match(B.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..R.."' y='"..S+B.radius/cd*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..B.name.."</text>"end end;local bb=vec3(core.getConstructWorldPos())local R=960+bb.x/cd;local S=540+bb.y/ce;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..R..'" cy="'..S..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..R.."' y='"..S-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cd;MapYRatio=ce;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bb=vec3(core.getConstructWorldPos())local R=960+bb.x/cd;local S=540+bb.y/ce;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((R-80)/19.20,(S-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cf(cg)return type(cg)=='number'end;local function ch(cg)return type(tonumber(cg))=='number'end;local function ci(cj)return type(cj)=='table'end;local function ck(cl)return type(cl)=='string'end;local function cm(B)return ci(B)and cf(B.x and B.y and B.z)end;local function cn(co)return ci(co)and cf(co.latitude and co.longitude and co.altitude and co.bodyId and co.systemId)end;local cp=math.pi/180;local cq=180/math.pi;local epsilon=1e-10;local cr=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local cs='::pos{'..cr..','..cr..','..cr..','..cr..','..cr..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local ct=utils.clamp;local function cu(cv,cw)if cv==0 then return math.abs(cw)<1e-09 end;if cw==0 then return math.abs(cv)<1e-09 end;return math.abs(cv-cw)<math.max(math.abs(cv),math.abs(cw))*epsilon end;local function cx(cg)local C=string.gsub(string.reverse(b('%.4f',cg)),'^0*%.?','')return C==''and'0'or string.reverse(C)end;local function cy(cz)if cm(cz)then return b('{x=%.3f,y=%.3f,z=%.3f}',cz.x,cz.y,cz.z)end;if ci(cz)and not getmetatable(cz)then local cA={}local cB=next(cz)if type(cB)=='nil'or cB==1 then cA=cz else for A,B in pairs(cz)do local bo=cy(B)if type(A)=='number'then table.insert(cA,b('[%s]=%s',A,bo))else table.insert(cA,b('%s=%s',A,bo))end end end;return b('{%s}',table.concat(cA,','))end;if ck(cz)then return b("'%s'",cz:gsub("'",[[\']]))end;return tostring(cz)end;local cC={}cC.__index=cC;cC.__tostring=function(cz,cD)local cE=cD or''local cF={}for A in pairs(cz)do table.insert(cF,A)end;table.sort(cF)local cA={}for _,A in ipairs(cF)do local bo=cy(cz[A])if type(A)=='number'then table.insert(cA,b('[%s]=%s',A,bo))else table.insert(cA,b('%s=%s',A,bo))end end;if cD then return b('%s%s',cD,table.concat(cA,',\n'..cD))end;return b('{%s}',table.concat(cA,','))end;cC.__eq=function(cG,cH)return cG.planetarySystemId==cH.planetarySystemId and cG.bodyId==cH.bodyId and cu(cG.radius,cH.radius)and cu(cG.center.x,cH.center.x)and cu(cG.center.y,cH.center.y)and cu(cG.center.z,cH.center.z)and cu(cG.GM,cH.GM)end;local function cI(cJ,cK,cL,cM,cN)assert(ch(cJ),'Argument 1 (planetarySystemId) must be a number:'..type(cJ))assert(ch(cK),'Argument 2 (bodyId) must be a number:'..type(cK))assert(ch(cL),'Argument 3 (radius) must be a number:'..type(cL))assert(ci(cM),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(cM))assert(ch(cN),'Argument 5 (GM) must be a number:'..type(cN))return setmetatable({planetarySystemId=tonumber(cJ),bodyId=tonumber(cK),radius=tonumber(cL),center=vec3(cM),GM=tonumber(cN)},cC)end;local cO={}cO.__index=cO;cO.__tostring=function(cP)return b('::pos{%d,%d,%s,%s,%s}',cP.systemId,cP.bodyId,cx(cP.latitude*cq),cx(cP.longitude*cq),cx(cP.altitude))end;cO.__eq=function(cG,cH)return cG.bodyId==cH.bodyId and cG.systemId==cH.systemId and cu(cG.latitude,cH.latitude)and cu(cG.altitude,cH.altitude)and(cu(cG.longitude,cH.longitude)or cu(cG.latitude,math.pi/2)or cu(cG.latitude,-math.pi/2))end;local function cQ(cR,cK,cS,cT,a_)local cJ=cR;if ck(cR)and not cT and not a_ and not cK and not cS then cJ,cK,cS,cT,a_=string.match(cR,cs)assert(cJ,'Argument 1 (position string) is malformed.')else assert(ch(cJ),'Argument 1 (systemId) must be a number:'..type(cJ))assert(ch(cK),'Argument 2 (bodyId) must be a number:'..type(cK))assert(ch(cS),'Argument 3 (latitude) must be in degrees:'..type(cS))assert(ch(cT),'Argument 4 (longitude) must be in degrees:'..type(cT))assert(ch(a_),'Argument 5 (altitude) must be in meters:'..type(a_))end;cJ=tonumber(cJ)cK=tonumber(cK)cS=tonumber(cS)cT=tonumber(cT)a_=tonumber(a_)if cK==0 then return setmetatable({latitude=cS,longitude=cT,altitude=a_,bodyId=cK,systemId=cJ},cO)end;return setmetatable({latitude=cp*ct(cS,-90,90),longitude=cp*(cT%360),altitude=a_,bodyId=cK,systemId=cJ},cO)end;local cU={}cU.__index=cU;cU.__tostring=function(cz,cD)local cE=cD and cD..'  'local cV={}local cF={}for A in pairs(cz)do table.insert(cF,A)end;table.sort(cF)for _,cW in ipairs(cF)do bdy=cz[cW]local cX=cC.__tostring(bdy,cE)if cD then table.insert(cV,b('[%s]={\n%s\n%s}',cW,cX,cD))else table.insert(cV,b('  [%s]=%s',cW,cX))end end;if cD then return b('\n%s%s%s',cD,table.concat(cV,',\n'..cD),cD)end;return b('{\n%s\n}',table.concat(cV,',\n'))end;local function cY(cZ)local atlas={}local pid;for _,B in pairs(cZ)do local X=B.planetarySystemId;if type(X)~='number'then error('Invalid planetary system ID: '..tostring(X))elseif pid and X~=pid then error('Mismatch planetary system IDs: '..X..' and '..pid)end;local c_=B.bodyId;if type(c_)~='number'then error('Invalid body ID: '..tostring(c_))elseif atlas[c_]then error('Duplicate body ID: '..tostring(c_))end;setmetatable(B.center,getmetatable(vec3.unit_x))atlas[c_]=setmetatable(B,cC)pid=X end;return setmetatable(atlas,cU)end;PlanetaryReference={}local function d0(cZ)return setmetatable({galaxyAtlas=cZ or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cj,i)if type(i)=='number'then local system=cj.galaxyAtlas[i]return cY(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(cz)return function(cj,A)local d1,nv=next(cj,A)return d1,nv and cY(nv)end,cz.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(cz)local d2={}for _,d3 in pairs(cz or{})do local d4=d3:getPlanetarySystemId()local d5=cU.__tostring(d3,'    ')table.insert(d2,b('  [%s]={%s\n  }',d4,d5))end;return b('{\n%s\n}\n',table.concat(d2,',\n'))end;PlanetaryReference.BodyParameters=cI;PlanetaryReference.MapPosition=cQ;PlanetaryReference.PlanetarySystem=cY;function PlanetaryReference.createBodyParameters(d6,cK,d7,d8,d9,da,db)assert(ch(d6),'Argument 1 (planetarySystemId) must be a number:'..type(d6))assert(ch(cK),'Argument 2 (bodyId) must be a number:'..type(cK))assert(ch(d7),'Argument 3 (surfaceArea) must be a number:'..type(d7))assert(ci(d8),'Argument 4 (aPosition) must be an array or vec3:'..type(d8))assert(ci(d9),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(d9))assert(ch(da),'Argument 6 (altitude) must be in meters:'..type(da))assert(ch(db),'Argument 7 (gravityAtPosition) must be number:'..type(db))local cL=math.sqrt(d7/4/math.pi)local distance=cL+da;local dc=vec3(d8)+distance*vec3(d9)local cN=db*distance*distance;return cI(d6,cK,cL,dc,cN)end;PlanetaryReference.isMapPosition=cn;function PlanetaryReference:getPlanetarySystem(cR)local d6=cR;if cn(cR)then d6=cR.systemId end;if type(d6)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=cU then system=cY(system)end;return system end end end;function cU:castIntersections(dd,de,df,dg)local df=df or function(dh)return 1.05*dh.radius end;local di={}if dg then for _,i in ipairs(dg)do di[i]=self[i]end else dg={}for A,dh in pairs(self)do table.insert(dg,A)di[A]=dh end end;local function dj(dk,dl)local dm=di[dk].center-dd;local dn=di[dl].center-dd;return dm:len()<dn:len()end;table.sort(dg,dj)local dp=de:normalize()for i,X in ipairs(dg)do local dh=di[X]local dq=dh.center-dd;local cL=df(dh)local dr=dq:dot(dp)local ds=dr^2-(dq:len2()-cL^2)if ds>=0 then local dt=math.sqrt(ds)local du=dr+dt;local dv=dr-dt;if dv>0 then return dh,du,dv elseif du>0 then return dh,du,nil end end end;return nil,nil,nil end;function cU:closestBody(dw)assert(type(dw)=='table','Invalid coordinates.')local dx,dh;local dy=vec3(dw)for _,dz in pairs(self)do local dA=(dz.center-dy):len2()if not dh or dA<dx then dh=dz;dx=dA end end;return dh end;function cU:convertToBodyIdAndWorldCoordinates(cR)local dB=cR;if ck(cR)then dB=cQ(cR)end;if dB.bodyId==0 then return 0,vec3(dB.latitude,dB.longitude,dB.altitude)end;local dz=self:getBodyParameters(dB)if dz then return dB.bodyId,dz:convertToWorldCoordinates(dB)end end;function cU:getBodyParameters(cR)local cK=cR;if cn(cR)then cK=cR.bodyId end;assert(ch(cK),'Argument 1 (bodyId) must be a number:'..type(cK))return self[cK]end;function cU:getPlanetarySystemId()local A,B=next(self)return B and B.planetarySystemId end;function cC:convertToMapPosition(cM)assert(ci(cM),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(cM))local dC=vec3(cM)if self.bodyId==0 then return setmetatable({latitude=dC.x,longitude=dC.y,altitude=dC.z,bodyId=0,systemId=self.planetarySystemId},cO)end;local dD=dC-self.center;local distance=dD:len()local a_=distance-self.radius;local cS=0;local cT=0;if not cu(distance,0)then local dE=math.atan(dD.y,dD.x)cT=dE>=0 and dE or 2*math.pi+dE;cS=math.pi/2-math.acos(dD.z/distance)end;return setmetatable({latitude=cS,longitude=cT,altitude=a_,bodyId=self.bodyId,systemId=self.planetarySystemId},cO)end;function cC:convertToWorldCoordinates(cR)local dB=ck(cR)and cQ(cR)or cR;if dB.bodyId==0 then return vec3(dB.latitude,dB.longitude,dB.altitude)end;assert(cn(dB),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(dB.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(dB.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local dF=math.cos(dB.latitude)return self.center+(self.radius+dB.altitude)*vec3(dF*math.cos(dB.longitude),dF*math.sin(dB.longitude),math.sin(dB.latitude))end;function cC:getAltitude(cM)return(vec3(cM)-self.center):len()-self.radius end;function cC:getDistance(cM)return(vec3(cM)-self.center):len()end;function cC:getGravity(cM)local dG=self.center-vec3(cM)local dH=dG:len2()return self.GM/dH*dG/math.sqrt(dH)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return d0(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function ck(cl)return type(cl)=='string'end;local function ci(cj)return type(cj)=='table'end;local function cu(cv,cw)if cv==0 then return math.abs(cw)<1e-09 end;if cw==0 then return math.abs(cv)<1e-09 end;return math.abs(cv-cw)<math.max(math.abs(cv),math.abs(cw))*epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(a_)assert(self.body)local distance=a_+self.body.radius;if not cu(distance,0)then local orbit=math.sqrt(self.body.GM/distance)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(cR,velocity)assert(self.body)assert(ci(cR)or ck(cR))assert(ci(velocity))local bb=(ck(cR)or PlanetRef.isMapPosition(cR))and self.body:convertToWorldCoordinates(cR)or vec3(cR)local B=vec3(velocity)local dI=bb-self.body.center;local dn=B:len2()local dJ=dI:len()local dK=self.body.GM;local dL=((dn-dK/dJ)*dI-dI:dot(B)*B)/dK;local cv=dK/(2*dK/dJ-dn)local dM=dL:len()local dp=dL:normalize()local dN=cv*(1-dM)local dO=cv*(1+dM)local dP=dN*dp+self.body.center;local dQ=dM<=1 and-dO*dp+self.body.center or nil;local dR=math.sqrt(cv*dK*(1-dM*dM))local dS=dQ and 2*math.pi*math.sqrt(cv^3/dK)local dT=math.acos(dL:dot(dI)/(dM*dJ))if dI:dot(B)<0 then dT=-(dT-2*math.pi)end;local dU=math.acos((math.cos(dT)+dM)/(1+dM*math.cos(dT)))local dV=dU;if dV<0 then dV=dV+2*math.pi end;local dW=dV-dM*math.sin(dV)local dX=0;local dY=0;local dZ=0;if dS~=nil then dX=dW/(2*math.pi/dS)dY=dS-dX;dZ=dY+dS/2;if dT-math.pi>0 then dY=dX;dZ=dY+dS/2 end;if dZ>dS then dZ=dZ-dS end end;return{periapsis={position=dP,speed=dR/dN,circularOrbitSpeed=math.sqrt(dK/dN),altitude=dN-self.body.radius},apoapsis=dQ and{position=dQ,speed=dR/dO,circularOrbitSpeed=math.sqrt(dK/dO),altitude=dO-self.body.radius},currentVelocity=B,currentPosition=bb,eccentricity=dM,period=dS,eccentricAnomaly=dU,meanAnomaly=dW,timeToPeriapsis=dY,timeToApoapsis=dZ}end;local function d_(e0)local dz=PlanetRef.BodyParameters(e0.planetarySystemId,e0.bodyId,e0.radius,e0.center,e0.GM)return setmetatable({body=dz},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return d_(...)end})end;function Kinematics()local Kinematic={}local e1=30000000/3600;local e2=e1*e1;local e3=100;local function e4(B)return 1/math.sqrt(1-B*B/e2)end;function Kinematic.computeAccelerationTime(e5,e6,e7)local e8=e1*math.asin(e5/e1)return(e1*math.asin(e7/e1)-e8)/e6 end;function Kinematic.computeDistanceAndTime(e5,e7,e9,ea,eb,ec)eb=eb or 0;ec=ec or 0;local ed=e4(e5)local ee=e5<=e7;local ef=ea*(ee and 1 or-1)/e9;local eg=-ec/e9;local eh=ef+eg;if ee and eh<=0 or not ee and eh>=0 then return-1,-1 end;local ei,ej=0,0;if ef~=0 and eb>0 then local e8=math.asin(e5/e1)local ek=math.pi*(ef/2+eg)local el=ef*eb;local em=e1*math.pi;local B=function(cj)local al=(ek*cj-el*math.sin(math.pi*cj/2/eb)+em*e8)/em;local en=math.tan(al)return e1*en/math.sqrt(en*en+1)end;local eo=ee and function(cl)return cl>=e7 end or function(cl)return cl<=e7 end;ej=2*eb;if eo(B(ej))then local ep=0;while math.abs(ej-ep)>0.5 do local cj=(ej+ep)/2;if eo(B(cj))then ej=cj else ep=cj end end end;local eq=e5;local er=ej/e3;for es=1,e3 do local speed=B(es*er)ei=ei+(speed+eq)*er/2;eq=speed end;if ej<2*eb then return ei,ej end;e5=eq end;local e8=e1*math.asin(e5/e1)local et=(e1*math.asin(e7/e1)-e8)/eh;local eu=e2*math.cos(e8/e1)/eh;local distance=eu-e2*math.cos((eh*et+e8)/e1)/eh;return distance+ei,et+ej end;function Kinematic.computeTravelTime(e5,e6,distance)if distance==0 then return 0 end;if e6>0 then local e8=e1*math.asin(e5/e1)local eu=e2*math.cos(e8/e1)/e6;return(e1*math.acos(e6*(eu-distance)/e2)-e8)/e6 end;assert(e5>0,'Acceleration and initial speed are both zero.')return distance/e5 end;function Kinematic.lorentz(B)return e4(B)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()InAtmo=f()>0;function getDistanceDisplayString(distance)local ev=distance>100000;local C=""if ev then C=round(distance/1000/200,1).." SU"elseif distance<1000 then C=round(distance,1).." M"else C=round(distance/1000,1).." KM"end;return C end;function getDistanceDisplayString2(distance)local ev=distance>100000;local C=""if ev then C=round(distance/1000/200,2).." SU"elseif distance<1000 then C=round(distance,2).." M"else C=round(distance/1000,2).." KM"end;return C end;function getSpeedDisplayString(speed)return a(round(speed*3.6,0)+0.5).." km/h"end;function FormatTimeString(ew)local ex=a(ew/3600)local ey=a(ew/60%60)local ew=a(ew%60)if ew<0 or ex<0 or ey<0 then return"0s"end;if ex>0 then return ex.."h "..ey.."m "..ew.."s"elseif ey>0 then return ey.."m "..ew.."s"else return ew.."s"end end;function getMagnitudeInDirection(aR,de)aR=vec3(aR)de=vec3(de):normalize()local C=aR*de;return C.x+C.y+C.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local ez=0;for A,B in pairs(atlas[0])do ez=ez+1;if ez==AutopilotTargetIndex then if B.center then AutopilotTargetName=B.name;AutopilotTargetPlanet=galaxyReference[0][A]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;system.addDataToWidget(widgetMaxMassText,widgetMaxMass)system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=B end end end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>tablelength(atlas[0])then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=tablelength(atlas[0])end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eA=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return eA end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local eB,eC=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eD;if not TurnBurn then _,eD=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,eD=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local eE=0;local eF=0;if brakeDistance+eB<AutopilotDistance then eE=AutopilotDistance-(brakeDistance+eB)eF=Kinematic.computeTravelTime(8333.0556,0,eE)else local eG=(AutopilotDistance-brakeDistance)/eB;eB=AutopilotDistance-brakeDistance;eC=eC*eG end;if AutopilotBraking then return eD elseif AutopilotCruising then return eF+eD else return eC+brakeTime+eF end end;function GetAutopilotBrakeDistanceAndTime(speed)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(speed)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(speed,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local eH=Nav.axisCommandManager:getAxisCommandType(0)local ba="TRAVEL"if eH==1 then ba="CRUISE"end;if Autopilot then ba="AUTOPILOT"end;return ba end;function round(cr,eI)local eJ=10^(eI or 0)return a(cr*eJ+0.5)/eJ end;function tablelength(eK)local ez=0;for _ in pairs(eK)do ez=ez+1 end;return ez end;function BeginProfile(eL)ProfileTimeStart=system.getTime()end;function EndProfile(eL)local eM=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eM;ProfileCount=ProfileCount+1;if eM>ProfileTimeMax then ProfileTimeMax=eM end;if eM<ProfileTimeMin then ProfileTimeMin=eM end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eN=ProfileTimeSum;local eO=ProfileTimeSum/ProfileCount;local eP=ProfileTimeMin;local eQ=ProfileTimeMax;local eR=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eN,eO,eP,eQ,eR))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local eS=unit.getAtmosphereDensity()if door and(eS>0 or eS==0 and core_altitude<10000)then for _,B in pairs(door)do B.activate()end end;if forcefield and(eS>0 or eS==0 and core_altitude<10000)then for _,B in pairs(forcefield)do B.activate()end end;if dbHud then if not wipedDatabank then for A,B in pairs(AutoVariables)do dbHud.setStringValue(B,json.encode(_G[B]))end;for A,B in pairs(SaveableVariables)do dbHud.setStringValue(B,json.encode(_G[B]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(eT)if eT=="oneSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()distance=AutopilotDistance;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)maxBrakeDistance,maxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(brakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(brakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(maxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(maxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not InAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=true elseif unit.getAtmosphereDensity()==0 and InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)InAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local eU;eU=radar_1.getData():find('identifiedConstructs":%[%]')if hasSpaceRadar and EmergencyWarp then local X,distance=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if X~=nil and X~=""then if math.floor(distance)<EmergencyWarpDistance and notTriedEmergencyWarp then emergencyWarp=true;notTriedEmergencyWarp=false end end end;if eU==nil and perisPanelID==nil then peris=1;ToggleRadarPanel()end;if eU~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local eV=radar_1.getEntries()radarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#eV)local eW={}for A,B in pairs(eV)do if radar_1.hasMatchingTransponder(B)==1 then eW[#eW+1]=B end end;if#eW>0 then local S=15;radarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],radarMessage,S)for A,B in pairs(eW)do S=S+20;radarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],radarMessage,S,radar_1.getConstructName(B))end end elseif radar_1 then local eX;eX=radar_1.getData():find('worksInEnvironment":false')if eX then radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else radarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then peris=0;ToggleRadarPanel()end end;if warpdrive~=nil then if emergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then msgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"msgTimer=5;unit.setTimer("emergencyWarpTick",5)emergencyWarp=false else msgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;emergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end;local a0={}local ba=GetFlightStyle()DrawOdometer(a0,totalDistanceTrip,totalDistanceTravelled,ba,flightTime)checkDamage(a0)LastOdometerOutput=table.concat(a0,"")collectgarbage("collect")elseif eT=="reEmergencyWarp"then notTriedEmergencyWarp=true;emergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif eT=="msgTick"then local a0={}DisplayMessage(a0,"empty")msgText="empty"unit.stopTimer("msgTick")msgTimer=3 elseif eT=="emergencyWarpTick"then msgText="EMERGENCY WARP ACTIVATED"msgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;unit.stopTimer("emergencyWarpTick")elseif eT=="animateTick"then Animated=true;Animating=false;simulatedX=0;simulatedY=0;unit.stopTimer("animateTick")elseif eT=="apTick"then local l=Nav.control.isRemoteControlled;yawInput2=0;rollInput2=0;pitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local eY=system.getMouseDeltaX()local eZ=system.getMouseDeltaY()targetGroundAltitude=Nav:getTargetGroundAltitude()local e_=0.002;local f0=velMag>8334;if not f0 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=f0;if antigrav and antigrav.getState()==1 and not desiredBaseAltitude then desiredBaseAltitude=antigrav.getBaseAltitude()end;if BrakeIsOn then brakeInput=1 else brakeInput=0 end;core_altitude=core.getAltitude()if core_altitude==0 then core_altitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local a0={}HUDPrologue(a0)if showHud then updateHud(a0)else DisplayOrbit(a0)DrawWarnings(a0)end;HUDEpilogue(a0)a0[#a0+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if msgText~="empty"then DisplayMessage(a0,msgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(a0)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then simulatedX=screen_1.getMouseX()*2560;simulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(a0)if screen_1.getMouseState()==1 then CheckButtons()end;a0[#a0+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then simulatedX=simulatedX+eY;simulatedY=simulatedY+eZ end;SetButtonContains()DrawButtons(a0)if not Animating and not Animated then local f1=table.concat(a0,"")a0={}a0[#a0+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"a0[#a0+1]=GalaxyMapHTML;a0[#a0+1]=f1;a0[#a0+1]="</body>"Animating=true;a0[#a0+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(a0,"")system.setScreen(content)elseif Animated then local f1=table.concat(a0,"")a0={}a0[#a0+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"a0[#a0+1]=GalaxyMapHTML;a0[#a0+1]=f1;a0[#a0+1]="</body>"end;if not Animating then a0[#a0+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end else CheckButtons()simulatedX=0;simulatedY=0 end else simulatedX=simulatedX+eY;simulatedY=simulatedY+eZ;distance=math.sqrt(simulatedX*simulatedX+simulatedY*simulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if simulatedX>0 and simulatedX>DeadZone then yawInput2=yawInput2-(simulatedX-DeadZone)*MouseXSensitivity elseif simulatedX<0 and simulatedX<DeadZone*-1 then yawInput2=yawInput2-(simulatedX+DeadZone)*MouseXSensitivity else yawInput2=0 end;if simulatedY>0 and simulatedY>DeadZone then pitchInput2=pitchInput2-(simulatedY-DeadZone)*MouseYSensitivity elseif simulatedY<0 and simulatedY<DeadZone*-1 then pitchInput2=pitchInput2-(simulatedY+DeadZone)*MouseYSensitivity else pitchInput2=0 end elseif userControlScheme=="Mouse"then simulatedX=0;simulatedY=0;pitchInput2=(-utils.smoothstep(eZ,-100,100)+0.5)*2*mousePitchFactor;yawInput2=(-utils.smoothstep(eY,-100,100)+0.5)*2*mouseYawFactor else simulatedX=0;simulatedY=0 end;CheckButtons()if distance>DeadZone then DrawCursorLine(a0)end else SetButtonContains()DrawButtons(a0)end;a0[#a0+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],simulatedX,simulatedY)end;a0[#a0+1]=[[</svg></body>]]content=table.concat(a0,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if AutoBrake and AutopilotTargetName~="None"and(vec3(core.getConstructWorldPos())-vec3(AutopilotTargetPlanet.center)):len()<=brakeDistance then brakeInput=1;if planet.name==AutopilotTargetPlanet.name and orbit.apoapsis~=nil and orbit.eccentricity<1 then brakeInput=0;AutoBrake=false end end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local brakeDistance,brakeTime;if not TurnBurn then brakeDistance,brakeTime=GetAutopilotBrakeDistanceAndTime(velMag)else brakeDistance,brakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)end;brakeDistance=brakeDistance;brakeTime=brakeTime;local f2=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local f3=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local f4=getMagnitudeInDirection(f3,AutopilotShipUp)local f5=getMagnitudeInDirection(f3,AutopilotShipRight)local f6=-f5*AutopilotDistance*velMag*e_;local f7=-f4*AutopilotDistance*velMag*e_;f2=AutopilotTargetCoords+-f6*vec3(AutopilotShipRight)+-f7*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(f2)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local f8=true;local f9=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(f9)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then f8=AlignToWorldVector((f2-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then f8=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not f8 then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;brakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(a0,"Autopilot completed, orbit established")brakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=brakeDistance then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if f8 then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif f8 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fa=0;local bb=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fb=bb-vec3(core.getConstructWorldPos())local fc=vec3(fb):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fd=vec3(fb):project_on(vec3(core.getConstructWorldOrientationRight())):len()local distance=math.sqrt(fc*fc+fd*fd)AlignToWorldVector(fb:normalize())local fe=40;local ff=distance<fe;local fg=100;local fh=utils.clamp((distance-fe)/2,10,fg)pitchInput2=0;local f8=math.abs(yawInput2)<0.1;if f8 and velMag<fh and not ff then BrakeIsOn=false;fa=-10 else BrakeIsOn=true;fa=0 end;local b1=vec3(core.getConstructWorldOrientationForward())local b2=vec3(core.getConstructWorldOrientationRight())local b0=vec3(core.getWorldVertical())local aj=getPitch(b0,b1,b2)local fi=1.0;if math.abs(fa-aj)>fi then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fa-aj)local fj=pitchPID:get()pitchInput2=fj end end;local bq=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then autoRoll=true;if Reentry then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then Reentry=false end end;local a_=core_altitude;local fk=HoldAltitude-a_;local fl=500+velMag;local fa=(utils.smoothstep(fk,-fl,fl)-0.5)*2*MaxPitch;if not AltitudeHold then fa=0 end;local fm=pitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local aT=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(aT)local fn=aT:len()-aT:project_on(bq):len()local M=json.decode(unit.getData()).maxBrake;local br=velocity.x*bq.x+velocity.y*bq.y+velocity.z*bq.z;local fo=velocity:len()-math.abs(br)local fp=vec3(core.getWorldAirFrictionAcceleration())if M~=nil then LastMaxBrake=M;brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fo,0,core.getConstructMass(),0,0,M+(fp:len()-fp:project_on(bq):len())*core.getConstructMass())else brakeDistance,brakeTime=Kinematic.computeDistanceAndTime(fo,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if fn<=brakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and fn>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=fn end;pitchInput2=fm;local fq=-1;if BrakeLanding then fa=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)if vBooster then fq=vBooster.distance()elseif hover then fq=hover.distance()end;local br=velocity.x*bq.x+velocity.y*bq.y+velocity.z*bq.z;if fq>-1 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;gearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)upAmount=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and velocity:normalize():dot(-bq)<0.99 then BrakeIsOn=true elseif br<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fa<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;local b1=vec3(core.getConstructWorldOrientationForward())local b2=vec3(core.getConstructWorldOrientationRight())local b0=vec3(core.getWorldVertical())local aj=getPitch(b0,b1,b2)local fi=0.1;if math.abs(fa-aj)>fi then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fa-aj)local fj=pitchPID:get()pitchInput2=pitchInput2+fj end end;LastEccentricity=orbit.eccentricity;if antigrav and core_altitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local fr=core_altitude-antigrav.getBaseAltitude()if core_altitude>800 and fr<-200 then desiredBaseAltitude=math.max(core_altitude+100,1000)elseif fr>200 then desiredBaseAltitude=core_altitude-100 end else local fr=AntigravTargetAltitude-core_altitude;local velocity=vec3(core.getWorldVelocity())local bq=vec3(core.getWorldVertical())*-1;local br=velocity.x*bq.x+velocity.y*bq.y+velocity.z*bq.z;local fs=290;local ft=-290;if unit.getClosestPlanetInfluence()>0.3 then ft=-190 end;ft=math.min(math.max(ft,-math.abs(fr)/20.0),-10)fs=math.max(math.min(fs,math.abs(fr)/20.0),10)if br<ft then desiredBaseAltitude=core_altitude+100 elseif br>fs then desiredBaseAltitude=math.max(core_altitude-100,1000)elseif math.abs(fr)>150 or math.abs(br)>15 then if math.abs(br)>10 then desiredBaseAltitude=core_altitude+math.max(math.min(fr-br/10.0,100),-100)else desiredBaseAltitude=core_altitude+math.max(math.min(fr,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(br)<10 and math.abs(fr)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local fu=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)fu=math.max(fu,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local fv=pitchInput+pitchInput2+system.getControlDeviceForwardInput()local fw=rollInput+rollInput2+system.getControlDeviceYawInput()local fx=yawInput+yawInput2-system.getControlDeviceLeftRightInput()local fy=brakeInput;local fz=vec3(core.getWorldVertical())local fA=vec3(core.getConstructWorldOrientationUp())local fB=vec3(core.getConstructWorldOrientationForward())local fC=vec3(core.getConstructWorldOrientationRight())local fD=vec3(core.getWorldVelocity())local fE=vec3(core.getWorldVelocity()):normalize()local fF=getRoll(fz,fB,fC)local fG=math.abs(fF)local fH=utils.sign(fF)local fI=vec3(core.getWorldAngularVelocity())local fJ=fv*pitchSpeedFactor*fC+fw*rollSpeedFactor*fB+fx*yawSpeedFactor*fA;if fz:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local fK=1.0;if autoRoll==true and fG>fK and fw==0 then local fL=utils.clamp(0,fG-30,fG+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(fL-fF)local fM=rollPID:get()fJ=fJ+fM*fB end;local fN=20.0;if turnAssist==true and fG>fN and fv==0 and fx==0 then local fO=turnAssistFactor*0.1;local fP=turnAssistFactor*0.025;local fQ=(fG-fN)/(180-fN)*180;local fR=0;if fQ<90 then fR=fQ/90 elseif fQ<180 then fR=(180-fQ)/90 end;fR=fR*fR;local fS=-fH*fP*(1.0-fR)local fT=fO*fR;fJ=fJ+fT*fC+fS*fA end end;local fU=1;local fV=0;local fW=1;local fX=fu*(fJ-fI)local fY=vec3(core.getWorldAirFrictionAngularAcceleration())fX=fX-fY;Nav:setEngineTorqueCommand('torque',fX,fU,'airfoil','','',fW)local fZ=-fy*(brakeSpeedFactor*fD+brakeFlatFactor*fE)Nav:setEngineForceCommand('brake',fZ)local f_=''local g0=vec3()local g1=false;local g2='thrust analog longitudinal'local g3=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if g3==axisCommandType.byThrottle then local g4=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(g2,axisCommandId.longitudinal)Nav:setEngineForceCommand(g2,g4,fU)elseif g3==axisCommandType.byTargetSpeed then local g4=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)f_=f_..' , '..g2;g0=g0+g4;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then g1=true end end;local g5='thrust analog lateral'local g6=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if g6==axisCommandType.byThrottle then local g7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(g5,axisCommandId.lateral)Nav:setEngineForceCommand(g5,g7,fU)elseif g6==axisCommandType.byTargetSpeed then local g8=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)f_=f_..' , '..g5;g0=g0+g8 end;local g9='thrust analog vertical'local ga=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ga==axisCommandType.byThrottle then local gb=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(g9,axisCommandId.vertical)if upAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(g9,gb,fU,'airfoil','ground','',fW)else Nav:setEngineForceCommand(g9,vec3(),fU)end elseif ga==axisCommandType.byTargetSpeed then local gc=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)f_=f_..' , '..g9;g0=g0+gc end;if g0:len()>constants.epsilon then if brakeInput~=0 or g1 or math.abs(fE:dot(fB))<0.95 then f_=f_..', brake'end;Nav:setEngineForceCommand(f_,g0,fV,'','','',fW)end;Nav:setBoosterCommand('rocket_engine')speed=vec3(core.getVelocity()):len()cc_speed=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if Nav.axisCommandManager:getAxisCommandType(0)==1 and speed*3.6>cc_speed then unit.setEngineThrust('rocket_engine',0)elseif isboosting then unit.setEngineThrust('rocket_engine',1)end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,C=coroutine.resume(beginSetup)if C then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gd)if gd=="gear"then gearExtended=not gearExtended;if gearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or core_altitude<ReentryAltitude)then StrongBrakes=planet:getGravity(planet.center+vec3(0,0,1)*planet.radius):len()*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then msgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;gearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif ReentryMode and unit.getAtmosphereDensity()<=0 and unit.getClosestPlanetInfluence()>0 and core_altitude>ReentryAltitude then Reentry=true;gearExtended=false;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;msgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(0)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gd=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gd=="forward"then pitchInput=pitchInput-1 elseif gd=="backward"then pitchInput=pitchInput+1 elseif gd=="left"then rollInput=rollInput-1 elseif gd=="right"then rollInput=rollInput+1 elseif gd=="yawright"then yawInput=yawInput-1 elseif gd=="yawleft"then yawInput=yawInput+1 elseif gd=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gd=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gd=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gd=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gd=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gd=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gd=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif gd=="option2"then DecrementAutopilotTargetIndex()toggleView=false elseif gd=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;toggleView=false;ToggleWidgets()elseif gd=="option4"then ToggleAutopilot()toggleView=false elseif gd=="option5"then ToggleTurnBurn()toggleView=false elseif gd=="option6"then ToggleAltitudeHold()toggleView=false elseif gd=="option7"then wipeSaveVariables()toggleView=false elseif gd=="option8"then ToggleFollowMode()toggleView=false elseif gd=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;toggleView=false elseif gd=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gd=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gd=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gd=="booster"then isboosting=not isboosting;if isboosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gd=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gd=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gd=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gd=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gd=="warp"then if warpdrive~=nil then if not emergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then msgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")emergencyWarp=false;msgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gd)if gd=="forward"then pitchInput=pitchInput+1 elseif gd=="backward"then pitchInput=pitchInput-1 elseif gd=="left"then rollInput=rollInput+1 elseif gd=="right"then rollInput=rollInput-1 elseif gd=="yawright"then yawInput=yawInput+1 elseif gd=="yawleft"then yawInput=yawInput-1 elseif gd=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gd=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gd=="up"then upAmount=upAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gd=="down"then upAmount=upAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)elseif gd=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gd=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;toggleView=false elseif gd=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;simulatedX=0;simulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gd=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gd=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if toggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else toggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gd)if gd=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gd=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gd=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gd=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;toggleView=true;function DisplayMessage(a0,ge)if ge~="empty"then a0[#a0+1]=[[<text class="msg" x="50%%" y="310" >]]for gf in string.gmatch(ge,"([^\n]+)")do a0[#a0+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gf)end;a0[#a0+1]=[[</text>]]end;if msgTimer~=0 then unit.setTimer("msgTick",msgTimer)msgTimer=0 end end;function updateDistance()local H=system.getTime()local velocity=vec3(core.getWorldVelocity())local b8=vec3(velocity):len()local gg=H-lastTravelTime;if b8>1.38889 then b8=b8/1000;local gh=b8*(H-lastTravelTime)totalDistanceTravelled=totalDistanceTravelled+gh;totalDistanceTrip=totalDistanceTrip+gh end;flightTime=flightTime+gg;totalFlightTime=totalFlightTime+gg;lastTravelTime=H end;function updateMass()local gi=0;for A in pairs(elementsID)do gi=gi+core.getElementMassById(elementsID[A])end;return gi end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
