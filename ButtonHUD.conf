name: Stop no dont use this its broken

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    dbHud:
        class: databank


handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})

                -- Written by Dimencia.  Linked sources where appropriate, most have been modified.  HUD by Archeageo

                
                
                
                -- Planet Info - https://gitlab.com/JayleBreak/dualuniverse/-/tree/master/DUflightfiles/autoconf/custom with minor modifications
                function Atlas()
                    return {
                [0] = {
                  [1]={
                    GM=6930729684,
                    bodyId=1,
                    center={x=17465536.000,y=22665536.000,z=-34464.000},
                    name='Madis',
                    planetarySystemId=0,
                    radius=44300
                  },
                  [2]={
                    GM=157470826617,
                    bodyId=2,
                    center={x=-8.000,y=-8.000,z=-126303.000},
                    name='Alioth',
                    planetarySystemId=0,
                    radius=126068
                  },
                  [3]={
                    GM=11776905000,
                    bodyId=3,
                    center={x=29165536.000,y=10865536.000,z=65536.000},
                    name='Thades',
                    planetarySystemId=0,
                    radius=49000
                  },
                  [4]={
                    GM=14893847582,
                    bodyId=4,
                    center={x=-13234464.000,y=55765536.000,z=465536.000},
                    name='Talemai',
                    planetarySystemId=0,
                    radius=57450
                  },
                  [5]={
                    GM=16951680000,
                    bodyId=5,
                    center={x=-43534464.000,y=22565536.000,z=-48934464.000},
                    name='Feli',
                    planetarySystemId=0,
                    radius=60000
                  },
                  [6]={
                    GM=10502547741,
                    bodyId=6,
                    center={x=52765536.000,y=27165538.000,z=52065535.000},
                    name='Sicari',
                    planetarySystemId=0,
                    radius=51100
                  },
                  [7]={
                    GM=13033380591,
                    bodyId=7,
                    center={x=58665538.000,y=29665535.000,z=58165535.000},
                    name='Sinnen',
                    planetarySystemId=0,
                    radius=54950
                  },
                  [8]={
                    GM=18477723600,
                    bodyId=8,
                    center={x=80865538.000,y=54665536.000,z=-934463.940},
                    name='Teoma',
                    planetarySystemId=0,
                    radius=62000
                  },
                  [9]={
                    GM=18606274330,
                    bodyId=9,
                    center={x=-94134462.000,y=12765534.000,z=-3634464.000},
                    name='Jago',
                    planetarySystemId=0,
                    radius=61590
                  },
                  [10]={
                    GM=78480000,
                    bodyId=10,
                    center={x=17448118.224,y=22966846.286,z=143078.820},
                    name='Madis Moon 1',
                    planetarySystemId=0,
                    radius=10000
                  },
                  [11]={
                    GM=237402000,
                    bodyId=11,
                    center={x=17194626.000,y=22243633.880,z=-214962.810},
                    name='Madis Moon 2',
                    planetarySystemId=0,
                    radius=11000
                  },
                  [12]={
                    GM=265046609,
                    bodyId=12,
                    center={x=17520614.000,y=22184730.000,z=-309989.990},
                    name='Madis Moon 3',
                    planetarySystemId=0,
                    radius=15005
                  },
                  [21]={
                    GM=2118960000,
                    bodyId=21,
                    center={x=457933.000,y=-1509011.000,z=115524.000},
                    name='Alioth Moon 1',
                    planetarySystemId=0,
                    radius=30000
                  },
                  [22]={
                    GM=2165833514,
                    bodyId=22,
                    center={x=-1692694.000,y=729681.000,z=-411464.000},
                    name='Alioth Moon 4',
                    planetarySystemId=0,
                    radius=30330
                  },
                  [26]={
                    GM=68234043600,
                    bodyId=26,
                    center={x=-1404835.000,y=562655.000,z=-285074.000},
                    name='Sanctuary',
                    planetarySystemId=0,
                    radius=83400
                  },
                  [30]={
                    GM=211564034,
                    bodyId=30,
                    center={x=29214402.000,y=10907080.695,z=433858.200},
                    name='Thades Moon 1',
                    planetarySystemId=0,
                    radius=14002
                  },
                  [31]={
                    GM=264870000,
                    bodyId=31,
                    center={x=29404193.000,y=10432768.000,z=19554.131},
                    name='Thades Moon 2',
                    planetarySystemId=0,
                    radius=15000
                  },
                  [40]={
                    GM=141264000,
                    bodyId=40,
                    center={x=-13503090.000,y=55594325.000,z=769838.640},
                    name='Talemai Moon 2',
                    planetarySystemId=0,
                    radius=12000
                  },
                  [41]={
                    GM=106830900,
                    bodyId=41,
                    center={x=-12800515.000,y=55700259.000,z=325207.840},
                    name='Talemai Moon 3',
                    planetarySystemId=0,
                    radius=11000
                  },
                  [42]={
                    GM=264870000,
                    bodyId=42,
                    center={x=-13058408.000,y=55781856.000,z=740177.760},
                    name='Talemai Moon 1',
                    planetarySystemId=0,
                    radius=15000
                  },
                  [50]={
                    GM=499917600,
                    bodyId=50,
                    center={x=-43902841.780,y=22261034.700,z=-48862386.000},
                    name='Feli Moon 1',
                    planetarySystemId=0,
                    radius=14000
                  },
                  [70]={
                    GM=396912600,
                    bodyId=70,
                    center={x=58969616.000,y=29797945.000,z=57969449.000},
                    name='Sinnen Moon 1',
                    planetarySystemId=0,
                    radius=17000
                  },
                  [100]={
                    GM=13975172474,
                    bodyId=100,
                    center={x=98865536.000,y=-13534464.000,z=-934461.990},
                    name='Lacobus',
                    planetarySystemId=0,
                    radius=55650
                  },
                  [101]={
                    GM=264870000,
                    bodyId=101,
                    center={x=98905288.170,y=-13950921.100,z=-647589.530},
                    name='Lacobus Moon 3',
                    planetarySystemId=0,
                    radius=15000
                  },
                  [102]={
                    GM=444981600,
                    bodyId=102,
                    center={x=99180968.000,y=-13783862.000,z=-926156.400},
                    name='Lacobus Moon 1',
                    planetarySystemId=0,
                    radius=18000
                  },
                  [103]={
                    GM=211503600,
                    bodyId=103,
                    center={x=99250052.000,y=-13629215.000,z=-1059341.400},
                    name='Lacobus Moon 2',
                    planetarySystemId=0,
                    radius=14000
                  },
                  [110]={
                    GM=9204742375,
                    bodyId=110,
                    center={x=14165536.000,y=-85634465.000,z=-934464.300},
                    name='Symeon',
                    planetarySystemId=0,
                    radius=49050
                  },
                  [120]={
                    GM=7135606629,
                    bodyId=120,
                    center={x=2865536.700,y=-99034464.000,z=-934462.020},
                    name='Ion',
                    planetarySystemId=0,
                    radius=44950
                  },
                  [121]={
                    GM=106830900,
                    bodyId=121,
                    center={x=2472916.800,y=-99133747.000,z=-1133582.800},
                    name='Ion Moon 1',
                    planetarySystemId=0,
                    radius=11000
                  },
                  [122]={
                    GM=176580000,
                    bodyId=122,
                    center={x=2995424.500,y=-99275010.000,z=-1378480.700},
                    name='Ion Moon 2',
                    planetarySystemId=0,
                    radius=15000
                  }  
                 }
                }
                end
                function PlanetRef() 
                --[[ 
                  Provide coordinate transforms and access to kinematic related parameters
                  Author: JayleBreak
                  Usage (unit.start):
                  PlanetaryReference = require('planetref')
                  galaxyReference = PlanetaryReference(referenceTableSource)
                  helios = galaxyReference[0] -- PlanetaryReference.PlanetarySystem instance
                  alioth = helios[2]          -- PlanetaryReference.BodyParameters instance
                  Methods:
                    PlanetaryReference:getPlanetarySystem - based on planetary system ID.
                    PlanetaryReference.isMapPosition - 'true' if an instance of 'MapPosition'
                    PlanetaryReference.createBodyParameters - for entry into reference table
                    PlanetaryReference.BodyParameters - a class containing a body's information.
                    PlanetaryReference.MapPosition - a class for map coordinates
                    PlanetaryReference.PlanetarySystem - a container for planetary system info.
                    PlanetarySystem:castIntersections - from a position in a given direction.
                    PlanetarySystem:closestBody - to the specified coordinates.
                    PlanetarySystem:convertToBodyIdAndWorldCoordinates - from map coordinates.
                    PlanetarySystem:getBodyParameters - from reference table.
                    PlanetarySystem:getPlanetarySystemId - for the instance.
                    BodyParameters:convertToWorldCoordinates - from map coordinates
                    BodyParameters:convertToMapPosition - from world coordinates
                    BodyParameters:getAltitude - of world coordinates
                    BodyParameters:getDistance - from center to world coordinates
                    BodyParameters:getGravity - at a given position in world coordinates.
                  Description
                  An instance of the 'PlanetaryReference' "class" can contain transform and
                  kinematic reference information for all planetary systems in DualUniverse.
                  Each planetary system is identified by a numeric identifier. Currently,
                  the only planetary system, Helios, has the identifier: zero. This "class"
                  supports the indexing ('[]') operation which is equivalent to the
                  use of the 'getPlanetarySystem' method. It also supports the 'pairs()'
                  method for iterating over planetary systems.

                  An instance of the 'PlanetarySystem' "class" contains all reference
                  information for a specific system. It supports the indexing ('[]') and
                  'pairs()' functions which allows iteration over each "body" in the
                  system where the key is the numeric body ID. It also supports the
                  'tostring()' method.
                  An instance of the 'BodyParameters' "class" contains all reference
                  information for a single celestial "body" (a moon or planet). It supports
                  the 'tostring()' method, and contains the data members:
                          planetarySystemId - numeric planetary system ID
                          bodyId            - numeric body ID
                          radius            - radius of the body in meters (zero altitude)
                          center            - world coordinates of the body's center position
                          GM                - the gravitation parameter (g = GM/radius^2)
                  Note that the user is allowed to add custom fields (e.g. body name), but
                  should insure that complex table values have the '__tostring' metamethod
                  implemented.
                  Transform and Kinematics:
                  "World" coordinates is a cartesian coordinate system with an origin at an
                  arbitrary fixed point in a planetary system and with distances measured in
                  meters. The coordinates are expressible either as a simple table of 3 values
                  or an instance of the 'vec3' class.  In either case, the planetary system
                  identity is implicit.
                  "Map" coordinates is a geographic coordinate system with an origin at the
                  center of an identified (by a numeric value) celestial body which is a
                  member of an identified (also a numeric value) planetary system. Note that
                  the convention that latitude, longitude, and altitude values will be the
                  position's x, y, and z world coordinates in the special case of body ID 0.
                  The kinematic parameters in the reference data permit calculations of the
                  gravitational attraction of the celestial body on other objects.
                  Reference Data:
                  This is an example of reference data with a single entry assigned to
                  planetary system ID 0, and body ID 2 ('Alioth'):
                    referenceTable = {
                          [0] = { [2] = { planetarySystemId = 0,
                                          bodyId = 2,
                                          radius = 126068,
                                          center = vec3({x=-8, y=-8, z=-126303}),
                                          GM = 1.572199+11 } -- as in F=-GMm/r^2
                          }
                      }
                    ref=PlanetaryReference(referenceTable)
                  Collecting Reference Data:
                  A combination of information from the "Map" screen in the DU user interface,
                  and values reported by the DU Lua API can be the source of the reference
                  table's data (planetarySystemId, bodyId, and surfaceArea is from the user
                  interface):
                    referenceTable = {}
                    referenceTable[planetarySystemId][bodyId] =
                         PlanetaryReference.createBodyParameters(planetarySystemId,
                                                                 bodyId,
                                                                 surfaceArea,
                                                                 core.getConstructWorldPos(),
                                                                 core.getWorldVertical(),
                                                                 core.getAltitude(),
                                                                 core.g())
                  Adapting Data Sources:
                  Other sources of data can be adapted or converted. An example of adapting a
                  table, defined in the file: 'planets.lua', containing information on a single
                  planetary system and using celestial body name as the key follows (note that
                  a 'name' field is added to the BodyParameters instance transparently after
                  construction, and the '__pairs' meta function is required to support the
                  'closestBody' and '__tostring' methods):
                    ref=PlanetaryReference(
                        {[0] = setmetatable(require('planets'),
                                        { __index = function(bodies, bodyId)
                                             for _,v in pairs(bodies) do
                                                 if v and v.bodyId == bodyId then return v end
                                             end
                                             return nil
                                           end,
                                         __pairs = function(bodies)
                                             return function(t, k)
                                                     local nk, nv = next(t, k)
                                                     if nv then
                                                         local GM = nv.gravity * nv.radius^2
                                                         local bp = BodyParameters(0,
                                                                                   nv.id,
                                                                                   nv.radius,
                                                                                   nv.pos,
                                                                                   GM)
                                                         bp.name = nk
                                                         return nk, bp
                                                    end
                                                    return nk, nv
                                                 end, bodies, nil
                                           end })
                    })

                  Converting Data Sources:
                  An instance of 'PlanetaryReference' that has been adapted to a data source
                  can be used to convert that source to simple table. For example,
                  using the adapted instance shown above:
                    load('convertedData=' .. tostring(ref))()
                    newRef=PlanetaryReference(convertedData)
                  Also See: kepler.lua
                  ]]--
                --[[                    START OF LOCAL IMPLEMENTATION DETAILS             ]]--
                -- Type checks
                local function isNumber(n)  return type(n)           == 'number' end
                local function isSNumber(n) return type(tonumber(n)) == 'number' end
                local function isTable(t)   return type(t)           == 'table'  end
                local function isString(s)  return type(s)           == 'string' end
                local function isVector(v)  return isTable(v)
                                                    and isNumber(v.x and v.y and v.z) end
                local function isMapPosition(m) return isTable(m) and isNumber(m.latitude  and
                                                                               m.longitude and
                                                                               m.altitude  and
                                                                               m.bodyId    and
                                                                               m.systemId) end
                -- Constants
                local deg2rad    = math.pi/180
                local rad2deg    = 180/math.pi
                local epsilon    = 1e-10
                local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
                local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..
                                   num ..  ',' .. num .. '}'
                -- Utilities
                local utils  = require('cpml.utils')
                local vec3   = require('cpml.vec3')
                local clamp  = utils.clamp
                local function float_eq(a,b)
                    if a == 0 then return math.abs(b) < 1e-09 end
                    if b == 0 then return math.abs(a) < 1e-09 end
                    return math.abs(a - b) < math.max(math.abs(a),math.abs(b))*epsilon
                end
                local function formatNumber(n)
                    local result = string.gsub(
                                    string.reverse(string.format('%.4f',n)),
                                    '^0*%.?','')
                    return result == '' and '0' or string.reverse(result)
                end
                local function formatValue(obj)
                    if isVector(obj) then
                        return string.format('{x=%.3f,y=%.3f,z=%.3f}', obj.x, obj.y, obj.z)
                    end
                    if isTable(obj) and not getmetatable(obj) then
                        local list = {}
                        local nxt  = next(obj)
                        if type(nxt) == 'nil' or nxt == 1 then -- assume this is an array
                            list = obj
                        else
                            for k,v in pairs(obj) do
                                local value = formatValue(v)
                                if type(k) == 'number' then
                                    table.insert(list, string.format('[%s]=%s', k, value))
                                else
                                    table.insert(list, string.format('%s=%s',   k, value))
                                end
                            end
                        end
                        return string.format('{%s}', table.concat(list, ','))
                    end
                    if isString(obj) then
                        return string.format("'%s'", obj:gsub("'",[[\']]))
                    end
                    return tostring(obj)
                end
                -- CLASSES
                -- BodyParameters: Attributes of planetary bodies (planets and moons)
                local BodyParameters = {}
                BodyParameters.__index = BodyParameters
                BodyParameters.__tostring =
                    function(obj, indent)
                        local sep = indent or ''
                        local keys = {}
                        for k in pairs(obj) do table.insert(keys, k) end
                        table.sort(keys)
                        local list = {}
                        for _, k in ipairs(keys) do
                            local value = formatValue(obj[k])
                            if type(k) == 'number' then
                                table.insert(list, string.format('[%s]=%s', k, value))
                            else
                                table.insert(list, string.format('%s=%s', k, value))
                            end
                        end
                        if indent then
                            return string.format('%s%s',
                                                 indent,
                                                 table.concat(list, ',\n' .. indent))
                        end
                        return string.format('{%s}', table.concat(list, ','))
                    end
                BodyParameters.__eq = function(lhs, rhs)
                        return lhs.planetarySystemId == rhs.planetarySystemId and
                               lhs.bodyId            == rhs.bodyId            and
                               float_eq(lhs.radius, rhs.radius)               and
                               float_eq(lhs.center.x, rhs.center.x)           and
                               float_eq(lhs.center.y, rhs.center.y)           and
                               float_eq(lhs.center.z, rhs.center.z)           and
                               float_eq(lhs.GM, rhs.GM)
                    end
                local function mkBodyParameters(systemId, bodyId, radius, worldCoordinates, GM)
                    -- 'worldCoordinates' can be either table or vec3
                    assert(isSNumber(systemId),
                           'Argument 1 (planetarySystemId) must be a number:' .. type(systemId))
                    assert(isSNumber(bodyId),
                           'Argument 2 (bodyId) must be a number:' .. type(bodyId))
                    assert(isSNumber(radius),
                           'Argument 3 (radius) must be a number:' .. type(radius))
                    assert(isTable(worldCoordinates),
                           'Argument 4 (worldCoordinates) must be a array or vec3.' ..
                           type(worldCoordinates))
                    assert(isSNumber(GM),
                           'Argument 5 (GM) must be a number:' .. type(GM))
                    return setmetatable({planetarySystemId = tonumber(systemId),
                                         bodyId            = tonumber(bodyId),
                                         radius            = tonumber(radius),
                                         center            = vec3(worldCoordinates),
                                         GM                = tonumber(GM) }, BodyParameters)
                end
                -- MapPosition: Geographical coordinates of a point on a planetary body.
                local MapPosition = {}
                MapPosition.__index = MapPosition
                MapPosition.__tostring = function(p)
                        return string.format('::pos{%d,%d,%s,%s,%s}',
                                             p.systemId,
                                             p.bodyId,
                                             formatNumber(p.latitude*rad2deg),
                                             formatNumber(p.longitude*rad2deg),
                                             formatNumber(p.altitude))
                    end
                MapPosition.__eq       = function(lhs, rhs)
                        return lhs.bodyId   == rhs.bodyId              and
                               lhs.systemId == rhs.systemId            and
                               float_eq(lhs.latitude,   rhs.latitude)  and
                               float_eq(lhs.altitude,   rhs.altitude)  and
                               (float_eq(lhs.longitude, rhs.longitude) or
                                float_eq(lhs.latitude, math.pi/2)      or
                                float_eq(lhs.latitude, -math.pi/2))
                    end
                -- latitude and longitude are in degrees while altitude is in meters
                local function mkMapPosition(overload, bodyId, latitude, longitude, altitude)
                    local systemId = overload -- Id or '::pos{...}' string
                    if isString(overload) and not longitude and not altitude and
                                              not bodyId    and not latitude then
                        systemId, bodyId, latitude, longitude, altitude =
                                                            string.match(overload, posPattern)
                        assert(systemId, 'Argument 1 (position string) is malformed.')
                    else
                        assert(isSNumber(systemId),
                               'Argument 1 (systemId) must be a number:' .. type(systemId))
                        assert(isSNumber(bodyId),
                               'Argument 2 (bodyId) must be a number:' .. type(bodyId))
                        assert(isSNumber(latitude),
                               'Argument 3 (latitude) must be in degrees:' .. type(latitude))
                        assert(isSNumber(longitude),
                               'Argument 4 (longitude) must be in degrees:' .. type(longitude))
                        assert(isSNumber(altitude),
                               'Argument 5 (altitude) must be in meters:' .. type(altitude))
                    end
                    systemId  = tonumber(systemId)
                    bodyId    = tonumber(bodyId)
                    latitude  = tonumber(latitude)
                    longitude = tonumber(longitude)
                    altitude  = tonumber(altitude)
                    if bodyId == 0 then -- this is a hack to represent points in space
                        return setmetatable({latitude  = latitude,
                                             longitude = longitude,
                                             altitude  = altitude,
                                             bodyId    = bodyId,
                                             systemId  = systemId}, MapPosition)
                    end
                    return setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                         longitude = deg2rad*(longitude % 360),
                                         altitude  = altitude,
                                         bodyId    = bodyId,
                                         systemId  = systemId}, MapPosition)
                end
                -- PlanetarySystem - map body IDs to BodyParameters
                local PlanetarySystem = {}
                PlanetarySystem.__index = PlanetarySystem
                PlanetarySystem.__tostring =
                    function (obj, indent)
                        local sep = indent and (indent .. '  ' )
                        local bdylist = {}
                        local keys = {}
                        for k in pairs(obj) do table.insert(keys, k) end
                        table.sort(keys)
                        for _, bi in ipairs(keys) do
                            bdy = obj[bi]
                            local bdys = BodyParameters.__tostring(bdy, sep)
                            if indent then
                                table.insert(bdylist,
                                             string.format('[%s]={\n%s\n%s}',
                                                           bi, bdys, indent))
                            else
                                table.insert(bdylist, string.format('  [%s]=%s', bi, bdys))
                            end
                        end
                        if indent then
                            return string.format('\n%s%s%s',
                                                 indent,
                                                 table.concat(bdylist, ',\n' .. indent),
                                                 indent)
                        end
                        return string.format('{\n%s\n}', table.concat(bdylist, ',\n'))
                    end
                local function mkPlanetarySystem(referenceTable)
                    local atlas = {}
                    local pid
                    for _, v in pairs(referenceTable) do
                        local id = v.planetarySystemId
                        if type(id) ~= 'number' then
                            error('Invalid planetary system ID: ' .. tostring(id))
                        elseif pid and id ~= pid then
                            error('Mismatch planetary system IDs: ' .. id .. ' and '
                                  .. pid)
                        end
                        local bid = v.bodyId
                        if type(bid) ~= 'number' then
                            error('Invalid body ID: ' .. tostring(bid))
                        elseif atlas[bid] then
                            error('Duplicate body ID: ' .. tostring(bid))
                        end
                        setmetatable(v.center, getmetatable(vec3.unit_x))
                        atlas[bid] = setmetatable(v, BodyParameters)
                        pid = id
                    end
                    return setmetatable(atlas, PlanetarySystem)
                end
                -- PlanetaryReference - map planetary system ID to PlanetarySystem
                PlanetaryReference = {}
                local function mkPlanetaryReference(referenceTable)
                    return setmetatable({ galaxyAtlas = referenceTable or {} },
                                          PlanetaryReference)
                end
                PlanetaryReference.__index        = 
                    function(t,i)
                        if type(i) == 'number' then
                            local system = t.galaxyAtlas[i]
                            return mkPlanetarySystem(system)
                        end
                        return rawget(PlanetaryReference, i)
                    end
                PlanetaryReference.__pairs        =
                    function(obj)
                        return  function(t, k)
                                    local nk, nv = next(t, k)
                                    return nk, nv and mkPlanetarySystem(nv)
                                end, obj.galaxyAtlas, nil
                    end
                PlanetaryReference.__tostring     =
                    function (obj)
                        local pslist = {}
                        for _,ps in pairs(obj or {}) do
                            local psi = ps:getPlanetarySystemId()
                            local pss = PlanetarySystem.__tostring(ps, '    ')
                            table.insert(pslist,
                                         string.format('  [%s]={%s\n  }', psi, pss))
                        end
                        return string.format('{\n%s\n}\n', table.concat(pslist,',\n'))
                    end
                --[[                       START OF PUBLIC INTERFACE                       ]]--
                -- PlanetaryReference CLASS METHODS:
                --
                -- BodyParameters - create an instance of BodyParameters class
                -- planetarySystemId  [in]: the body's planetary system ID.
                -- bodyId             [in]: the body's ID.
                -- radius             [in]: the radius in meters of the planetary body.
                -- bodyCenter         [in]: the world coordinates of the center (vec3 or table).
                -- GM                 [in]: the body's standard gravitational parameter.
                -- return: an instance of BodyParameters class.
                --
                PlanetaryReference.BodyParameters = mkBodyParameters
                --
                -- MapPosition - create an instance of the MapPosition class
                -- overload [in]: either a planetary system ID or a position string ('::pos...')
                -- bodyId [in]:   (ignored if overload is a position string) the body's ID.
                -- latitude [in]: (ignored if overload is a position string) the latitude.
                -- longitude [in]:(ignored if overload is a position string) the longitude.
                -- altitude [in]: (ignored if overload is a position string) the altitude.
                -- return: the class instance
                --
                PlanetaryReference.MapPosition    = mkMapPosition
                --
                -- PlanetarySystem - create an instance of PlanetarySystem class
                -- referenceData [in]: a table (indexed by bodyId) of body reference info.
                -- return: the class instance
                --
                PlanetaryReference.PlanetarySystem = mkPlanetarySystem
                --
                -- createBodyParameters - create an instance of BodyParameters class
                -- planetarySystemId  [in]: the body's planetary system ID.
                -- bodyId             [in]: the body's ID.
                -- surfaceArea        [in]: the body's surface area in square meters.
                -- aPosition          [in]: world coordinates of a position near the body.
                -- verticalAtPosition [in]: a vector pointing towards the body center.
                -- altitudeAtPosition [in]: the altitude in meters at the position.
                -- gravityAtPosition  [in]: the magnitude of the gravitational acceleration.
                -- return: an instance of BodyParameters class.
                --
                function PlanetaryReference.createBodyParameters(planetarySystemId,
                                                                 bodyId,
                                                                 surfaceArea,
                                                                 aPosition,
                                                                 verticalAtPosition,
                                                                 altitudeAtPosition,
                                                                 gravityAtPosition)
                    assert(isSNumber(planetarySystemId),
                           'Argument 1 (planetarySystemId) must be a number:' ..
                           type(planetarySystemId))
                    assert(isSNumber(bodyId),
                           'Argument 2 (bodyId) must be a number:' .. type(bodyId))
                    assert(isSNumber(surfaceArea),
                           'Argument 3 (surfaceArea) must be a number:' .. type(surfaceArea))
                    assert(isTable(aPosition),
                           'Argument 4 (aPosition) must be an array or vec3:' ..
                           type(aPosition))
                    assert(isTable(verticalAtPosition),
                           'Argument 5 (verticalAtPosition) must be an array or vec3:' ..
                           type(verticalAtPosition))
                    assert(isSNumber(altitudeAtPosition),
                           'Argument 6 (altitude) must be in meters:' ..
                           type(altitudeAtPosition))
                    assert(isSNumber(gravityAtPosition),
                           'Argument 7 (gravityAtPosition) must be number:' ..
                           type(gravityAtPosition))
                    local radius   = math.sqrt(surfaceArea/4/math.pi)
                    local distance = radius + altitudeAtPosition
                    local center   = vec3(aPosition) + distance*vec3(verticalAtPosition)
                    local GM       = gravityAtPosition * distance * distance
                    return mkBodyParameters(planetarySystemId, bodyId, radius, center, GM)
                end
                --
                -- isMapPosition - check for the presence of the 'MapPosition' fields
                -- valueToTest [in]: the value to be checked
                -- return: 'true' if all required fields are present in the input value
                --
                PlanetaryReference.isMapPosition  = isMapPosition
                -- PlanetaryReference INSTANCE METHODS:
                --
                -- getPlanetarySystem - get the planetary system using ID or MapPosition as key
                -- overload [in]: either the planetary system ID or a MapPosition that has it.
                -- return: instance of 'PlanetarySystem' class or nil on error
                --
                function PlanetaryReference:getPlanetarySystem(overload)
                    --if galaxyAtlas then
                        local planetarySystemId = overload
                        if isMapPosition(overload) then
                            planetarySystemId = overload.systemId
                        end
                        if type(planetarySystemId) == 'number' then
                            local system = self.galaxyAtlas[i]
                            if system then
                                if getmetatable(nv) ~= PlanetarySystem then
                                    system = mkPlanetarySystem(system)
                                end
                                return system
                            end
                        end
                    --end
                    --return nil
                end
                -- PlanetarySystem INSTANCE METHODS:
                --
                -- castIntersections - Find the closest body that intersects a "ray cast".
                -- origin [in]: the origin of the "ray cast" in world coordinates
                -- direction [in]: the direction of the "ray cast" as a 'vec3' instance.
                -- sizeCalculator [in]: (default: returns 1.05*radius) Returns size given body.
                -- bodyIds[in]: (default: all IDs in system) check only the given IDs.
                -- return: The closest body that blocks the cast or 'nil' if none.
                --
                function PlanetarySystem:castIntersections(origin,
                                                           direction,
                                                           sizeCalculator,
                                                           bodyIds)
                    local sizeCalculator = sizeCalculator or 
                                            function (body) return 1.05*body.radius end
                    local candidates = {}
                    if bodyIds then
                        for _,i in ipairs(bodyIds) do candidates[i] = self[i] end
                    else
                        bodyIds = {}
                        for k,body in pairs(self) do
                            table.insert(bodyIds, k)
                            candidates[k] = body
                        end
                    end
                    local function compare(b1,b2)
                        local v1 = candidates[b1].center - origin
                        local v2 = candidates[b2].center - origin
                        return v1:len() < v2:len()
                    end
                    table.sort(bodyIds, compare)
                    local dir = direction:normalize()
                    for i, id in ipairs(bodyIds) do
                        local body   = candidates[id]
                        local c_oV3  = body.center - origin
                        local radius = sizeCalculator(body)
                        local dot    = c_oV3:dot(dir)
                        local desc   = dot^2 - (c_oV3:len2() - radius^2)
                        if desc >= 0 then
                            local root     = math.sqrt(desc)
                            local farSide  = dot + root
                            local nearSide = dot - root
                            if nearSide > 0 then
                                return body, farSide, nearSide
                            elseif farSide > 0 then
                                return body, farSide, nil
                            end
                        end
                    end
                    return nil, nil, nil
                end
                --
                -- closestBody - find the closest body to a given set of world coordinates
                -- coordinates       [in]: the world coordinates of position in space
                -- return: an instance of the BodyParameters object closest to 'coordinates'
                --
                function PlanetarySystem:closestBody(coordinates)
                    assert(type(coordinates) == 'table', 'Invalid coordinates.')
                    local minDistance2, body
                    local coord = vec3(coordinates)
                    for _,params in pairs(self) do
                        local distance2 = (params.center - coord):len2()
                        if not body or distance2 < minDistance2 then
                            body         = params
                            minDistance2 = distance2
                        end
                    end
                    return body
                end
                --
                -- convertToBodyIdAndWorldCoordinates - map to body Id and world coordinates
                -- overload [in]: an instance of MapPosition or a position string ('::pos...)
                -- return: a vec3 instance containing the world coordinates or 'nil' on error.
                --
                function PlanetarySystem:convertToBodyIdAndWorldCoordinates(overload)
                    local mapPosition = overload
                    if isString(overload) then
                        mapPosition = mkMapPosition(overload)
                    end
                    if mapPosition.bodyId == 0 then
                        return 0, vec3(mapPosition.latitude,
                                       mapPosition.longitude,
                                       mapPosition.altitude)
                    end
                    local params = self:getBodyParameters(mapPosition)
                    if params then
                        return mapPosition.bodyId,
                               params:convertToWorldCoordinates(mapPosition)
                    end
                end
                --
                -- getBodyParameters - get or create an instance of BodyParameters class
                -- overload [in]: either an instance of MapPosition or a body's ID.
                -- return: a BodyParameters instance or 'nil' if body ID is not found.
                --
                function PlanetarySystem:getBodyParameters(overload)
                    local bodyId = overload
                    if isMapPosition(overload) then
                        bodyId = overload.bodyId
                    end
                    assert(isSNumber(bodyId),
                               'Argument 1 (bodyId) must be a number:' .. type(bodyId))
                    return self[bodyId]
                end
                --
                -- getPlanetarySystemId - get the planetary system ID for this instance
                -- return: the planetary system ID or nil if no planets are in the system.
                --
                function PlanetarySystem:getPlanetarySystemId()
                    local k, v = next(self)
                    return v and v.planetarySystemId
                end
                -- BodyParameters INSTANCE METHODS:
                --
                -- convertToMapPosition - create an instance of MapPosition from coordinates
                -- worldCoordinates [in]: the world coordinates of the map position.
                -- return: an instance of MapPosition class
                --
                function BodyParameters:convertToMapPosition(worldCoordinates)
                    assert(isTable(worldCoordinates),
                           'Argument 1 (worldCoordinates) must be an array or vec3:' ..
                           type(worldCoordinates))
                    local worldVec  = vec3(worldCoordinates) 
                    if self.bodyId == 0 then
                        return setmetatable({latitude  = worldVec.x,
                                             longitude = worldVec.y,
                                             altitude  = worldVec.z,
                                             bodyId    = 0,
                                             systemId  = self.planetarySystemId}, MapPosition)
                    end
                    local coords    = worldVec - self.center
                    local distance  = coords:len()
                    local altitude  = distance - self.radius
                    local latitude  = 0
                    local longitude = 0
                    if not float_eq(distance, 0) then
                        local phi = math.atan(coords.y, coords.x)
                        longitude = phi >= 0 and phi or (2*math.pi + phi)
                        latitude  = math.pi/2 - math.acos(coords.z/distance)
                    end
                    return setmetatable({latitude  = latitude,
                                         longitude = longitude,
                                         altitude  = altitude,
                                         bodyId    = self.bodyId,
                                         systemId  = self.planetarySystemId}, MapPosition)
                end
                --
                -- convertToWorldCoordinates - convert a map position to world coordinates
                -- overload [in]: an instance of MapPosition or a position string ('::pos...')
                --
                function BodyParameters:convertToWorldCoordinates(overload)
                    local mapPosition = isString(overload) and
                                                           mkMapPosition(overload) or overload
                    if mapPosition.bodyId == 0 then -- support deep space map position
                        return vec3(mapPosition.latitude,
                                    mapPosition.longitude,
                                    mapPosition.altitude)
                    end
                    assert(isMapPosition(mapPosition),
                           'Argument 1 (mapPosition) is not an instance of "MapPosition".')
                    assert(mapPosition.systemId == self.planetarySystemId,
                           'Argument 1 (mapPosition) has a different planetary system ID.')
                    assert(mapPosition.bodyId == self.bodyId,
                           'Argument 1 (mapPosition) has a different planetary body ID.')
                    local xproj = math.cos(mapPosition.latitude)
                    return self.center + (self.radius + mapPosition.altitude) *
                           vec3(xproj*math.cos(mapPosition.longitude),
                                xproj*math.sin(mapPosition.longitude),
                                math.sin(mapPosition.latitude))
                end
                --
                -- getAltitude - calculate the altitude of a point given in world coordinates.
                -- worldCoordinates [in]: the world coordinates of the point.
                -- return: the altitude in meters
                --
                function BodyParameters:getAltitude(worldCoordinates)
                    return (vec3(worldCoordinates) - self.center):len() - self.radius
                end
                --
                -- getDistance - calculate the distance to a point given in world coordinates.
                -- worldCoordinates [in]: the world coordinates of the point.
                -- return: the distance in meters
                --
                function BodyParameters:getDistance(worldCoordinates)
                    return (vec3(worldCoordinates) - self.center):len()
                end
                --
                -- getGravity - calculate the gravity vector induced by the body.
                -- worldCoordinates [in]: the world coordinates of the point.
                -- return: the gravity vector in meter/seconds^2
                --
                function BodyParameters:getGravity(worldCoordinates)
                    local radial = self.center - vec3(worldCoordinates) -- directed towards body
                    local len2   = radial:len2()
                    return (self.GM/len2) * radial/math.sqrt(len2)
                end
                -- end of module
                return setmetatable(PlanetaryReference,
                                    { __call = function(_,...)
                                                    return mkPlanetaryReference(...)
                                               end })
                end
                function Keplers()
                    --[[ 
                  Provides methods for computing orbital information for an object
                  Usage:
                  Kepler = require('autoconf.custom.kepler')
                  alioth = Kepler({ GM=157470826617,
                                    bodyId=2,
                                    center={x=-8.000,y=-8.000,z=-126303.000},
                                    name='Alioth',
                                    planetarySystemId=0,
                                    radius=126068
                                  })
                  altitude = 6000
                  position = '::pos{0,2,0,0,6000}'
                  e, o     = alioth:escapeAndOrbitalSpeed(altitude)
                  orbit    = alioth:orbitalParameters(position, {0, o+1, 0})
                  print("Eccentricity " .. orbit.eccentricity)
                  print("Perihelion " .. orbit.periapsis.altitude)
                  print("Max. speed " .. orbit.periapsis.speed)
                  print("Circular orbit speed " .. orbit.periapsis.circularOrbitSpeed)
                  print("Aphelion "  .. orbit.apoapsis.altitude)
                  print("Min. speed " .. orbit.apoapsis.speed)
                  print("Orbital period " .. orbit.period)
                  --- output:
                    Eccentricity 0.0018324307017878
                    Perihelion 6000.0
                    Max. speed 1092.9462297033
                    Circular orbit speed 1091.9462297033
                    Aphelion 6484.8994605062
                    Min. speed 1088.9480596194
                    Orbital period 762.02818214049
                  Methods:
                    Kepler:escapeAndOrbitalSpeed - for a given celestial body and altitude.
                    Kepler:orbitalParameters - for a given massless object and a celestial body.
                  Description
                  The motion of an object in the vicinity of substantially larger mass is
                  in the domain of the "2-body problem". By assuming the object whose motion
                  is of interest is of negligable mass simplifies the calculations of:
                  the speed to escape the body, the speed of a circular orbit, and the
                  parameters defining the orbit of the object (or the lack of orbit as the
                  case may be).
                  Orbital Parameters:
                     periapsis - the closest approach to the planet
                      apoapsis - the furthest point from the planet if in orbit (otherwise nil)
                  eccentricity - 0 for circular orbits
                                <1 for elliptical orbits
                                 1 for parabiolic trajectory
                                >1 for hyperbolic trajectory
                        period - time (in seconds) to complete an orbit
                  Also See: planetref.lua
                ]]--
                local vec3       = require('cpml.vec3')
                local PlanetRef  = PlanetRef()
                local function isString(s) return type(s)   == 'string' end
                local function isTable(t)  return type(t)   == 'table'  end
                local function float_eq(a,b)
                    if a == 0 then return math.abs(b) < 1e-09 end
                    if b == 0 then return math.abs(a) < 1e-09 end
                    return math.abs(a - b) < math.max(math.abs(a),math.abs(b))*epsilon
                end
                Kepler = {}
                Kepler.__index = Kepler
                --
                -- escapeAndOrbitalSpeed - speed required to escape and for a circular orbit
                -- altitude [in]: the height of the orbit in meters above "sea-level"
                -- return: the speed in m/s needed to escape the celestial body and to orbit it.
                --
                function Kepler:escapeAndOrbitalSpeed(altitude)
                    assert(self.body)
                    -- P = -GMm/r and KE = mv^2/2 (no lorentz factor used)
                    -- mv^2/2 = GMm/r
                    -- v^2 = 2GM/r
                    -- v = sqrt(2GM/r1)
                    local distance = altitude + self.body.radius
                    if not float_eq(distance, 0) then
                        local orbit = math.sqrt(self.body.GM/distance)
                        return math.sqrt(2)*orbit, orbit
                    end
                    return nil, nil
                end
                --
                -- orbitalParameters: determine the orbital elements for a two-body system.
                -- overload [in]: the world coordinates or map coordinates of a massless object.
                -- velocity [in]: The velocity of the massless point object in m/s.
                -- return: the 6 orbital elements for the massless object.
                --
                function Kepler:orbitalParameters(overload, velocity)
                    assert(self.body)
                    assert(isTable(overload) or isString(overload))
                    assert(isTable(velocity))
                    local pos = (isString(overload) or PlanetRef.isMapPosition(overload)) and
                                            self.body:convertToWorldCoordinates(overload) or
                                vec3(overload)
                    local v   = vec3(velocity)
                    local r   = pos - self.body.center
                    local v2  = v:len2()
                    local d   = r:len()
                    local mu  = self.body.GM
                    local e   = ((v2 - mu/d)*r - r:dot(v)*v)/mu
                    local a   = mu/(2*mu/d - v2)
                    local ecc = e:len()
                    local dir = e:normalize()
                    local pd  = a*(1-ecc)
                    local ad  = a*(1+ecc)
                    local per = pd*dir + self.body.center
                    local apo = ecc <= 1 and -ad*dir + self.body.center or nil
                    local trm = math.sqrt(a*mu*(1-ecc*ecc))        
                    local Period = apo and 2*math.pi*math.sqrt(a^3/mu)
                    -- These are great and all, but, I need more.
                    local trueAnomaly = math.acos((e:dot(r))/(ecc*d))
                    if r:dot(v) < 0 then
                        trueAnomaly = -(trueAnomaly - 2*math.pi)
                    end        
                    -- Apparently... cos(EccentricAnomaly) = (cos(trueAnomaly) + eccentricity)/(1 + eccentricity * cos(trueAnomaly))
                    local EccentricAnomaly = math.acos((math.cos(trueAnomaly) + ecc)/(1 + ecc * math.cos(trueAnomaly)))
                    -- Then.... apparently if this is below 0, we should add 2pi to it
                    -- I think also if it's below 0, we're past the apoapsis?
                    local timeTau = EccentricAnomaly
                    if timeTau < 0 then
                        timeTau = timeTau + 2*math.pi
                    end
                    -- So... time since periapsis...
                    -- Is apparently easy if you get mean anomly.  t = M/n where n is mean motion, = 2*pi/Period
                    
                    
                    local MeanAnomaly = timeTau - ecc * math.sin(timeTau)
                    local TimeSincePeriapsis = 0
                    local TimeToPeriapsis = 0
                    local TimeToApoapsis = 0
                    if Period ~= nil then
                        TimeSincePeriapsis = MeanAnomaly/(2*math.pi/Period)
                    
                        --system.print(MeanAnomaly .. " - " .. TimeSincePeriapsis .. " - " .. Period .. " - " .. EccentricAnomaly .. " - " .. timeTau .. " - " .. trueAnomaly)
                        -- Mean anom is 0 at periapsis, positive before it... and positive after it.
                        -- I guess this is why I needed to use timeTau and not EccentricAnomaly here
                        
                        TimeToPeriapsis = Period - TimeSincePeriapsis
                        TimeToApoapsis = TimeToPeriapsis + Period/2
                        if trueAnomaly - math.pi > 0 then -- TBH I think something's wrong in my formulas because I needed this.
                            TimeToPeriapsis = TimeSincePeriapsis
                            TimeToApoapsis = TimeToPeriapsis + Period/2
                        end
                        if TimeToApoapsis > Period then
                            TimeToApoapsis = TimeToApoapsis - Period
                        end
                    end
                    return { periapsis       = { position           = per,
                                                 speed              = trm/pd,
                                                 circularOrbitSpeed = math.sqrt(mu/pd),
                                                 altitude           = pd - self.body.radius},
                             apoapsis        = apo and
                                               { position           = apo,
                                                 speed              = trm/ad,
                                                 circularOrbitSpeed = math.sqrt(mu/ad),
                                                 altitude           = ad - self.body.radius},
                             currentVelocity = v,
                             currentPosition = pos,
                             eccentricity    = ecc,
                             period          = Period,
                             eccentricAnomaly = EccentricAnomaly,
                             meanAnomaly = MeanAnomaly,
                             timeToPeriapsis = TimeToPeriapsis,
                             timeToApoapsis = TimeToApoapsis
                           }
                end
                
                local function new(bodyParameters)
                    local params = PlanetRef.BodyParameters(bodyParameters.planetarySystemId,
                                                            bodyParameters.bodyId,
                                                            bodyParameters.radius,
                                                            bodyParameters.center,
                                                            bodyParameters.GM)
                    return setmetatable({body = params}, Kepler)
                end
                return setmetatable(Kepler, { __call = function(_,...) return new(...) end })
                end
                function Kinematics()
                    --[[ 
                  DualUniverse kinematic equations
                  Author: JayleBreak
                  Usage (unit.start):
                  Kinematics = require('autoconf.custom.kinematics')
                  Methods:
                   computeAccelerationTime - "relativistic" version of t = (vf - vi)/a
                   computeDistanceAndTime - Return distance & time needed to reach final speed.
                   computeTravelTime - "relativistic" version of t=(sqrt(2ad+v^2)-v)/a
                  Description
                  DualUniverse increases the effective mass of constructs as their absolute
                  speed increases by using the "lorentz" factor (from relativity) as the scale
                  factor.  This results in an upper bound on the absolute speed of constructs
                  (excluding "warp" drive) that is set to 30 000 KPH (8 333 MPS). This module
                  provides utilities for computing some physical quantities taking this
                  scaling into account.
                ]]--
                local Kinematic = {} -- just a namespace
                local C       = 30000000/3600
                local C2      = C*C
                local ITERATIONS = 100 -- iterations over engine "warm-up" period
                local function lorentz(v) return 1/math.sqrt(1 - v*v/C2) end
                --
                -- computeAccelerationTime - "relativistic" version of t = (vf - vi)/a
                -- initial      [in]: initial (positive) speed in meters per second.
                -- acceleration [in]: constant acceleration until 'finalSpeed' is reached.
                -- final        [in]: the speed at the end of the time interval.
                -- return: the time in seconds spent in traversing the distance
                --
                function Kinematic.computeAccelerationTime(initial, acceleration, final)
                    -- The low speed limit of following is: t=(vf-vi)/a (from: vf=vi+at)
                    local k1 = C*math.asin(initial/C)
                    return (C * math.asin(final/C) - k1)/acceleration
                end
                --
                -- computeDistanceAndTime - Return distance & time needed to reach final speed.
                -- initial[in]:     Initial speed in meters per second.
                -- final[in]:       Final speed in meters per second.
                -- restMass[in]:    Mass of the construct at rest in Kg.
                -- thrust[in]:      Engine's maximum thrust in Newtons.
                -- t50[in]:         (default: 0) Time interval to reach 50% thrust in seconds.
                -- brakeThrust[in]: (default: 0) Constant thrust term when braking.
                -- return: Distance (in meters), time (in seconds) required for change.
                --
                function Kinematic.computeDistanceAndTime(initial,
                                                          final,
                                                          restMass,
                                                          thrust,
                                                          t50,
                                                          brakeThrust)
                    -- This function assumes that the applied thrust is colinear with the
                    -- velocity. Furthermore, it does not take into account the influence
                    -- of gravity, not just in terms of its impact on velocity, but also
                    -- its impact on the orientation of thrust relative to velocity.
                    -- These factors will introduce (usually) small errors which grow as
                    -- the length of the trip increases.
                    t50            = t50 or 0
                    brakeThrust    = brakeThrust or 0 -- usually zero when accelerating
                    local tau0     = lorentz(initial)
                    local speedUp  = initial <= final
                    local a0       = thrust * (speedUp and 1 or -1)/restMass
                    local b0       = -brakeThrust/restMass
                    local totA     = a0+b0
                    if speedUp and totA <= 0 or not speedUp and totA >= 0 then
                        return -1, -1 -- no solution
                    end
                    local distanceToMax, timeToMax = 0, 0
                    -- If, the T50 time is set, then assume engine is at zero thrust and will
                    -- reach full thrust in 2*T50 seconds. Thrust curve is given by:
                    -- Thrust: F(z)=(a0*(1+sin(z))+2*b0)/2 where z=pi*(t/t50 - 1)/2
                    -- Acceleration is given by F(z)/m(z) where m(z) = m/sqrt(1-v^2/c^2)
                    -- or v(z)' = (a0*(1+sin(z))+2*b0)*sqrt(1-v(z)^2/c^2)/2
                    if a0 ~= 0 and t50 > 0 then
                        -- Closed form solution for velocity exists:
                        -- v(t) = -c*tan(w)/sqrt(tan(w)^2+1) => w = -asin(v/c)
                        -- w=(pi*t*(a0/2+b0)-a0*t50*sin(pi*t/2/t50)+*pi*c*k1)/pi/c
                        -- @ t=0, v(0) = vi
                        -- pi*c*k1/pi/c = -asin(vi/c)
                        -- k1 = asin(vi/c)
                        local k1  = math.asin(initial/C)
                        local c1  = math.pi*(a0/2+b0)
                        local c2  = a0*t50
                        local c3  = C*math.pi
                        local v = function(t)
                            local w  = (c1*t - c2*math.sin(math.pi*t/2/t50) + c3*k1)/c3
                            local tan = math.tan(w)
                            return C*tan/math.sqrt(tan*tan+1)
                        end
                        local speedchk = speedUp and function(s) return s >= final end or
                                                     function(s) return s <= final end
                        timeToMax  = 2*t50
                        if speedchk(v(timeToMax)) then
                            local lasttime = 0
                            while math.abs(timeToMax - lasttime) > 0.5 do
                                local t = (timeToMax + lasttime)/2
                                if speedchk(v(t)) then
                                    timeToMax = t 
                                else
                                    lasttime = t
                                end
                            end
                        end
                        -- There is no closed form solution for distance in this case.
                        -- Numerically integrate for time t=0 to t=2*T50 (or less)
                        local lastv = initial
                        local tinc  = timeToMax/ITERATIONS
                        for step = 1, ITERATIONS do
                            local speed = v(step*tinc)
                            distanceToMax = distanceToMax + (speed+lastv)*tinc/2
                            lastv = speed
                        end
                        if timeToMax < 2*t50 then
                            return distanceToMax, timeToMax
                        end
                        initial     = lastv
                    end
                    -- At full thrust, acceleration only depends on the Lorentz factor:
                    -- v(t)' = (F/m(v)) = a*sqrt(1-v(t)^2/c^2) where a = a0+b0
                    -- -> v = c*sin((at+k1)/c)
                    -- @ t=0, v=vi: k1 = c*asin(vi/c)
                    -- -> t = (c*asin(v/c) - k1)/a
                    -- x(t)' = c*sin((at+k1)/c)
                    -- x = k2 - c^2 cos((at+k1)/c)/a
                    -- @ t=0, x=0: k2 = c^2 * cos(k1/c)/a
                    local k1       = C*math.asin(initial/C)
                    local time     = (C * math.asin(final/C) - k1)/totA
                    local k2       = C2 *math.cos(k1/C)/totA
                    local distance = k2 - C2 * math.cos((totA*time + k1)/C)/totA
                    return distance+distanceToMax, time+timeToMax
                end
                --
                -- computeTravelTime - "relativistic" version of t=(sqrt(2ad+v^2)-v)/a
                -- initialSpeed [in]: initial (positive) speed in meters per second
                -- acceleration [in]: constant acceleration until 'distance' is traversed
                -- distance [in]: the distance traveled in meters
                -- return: the time in seconds spent in traversing the distance
                --
                function Kinematic.computeTravelTime(initial, acceleration, distance)
                    -- The low speed limit of following is: t=(sqrt(2ad+v^2)-v)/a
                    -- (from: d=vt+at^2/2)
                    if distance == 0 then return 0 end
                    if acceleration > 0 then
                        local k1       = C*math.asin(initial/C)
                        local k2       = C2*math.cos(k1/C)/acceleration
                        return (C*math.acos(acceleration*(k2 - distance)/C2) - k1)/acceleration
                    end
                    assert(initial > 0, 'Acceleration and initial speed are both zero.')
                    return distance/initial
                end
                function Kinematic.lorentz(v) return lorentz(v) end
                return Kinematic
                end
                
                
                
                local PlanetaryReference = PlanetRef()
                local galaxyReference = PlanetaryReference(Atlas())
                local core_galaxy = galaxyReference[0]
                local Kinematic = Kinematics()
                local Kep = Keplers()
                
                -- USER DEFINABLE GLOBAL AND LOCAL VARIABLES
                local AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
                local DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
                local MouseYSensitivity = 0.003 --export: For virtual joystick only
                local MouseXSensitivity = 0.003 --export: For virtual joystick only
                local MinAutopilotSpeed = 55 --export: Minimum speed for autopilot to maneuver in m/s.  Keep above 25m/s to prevent nosedives when boosters kick in
                local userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
                local freeLookToggle = true --export: Set to false for default free look behavior.
                local brakeToggle = true --export: Set to false to use hold to brake vice toggle brake.
                local LastMaxBrake = 0

                local mousePitchFactor = 1 --export: Mouse control only
                local mouseYawFactor = 1 --export: Mouse control only

                local PrimaryR = 130 --export: Primary HUD color
                local PrimaryG = 224 --export: Primary HUD color
                local PrimaryB = 255 --export: Primary HUD color
                local AutopilotStrength = 1 --export: How strongly autopilot tries to point at a target
                local DampingMultiplier = 40 --export: How strongly it dampens when nearing the correct orientation
                local alignmentTolerance = 0.001 --export: How closely it must align to a planet before accelerating to it
                local circleRad = 99 --export: The size of the roll/pitch circle, set to 0 to remove.

                local ResolutionWidth = 2560
                local ResolutionHeight = 1440

                local ButtonBrakeWidth = 240             --export: Size and positioning for brake button
                local ButtonBrakeHeight = 50             --export: Size and positioning for brake button
                local ButtonBrakeX = ResolutionWidth/2 - ButtonBrakeWidth/2         --export: Size and positioning for brake button
                local ButtonBrakeY = ResolutionHeight/2 - ButtonBrakeHeight + 400   --export: Size and positioning for brake button
                       
                local ButtonProgradeWidth = 260          --export: Size and positioning for prograde button
                local ButtonProgradeHeight = 50          --export: Size and positioning for prograde button       
                local ButtonProgradeX = ResolutionWidth/2 - ButtonProgradeWidth/2 - ButtonBrakeWidth - 50   --export: Size and positioning for prograde button
                local ButtonProgradeY = ResolutionHeight/2 - ButtonProgradeHeight + 380                     --export: Size and positioning for prograde button
                       
                local ButtonRetrogradeWidth = 260        --export: Size and positioning for retrograde button
                local ButtonRetrogradeHeight = 50        --export: Size and positioning for retrograde button       
                local ButtonRetrogradeX = ResolutionWidth/2 - ButtonRetrogradeWidth/2 + ButtonBrakeWidth + 50   --export: Size and positioning for retrograde button
                local ButtonRetrogradeY = ResolutionHeight/2 - ButtonRetrogradeHeight + 380                     --export: Size and positioning for retrograde button
                
                local ButtonAutopilotWidth = 600 --export: Size and positioning for autopilot button
                local ButtonAutopilotHeight = 60 --export: Size and positioning for autopilot button
                local ButtonAutopilotX = ResolutionWidth/2 - ButtonAutopilotWidth/2
                local ButtonAutopilotY = ResolutionHeight/2 - ButtonAutopilotHeight/2 - 400

                local warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32

                
                local hasGear = false
                pitchInput = 0 -- Global to interact with flush
                rollInput = 0
                yawInput = 0
                brakeInput = 0
                pitchInput2 = 0
                rollInput2 = 0
                yawInput2 = 0
                local BrakeIsOn = false
                local RetrogradeIsOn = false             
                local ProgradeIsOn = false             
                local AutoBrake = false
                local Autopilot = false
                local TurnBurn = false
                local AutopilotAccelerating = false
                local AutopilotBraking = false
                local AutopilotCruising = false 
                local AutopilotRealigned = false
                local AutopilotEndSpeed = 0
                local AutopilotStatus = "Aligning"
                local simulatedX = 0
                local simulatedY = 0
                HoldingCtrl = false -- Global so I don't have to make a toggle for it...
                local PrevViewLock = 1
                local PreviousYawAmount = 0
                local PreviousPitchAmount = 0
                local isBoosting = false -- Dodgin's Don't Die Rocket Govenor - Cruise Control Edition

                local distance = 0
                local brakeDistance, brakeTime = 0
                local maxBrakeDistance, maxBrakeTime = 0
                local hasGear = false 
                local hasDB = false
                local AutopilotTickRate = 60 --export: The tickrate for autopilot, in FPS.  Lowering this value may improve performance at the cost of autopilot accuracy
                local apTickRate = 1/AutopilotTickRate
                local ControlsTickRate = 60 --export: The tickrate for flight controls, in FPS.  Lowering this value may improve performance at the cost of mouse control accuracy
                local controlsTickRate = 1/ControlsTickRate

                local FrameSkipRate = 1 --export: Number of HUD frames to draw for each in-game frame.  Adding 1 to this halves the HUD framerate
                local updateCount = 0
                
                -- Refactor - moved variables and made local.
                local core_rgb = [[rgb(]] .. PrimaryR .. "," .. PrimaryG .. "," .. PrimaryB .. [[)]]
                local core_rgbdim = [[rgb(]] .. math.floor(PrimaryR *0.9 + 0.5) .. "," .. math.floor(PrimaryG * 0.9 + 0.5) .. "," .. math.floor(PrimaryB * 0.9 + 0.5) .. [[)]]
                local core_rgbdimmer = [[rgb(]] .. math.floor(PrimaryR *0.8 + 0.5) .. "," .. math.floor(PrimaryG * 0.8 + 0.5) .. "," .. math.floor(PrimaryB * 0.8 + 0.5) .. [[)]]
                local core_rgb_disabled = [[rgb(]] .. math.floor(PrimaryR *0.5 + 0.5) .. "," .. math.floor(PrimaryG * 0.5 + 0.5) .. "," .. math.floor(PrimaryB * 0.5 + 0.5) .. [[)]]
                local core_rgbdim_disabled = [[rgb(]] .. math.floor(PrimaryR *0.4 + 0.5) .. "," .. math.floor(PrimaryG * 0.4 + 0.5) .. "," .. math.floor(PrimaryB * 0.4 + 0.5) .. [[)]]
                local core_rgbdimmer_disabled = [[rgb(]] .. math.floor(PrimaryR *0.3 + 0.5) .. "," .. math.floor(PrimaryG * 0.3 + 0.5) .. "," .. math.floor(PrimaryB * 0.3 + 0.5) .. [[)]]
                
                -- Declare our math vars as local here so we don't waste mem
                local core_altitude = core.getAltitude()
                local core_velocity = vec3(core.getWorldVelocity()) -- I don't think we need local vel for anything
                local core_velocity_normalized = core_velocity:normalize()
                local core_speed = core_velocity:len()
                local core_world_vertical = vec3(core.getWorldVertical())
                local core_world_forward = vec3(core.getConstructWorldOrientationForward())
                local core_world_right = vec3(core.getConstructWorldOrientationRight())
                local core_world_up = vec3(core.getConstructWorldOrientationUp())
                local core_pitch
                local core_roll
                local core_gravity_magnitude = math.floor(core_world_vertical:len()*100)/100
                local core_atmosphere_density = unit.getAtmosphereDensity()
                local core_throttle_amount = math.floor(unit.getThrottle())
                local core_flight_value = unit.getAxisCommandValue(0)
                local core_flight_type = Nav.axisCommandManager:getAxisCommandType(0)
                local core_relative_pitch
                local core_relative_yaw
                -- TODO move fuel percent and times here 
                local core_planet_influence = unit.getClosestPlanetInfluence()
                local core_world_position = vec3(core.getConstructWorldPos())
                
                local core_nearest_planet = core_galaxy:closestBody(core_world_position, core_velocity)
                local core_kepler_nearest_planet = Kep(core_nearest_planet)
                local core_orbit = core_kepler_nearest_planet:orbitalParameters(core_world_position, core_velocity)

                local AutopilotTargetIndex = 0
                local AutopilotTargetPlanet = nil
                local MaxGameVelocity = 8333.05 --export: Max speed for your autopilot in m/s, do not go above 8333.055
         
                -- Navigation vars as locals
                local core_delta_x = system.getMouseDeltaX()
                local core_delta_y = system.getMouseDeltaY()
                local core_view_locked = (system.isViewLocked() == 1)
                
                local simulatedX = 0
                local simulatedY = 0

                local BrakeButtonHovered = false         
                local RetrogradeButtonHovered = false    
                local ProgradeButtonHovered = false 
                local AutopilotButtonHovered = false
                local UnitHidden = true
                
                local AutopilotTargetName = nil
                local AutopilotTargetPlanet = nil
                local AutopilotTargetCoords = nil
                local AutopilotEndSpeed = nil
                local AutopilotPlanetGravity = nil
                local AutopilotAccelerating = false
                local AutopilotBraking = false
                local AutopilotCruising = false
                local Autoilot = false
                local AutopilotRealigned = false
                local AutopilotStatus = "Aligning"
                
                local atlasSize
                
                local GCCycleTime = 100 --export: Garbage collection timer
                system.print(collectgarbage("setpause",GCCycleTime))
                
                -- BEGIN FUNCTION DEFINITIONS
                function LShiftStart()
                    if system.isViewLocked() == 1 then
                        HoldingCtrl = true
                    end
                end
                function LShiftStop()
                    if system.isViewLocked() == 1 then
                        HoldingCtrl = false
                        simulatedX = 0
                        simulatedY = 0 -- Reset for steering purposes
                    end
                end
                function saveVariables()
                    if(not hasDB) then
                        system.print("No Databank Found, unable to save. You must have a Databank attached to ship prior to running the HUD autoconfigure") 
                    elseif(dbHud.getNbKeys() > 0) then
                        dbHud.clear()
                        system.print("Databank wiped. Get out of the seat, set the savable variables, then re-enter seat and hit ALT-7 again")
                    else
                    -- VARIABLES TO BE SAVED GO HERE
                        dbHud.setStringValue("userControlScheme",userControlScheme)
                        dbHud.setIntValue("AutopilotTargetOrbit", AutopilotTargetOrbit)
                        dbHud.setStringValue("brakeToggle", brakeToggle)
                        dbHud.setFloatValue("apTickRate", apTickRate)
                        dbHud.setStringValue("freeLookToggle", freeLookToggle)
                        dbHud.setIntValue("PrimaryR", PrimaryR)
                        dbHud.setIntValue("PrimaryG", PrimaryG)
                        dbHud.setIntValue("PrimaryB", PrimaryB)
                        system.print("Saved: userControlScheme, AutopilotTargetOrbit, brakeToggle, apTickRate, freeLookToggle, Primary R/G/B")
                    end
                end
                function ShowInterplanetaryPanel()
                -- Interplanetary helper
                    if panelInterplanetary == nil then
                        panelInterplanetary = system.createWidgetPanel("Interplanetary Helper")
                        interplanetaryHeader = system.createWidget(panelInterplanetary, "value")
                        interplanetaryHeaderText = system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')
                        system.addDataToWidget(interplanetaryHeaderText, interplanetaryHeader)
                        widgetDistance = system.createWidget(panelInterplanetary, "value")
                        widgetDistanceText = system.createData('{"label": "Distance", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetDistanceText, widgetDistance)
                        widgetTravelTime = system.createWidget(panelInterplanetary, "value")
                        widgetTravelTimeText = system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetTravelTimeText, widgetTravelTime)
                        widgetCurBrakeDistance = system.createWidget(panelInterplanetary, "value")
                        widgetCurBrakeDistanceText = system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetCurBrakeDistanceText, widgetCurBrakeDistance)
                        widgetCurBrakeTime = system.createWidget(panelInterplanetary, "value")
                        widgetCurBrakeTimeText = system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetCurBrakeTimeText, widgetCurBrakeTime)
                        widgetMaxBrakeDistance = system.createWidget(panelInterplanetary, "value")
                        widgetMaxBrakeDistanceText = system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetMaxBrakeDistanceText, widgetMaxBrakeDistance)
                        widgetMaxBrakeTime = system.createWidget(panelInterplanetary, "value")
                        widgetMaxBrakeTimeText = system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetMaxBrakeTimeText, widgetMaxBrakeTime)
                        widgetTrajectoryAltitude = system.createWidget(panelInterplanetary, "value")
                        widgetTrajectoryAltitudeText = system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetTrajectoryAltitudeText, widgetTrajectoryAltitude)
                    end
                end
                function ToggleGears()
                    gearExtended = not gearExtended
                    if gearExtended then
                        Nav.control.extendLandingGears()
                        Nav.axisCommandManager:setTargetGroundAltitude(0)
                    else
                        Nav.control.retractLandingGears()
                        Nav.axisCommandManager:setTargetGroundAltitude(500) -- What's max?
                    end
                end
                function ToggleExtraWidgets()
                    if fuelPanelID ~= nil then
                        system.destroyWidgetPanel(fuelPanelID)
                        fuelPanelID = nil
                    elseif atmofueltank_size > 0 then
                        _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                        fuelPanelID =  _autoconf.panels[_autoconf.panels_size]
                    end
                    if spacefuelPanelID ~= nil then
                        system.destroyWidgetPanel(spacefuelPanelID)
                        spacefuelPanelID = nil
                    elseif spacefueltank_size > 0 then
                        _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                        spacefuelPanelID =  _autoconf.panels[_autoconf.panels_size]
                    end
                    if UnitHidden then
                        unit.show()
                        UnitHidden = false
                    else
                        unit.hide()
                        UnitHidden = true
                    end
                end
                function Contains(mousex, mousey, x, y, width, height) 
                    if mousex > x and mousex < (x + width) and mousey > y and mousey < (y + height) then
                        return true
                    else
                        return false
                    end
                end
                function ProgradeToggle()
                    -- Toggle Progrades
                    ProgradeIsOn = not ProgradeIsOn
                    RetrogradeIsOn = false -- Don't let both be on
                    Autopilot = false
                    ProgradeButtonHovered = false
                    local Progradestring = "Off"
                    if ProgradeIsOn then
                        Progradestring = "On"
                    end
                end
                
                function RetrogradeToggle()
                    -- Toggle Retrogrades
                    RetrogradeIsOn = not RetrogradeIsOn
                    ProgradeIsOn = false -- Don't let both be on
                    Autopilot = false
                    RetrogradeButtonHovered = false
                    local Retrogradestring = "Off"
                    if RetrogradeIsOn then
                        Retrogradestring = "On"
                    end
                end
                
                local function BrakeToggleInternal()
                    BrakeIsOn = not BrakeIsOn
                    BrakeButtonHovered = false
                    local Brakestring = "Off"
                    if BrakeIsOn then
                        Brakestring = "On"
                    end
                end

                function BrakeToggle()
                    -- Toggle brakes
                    if brakeToggle then 
                        BrakeToggleInternal()
                    elseif BrakeIsOn then
                        BrakeToggleInternal()
                    else
                        brakeInput = brakeInput + 1
                        local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                        if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                            local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                            if (math.abs(targetSpeed) > constants.epsilon) then
                                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                            end
                        end
                    end
                    
                end
                
                function BrakeLoop()
                    if brakeToggle ~= "true" then 
                        local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                        if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                            local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                            if (math.abs(targetSpeed) > constants.epsilon) then
                                Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                            end
                        end
                    end
                end
                
                function BrakeStop()
                    if brakeToggle ~= "true" then 
                        brakeInput = brakeInput - 1
                    end
                end
                
                function FreelookToggle()
                    if freeLookToggle then
                        if system.isViewLocked() == 1 then
                            system.lockView(0)
                        else
                            system.lockView(1)
                        end
                    end
                end
                
                function BoosterStart()
                    --Nav:toggleBoosters()
                    -- Dodgin's Don't Die Rocket Govenor - Cruise Control Edition
                    isboosting = not isboosting
                    if(isboosting) then unit.setEngineThrust('rocket_engine',1)
                    else unit.setEngineThrust('rocket_engine',0)
                    end
                end
                
                function AutopilotToggle()
                    -- Toggle Autopilot, as long as the target isn't None
                    if AutopilotTargetName ~= "None" and not Autopilot then
                        Autopilot = true
                        RetrogradeIsOn = false
                        ProgradeIsOn = false
                        AutopilotButtonHovered = false
                        AutopilotRealigned = false
                    else
                        Autopilot = false
                        AutopilotButtonHovered = false
                        AutopilotRealigned = false
                    end
                end
                
                function CheckButtons()
                    if BrakeButtonHovered then
                        BrakeToggle()
                    end
                    if ProgradeButtonHovered then
                        ProgradeToggle()
                    end
                    if RetrogradeButtonHovered then
                        RetrogradeToggle()
                    end
                    if AutopilotButtonHovered then
                        AutopilotToggle()
                    end
                end
                function DrawCursorLine(content, distance)
                    local strokeColor = math.floor(utils.clamp((distance/(ResolutionWidth/4))*255,0,255))
                    content = content .. "<line x1='0' y1='0' x2='" .. simulatedX .. "px' y2='" .. simulatedY .. "px' style='stroke:rgb(" .. PrimaryR + strokeColor .. "," .. PrimaryG-strokeColor .. "," .. PrimaryB-strokeColor .. ");stroke-width:2;transform:translate(50%, 50%)' />"
                    return content
                end
                function SetButtonContains()
                    BrakeButtonHovered = Contains(simulatedX + ResolutionWidth/2, simulatedY + ResolutionHeight/2, ButtonBrakeX, ButtonBrakeY, ButtonBrakeWidth, ButtonBrakeHeight)
                    ProgradeButtonHovered = Contains(simulatedX + ResolutionWidth/2, simulatedY + ResolutionHeight/2, ButtonProgradeX, ButtonProgradeY, ButtonProgradeWidth, ButtonProgradeHeight)
                    RetrogradeButtonHovered = Contains(simulatedX + ResolutionWidth/2, simulatedY + ResolutionHeight/2, ButtonRetrogradeX, ButtonRetrogradeY, ButtonRetrogradeWidth, ButtonRetrogradeHeight)
                    AutopilotButtonHovered = Contains(simulatedX + ResolutionWidth/2, simulatedY + ResolutionHeight/2, ButtonAutopilotX, ButtonAutopilotY, ButtonAutopilotWidth, ButtonAutopilotHeight)
                end

                function DrawButtons()
                    --local defaultColor = "rgb(" .. math.floor(PrimaryR*0.25+0.5) .. "," .. math.floor(PrimaryG*0.25+0.5) .. "," .. math.floor(PrimaryB*0.25+0.5) .. ")'"
                    local defaultColor = "rgb(" .. 0 .. "," .. 18 .. "," .. 133 .. ")'"
                    -- Brake button
                    content = content .. "<rect rx='5' ry='5' x='" .. ButtonBrakeX .. "' y='" .. ButtonBrakeY .. "' width='" .. ButtonBrakeWidth .. "' height='" .. ButtonBrakeHeight .. "' fill='" 
                    if BrakeIsOn then 
                        content = content .. "#CC0000'" -- Red if it's on
                    else
                        content = content .. defaultColor
                    end
                    if BrakeButtonHovered then 
                        content = content .. " style='stroke:white; stroke-width:2;stroke-opacity:0.5;fill-opacity:1'"
                    else
                        content = content .. " style='stroke:black; stroke-width:1;stroke-opacity:0.5;fill-opacity:0.5'"
                    end    
                    
                    content = content .. "></rect>"
                    
                    content = content .. "<text x='" .. ButtonBrakeX + ButtonBrakeWidth/2 .. "' y='" .. ButtonBrakeY + (ButtonBrakeHeight/2) + 5 .. "' font-size='24' fill='"
                    if BrakeIsOn then
                        content = content .. "black"
                    else
                        content = content .. "white"
                    end
                    
                    content = content .. "' text-anchor='middle' font-family='Montserrat'>"
                    
                    if BrakeIsOn then 
                        content = content .. "Disengage Brake</text>"
                    else
                        content = content .. "Engage Brake</text>"
                    end
                    
                    
                    -- Prograde button
                    content = content .. "<rect rx='5' ry='5' x='" .. ButtonProgradeX .. "' y='" .. ButtonProgradeY .. "' width='" .. ButtonProgradeWidth .. "' height='" .. ButtonProgradeHeight .. "' fill='" 
                    if ProgradeIsOn then 
                        content = content .. "#FFEECC'" -- Orange if it's on
                    else
                        content = content .. defaultColor
                    end
                    if ProgradeButtonHovered then 
                        content = content .. " style='stroke:white; stroke-width:2;stroke-opacity:0.5;fill-opacity:1'"
                    else
                        content = content .. " style='stroke:black; stroke-width:1;stroke-opacity:0.5;fill-opacity:0.5'"
                    end    
                    content = content .. "></rect>"
                    
                    content = content .. "<text x='" .. ButtonProgradeX + ButtonProgradeWidth/2 .. "' y='" .. ButtonProgradeY + (ButtonProgradeHeight/2) + 5 .. "' font-size='24' fill='"
                    if ProgradeIsOn then
                        content = content .. "black"
                    else
                        content = content .. "white"
                    end
                    
                    content = content .. "' text-anchor='middle' font-family='Montserrat'>"
                    
                    if ProgradeIsOn then 
                        content = content .. "Disable Prograde</text>"
                    else
                        content = content .. "Align Prograde</text>"
                    end
                    
                    
                    -- Retrograde button
                    content = content .. "<rect rx='5' ry='5' x='" .. ButtonRetrogradeX .. "' y='" .. ButtonRetrogradeY .. "' width='" .. ButtonRetrogradeWidth .. "' height='" .. ButtonRetrogradeHeight .. "' fill='" 
                    if RetrogradeIsOn then 
                        content = content .. "#42006b'" -- Purple if it's on
                    else
                        content = content .. defaultColor
                    end
                    if RetrogradeButtonHovered then 
                        content = content .. " style='stroke:white; stroke-width:2;stroke-opacity:0.5;fill-opacity:1'"
                    else
                        content = content .. " style='stroke:black; stroke-width:1;stroke-opacity:0.5;fill-opacity:0.5'"
                    end    
                    content = content .. "></rect>"
                    
                    content = content .. "<text x='" .. ButtonRetrogradeX + ButtonRetrogradeWidth/2 .. "' y='" .. ButtonRetrogradeY + (ButtonRetrogradeHeight/2) + 5 .. "' font-size='24' fill='"
                    if RetrogradeIsOn then
                        content = content .. "black"
                    else
                        content = content .. "white"
                    end
                    
                    
                    content = content .. "' text-anchor='middle' font-family='Montserrat'>"
                    
                    if RetrogradeIsOn then 
                        content = content .. "Disable Retrograde</text>"
                    else
                        content = content .. "Align Retrograde</text>"
                    end
                    
                    
                    -- Autopilot button
                    content = content .. "<rect rx='5' ry='5' x='" .. ButtonAutopilotX .. "' y='" .. ButtonAutopilotY .. "' width='" .. ButtonAutopilotWidth .. "' height='" .. ButtonAutopilotHeight .. "' fill='" 
                    if Autopilot then 
                        content = content .. "red'" -- Red if it's on
                    else
                        content = content .. defaultColor
                    end
                    if AutopilotButtonHovered then 
                        content = content .. " style='stroke:white; stroke-width:2;stroke-opacity:0.5;fill-opacity:1'"
                    else
                        content = content .. " style='stroke:black; stroke-width:1;stroke-opacity:0.5;fill-opacity:0.5'"
                    end    
                    content = content .. "></rect>"
                    
                    content = content .. "<text x='" .. ButtonAutopilotX + ButtonAutopilotWidth/2 .. "' y='" .. ButtonAutopilotY + (ButtonAutopilotHeight/2) + 5 .. "' font-size='22' fill='"
                    if Autopilot then
                        content = content .. "black"
                    else
                        content = content .. "white"
                    end
                    
                    
                    content = content .. "' text-anchor='middle' font-family='Montserrat'>"
                    local apName = AutopilotTargetName
                    if apName == nil then
                        apName = "None"
                    end
                    if Autopilot then 
                        content = content .. "Disable Autopilot</text>"
                    else
                        content = content .. "Engage Autopilot: " .. apName .. "</text>"
                    end
                end
                function HideInterplanetaryPanel()
                    system.destroyWidgetPanel(panelInterplanetary)
                    panelInterplanetary = nil
                end
                function ToggleAutoBrake()
                    if AutopilotTargetPlanetName ~= "None" and brakeInput == 0 and not AutoBrake then
                        AutoBrake = true
                        Autopilot = false
                    else
                        AutoBrake = false
                    end
                end
                function ToggleAutoPilot()
                    if AutopilotTargetPlanetName ~= "None" and brakeInput == 0 and unit.getAtmosphereDensity() == 0 and not Autopilot then
                        Autopilot = true
                        AutoBrake = false
                    else
                        Autopilot = false
                    end
                end
                function ToggleTurnBurn()
                    TurnBurn = not TurnBurn
                end
                system.showScreen(1)
                function getRelativePitch(velocity) 
                    local pitch = -math.deg(math.atan(velocity.y, velocity.z)) + 180
                    -- This is 0-360 where 0 is straight up
                    pitch = pitch - 90
                    -- So now 0 is straight, but we can now get angles up to 420
                    if pitch < 0 then
                       pitch = 360 + pitch 
                    end 
                    -- Now, if it's greater than 180, say 190, make it go to like -170
                    if pitch > 180 then
                       pitch = -180 + (pitch-180) 
                    end
                    -- And it's backwards.  
                    return -pitch
                end
                function getRelativeYaw(velocity) 
                    return math.deg(math.atan(velocity.y, velocity.x)) - 90
                end
                function AlignToWorldVector(vector)
                    -- Sets inputs to attempt to point at the autopilot target
                    -- Meant to be called from Update or Tick repeatedly
                    vector = vec3(vector):normalize() -- Is this expensive if it was already done?
                    local targetVec = (core_world_forward - vector)
                    local yawAmount = -getMagnitudeInDirection(targetVec, core_world_right) * AutopilotStrength
                    local pitchAmount = -getMagnitudeInDirection(targetVec, core_world_up) * AutopilotStrength

                    yawInput2 = yawInput2 - (yawAmount + (yawAmount - PreviousYawAmount) * DampingMultiplier)
                    pitchInput2 = pitchInput2 + (pitchAmount + (pitchAmount - PreviousPitchAmount) * DampingMultiplier)
                    
                    PreviousYawAmount = yawAmount
                    PreviousPitchAmount = pitchAmount
                    --system.print(math.abs(vector:dot(vec3(core.getConstructWorldOrientationForward()))))
                    -- Return true or false depending on whether or not we're aligned
                    if math.abs(yawAmount) < alignmentTolerance and math.abs(pitchAmount) < alignmentTolerance then
                        return true
                    end
                    return false
                end
                
                function DrawDeadZone(content)
                    if system.isViewLocked() == 0 then
                        content = content .. "<circle cx='50%' cy='50%' r='".. DeadZone .. "' stroke=rgb(" .. math.floor(PrimaryR*0.3) .. "," .. math.floor(PrimaryG*0.3) .. "," .. math.floor(PrimaryB*0.3) .. ") stroke-width='2' fill='none' />"
                    else
                        content = content .. "<circle cx='50%' cy='50%' r='".. DeadZone .. "' stroke=rgb(" .. math.floor(PrimaryR*0.8) .. "," .. math.floor(PrimaryG*0.8) .. "," .. math.floor(PrimaryB*0.8) .. ") stroke-width='2' fill='none' />"
                    end
                    return content
                end
                
                -- HUD - https://github.com/Rezoix/DU-hud with major modifications by Archeageo
                function updateHud()
                    if updateCount%FrameSkipRate == 0 then
                        updateCount = 0
                        local altitude = core_altitude
                        local velocity = core_velocity
                        local speed = core_speed
                        local worldV = core_world_vertical
                        local constrF = core_world_forward
                        local constrR = core_world_right
                        local constrV = core_world_up
                        local pitch = core_pitch--180 - getRoll(worldV, constrR, constrF)
                        local roll = core_roll --getRoll(worldV, constrF, constrR)
                        local originalRoll = roll
                        local originalPitch = math.floor(pitch)
                        local bottomText = "ROLL"
                        local gravity = core_gravity_magnitude
                        
                        local atmos = core_atmosphere_density
                        local throt = core_throttle_amount
                        local spd = speed*3.6
                        local flightValue = core_flight_value
                        local flightType = core_flight_type
                        local flightStyle = "TRAVEL"
                        
                        local rgb, rgbdim, rgbdimmer, rgbO, rgbdimO, rgbdimmerO
                        rgbO = core_rgb
                        rgbdimO = core_rgbdim
                        rgbdimmerO = core_rgbdimmer
                        if core_view_locked and userControlScheme ~= "Keyboard" then
                            rgb = core_rgb_disabled
                            rgbdim = core_rgbdim_disabled
                            rgbdimmer = core_rgbdimmer_disabled
                        else
                            rgb = core_rgb
                            rgbdim = core_rgbdim
                            rgbdimmer = core_rgbdimmer
                        end
                        
                        local rgb = [[rgb(]] .. PrimaryR .. "," .. PrimaryG .. "," .. PrimaryB .. [[)]]
                        local rgbdim = [[rgb(]] .. math.floor(PrimaryR *0.9 + 0.5) .. "," .. math.floor(PrimaryG * 0.9 + 0.5) .. "," .. math.floor(PrimaryB * 0.9 + 0.5) .. [[)]]
                        local rgbdimmer = [[rgb(]] .. math.floor(PrimaryR *0.8 + 0.5) .. "," .. math.floor(PrimaryG * 0.8 + 0.5) .. "," .. math.floor(PrimaryB * 0.8 + 0.5) .. [[)]]
                        local rgbO = rgb
                        local rgbdimO = rgbdim
                        local rgbdimmerO = rgbdimmer
                        if system.isViewLocked() == 0 and userControlScheme ~= "Keyboard" then
                            rgb = [[rgb(]] .. math.floor(PrimaryR *0.5 + 0.5) .. "," .. math.floor(PrimaryG * 0.5 + 0.5) .. "," .. math.floor(PrimaryB * 0.5 + 0.5) .. [[)]]
                            rgbdim = [[rgb(]] .. math.floor(PrimaryR *0.4 + 0.5) .. "," .. math.floor(PrimaryG * 0.4 + 0.5) .. "," .. math.floor(PrimaryB * 0.4 + 0.5) .. [[)]]
                            rgbdimmer = [[rgb(]] .. math.floor(PrimaryR *0.3 + 0.5) .. "," .. math.floor(PrimaryG * 0.3 + 0.5) .. "," .. math.floor(PrimaryB * 0.3 + 0.5) .. [[)]]
                        end
                        if (flightType == 1) then
                            flightStyle = "CRUISE"

                        end
                        if Autopilot then
                            flightStyle = "AUTOPILOT"
                        end

                        if (atmos == 0) then
                            if (speed > 5) then
                                pitch = core_relative_pitch
                                roll = core_relative_yaw
                            else
                                pitch = 0
                                roll = 0
                            end
                            bottomText = "YAW"
                        end
                        
                        content = [[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {display:block; position:absolute; top:0; left:0} 
                                .majorLine {stroke:]] .. rgbO .. [[;opacity:0.7;stroke-width:3;fill-opacity:0;}
                                .minorLine {stroke:]] .. rgb .. [[;opacity:0.7;stroke-width:3;fill-opacity:0;}
                                .text {fill:]] .. rgbdimmer .. [[;font-family:Montserrat;font-weight:bold}
                            </style>
                        </head>
                        <body>
                            <svg height="100%" width="100%" viewBox="0 0 1920 1080">
                            <defs>
                                <filter id="shadow">
                                  <feDropShadow dx="0.2" dy="0.4" stdDeviation="0.2"/>
                                </filter>
                            </defs>
                                <g class="majorLine">
                                    <path d="M 700 0 L 740 35 Q 960 55 1180 35 L 1220 0"/>
                                </g>
                                <g class="minorLine">
                                    <path d="M 792 550 L 785 550 L 785 650 L 792 650"/>
                                </g>
                                <g>
                                    <polygon points="1138,540 1120,535 1120,545" style="fill:]] ..rgb.. [[;opacity:0.7"/>
                                </g>
                                <g class="text">
                                    <g font-size=10>
                                        <text x="960" y="375" text-anchor="middle" style="fill:]] .. rgbO .. [[">SPEED</text>
                                        <text x="960" y="390" text-anchor="middle" style="fill:]] .. rgbO .. [[;font-size:14;">]]..math.floor(spd)..[[ km/h</text>
                                        <text x="1200" y="710" text-anchor="end">GRAVITY</text>
                                        <text x="1200" y="720" text-anchor="end">]]..gravity..[[ m/s2</text>
                                    </g>
                                    <g font-size=15>
                                        <text x="960" y="33" text-anchor="middle" style="fill:]] .. rgbO .. [[">]]..flightStyle..[[</text>
                                    </g>
                                </g>]]
                        if (flightStyle == "TRAVEL" or flightStyle == "AUTOPILOT") then
                            content = content..[[
                                <g class="text">
                                    <g font-size=10>
                                        <text x="790" y="660" text-anchor="start" style="fill:]] .. rgbO .. [[">THROT</text>
                                        <text x="790" y="670" text-anchor="start" style="fill:]] .. rgbO .. [[">]]..throt..[[%</text>
                                    </g>
                                </g>]]
                        else
                            content = content..[[
                                <g class="text">
                                    <g font-size=10>
                                        <text x="790" y="660" text-anchor="start" style="fill:]] .. rgbO .. [[">CRUISE</text>
                                        <text x="790" y="670" text-anchor="start" style="fill:]] .. rgbO .. [[">]]..flightValue..[[ km/h</text>
                                    </g>
                                </g>]]
                        end

                        local color, colorMod
                        local y1 = 740
                        local y2 = 750
                        if (atmofueltank_size > 0) then  -- TODO: Refactor this to do the processing somewhere else
                            for i = 1, atmofueltank_size do
                                fuelTimeLeft = json.decode(atmofueltank[i].getData()).timeLeft
                                fuelPercent = json.decode(atmofueltank[i].getData()).percentage
                                if fuelPercent ~= nil then
                                    colorMod = math.floor(fuelPercent*2.55)
                                    if (fuelTimeLeft ~= "n/a") then
                                        fuelTimeLeft = math.floor(fuelTimeLeft / 60)
                                        if (fuelTimeLeft > 1) then
                                            color = [[rgb(]] .. 255-colorMod .. "," .. colorMod .. "," .. 0 .. [[)]]
                                        else
                                            color = [[rgb(]] .. 255 .. "," .. 0 .. "," .. 0 .. [[)]]
                                        end
                                    else
                                        color = [[rgb(]] .. 255-colorMod .. "," .. colorMod .. "," .. 0 .. [[)]]
                                    end
                                    content = content..[[
                                        <g class="text">
                                            <g font-size=10>
                                                <text x="770" y="]]..y1..[[" text-anchor="end" style="fill:]] .. color .. [[">ATMOFUEL ]]..i..[[</text>
                                                <text x="770" y="]]..y2..[[" text-anchor="end" style="fill:]] .. color .. [[">]]..fuelPercent..[[% ]]..fuelTimeLeft..[[ min</text>
                                            </g>
                                        </g>]]
                                    y1 = y1+20
                                    y2 = y2+20
                                end
                            end
                        end
                        y1 = 740
                        y2 = 750
                        if (spacefueltank_size > 0) then 
                            for i = 1, spacefueltank_size do
                                fuelTimeLeft = json.decode(spacefueltank[i].getData()).timeLeft
                                fuelPercent = json.decode(spacefueltank[i].getData()).percentage
                                if fuelPercent ~= nil then
                                    colorMod = math.floor(fuelPercent*2.55)
                                    if (fuelTimeLeft ~= "n/a") then
                                        fuelTimeLeft = math.floor(fuelTimeLeft / 60)
                                        if (fuelTimeLeft > 1) then
                                            color = [[rgb(]] .. 255-colorMod .. "," .. colorMod .. "," .. 0 .. [[)]]
                                        else
                                            color = [[rgb(]] .. 255 .. "," .. 0 .. "," .. 0 .. [[)]]
                                        end
                                    else
                                        color = [[rgb(]] .. 255-colorMod .. "," .. colorMod .. "," .. 0 .. [[)]]
                                    end
                                    content = content..[[
                                        <g class="text">
                                            <g font-size=10>
                                                <text x="1200" y="]]..y1..[[" text-anchor="end" style="fill:]] .. color .. [[">SPACEFUEL ]]..i..[[</text>
                                                <text x="1200" y="]]..y2..[[" text-anchor="end" style="fill:]] .. color .. [[">]]..fuelPercent..[[% ]]..fuelTimeLeft..[[ min</text>
                                            </g>
                                        </g>]]
                                    y1 = y1+20
                                    y2 = y2+20
                                end
                            end
                        end
                        speedC=math.floor(spd)
                        rollC = math.floor(roll)
                        pitchC = math.floor(pitch)    
                            for i = pitchC-25,pitchC+25 do
                                if (i%10==0) then
                                    num = i
                                    if (num > 180) then
                                        num = -180 + (num-180)
                                    elseif (num < -180) then
                                        num = 180 + (num+180)
                                    end
                                    content = content..[[<g transform="translate(0 ]]..(-i*5 + pitch*5 + 5)..[[)">
                                        <text x="1180" y="540" style="fill:]] ..rgbdim.. [[;text-anchor:start;font-size:12;font-family:Montserrat;font-weight:bold">]]..num..[[</text></g>]]
                                end
                                if (i%10==0) then
                                    len = 30
                                elseif (i%5==0) then
                                    len = 20
                                else
                                    len = 7
                                end
                                    content = content..[[
                                    <g transform="translate(0 ]]..(-i*5 + pitch*5)..[[)">
                                        <line x1="]]..(1140+len)..[[" y1="540" x2="1140" y2="540"style="stroke:]] ..rgbdim.. [[;opacity:0.3;stroke-width:2"/></g>]]
                            end
                            content = content..[[
                                <g class="text">
                                    <g font-size=10>
                                        <text x="1180" y="380" text-anchor="end" style="fill:]] .. rgbO .. [[">PITCH</text>
                                        <text x="1180" y="390" text-anchor="end" style="fill:]] .. rgbO .. [[">]]..pitchC..[[ deg</text>
                                    </g>
                                </g>
                            ]]

                        --** CIRCLE ALTIMETER  - Base Code from Discord @Rainsome = Youtube CaptainKilmar** 
                        if circleRad > 0 and core_planet_influence > 0 then
                            if originalPitch > 90 and atmos == 0 then
                                originalPitch = 90-(originalPitch-90)
                            elseif originalPitch < -90 and atmos == 0 then
                                originalPitch = -90 - (originalPitch+90)
                            end
                            --system.print(originalPitch)
                            content = content..[[<circle r="]]..circleRad..[[" cx="960" cy="540" opacity="0.1" fill="]] .."#0083cb".. [[" stroke="black" stroke-width="2"/><clipPath id="cut"><circle r="]]..(circleRad-1)..[[" cx="960" cy="540"/></clipPath>
                            <rect x="]]..(960-circleRad)..[[" y="]] ..(540 + circleRad*(originalPitch/90)).. [[" height="]]..(circleRad*2)..[[" width="]]..(circleRad*2)..[[" opacity="0.3" fill="]] .."#6b5835".. [[" clip-path="url(#cut)" transform="rotate(]] ..(-1*originalRoll).. [[ 960 540)"/>]]
                        end
                        content = content..[[
                            <g class="text">
                            <g font-size=10>
                            <text x="960" y="688" text-anchor="middle" style="fill:]] .. rgbO .. [[">]]..bottomText..[[</text>
                            <text x="960" y="698" text-anchor="middle" style="fill:]] .. rgbO .. [[">]]..math.floor(roll)..[[ deg</text>]]
                        content = content..[[<g>
                            <polygon points="960,725 955,707 965,707" style="fill:]] ..rgb.. [[;opacity:0.7"/>
                            </g>]]
                        for i = rollC-35,rollC+35 do
                            if (i%10==0) then
                                local sign = i/math.abs(i)
                                if i == 0 then
                                    sign = 0
                                end
                                num = math.abs(i)
                                if (num > 180) then
                                    num = 180 + (180-num) 
                                end
                                content = content..[[<g transform="rotate(]]..(i - roll)..[[,960,460)">
                                    <text x="960" y="760" style="fill:]] ..rgbdim.. [[;text-anchor:middle;font-size:12;font-family:Montserrat;font-weight:bold">]]..math.floor(sign*num+0.5)..[[</text></g>]]
                                end
                            len = 5
                            if (i%10==0) then
                                len = 15
                            elseif (i%5==0) then
                                len = 10
                            end
                            content = content..[[<g transform="rotate(]]..(i - roll)..[[,960,460)">
                            <line x1="960" y1="730" x2="960" y2="]]..(730+len)..[[" style="stroke:]] ..rgbdim ..[[;opacity:0.3;stroke-width:2"/></g>]]
                        end
                        if altitude > 0 then
                            content = content..[[
                            <g>
                                <polygon points="782,540 800,535 800,545" style="fill:]] ..rgb.. [[;opacity:0.7"/>
                            </g>
                            <g class="text">
                            <g font-size=10>
                                <text x="770" y="380" text-anchor="end">ALTITUDE</text>
                                <text x="770" y="390" text-anchor="end">]]..math.floor(altitude)..[[ m</text>
                                <text x="770" y="710" text-anchor="end">ATMOSPHERE</text>
                                <text x="770" y="720" text-anchor="end">]]..(math.floor((atmos)*100)/100)..[[ m</text>
                            </g>
                            </g>]]
                            altC = math.floor(altitude)
                            for i = altC-25,altC+25 do
                                if (i%10==0) then
                                    num = i
                                    if (num < 0) then
                                        num = 0
                                    end
                                content = content..[[<g transform="translate(0 ]]..(-i*5 + altitude*5)..[[)">
                                    <text x="745" y="540" style="fill:]] ..rgbdim.. [[;text-anchor:end;font-size:12;font-family:Montserrat;font-weight:bold">]]..num..[[</text></g>]]
                                end
                                len = 5
                                if (i%10==0) then
                                    len = 30
                                elseif (i%5==0) then
                                    len = 15
                                end
                                content = content..[[
                                <g transform="translate(0 ]]..(-i*5 + altitude*5)..[[)">
                                    <line x1="]]..(780-len)..[[" y1="540" x2="780" y2="540"style="stroke:]]..rgbdim..[[;opacity:0.3;stroke-width:2"/></g>]]
                            end 
                        end
                        content = content..[[<g transform="translate(0 ]]..(1-throt)..[[)">
                            <polygon points="798,650 810,647 810,653" style="fill:]] ..rgbdim.. [[;opacity:0.7"/>
                            </g>]]
                        -- After the HUD, set RGB values back to undimmed even if view is unlocked for orbitmap etc
                        rgb = rgbO
                        rgbdim = rgbdimO
                        rgbdimmer = rgbdimmerO
                        if unit.isMouseControlActivated() == 1 then
                            content = content .. "<text x='960' y='550' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Warning: Invalid Control Scheme Detected</text>"
                            content = content .. "<text x='960' y='600' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Keyboard Scheme must be selected</text>"
                            content = content .. "<text x='960' y='650' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Set your preferred scheme in Lua Parameters instead</text>"
                        end
                        if brakeInput == 1 then
                            content = content .. "<text x='960' y='860' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Brake Engaged</text>"
                        end
                        if gearExtended then
                            if hasGear then 
                                content = content .. "<text x='960' y='900' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Gear Extended</text>"
                            else
                                content = content .. "<text x='960' y='900' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Landing Mode - Press G to Takeoff</text>"
                            end
                            content = content .. "<text x='960' y='930' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Hover Height: " .. getDistanceDisplayString(Nav:getTargetGroundAltitude()) .. "</text>"
                        end
                        if AutoBrake and AutopilotTargetPlanetName then
                            if brakeInput == 0 then
                                content = content .. "<text x='960' y='225' font-size='20' fill='orange' text-anchor='middle' font-family='Montserrat'>Auto-Braking when within " .. getDistanceDisplayString(maxBrakeDistance) .. " of " .. AutopilotTargetPlanet.name .. "</text>"
                            else
                                content = content .. "<text x='960' y='225' font-size='20' fill='orange' text-anchor='middle' font-family='Montserrat'>Auto-Braking until eccentricity:" .. round(orbit.eccentricity,2) .. " begins to increase</text>"
                            end
                        elseif Autopilot and AutopilotTargetPlanetName then
                            content = content .. "<text x='960' y='225' font-size='20' fill='orange' text-anchor='middle' font-family='Montserrat'>Autopilot Engaged - " .. AutopilotStatus .. "</text>"
                        end
                        if TurnBurn then
                            content = content .. "<text x='960' y='150' font-size='20' fill='darkred' text-anchor='middle' font-family='Montserrat'>Turn & Burn Braking</text>"
                        end
                        local orbit = core_orbit
                        if orbit ~= nil and orbit.eccentricity < 1 and orbit.eccentricity > 0 and atmos < 0.25 and planet ~= nil and orbit.period ~= nil then
                            -- If orbits are up, let's try drawing a mockup
                            -- We don't really care about scale.
                            -- First let's define an area to draw it
                            local orbitMapX = 75
                            local orbitMapY = 0
                            local orbitMapSize = 250 -- Always square
                            local pad = 4
                            orbitMapY = orbitMapY + pad
                            
                            -- Draw a darkened box around it to keep it visible
                            content = content .. '<rect width="' .. orbitMapSize+orbitMapX*2 .. '" height="' .. orbitMapSize+orbitMapY .. '" rx="10" ry="10" x="' .. pad .. '" y="' .. pad .. '" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />'
                            
                            -- Then, draw a 'planet' in the center
                            -- Now draw an ellipse, with both foci at the planet because we're assuming 0 mass ship
                            -- Where rx is apoapsis - periapsis (scaled), and ry is... related to eccentricity
                            -- Such that an eccentricity of 0 gives ry = rx, and eccentricity of 1+ gives ry = 0 (don't draw it)
                            -- So ry would be (1-eccentricity)*rx
                            -- And actually.  To scale rx would to be to make it always equal to width.
                            local rx = orbitMapSize/4
                            
                            -- And, the center of the thing should be shifted so that the apo is far and periapsis is near
                            -- We have arbitrarily chosen the AP to be to the right
                            -- So shift it right by (AP-PE)... scaled...
                            -- To figure out the scale, compare (AP + PE + radius*2) to rx
                            local scale = (orbit.apoapsis.altitude + orbit.periapsis.altitude + planet.radius*2)/(rx*2)
                            --local ry = (1-orbit.eccentricity)*rx
                            local ry = (planet.radius + orbit.periapsis.altitude + (orbit.apoapsis.altitude - orbit.periapsis.altitude)/2)/scale * (1-orbit.eccentricity)
                            -- Then if we divide our xOffset by this it should be good
                            --local xOffset = ((orbit.apoapsis.altitude - orbit.periapsis.altitude)/scale)
                            local xOffset = rx - orbit.periapsis.altitude/scale - planet.radius/scale
                            
                            local ellipseColor = rgbdim
                            if orbit.periapsis.altitude <= 0 then
                                ellipseColor = 'red'
                            end
                            content = content .. '<ellipse cx="' .. orbitMapX + orbitMapSize/2 + xOffset + pad .. '" cy="' .. orbitMapY + orbitMapSize/2 + pad .. '" rx="' .. rx .. '" ry="' .. ry .. '" style="fill:none;stroke:' .. ellipseColor .. ';stroke-width:2" />'
                            content = content .. '<circle cx="' .. orbitMapX + orbitMapSize/2 + pad .. '" cy="' .. orbitMapY + orbitMapSize/2 + pad .. '" r="' .. planet.radius/scale .. '" stroke="white" stroke-width="3" fill="blue" />' -- I think the stroke-width is extending past the radius so -3?  IDK though.  Things just get weird on scales like these.
                            -- Mark the apoapsis and periapsis, AP is on the right
                            
                            local orbitInfoYOffset = 15
                            local x = orbitMapX + orbitMapSize + orbitMapX/2 + pad
                            local y = orbitMapY + orbitMapSize/2 + 5 + pad
                            
                            -- Draw guide lines on the ellipse somehow, from the edge of where the title should be
                            content = content .. [[<line x1="]].. x - 35 ..[[" y1="]] .. y-5 .. [[" x2="]] .. orbitMapX + orbitMapSize/2 + rx + xOffset .. [[" y2="]] .. y-5 .. [["style="stroke:]] .. rgbdim .. [[;opacity:0.3;stroke-width:3"/>]]
                            
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='14' fill=" .. rgb .. " text-anchor='middle' font-family='Montserrat'>Apoapsis</text>"
                            y  = y + orbitInfoYOffset
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getDistanceDisplayString(orbit.apoapsis.altitude) .. "</text>"
                            y  = y + orbitInfoYOffset
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. FormatTimeString(orbit.timeToApoapsis) .. "</text>"
                            y  = y + orbitInfoYOffset
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getSpeedDisplayString(orbit.apoapsis.speed) .. "</text>"
                            
                            y = orbitMapY + orbitMapSize/2 + 5 + pad
                            x = orbitMapX - orbitMapX/2+10 + pad
                            
                            content = content .. [[<line x1="]].. x + 35 ..[[" y1="]] .. y-5 .. [[" x2="]] .. orbitMapX + orbitMapSize/2 - rx + xOffset .. [[" y2="]] .. y-5 .. [["style="stroke:]] .. rgbdim .. [[;opacity:0.3;stroke-width:3"/>]]
                            
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='14' fill=" .. rgb .. " text-anchor='middle' font-family='Montserrat'>Periapsis</text>"
                            
                            y  = y + orbitInfoYOffset
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getDistanceDisplayString(orbit.periapsis.altitude) .. "</text>"
                            y  = y + orbitInfoYOffset
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. FormatTimeString(orbit.timeToPeriapsis) .. "</text>"
                            y  = y + orbitInfoYOffset
                            content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getSpeedDisplayString(orbit.periapsis.speed) .. "</text>"
                            
                            -- Add a label for the planet
                            content = content .. "<text x='" .. orbitMapX + orbitMapSize/2 + pad .. "' y='" .. 20 + pad .. "' font-size='18' fill=" .. rgb .. " text-anchor='middle' font-family='Montserrat'>" .. planet.name .. "</text>"
                            
                            
                            
                            -- And ... the hard part.  Figure out how to mark the ship.
                            -- We could use the scale we calced and get the ship's distance from the planet center
                            -- And that would tell us a part of it.
                            -- If we take TimeToPeriapsis/Period, it should give us a value from 0 to 1 where 0.5 means we're at the apoapsis, 0 and 1 both mean basically at periapsis
                            -- So from 1 to 0.5 is the bottom half of the ellipse
                            -- And from 0.5 to 0 is the top half
                            -- And then from 0.5 to 0, and 1 to 0.5, is the right half...
                            -- Or, if ratio is more than 0.25 or less than 0.75
                            
                            local apsisRatio = (orbit.timeToApoapsis/orbit.period) * 2 * math.pi
                            -- So now that we have directions, we need to calc a distance from the center to the orbit
                            
                            -- Or am I stupid.
                            -- I have a number from 0 to 1 representing an angle.  If I multiply by 2pi that's radians right?
                            
                            -- Alright alright.
                            -- x = xr * cos(t)
                            -- y = yr * sin(t)
                            -- Where t ranges from 0 to 2pi radians
                            local shipX = rx * math.cos(apsisRatio)
                            local shipY = ry * math.sin(apsisRatio)
                            
                            content = content .. '<circle cx="' .. orbitMapX + orbitMapSize/2 + shipX + xOffset + pad .. '" cy="' .. orbitMapY + orbitMapSize/2 + shipY + pad .. '" r="5" stroke="white" stroke-width="3" fill="white" />'
                            
                            
                            -- Once we have all that, we should probably rotate the entire thing so that the ship is always at the bottom so you can see AP and PE move?
                            
                        end
                        content = content..[[</svg>]]
                        content = content .. [[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]] -- Give us our 1440p viewport for my stuff
                        content = DrawDeadZone(content)
                        if core_view_locked then
                            if HoldingCtrl then
                                DrawButtons()
                                SetButtonContains()
                            else
                                CheckButtons() -- Check them if they're not holding it anymore
                            end
                        else
                        
                        end

                        distance = math.sqrt(simulatedX*simulatedX + simulatedY*simulatedY)
                        if distance > DeadZone and not HoldingCtrl then -- Draw a line to the cursor from the screen center
                            -- Note that because SVG lines suck, we have to do a translate and they can't use calc in their params
                            content = DrawCursorLine(content, distance)
                        end
                                -- Cursor always on top, draw it last
                        content = content .. "<circle stroke='white' cx='calc(50% + " .. simulatedX .. "px)' cy='calc(50% + " .. simulatedY .. "px)' r='5'/>"
                        content = content .. [[</svg></body>]]
                        system.setScreen(content)
                    else
                        updateCount = updateCount + 1
                    end
                end
                
                function getPitch(gravityDirection, forward, right)
                    local horizontalForward = gravityDirection:cross(right):normalize_inplace() -- Cross forward?
                    local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg -- acos?
                    if horizontalForward:cross(-forward):dot(right) < 0 then pitch = -pitch end -- Cross right dot forward?
                    return pitch
                end
                
                function getDistanceDisplayString(distance)
                    local su = distance > 100000
                    local result = ""
                    if su then
                        -- Convert to SU
                        result = round(distance/1000/200,1) .. " SU"
                    elseif distance < 1000 then
                        result = round(distance,1) .. " M"
                    else
                        -- Convert to KM
                        result = round(distance/1000,1) .. " KM"
                    end

                    return result
                end
                function getSpeedDisplayString(speed) -- TODO: Allow options, for now just do kph
                    return math.floor(round(speed*3.6,0)+0.5) .. " km/h" -- And generally it's not accurate enough to not twitch unless we round 0
                end
                function FormatTimeString(seconds)
                    local hours = math.floor(seconds/3600)
                    local minutes = math.floor(seconds/60%60)
                    local seconds = math.floor(seconds%60)
                    if seconds < 0 or hours < 0 or minutes < 0 then
                        return "0s"
                    end
                    return hours .. "h " .. minutes .. "m" .. seconds .. "s"
                end
                function getMagnitudeInDirection(vector, direction)
                    --return vec3(vector):project_on(vec3(direction)):len()
                    vector = vec3(vector)
                    direction = vec3(direction):normalize()
                    local result = vector*direction -- To preserve sign, just add them I guess
                    return result.x + result.y + result.z
                end
                function UpdateAutopilotTarget()
                    -- So the indices are weird.  I think we need to do a pairs
                    if AutopilotTargetIndex == 0 then
                        AutopilotTargetName = nil
                        AutopilotTargetPlanet = nil
                        return true
                    end
                    local count = 0
                    for k,v in pairs(Atlas()[0]) do
                        count = count + 1
                        if count == AutopilotTargetIndex then
                            AutopilotTargetName = v.name
                            AutopilotTargetPlanet = galaxyReference[0][k]
                            AutopilotTargetCoords = vec3(AutopilotTargetPlanet.center) -- Aim center until we align
                            -- Determine the end speed
                            _, AutopilotEndSpeed = kepPlanet:escapeAndOrbitalSpeed(AutopilotTargetOrbit)
                            --AutopilotEndSpeed = 0
                            --AutopilotPlanetGravity = AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center + vec3({1,0,0}) * AutopilotTargetOrbit):len() -- Any direction, at our orbit height
                            AutopilotPlanetGravity = 0 -- This is inaccurate unless we integrate and we're not doing that.  
                            AutopilotAccelerating = false
                            AutopilotBraking = false
                            AutopilotCruising = false 
                            Autoilot = false
                            AutopilotRealigned = false
                            AutopilotStatus = "Aligning"
                            return true
                        end
                    end
                    system.print("Error: Autopilot index was outside the bounds of the target range")
                    return false
                end
                function IncrementAutopilotTargetIndex()
                    AutopilotTargetIndex = AutopilotTargetIndex + 1
                    if AutopilotTargetIndex >  atlasSize then 
                        AutopilotTargetIndex = 0
                    end
                    UpdateAutopilotTarget()
                end
                function DecrementAutopilotTargetIndex()
                    AutopilotTargetIndex = AutopilotTargetIndex - 1
                    if AutopilotTargetIndex < 0 then 
                        AutopilotTargetIndex = atlasSize
                    end
                    UpdateAutopilotTarget()
                end
                function GetAutopilotTravelData() -- Returns traveltime, distance, brakedistance, braketime, maxbrakedistance, maxbraketime
                    local AutopilotDistance = (AutopilotTargetPlanet.center - core_world_position):len()
                    local velocity = core_velocity
                    local accelDistance, accelTime = Kinematic.computeDistanceAndTime(core_speed,
                        MaxGameVelocity, -- From currently velocity to max
                        core.getConstructMass(),
                        Nav:maxForceForward(),
                        warmup, 
                        0) -- Brake thrust, none for this
                    -- accelDistance now has the amount of distance for which we will be accelerating
                    -- Then we need the distance we'd brake from full speed
                    -- Note that for some nearby moons etc, it may never reach full speed though.
                    local brakeDistance, brakeTime
                    if not TurnBurn then 
                        brakeDistance, brakeTime = GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)
                    else
                        brakeDistance, brakeTime = GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)
                    end
                    local curBrakeDistance, curBrakeTime
                    if not TurnBurn then 
                        curBrakeDistance, curBrakeTime = GetAutopilotBrakeDistanceAndTime(core_speed)
                    else
                        curBrakeDistance, curBrakeTime = GetAutopilotTBBrakeDistanceAndTime(core_speed)
                    end
                    local cruiseDistance = 0
                    local cruiseTime = 0
                    
                    -- So, time is in seconds
                    -- If cruising or braking, use real cruise/brake values
                    if brakeDistance + accelDistance < AutopilotDistance then 
                        -- Add any remaining distance
                        cruiseDistance = AutopilotDistance - (brakeDistance + accelDistance)
                        cruiseTime = Kinematic.computeTravelTime(8333.0556, 0, cruiseDistance)
                    else
                        local accelRatio = (AutopilotDistance - brakeDistance)/accelDistance
                        accelDistance = AutopilotDistance - brakeDistance -- Accel until we brake
                        accelTime = accelTime * accelRatio
                    end
                    if AutopilotBraking then
                        return curBrakeTime, AutopilotDistance, curBrakeDistance, curBrakeTime, brakeDistance, brakeTime
                    elseif AutopilotCruising then
                        return cruiseTime + curBrakeTime, AutopilotDistance, curBrakeDistance, curBrakeTime, brakeDistance, brakeTime
                    else -- If not cruising or braking, assume we'll get to max speed
                        return accelTime + brakeTime + cruiseTime, AutopilotDistance, curBrakeDistance, curBrakeTime, brakeDistance, brakeTime
                    end
                end
                function GetAutopilotBrakeDistanceAndTime(speed)
                    local maxBrake = json.decode(unit.getData()).maxBrake
                    if maxBrake ~= nil then
                        LastMaxBrake = maxBrake
                        return Kinematic.computeDistanceAndTime(speed, AutopilotEndSpeed, core.getConstructMass(), 0, 0, maxBrake)
                    else
                        return Kinematic.computeDistanceAndTime(speed, AutopilotEndSpeed, core.getConstructMass(), 0, 0, LastMaxBrake)
                    end
                end
                function GetAutopilotTBBrakeDistanceAndTime(speed) -- Uses thrust and a configured T50
                    local maxBrake = json.decode(unit.getData()).maxBrake
                    if maxBrake ~= nil then
                        LastMaxBrake = maxBrake
                        return Kinematic.computeDistanceAndTime(speed, AutopilotEndSpeed, core.getConstructMass(), Nav:maxForceForward(), warmup, maxBrake)
                    else
                        return Kinematic.computeDistanceAndTime(speed, AutopilotEndSpeed, core.getConstructMass(), Nav:maxForceForward(), warmup, LastMaxBrake)
                    end
                end
                function round(num, numDecimalPlaces)
                  local mult = 10^(numDecimalPlaces or 0)
                  return math.floor(num * mult + 0.5) / mult
                end
                function tablelength(T)
                  local count = 0
                  for _ in pairs(T) do count = count + 1 end
                  return count
                end
                
                function DoAutopilot() -- TODO rename this lol
                    -- Check prograde or retrograde
                    if ProgradeIsOn then 
                        if core_speed > MinAutopilotSpeed then -- Help with div by 0 errors and careening into terrain at low speed
                                AlignToWorldVector(core_velocity)
                        end
                    end
                    
                    if RetrogradeIsOn then 
                        if core_speed > MinAutopilotSpeed then -- Help with div by 0 errors and careening into terrain at low speed
                                AlignToWorldVector(-core_velocity)
                        end
                    end
                    
                    if AutopilotTargetPlanetName then -- TODO : change this to become nil when there's no target
                        
                        -- Calculate params   Returns traveltime, distance, brakedistance, braketime, maxbrakedistance, maxbraketime
                        autopilot_travel_time, autopilot_distance, autopilot_brakeDistance, autopilot_brakeTime, autopilot_maxBrakeDistance, autopilot_maxBrakeTime = GetAutopilotTravelData() -- TODO Make this return the two values instead of setting the global itself

                        autopilot_planet_distance = (core_world_position-AutopilotTargetPlanet.center):len() -- TODO: Make sure center is a vec3
                    
                    
                    
                        -- Check autobrake
                        if AutoBrake and autopilot_planet_distance <= autopilot_brake_distance then
                            brakeInput = 1
                            if core_nearest_planet.name == AutopilotTargetPlanet.name and core_orbit.apoapsis ~= nil and core_orbit.eccentricity < 1 then
                                    -- We're increasing eccentricity by braking, time to stop
                                    brakeInput = 0
                                    AutoBrake = false
                            end
                        end
                        
                        
                    
                    
                        -- Check actual autopilot
                        if Autopilot and core_atmosphere_density == 0 then
                            -- Planetary autopilot engaged, we are out of atmo, and it has a target

                            -- If we're going fast enough and aren't in an core_orbit, try to correct the vector
                            local targetCoords = AutopilotTargetCoords
                            if core_orbit.apoapsis == nil and velMag > 300 and AutopilotAccelerating then
                                -- Okay so, first, when we realign, we store shipright and shipup, just for this
                                -- Get the difference between ship forward and normalized worldvel
                                -- Get the components in each of the stored shipright and shipup directions
                                -- Get the ratio of velocity to normalized velocity and scale up that component (Hey this is just velmag btw)
                                -- Add that component * shipright or shipup
                                local velVectorOffset = (AutopilotTargetCoords - core_world_position):normalize() - core_velocity_normalized
                                local pitchComponent = getMagnitudeInDirection(velVectorOffset, AutopilotShipUp)
                                local yawComponent = getMagnitudeInDirection(velVectorOffset, AutopilotShipRight)
                                local leftAmount = -yawComponent * autopilot_distance * core_speed * TrajectoryAlignmentStrength
                                local downAmount = -pitchComponent * autopilot_distance * core_speed * TrajectoryAlignmentStrength
                                targetCoords = AutopilotTargetCoords + (-leftAmount * AutopilotShipRight) + (-downAmount * AutopilotShipUp) -- TODO: Make sure shipright and up are vec3
                            end
                            -- Note that distance will still read to our original target and not the adjusted vector.  Which is good.

                            local aligned = true  -- It shouldn't be used if the following condition isn't met, but just in case
                                
                            autopilot_projected_altitude = (AutopilotTargetPlanet.center - core_world_position + (core_velocity_normalized * autopilot_distance)):len() - AutopilotTargetPlanet.radius
                            
                            -- TODO make sure this is in updatehud somewhere already
                            --system.updateData(widgetTrajectoryAltitudeText, '{"label": "Projected Altitude", "value": "' .. getDistanceDisplayString(projectedAltitude) .. '", "unit":""}')

                            if not AutopilotCruising and not AutopilotBraking then
                                aligned = AlignToWorldVector((targetCoords-core_world_position):normalize())
                            elseif TurnBurn then
                                aligned = AlignToWorldVector(-core_velocity_normalized)
                            end
                            if AutopilotAccelerating then
                                if not aligned then
                                    AutopilotStatus = "Adjusting Trajectory"
                                else
                                    AutopilotStatus = "Accelerating"
                                end
                                Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                                if core_speed >= MaxGameVelocity then -- This is 29999 kph
                                    AutopilotAccelerating = false
                                    AutopilotStatus = "Cruising"
                                    AutopilotCruising = true
                                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                                end
                                -- Check if accel needs to stop for braking
                                if autopilot_distance <= brakeDistance then
                                    AutopilotAccelerating = false
                                    AutopilotStatus = "Braking"
                                    AutopilotBraking = true
                                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                                end
                            elseif AutopilotBraking then
                                BrakeIsOn = true
                                brakeInput = 1
                                if TurnBurn then
                                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                                end
                                -- Check if an orbit has been established and cut brakes and disable autopilot if so
                                
                                if core_orbit.periapsis ~= nil and core_orbit.eccentricity < 1 then
                                    AutopilotStatus = "Circularizing orbit"
                                    -- Keep going until eccentricity increases, or both peri and apo are below target
                                    if core_orbit.eccentricity > LastEccentricity or (core_orbit.apoapsis.altitude < AutopilotTargetOrbit and core_orbit.periapsis.altitude < AutopilotTargetOrbit) then

                                        BrakeIsOn = false
                                        AutopilotBraking = false
                                        Autopilot = false
                                        AutopilotStatus = "Aligning" -- Disable autopilot and reset
                                        system.print("Autopilot completed, orbit established")
                                        brakeInput = 0
                                        Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                                    end
                                    LastApsDiff = apsDiff
                                end
                            elseif AutopilotCruising then
                                if autopilot_distance <= brakeDistance then
                                    AutopilotAccelerating = false
                                    AutopilotStatus = "Braking"
                                    AutopilotBraking = true
                                end
                            else
                                -- It's engaged but hasn't started accelerating yet.
                                if aligned then
                                        -- Re-align to 200km from our aligned right                    
                                        if not AutopilotRealigned then
                                            AutopilotTargetCoords = AutopilotTargetPlanet.center + ((AutopilotTargetOrbit + AutopilotTargetPlanet.radius) * core_world_right)
                                            AutopilotRealigned = true
                                            AutopilotShipUp = core_world_up
                                            AutopilotShipRight = core_world_right
                                        elseif aligned then
                                            AutopilotAccelerating = true
                                            AutopilotStatus = "Accelerating"
                                            -- Set throttle to max
                                            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100) 
                                    end
                                end
                                -- If it's not aligned yet, don't try to burn yet.
                            end
                        end
                    end
                    LastEccentricity = core_orbit.eccentricity
                end

                function DoMath()
                    core_altitude = core.getAltitude()
                    core_velocity = vec3(core.getWorldVelocity()) -- I don't think we need local vel for anything
                    core_velocity_normalized = core_velocity:normalize()
                    core_speed = core_velocity:len()
                    core_world_vertical = vec3(core.getWorldVertical())
                    core_world_forward = vec3(core.getConstructWorldOrientationForward())
                    core_world_right = vec3(core.getConstructWorldOrientationRight())
                    core_world_up = vec3(core.getConstructWorldOrientationUp())
                    core_pitch = getPitch(core_world_vertical, core_world_forward, core_world_right)
                    core_roll = getRoll(core_world_vertical, core_world_forward, core_world_right)
                    core_gravity_magnitude = math.floor(core_world_vertical:len()*100)/100
                    core_atmosphere_density = unit.getAtmosphereDensity()
                    core_throttle_amount = math.floor(unit.getThrottle())
                    core_flight_value = unit.getAxisCommandValue(0)
                    core_flight_type = Nav.axisCommandManager:getAxisCommandType(0)
                    core_relative_pitch = getRelativePitch(core_velocity)
                    core_relative_yaw = getRelativeYaw(core_velocity)
                    -- TODO move fuel percent and times here 
                    core_planet_influence = unit.getClosestPlanetInfluence()
                    core_world_position = vec3(core.getConstructWorldPos())

                    core_nearest_planet = core_galaxy:closestBody(core_world_position, core_velocity)
                    core_kepler_nearest_planet = Kep(core_nearest_planet)
                    core_orbit = core_kepler_nearest_planet:orbitalParameters(core_world_position, core_velocity)
                    
                    DoAutopilot() -- These are all only necessary for this so there's no point to separate it

                end
                

                function DoNavigation()
                    if BrakeIsOn then
                        brakeInput = 1
                    else
                        brakeInput = 0
                    end
                    
                    yawInput2 = 0
                    pitchInput2 = 0
                    core_delta_x = system.getMouseDeltaX()
                    core_delta_y = system.getMouseDeltaY()
                    core_view_locked = (system.isViewLocked() == 1)
                    if core_view_locked then
                        -- Navigation
                        simulatedX = simulatedX + core_delta_x
                        simulatedY = simulatedY + core_delta_y
                        
                        if not HoldingCtrl then
                            if userControlScheme == "Virtual Joystick" then -- Virtual Joystick
                                if simulatedX > 0 and simulatedX > DeadZone then -- I'd like to do distance > deadZone but I need sign here
                                    yawInput2 = yawInput2 - (simulatedX - DeadZone) * MouseXSensitivity
                                elseif simulatedX < 0 and simulatedX < (DeadZone * -1) then
                                    yawInput2 = yawInput2 - (simulatedX + DeadZone) * MouseXSensitivity
                                else
                                    yawInput2 = 0
                                end
                            
                                if simulatedY > 0 and simulatedY > DeadZone then
                                    pitchInput2 = pitchInput2 - (simulatedY - DeadZone) * MouseYSensitivity
                                elseif simulatedY < 0 and simulatedY < (DeadZone * -1) then
                                    pitchInput2 = pitchInput2 - (simulatedY + DeadZone) * MouseYSensitivity
                                else
                                     pitchInput2 = 0
                                end
                            elseif userControlScheme == "Mouse" then -- Mouse Direct
                                simulatedX = 0
                                simulatedY = 0

                                pitchInput2 = (-utils.smoothstep(deltaY, -100, 100) + 0.5)*2*mousePitchFactor
                                yawInput2 = (-utils.smoothstep(deltaX, -100, 100) + 0.5)*2*mouseYawFactor
                            else -- Keyboard mode
                                simulatedX = 0
                                simulatedY = 0
                                -- Don't touch anything, they have it with kb only.  
                            end
                        end
                    else
                        simulatedX = 0
                        simulatedY = 0 -- Reset cursor if view unlocks
                    end
                end
                
                -- Set initial state
                if userControlScheme ~= "Keyboard" then
                    system.lockView(1)
                else
                    system.lockView(0)
                end
                if unit.getAtmosphereDensity() > 0 then
                    BrakeIsOn = true
                end  

                local elements = core.getElementIdList() 
                for k in pairs(elements) do
                    if (core.getElementTypeById(elements[k]) == "landing gear") then 
                        hasGear = true
                    end
                    if (core.getElementTypeById(elements[k]) == "Databank") then
                        hasDB = true
                    end
                end

                -- LOAD SAVED VARIABLES IF ANY
                if(hasDB) then
                    if(dbHud.getNbKeys() == 8 ) then -- Important that it not load if the number in the databank doesnt match the number expected.  Would end up loading nil values or 0's.
                    -- VARIABLES TO BE LOADED GO HERE
                        userControlScheme = dbHud.getStringValue("userControlScheme")
                        AutopilotTargetOrbit = dbHud.getIntValue("AutopilotTargetOrbit")
                        brakeToggle = dbHud.getStringValue("brakeToggle")
                        apTickRate = dbHud.getFloatValue("apTickRate")
                        freeLookToggle = dbHud.getStringValue("freeLookToggle")
                        PrimaryR = dbHud.getIntValue("PrimaryR")
                        PrimaryG = dbHud.getIntValue("PrimaryG")
                        PrimaryB = dbHud.getIntValue("PrimaryB")
                    end
                end

                -- Close door and retract ramp if available
                if door ~= nil then door.deactivate() end
                if forcefield ~= nil then forcefield.deactivate() end

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                -- If radar is installed but no weapon, don't show periscope
                if weapon_size > 0 then
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                end
                --core.show()
                placeRadar = true
                if placeRadar then
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                --if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                
                if hasGear then
                    gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                    if gearExtended then
                        Nav.control.extendLandingGears()
                    else
                        Nav.control.retractLandingGears()
                    end
                    if gearExtended then
                        Nav.axisCommandManager:setTargetGroundAltitude(0)
                    else
                        Nav.axisCommandManager:setTargetGroundAltitude(500) -- lol I wish
                    end
                else
                    if unit.getAtmosphereDensity() == 0 then
                        gearExtended = false
                        Nav.axisCommandManager:setTargetGroundAltitude(500)
                    else
                        gearExtended = true -- Show warning message and set behavior
                        Nav.axisCommandManager:setTargetGroundAltitude(0)
                    end
                end
                
                -- Initialize all vars
                DoMath()
                atlasSize = tablelength(Atlas()[0])
                
                unit.setTimer("mathTick", apTickRate)
                unit.setTimer("controlsTick",controlsTickRate)
                
                unit.hide()
                
                
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()
                -- Open door and extend ramp if available
                if door ~= nil then door.activate() end
                if forcefield ~= nil then forcefield.activate() end
        tick:
            args: ["mathTick"]
            lua: |
                DoMath()
        tick:
            args: ["controlsTick"]
            lua: |
                DoNavigation()
    system:
        start:
            lua: |
                -- Moved to Unit.Start()
        flush:
            lua: |
                

                pitchSpeedFactor = 0.8 --export: For keyboard control
                yawSpeedFactor =  1 --export: For keyboard control
                rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + pitchInput2 + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + rollInput2 + system.getControlDeviceYawInput()
                local finalYawInput = (yawInput + yawInput2) - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')
                -- Dodgin's Don't Die Rocket Govenor - Cruise Control Edition
                speed = vec3(core.getVelocity()):len() 
                cc_speed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)                
                if(speed * 3.6 > cc_speed) then 
                    unit.setEngineThrust('rocket_engine',0)                
                else if(isboosting) then 
                    unit.setEngineThrust('rocket_engine',1) end                
                end
        update:
            lua: |
                Nav:update()
                updateHud()
        actionStart:
            args: [gear]
            lua: ToggleGears()
        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)

        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [option1]
            lua: IncrementAutopilotTargetIndex()
        actionStart:
            args: [option2]
            lua: DecrementAutopilotTargetIndex()
        actionStart:
            args: [option3]
            lua: ToggleAutoBrake()
        actionStart:
            args: [option4]
            lua: ToggleAutoPilot()
        actionStart:
            args: [option5]
            lua: ToggleTurnBurn()
        actionStart:
            args: [option6]
            lua:  ToggleExtraWidgets() 
        actionStart:
            args: [option7]
            lua: saveVariables()
        actionStart:
            args: [lshift]
            lua: LShiftStart()
        actionStop: 
            args: [lshift]
            lua: LShiftStop()
        actionStart:
            args: [brake]
            lua: BrakeToggle()
        actionLoop:
            args: [brake]
            lua: BrakeLoop()
        actionStop:
            args: [brake]
            lua: BrakeStop()
        actionStart:
            args: [lalt]
            lua: FreelookToggle()
        actionStart:
            args: [booster]
            lua: BoosterStart()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: |
                if not HoldingCtrl then 
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
                else
                    IncrementAutopilotTargetIndex()
                end
        actionLoop:
            args: [speedup]
            lua: |
                if not HoldingCtrl then 
                    Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
                end
        actionStart:
            args: [speeddown]
            lua: |
                if not HoldingCtrl then 
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
                else
                    DecrementAutopilotTargetIndex()
                end
        actionLoop:
            args: [speeddown]
            lua: |
                if not HoldingCtrl then 
                    Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
                end
        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [warp]
            lua: if warpdrive ~= nil then warpdrive.activateWarp() end
