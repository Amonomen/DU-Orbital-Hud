name: ButtonsHud - Dimencia and Archaegeo v4.932 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=false;local b2=false;local b3=autoRollPreference;local b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b5=vec3(core.getWorldVelocity())local b6=vec3(b5):len()local b7=math.cos(StallAngle*constants.deg2rad)local b8=LandingGearGroundHeight;local b9=system.getMouseDeltaX()local ba=system.getMouseDeltaY()function LoadVariables()if dbHud_1 then local bb=dbHud_1.hasKey;if not useTheseSettings then for bc,bd in pairs(a)do if bb(bd)then local be=f(dbHud_1.getStringValue(bd))if be~=nil then c(bd.." "..dbHud_1.getStringValue(bd))_G[bd]=be;az=true end end end end;coroutine.yield()for bc,bd in pairs(b)do if bb(bd)then local be=f(dbHud_1.getStringValue(bd))if be~=nil then c(bd.." "..dbHud_1.getStringValue(bd))_G[bd]=be;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bf=system.getTime()if LastStartTime+180<bf then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b3=autoRollPreference end;LastStartTime=bf;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b7=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bg,bh)if bg>bh then bh=bg end;if ContainerOptimization>0 then bh=bh-bh*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bh=bh-bh*FuelTankOptimization*0.05 end;return bh end;function ProcessElements()local bi=fuelX~=0 and fuelY~=0;for bc in pairs(af)do local type=l(af[bc])if type=="Landing Gear"then A=true end;if type=="Dynamic Core Unit"then local bj=h(af[bc])if bj>10000 then aQ=128 elseif bj>1000 then aQ=64 elseif bj>150 then aQ=32 end end;aG=aG+h(af[bc])if bi and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bj=h(af[bc])local bk=m(af[bc])local bg=0;local bl=system.getTime()if type=="Atmospheric Fuel Tank"then local bh=400;local bm=35.03;if bj>10000 then bh=51200;bm=5480 elseif bj>1300 then bh=6400;bm=988.67 elseif bj>150 then bh=1600;bm=182.67 end;bg=bk-bm;if fuelTankHandlingAtmo>0 then bh=bh+bh*fuelTankHandlingAtmo*0.2 end;bh=CalculateFuelVolume(bg,bh)aD[#aD+1]={af[bc],core.getElementNameById(af[bc]),bh,bm,bg,bl}end;if type=="Rocket Fuel Tank"then local bh=320;local bm=173.42;if bj>65000 then bh=40000;bm=25740 elseif bj>6000 then bh=5120;bm=4720 elseif bj>700 then bh=640;bm=886.72 end;bg=bk-bm;if fuelTankHandlingRocket>0 then bh=bh+bh*fuelTankHandlingRocket*0.1 end;bh=CalculateFuelVolume(bg,bh)aF[#aF+1]={af[bc],core.getElementNameById(af[bc]),bh,bm,bg,bl}end;if type=="Space Fuel Tank"then local bh=2400;local bm=182.67;if bj>10000 then bh=76800;bm=5480 elseif bj>1300 then bh=9600;bm=988.67 end;bg=bk-bm;if fuelTankHandlingSpace>0 then bh=bh+bh*fuelTankHandlingSpace*0.2 end;bh=CalculateFuelVolume(bg,bh)aE[#aE+1]={af[bc],core.getElementNameById(af[bc]),bh,bm,bg,bl}end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,bd in pairs(door)do bd.toggle()end end;if switch then for _,bd in pairs(switch)do bd.toggle()end end;if forcefield then for _,bd in pairs(forcefield)do bd.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bn=AboveGroundLevel()if bn~=-1 or not ad and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not A then GearExtended=true end else BrakeIsOn=false end;if b8~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b8)if b8==0 and not A then GearExtended=true;BrakeIsOn=true end else b8=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and bn~=-1 then a_=core.getMaxKinematicsParametersAlongAxis("vertical",core.getConstructOrientationUp())[1]end;WasInAtmo=ad end;function ConvertResolutionX(bd)if ResolutionX==1920 then return bd else return round(ResolutionX*bd/1920,0)end end;function ConvertResolutionY(bd)if ResolutionY==1080 then return bd else return round(ResolutionY*bd/1080,0)end end;function RefreshLastMaxBrake(bo,bp)if bo==nil then bo=core.g()end;bo=round(bo,5)local bq=j()if bp~=nil and bp or(aC==nil or aC~=bo)then local b5=core.getVelocity()local br=vec3(b5):len()local bs=f(unit.getData()).maxBrake;if bs~=nil and bs>0 and ad then bs=bs/utils.clamp(br/100,0.1,1)bs=bs/bq;if bq>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bs)/2 else LastMaxBrakeInAtmo=bs end end end;if bs~=nil and bs>0 then LastMaxBrake=bs end;aC=bo end end;function MakeButton(bt,bu,bv,bw,bx,by,bz,bA,bB)local bC={enableName=bt,disableName=bu,width=bv,height=bw,x=bx,y=by,toggleVar=bz,toggleFunction=bA,drawCondition=bB,hovered=false}table.insert(aq,bC)return bC end;function UpdateAtlasLocationsList()AtlasOrdered={}for bc,bd in pairs(aS[0])do table.insert(AtlasOrdered,{name=bd.name,index=bc})end;local function bD(bE,bF)return bE.name<bF.name end;table.sort(AtlasOrdered,bD)end;function AddLocationsToAtlas()for bc,bd in pairs(SavedLocations)do table.insert(aS[0],bd)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bG)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bH='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bI,bJ,bK,bL,bM=string.match(bG,bH)if bI=="0"and bJ=="0"then return vec3(tonumber(bK),tonumber(bL),tonumber(bM))end;bL=math.rad(bL)bK=math.rad(bK)local planet=aS[tonumber(bI)][tonumber(bJ)]local bN=math.cos(bK)local bO=vec3(bN*math.cos(bL),bN*math.sin(bL),math.sin(bK))return planet.center+(planet.radius+bM)*bO end;function AddNewLocationByWaypoint(bP,planet,bG)if dbHud_1 then local bQ={}local position=zeroConvertToWorldCoordinates(bG)if planet.name=="Space"then bQ={position=position,name=bP,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bR=false;if planet.hasAtmosphere then bR=true else bR=false end;bQ={position=position,name=bP,atmosphere=bR,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bQ;table.insert(aS[0],bQ)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bS=planet.name..". "..#SavedLocations;if radar_1 then local bT,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bT~=nil and bT~=""then bS=bS.." "..radar_1.getConstructName(bT)end end;local bQ={}local bR=false;if planet.hasAtmosphere then bR=true end;bQ={position=position,name=bS,atmosphere=bR,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bQ;table.insert(aS[0],bQ)UpdateAtlasLocationsList()K="Location saved as "..bS else K="Databank must be installed to save locations"end end;function UpdatePosition(bU)local bV=-1;local bQ;for bc,bd in pairs(SavedLocations)do if bd.name and bd.name==CustomTarget.name then bV=bc;break end end;if bV~=-1 then local bW;if bU~=nil then bQ={position=SavedLocations[bV].position,name=bU,atmosphere=SavedLocations[bV].atmosphere,planetname=SavedLocations[bV].planetname,gravity=SavedLocations[bV].gravity}else bQ={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bV].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bV]=bQ;bV=-1;for bc,bd in pairs(aS[0])do if bd.name and bd.name==CustomTarget.name then bV=bc end end;if bV>-1 then aS[0][bV]=bQ end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bV=-1;for bc,bd in pairs(aS[0])do if bd.name and bd.name==CustomTarget.name then bV=bc end end;if bV>-1 then table.remove(aS[0],bV)end;bV=-1;for bc,bd in pairs(SavedLocations)do if bd.name and bd.name==CustomTarget.name then K=bd.name.." saved location cleared"bV=bc;break end end;if bV~=-1 then table.remove(SavedLocations,bV)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bX)bX[#bX+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bY,bZ,bx,by,bv,bw)if bY>bx and bY<bx+bv and bZ>by and bZ<by+bw then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local b_=vec3(core.getConstructWorldOrientationForward())local c0=vec3(core.getConstructWorldOrientationRight())local c1=vec3(core.getWorldVertical())local c2=getPitch(c1,b_,c0)LockPitch=c2;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b3=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b3=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b3=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b3=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b3=autoRollPreference end end;function CheckDamage(bX)local c3=0;ao=""local c4=aG;local c5=0;local c6=0;local c7=0;local c8=0;local c9=""for bc in pairs(af)do local bj=0;local ca=0;ca=h(af[bc])bj=k(af[bc])c5=c5+bj;if bj<ca then if bj==0 then c7=c7+1 else c6=c6+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bc]))local bx=position.x-aQ;local by=position.y-aQ;local cb=position.z-aQ;table.insert(al,core.spawnArrowSticker(bx,by,cb+1,"down"))table.insert(al,core.spawnArrowSticker(bx,by,cb+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bx+1,by,cb,"north"))table.insert(al,core.spawnArrowSticker(bx+1,by,cb,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bx-1,by,cb,"south"))table.insert(al,core.spawnArrowSticker(bx-1,by,cb,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bx,by-1,cb,"east"))table.insert(al,core.spawnArrowSticker(bx,by-1,cb,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bx,by+1,cb,"west"))table.insert(al,core.spawnArrowSticker(bx,by+1,cb,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bc])end elseif aH and#al>0 and al[11]==af[bc]then for cc in pairs(al)do core.deleteSticker(al[cc])end;al={}end end;c3=d(c5/c4*100)if c3<100 then bX[#bX+1]=[[<g class="pbright txt">]]c8=d(c3*2.55)c9=e("rgb(%d,%d,%d)",255-c8,c8,0)if c3<100 then bX[#bX+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],c9,c3)if c7>0 then bX[#bX+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],c9,c7,c6)elseif c6>0 then bX[#bX+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],c9,c6)end end;bX[#bX+1]=[[<\g>]]end end;function DrawCursorLine(bX)local cd=d(utils.clamp(a3/(at/4)*255,0,255))bX[#bX+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+cd,d(PrimaryG+0.5)-cd,d(PrimaryB+0.5)-cd)end;function getPitch(ce,cf,bF)local cg=ce:cross(bF):normalize_inplace()local c2=math.acos(utils.clamp(cg:dot(-cf),-1,1))*constants.rad2deg;if cg:cross(-cf):dot(bF)<0 then c2=-c2 end;return c2 end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b3=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bc,bd in pairs(a)do dbHud_1.setStringValue(bd,g(nil))end;for bc,bd in pairs(b)do if bd~="SavedLocations"then dbHud_1.setStringValue(bd,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bd in pairs(aq)do if bd.hovered then if not bd.drawCondition or bd.drawCondition()then bd.toggleFunction()end;bd.hovered=false end end end;function SetButtonContains()local bx=a0+at/2;local by=a1+au/2;for _,bd in pairs(aq)do bd.hovered=Contains(bx,by,bd.x,bd.y,bd.width,bd.height)end end;function DrawButton(bX,ch,hover,bx,by,ci,cj,ck,cl,cm,cn)if type(cm)=="function"then cm=cm()end;if type(cn)=="function"then cn=cn()end;bX[#bX+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bx,by,ci,cj)if ch then bX[#bX+1]=e("%s'",ck)else bX[#bX+1]=cl end;if hover then bX[#bX+1]=" style='stroke:white; stroke-width:2'"else bX[#bX+1]=" style='stroke:black; stroke-width:1'"end;bX[#bX+1]="></rect>"bX[#bX+1]=e("<text x='%f' y='%f' font-size='24' fill='",bx+ci/2,by+cj/2+5)if ch then bX[#bX+1]="black"else bX[#bX+1]="white"end;bX[#bX+1]="' text-anchor='middle' font-family='Montserrat'>"if ch then bX[#bX+1]=e("%s</text>",cm)else bX[#bX+1]=e("%s</text>",cn)end end;function DrawButtons(bX)local co="rgb(50,50,50)'"local cp="rgb(210,200,200)"local cq=DrawButton;for _,bd in pairs(aq)do local bu=bd.disableName;local bt=bd.enableName;if type(bu)=="function"then bu=bu()end;if type(bt)=="function"then bt=bt()end;if not bd.drawCondition or bd.drawCondition()then cq(bX,bd.toggleVar(),bd.hovered,bd.x,bd.y,bd.width,bd.height,cp,co,bu,bt)end end end;function DrawTank(bX,aP,bx,cr,cs,ct,cu,cv)local cw=1;local cx=2;local cy=3;local cz=4;local cA=5;local cB=6;local cC=""local cD=0;local cE=fuelY;local cF=fuelY+10;if o()==1 and not RemoteHud then cE=cE-50;cF=cF-50 end;bX[#bX+1]=[[<g class="pdim txtfuel">]]if cs=="ATMO"then cC="atmofueltank"elseif cs=="SPACE"then cC="spacefueltank"else cC="rocketfueltank"end;cD=_G[cC.."_size"]if#ct>0 then for i=1,#ct do local bS=string.sub(ct[i][cx],1,12)local cG=0;for cc=1,cD do if ct[i][cx]==f(unit[cC.."_"..cc].getData()).name then cG=cc;break end end;if aP or cu[i]==nil or cv[i]==nil then local cH=0;local cI=0;local cJ=0;local cK=0;local bl=system.getTime()if cG~=0 then cv[i]=f(unit[cC.."_"..cG].getData()).percentage;cu[i]=f(unit[cC.."_"..cG].getData()).timeLeft;if cu[i]=="n/a"then cu[i]=0 end else cJ=m(ct[i][cw])-ct[i][cz]cH=ct[i][cy]cv[i]=d(0.5+cJ*100/cH)cI=ct[i][cA]cK=ct[i][cB]if cI<=cJ then cu[i]=0 else cu[i]=d(0.5+cJ/((cI-cJ)/(bl-cK)))end;ct[i][cA]=cJ;ct[i][cB]=bl end end;if bS==cr then bS=e("%s %d",cs,i)end;if cG==0 then bS=bS.." *"end;local cL;if cu[i]==0 then cL="n/a"else cL=FormatTimeString(cu[i])end;if cv[i]~=nil then local c8=d(cv[i]*2.55)local c9=e("rgb(%d,%d,%d)",255-c8,c8,0)local cM=""if cL~="n/a"and cu[i]<120 or cv[i]<5 then if aP then cM=[[class="red"]]end end;bX[#bX+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bx,cE,cM,bS,bx,cF,c9,cv[i],cL)cE=cE+30;cF=cF+30 end end end;bX[#bX+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b5)b5=vec3(b5)local c2=-math.deg(math.atan(b5.y,b5.z))+180;c2=c2-90;if c2<0 then c2=360+c2 end;if c2>180 then c2=-180+c2-180 end;return-c2 end;function getRelativeYaw(b5)b5=vec3(b5)local cN=math.deg(math.atan(b5.y,b5.x))-90;if cN<-180 then cN=360+cN end;return cN end;function AlignToWorldVector(cO,cP)if not ad or b4>b7+0.08 or aa~=-1 then if cP==nil then cP=as end;cO=vec3(cO):normalize()local cQ=vec3(core.getConstructWorldOrientationForward())-cO;local cR=-getMagnitudeInDirection(cQ,core.getConstructWorldOrientationRight())*ar;local cS=-getMagnitudeInDirection(cQ,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cR/2 end;if an==0 then an=cS/2 end;D=D-(cR+(cR-am)*DampingMultiplier)C=C+cS+(cS-an)*DampingMultiplier;am=cR;an=cS;if math.abs(cR)<cP and math.abs(cS)<cP then return true end;return false end end;function getAPEnableName()local bS=AutopilotTargetName;if bS==nil then bS=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bS==nil then bS="None"end;return"Engage Autopilot: "..bS end;function getAPDisableName()local bS=AutopilotTargetName;if bS==nil then bS=CustomTarget.name end;if bS==nil then bS="None"end;return"Disable Autopilot: "..bS end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b3=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b3=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b3=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cT=50;local cU=260;local cV=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cU,cT,at/2-cU/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cU,cT,at/2-cU/2-50-cV.width,au/2-cT+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cU,cT,at/2-cU/2+cV.width+50,au/2-cT+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cW=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cW.height,cW.x+cW.width+30,cW.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cW.height,cW.x+cW.width+30,cW.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cW.height,cW.x-200-30,cW.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cT=60;cU=300;local bx=10;local by=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cU,cT,bx,by,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cU,cT,bx+cU+20,by,function()return AltitudeHold end,ToggleAltitudeHold)by=by+cT+20;MakeButton("Engage Autoland","Disable Autoland",cU,cT,bx,by,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cU,cT,bx+cU+20,by,function()return AutoTakeoff end,ToggleAutoTakeoff)by=by+cT+20;MakeButton("Show Orbit Display","Hide Orbit Display",cU,cT,bx,by,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)by=by+cT+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cU,cT,bx,by,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cU,cT,bx+cU+20,by,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)by=by+cT+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cU,cT,bx,by,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cU,cT,bx+cU+20,by,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)by=by+cT+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cU,cT,bx,by,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;by=by+cT+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cU*2,cT,bx,by,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cX=Nav.axisCommandManager:getAxisCommandType(0)local cY="TRAVEL"if cX==1 then cY="CRUISE"end;if Autopilot then cY="AUTOPILOT"end;return cY end;function UpdateHud(bX)local bM=ae;local b5=core.getVelocity()local br=vec3(b5):len()local c1=vec3(core.getWorldVertical())local b_=vec3(core.getConstructWorldOrientationForward())local c0=vec3(core.getConstructWorldOrientationRight())local cZ=vec3(core.getConstructWorldOrientationUp())local c_=getRoll(c1,b_,c0)local d0=c_/180*math.pi;local d1=math.cos(d0)local d2=math.sin(d0)local c2=getPitch(c1,b_,c0*d1+cZ*d2)local d3=c_;local d4=c2;local d5=j()local d6=d(unit.getThrottle())local d7=br*3.6;local d8=unit.getAxisCommandValue(0)local cY=GetFlightStyle()local d9="ROLL"local da=unit.getClosestPlanetInfluence()>0;if d6==nil then d6=0 end;if not da then if br>5 then c2=getRelativePitch(b5)c_=getRelativeYaw(b5)else c2=0;c_=0 end;d9="YAW"end;bX[#bX+1]=a5;bX[#bX+1]=ao;bX[#bX+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bX,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bX,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bX,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bX,bM)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if da then DrawRollLines(bX,centerX,centerY,d3,d9,da)DrawArtificialHorizon(bX,d4,d3,centerX,centerY,da,d(getRelativeYaw(b5)),br)else DrawRollLines(bX,centerX,centerY,c_,d9,da)DrawArtificialHorizon(bX,c2,c_,centerX,centerY,da,d(c_),br)end;DrawAltitudeDisplay(bX,bM,da)DrawPrograde(bX,b5,br,centerX,centerY)end end;DrawThrottle(bX,cY,d6,d8)DrawSpeed(bX,d7)DrawWarnings(bX)DisplayOrbitScreen(bX)if screen_2 then local bG=vec3(core.getConstructWorldPos())local bx=960+bG.x/aU;local by=450+bG.y/aV;screen_2.moveContent(aW,(bx-80)/19.2,(by-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bX)local db=aj;local dc=ak;local dd=aj;local de=ak;if IsInFreeLook()and not brightHud then db=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dc=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bX[#bX+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],db,db,dd,dd,dc,dc,de,de,ResolutionX,ResolutionY)end;function HUDEpilogue(bX)bX[#bX+1]="</svg>"end;function DrawSpeed(bX,d7)local df=throtPosY-10;local dg=throtPosX+10;bX[#bX+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then df=75 end;bX[#bX+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dg,df,d(d7))end;function DrawOdometer(bX,W,TotalDistanceTravelled,cY,X,d5)local dh=ConvertResolutionX(1240)local di=ConvertResolutionY(55)local dj=di+10;local d5=j()local bo=core.g()local dk=0;local dl=0;local dm=0;RefreshLastMaxBrake(bo)if ad then dm=LastMaxBrakeInAtmo else dm=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dn=vec3(core.getWorldAcceleration()):len()/9.80665;if bo>0.1 then dl=aB*bo;dk=maxThrust/bo end;bX[#bX+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dh=ConvertResolutionX(1120)di=ConvertResolutionY(55)dj=di+10 elseif ad then local dp=ConvertResolutionX(770)bX[#bX+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dp,di,dp,dj,d5)end;bX[#bX+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dh,di,dh,dj,bo/9.80665,dh,di+20,dh,dj+20,dn)bX[#bX+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bX[#bX+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dm/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cY)if bo>0.1 then bX[#bX+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dk/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dl/1000)else bX[#bX+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bX[#bX+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cY)end;bX[#bX+1]="</g>"end;function DrawThrottle(bX,cY,d6,d8)local cE=throtPosY+10;local cF=throtPosY+20;if o()==1 and not RemoteHud then cE=55;cF=65 end;local dq="CRUISE"local unit="km/h"local dr=d8;if cY=="TRAVEL"or cY=="AUTOPILOT"then dq="THROT"unit="%"dr=d6;local ds="dim"if d6<0 then ds="red"end;bX[#bX+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],ds,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d6),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bX[#bX+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cE,dq,throtPosX+10,cF,dr,unit)end;function DrawVerticalSpeed(bX,bM)if bM<200000 and not ad or bM and ad then local dt=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local du=0;if math.abs(dt)>1 then du=45*math.log(math.abs(dt),10)if dt<0 then du=-du end end;bX[#bX+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dt),d(du))end end;function getHeading(cf)local dv=-vec3(core.getWorldVertical())cf=cf-cf:project_on(dv)local dw=vec3(0,0,1)dw=dw-dw:project_on(dv)local dx=dw:cross(dv)local du=dw:angle_between(cf)*constants.rad2deg;if cf:dot(dx)<0 then du=360-du end;return du end;function DrawRollLines(bX,centerX,centerY,d3,d9,da)local dy=circleRad;local dz=20;dz=d(dz)local dA=d(d3)if da then for i=-45,45,5 do local dB=i;bX[#bX+1]=e([[<g transform="rotate(%f,%d,%d)">]],dB,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bX[#bX+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dy+dz-len,centerX,centerY+dy+dz)end;bX[#bX+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dy+dz-35,d9,centerX,centerY+dy+dz-25,dA)bX[#bX+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d3,centerX,centerY)bX[#bX+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dy+dz-20,centerX+5,centerY+dy+dz-20,centerX,centerY+dy+dz-15)bX[#bX+1]="</g>"end;local cN=dA;if da then cN=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dC=20;local dD=d(cN)local dE=0;local dF=centerY+dy+dz+20;local dG=centerX;if d9~="YAW"then dF=ConvertResolutionY(130)dG=ConvertResolutionX(960)end;local dH=[[<path class="txttick line" d="]]for i=d(dD-(dC+10)-dD%5+0.5),d(dD+dC+10+dD%5+0.5),5 do local bx=dG+-i*5+cN*5;if i%10==0 then dE=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bX[#bX+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bx+5,dF-12,p)elseif i%5==0 then dE=5 end;if dE==10 then dH=e([[%s M %f %f v %d]],dH,bx,dF-5,dE)else dH=e([[%s M %f %f v %d]],dH,bx,dF-2.5,dE)end end;bX[#bX+1]=dH..[["/>]]bX[#bX+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dG-5,dF+10,dG+5,dF+10,dG,dF+5)if da then d9="HDG"end;bX[#bX+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dG,dF+25,dD,dG,dF+35,d9)end;function DrawArtificialHorizon(bX,d4,d3,centerX,centerY,da,dI,br)local dy=circleRad;local dJ=d(dy*3/5)if dy>0 then local dK=d(d4)local len=0;local dH=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*d3,centerX,centerY)if not ad then dH=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bX[#bX+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dy-1,centerX,centerY)bX[#bX+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dK-30-dK%5+0.5),d(dK+30+dK%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local by=centerY+-i*5+d4*5;if len==30 then dH=e([[%s M %d %f h %d]],dH,centerX-dJ-len,by,len)if ad then bX[#bX+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d3,centerX,centerY,centerX-dJ+10,by,i)bX[#bX+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d3,centerX,centerY,centerX+dJ-10,by,i)if i==0 or i==180 or i==-180 then bX[#bX+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d3,centerX,centerY,centerX-dJ+20,by,dJ*2-40)end else bX[#bX+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dJ+10,by,i)bX[#bX+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dJ-10,by,i)end;dH=e([[%s M %d %f h %d]],dH,centerX+dJ,by,len)else dH=e([[%s M %d %f h %d]],dH,centerX-dJ-len,by,len)dH=e([[%s M %d %f h %d]],dH,centerX+dJ,by,len)end end;bX[#bX+1]=dH..[["/>]]local dL="PITCH"if not da then dL="REL PITCH"end;if d4>90 and not ad then d4=90-(d4-90)elseif d4<-90 and not ad then d4=-90-(d4+90)end;if dy>200 then if ad then if br>w then bX[#bX+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dI)end;bX[#bX+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d3,centerX,centerY)else bX[#bX+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bX[#bX+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dJ+25,centerY-5,centerX-dJ+20,centerY,centerX-dJ+25,centerY+5,centerX-dJ+50,centerY+4,dK)bX[#bX+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dJ-25,centerY-5,centerX+dJ-20,centerY,centerX+dJ-25,centerY+5,centerX+dJ-30,centerY+4,dK)bX[#bX+1]="</g>"end;local dM=d(dy/3)bX[#bX+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dM,centerY,dy-dM)if not ad and da then bX[#bX+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d3,centerX,centerY,centerX-dJ+10,centerY,dJ*2-20)end;bX[#bX+1]="</g>"if dy<200 then if ad and br>w then bX[#bX+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dy,dL,centerX,centerY-dy+10,dK,centerX,centerY-15,"Yaw",centerX,centerY+20,dI)else bX[#bX+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dy,dL,centerX,centerY-dy+15,dK)end end end end;function DrawAltitudeDisplay(bX,bM,da)local dN=altMeterX;local dO=altMeterY;local dP=78;local dQ=19;local dR=AboveGroundLevel()if dR~=-1 then table.insert(bX,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dN+dP,dO+dQ+20,dR))end;if da and(bM<200000 and not ad or bM and ad)then table.insert(bX,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dN-1,dO-4,dP+2,dQ+6,dN+1,dO-1,dP-4,dQ))local bV=0;local dS=1;local dT=0;local dU=bM<0;local dV=9;if dU then dV=0 end;local bM=math.abs(bM)while bV<6 do local dW=11;local dX=16;local dY=9;local dZ=14;local cM="altsm"if bV>2 then dX=dX+3;dW=dW+2;dZ=dZ+2;dY=dY-6;cM="altbig"end;if dU then cM=cM.." red"end;local d_=bM/dS%10;local e0=d(d_)local e1=d((e0+1)%10)local e2=dT;if bV==0 then e2=d_-e0;if dU then e2=1-e2 end end;if dU and(bV==0 or dT~=0)then local e3=e1;e1=e0;e0=e3 end;local e4=dX*(e2-1)local e5=e4+dX;local bx=dN+dY+(6-bV)*dW;local by=dO+dZ;table.insert(bX,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cM,bx,by+e4,e1,bx,by+e5,e0))bV=bV+1;dS=dS*10;if e0==dV then dT=e2 else dT=0 end end;table.insert(bX,[[</g></g>]])end end;function DrawPrograde(bX,b5,br,centerX,centerY)if br>5 and not ad or br>w then local dy=circleRad;local e6=20;local e7=20;local e8=vec3(b5)local e9=getRelativePitch(e8)local ea=getRelativeYaw(e8)local eb=14;local ec=eb/2;local ed=-ea/e7*dy;local ee=e9/e6*dy;local bx=centerX+ed;local by=centerY+ee;local a3=math.sqrt(ed^2+ee^2)local ef=[[<circle
                cx="]]..bx..[["
                cy="]]..by..[["
                r="]]..ec/eb..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bx..[["
                cy="]]..by..[["
                r="]]..ec..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bx-eb..[[,]]..by..[[ h ]]..ec..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bx+ec..[[,]]..by..[[ h ]]..ec..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bx..[[,]]..by-eb..[[ v ]]..ec..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a3<dy then bX[#bX+1]=ef else local du=math.atan(ee,ed)local eg=4;local eh=centerX+dy*math.cos(du)local ei=centerY+dy*math.sin(du)bX[#bX+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',du*180/math.pi,eh,ei,eh-eg,ei-eg/2,eg*2,eg,eh+eg,ei-eg,eg,eg,-eg,eg)end;if not ad then e9=getRelativePitch(-e8)ea=getRelativeYaw(-e8)ed=-ea/e7*dy;ee=e9/e6*dy;bx=centerX+ed;by=centerY+ee;a3=math.sqrt(ed^2+ee^2)if a3<dy then local ej=[[<circle
                        cx="]]..bx..[["
                        cy="]]..by..[["
                        r="]]..ec..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bx..[[,]]..by-eb..[[ v ]]..ec..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bx..[[,]]..by..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bx..[[,]]..by..[[)" />
                     <path
                        d="M ]]..bx-ec..[[,]]..by..[[ h ]]..eb..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bx..[[,]]..by..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bx..[[,]]..by..[[)"/>]]bX[#bX+1]=ej end end end end;function DrawWarnings(bX)bX[#bX+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bX[#bX+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bX[#bX+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bX[#bX+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bX[#bX+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local ek=ConvertResolutionX(960)local el=ConvertResolutionY(860)local em=ConvertResolutionY(880)local en=ConvertResolutionY(900)local eo=ConvertResolutionY(960)local ep=ConvertResolutionY(200)local eq=ConvertResolutionY(150)local er=ConvertResolutionY(960)if o()==1 and not RemoteHud then el=ConvertResolutionY(135)em=ConvertResolutionY(155)en=ConvertResolutionY(175)ep=ConvertResolutionY(115)eq=ConvertResolutionY(95)end;if BrakeIsOn then bX[#bX+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],ek,el)end;if ad and b4<b7 and b6>brakeLandingRate+5 then bX[#bX+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],ek,ep+50)end;if ah then bX[#bX+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],ek,er)end;if GearExtended then if A then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],ek,em)else bX[#bX+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],ek,em)end;bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],ek,en,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],ek,eo+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],ek,ep+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bX[#bX+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],ek,ep+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],ek,ep+20,AutopilotStatus)elseif LockPitch~=nil then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],ek,ep+20,d(LockPitch))elseif I then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],ek,ep+20)elseif Reentry then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],ek,ep+20)end;if AltitudeHold then if AutoTakeoff then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],ek,ep,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bX[#bX+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],ek,ep+50)end else bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],ek,ep,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bX[#bX+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],ek,ep)else bX[#bX+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],ek,ep)end end;if ProgradeIsOn then bX[#bX+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],ek,ep)end;if RetrogradeIsOn then bX[#bX+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],ek,ep)end;if TurnBurn then bX[#bX+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],ek,eq)end;if VectorToTarget then bX[#bX+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],ek,ep+30,VectorStatus)end;bX[#bX+1]="</g>"end;function DisplayOrbitScreen(bX)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local es=OrbitMapX;local et=OrbitMapY;local eu=OrbitMapSize;local ev=4;et=et+ev;local ew=15;local bx=es+eu+es/2+ev;local by=et+eu/2+5+ev;local ex,ey,ez,eA;ex=eu/4;eA=0;bX[#bX+1]=[[<g class="pbright txtorb txtmid">]]bX[#bX+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eu+es*2,eu+et,ev,ev)if orbit.periapsis~=nil and orbit.apoapsis~=nil then ez=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ex*2)ey=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/ez*(1-orbit.eccentricity)eA=ex-orbit.periapsis.altitude/ez-planet.radius/ez;local eB=""if orbit.periapsis.altitude<=0 then eB='redout'end;bX[#bX+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eB,es+eu/2+eA+ev,et+eu/2+ev,ex,ey)bX[#bX+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',es+eu/2+ev,et+eu/2+ev,planet.radius/ez)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bX[#bX+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bx-35,by-5,es+eu/2+ex+eA,by-5)bX[#bX+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bx,by)by=by+ew;bX[#bX+1]=e([[<text x="%f" y="%f">%s</text>]],bx,by,getDistanceDisplayString(orbit.apoapsis.altitude))by=by+ew;bX[#bX+1]=e([[<text x="%f" y="%f">%s</text>]],bx,by,FormatTimeString(orbit.timeToApoapsis))by=by+ew;bX[#bX+1]=e([[<text x="%f" y="%f">%s</text>]],bx,by,getSpeedDisplayString(orbit.apoapsis.speed))end;by=et+eu/2+5+ev;bx=es-es/2+10+ev;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bX[#bX+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bx+35,by-5,es+eu/2-ex+eA,by-5)bX[#bX+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bx,by)by=by+ew;bX[#bX+1]=e([[<text x="%f" y="%f">%s</text>]],bx,by,getDistanceDisplayString(orbit.periapsis.altitude))by=by+ew;bX[#bX+1]=e([[<text x="%f" y="%f">%s</text>]],bx,by,FormatTimeString(orbit.timeToPeriapsis))by=by+ew;bX[#bX+1]=e([[<text x="%f" y="%f">%s</text>]],bx,by,getSpeedDisplayString(orbit.periapsis.speed))end;bX[#bX+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],es+eu/2+ev,20+ev,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eC=orbit.timeToApoapsis/orbit.period*2*math.pi;local eD=ex*math.cos(eC)local eE=ey*math.sin(eC)bX[#bX+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',es+eu/2+eD+eA+ev,et+eu/2+eE+ev)end;bX[#bX+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local eF=a3>100000;local be=""if eF then be=round(a3/1000/200,1).." SU"elseif a3<1000 then be=round(a3,1).." M"else be=round(a3/1000,1).." KM"end;return be end;function getDistanceDisplayString2(a3)local eF=a3>100000;local be=""if eF then be=round(a3/1000/200,2).." SU"elseif a3<1000 then be=round(a3,2).." M"else be=round(a3/1000,2).." KM"end;return be end;function getSpeedDisplayString(br)return d(round(br*3.6,0)+0.5).." km/h"end;function FormatTimeString(eG)local eH=0;local eI=0;local eJ=0;if eG<60 then eG=d(eG)elseif eG<3600 then eH=d(eG/60)eG=d(eG%60)elseif eG<86400 then eI=d(eG/3600)eH=d(eG%3600/60)else eJ=d(eG/86400)eI=d(eG%86400/3600)end;if eJ>0 then return eJ.."d "..eI.."h "elseif eI>0 then return eI.."h "..eH.."m "elseif eH>0 then return eH.."m "..eG.."s"elseif eG>0 then return eG.."s"else return"0s"end end;function getMagnitudeInDirection(cO,eK)cO=vec3(cO)eK=vec3(eK):normalize()local be=cO*eK;return be.x+be.y+be.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eL=AtlasOrdered[AutopilotTargetIndex].index;local eM=aS[0][eL]if eM.center then AutopilotTargetName=eM.name;V=aY[0][eL]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eM;for _,bd in pairs(aY[0])do if bd.name==CustomTarget.planetname then V=bd;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eN=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eN end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b5=core.getWorldVelocity()local br=vec3(b5):len()local eO,eP=aZ.computeDistanceAndTime(vec3(b5):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eQ;if not TurnBurn then _,eQ=GetAutopilotBrakeDistanceAndTime(br)else _,eQ=GetAutopilotTBBrakeDistanceAndTime(br)end;local eR=0;local eS=0;if AutopilotCruising or not Autopilot and br>5 then eS=aZ.computeTravelTime(br,0,AutopilotDistance)elseif P+eO<AutopilotDistance then eR=AutopilotDistance-(P+eO)eS=aZ.computeTravelTime(8333.0556,0,eR)else local eT=(AutopilotDistance-P)/eO;eO=AutopilotDistance-P;eP=eP*eT end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eS elseif AutopilotBraking then return eQ elseif AutopilotCruising then return eS+eQ else return eP+Q+eS end end;function GetAutopilotBrakeDistanceAndTime(br)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(br,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(br,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(br)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(br,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eU=-1;local eV=-1;if vBooster then eU=vBooster.distance()end;if hover then eV=hover.distance()end;if eU~=-1 and eV~=-1 then if eU<eV then return eU else return eV end elseif eU~=-1 then return eU elseif eV~=-1 then return eV else return-1 end end;function AboveGroundLevel()local eW=-1;local eX=hoverDetectGround()if telemeter_1 then eW=telemeter_1.getDistance()end;if eX~=-1 and eW~=-1 then if eX<eW then return eX else return eW end elseif eX~=-1 then return eX else return eW end end;function tablelength(eY)local eZ=0;for _ in pairs(eY)do eZ=eZ+1 end;return eZ end;function BeginProfile(e_)ProfileTimeStart=system.getTime()end;function EndProfile(e_)local f0=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+f0;ProfileCount=ProfileCount+1;if f0>ProfileTimeMax then ProfileTimeMax=f0 end;if f0<ProfileTimeMin then ProfileTimeMin=f0 end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local f1=ProfileTimeSum;local f2=ProfileTimeSum/ProfileCount;local f3=ProfileTimeMin;local f4=ProfileTimeMax;local f5=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",f1,f2,f3,f4,f5))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local f6=radar_1.getEntries()local f7=radar_1.getData()local f8=ConvertResolutionX(1770)local f9=ConvertResolutionY(330)if#f6>0 then local fa=f7:find('identifiedConstructs":%[%]')if fa==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if fa~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],f8,f9,#f6)local fb={}for bc,bd in pairs(f6)do if radar_1.hasMatchingTransponder(bd)==1 then table.insert(fb,bd)end end;if#fb>0 then local by=ConvertResolutionY(15)local bx=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bx,by)for bc,bd in pairs(fb)do by=by+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bx,by,radar_1.getConstructName(bd))end end else local fc;fc=f7:find('worksInEnvironment":false')if fc then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],f8,f9)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],f8,f9)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bX,fd)if fd~="empty"then bX[#bX+1]=[[<text class="msg" x="50%%" y="310" >]]for fe in string.gmatch(fd,"([^\n]+)")do bX[#bX+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fe)end;bX[#bX+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bl=system.getTime()local b5=vec3(core.getWorldVelocity())local d7=vec3(b5):len()local ff=bl-ag;if d7>1.38889 then d7=d7/1000;local fg=d7*(bl-ag)TotalDistanceTravelled=TotalDistanceTravelled+fg;W=W+fg end;X=X+ff;TotalFlightTime=TotalFlightTime+ff;ag=bl end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aS=Atlas()for bc,bd in pairs(aS[0])do if av==nil or bd.center.x<av then av=bd.center.x end;if aw==nil or bd.center.x>aw then aw=bd.center.x end;if ax==nil or bd.center.y<ax then ax=bd.center.y end;if ay==nil or bd.center.y>ay then ay=bd.center.y end end;aT=""local fh=1.1*(aw-av)/1920;local fi=1.4*(ay-ax)/1080;for bc,bd in pairs(aS[0])do local bx=960+bd.center.x/fh;local by=540+bd.center.y/fi;aT=aT..'<circle cx="'..bx..'" cy="'..by..'" r="'..bd.radius/fh*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bd.name,"Moon")and not string.match(bd.name,"Sanctuary")and not string.match(bd.name,"Space")then aT=aT.."<text x='"..bx.."' y='"..by+bd.radius/fh*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bd.name.."</text>"end end;local bG=vec3(core.getConstructWorldPos())local bx=960+bG.x/fh;local by=540+bG.y/fi;aT=aT..'<circle cx="'..bx..'" cy="'..by..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bx.."' y='"..by-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fh;aV=fi;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bG=vec3(core.getConstructWorldPos())local bx=960+bG.x/fh;local by=540+bG.y/fi;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bx-80)/19.20,(by-80)/10.80,aT)end end;function PlanetRef()local function fj(fk)return type(fk)=='number'end;local function fl(fk)return type(tonumber(fk))=='number'end;local function fm(fn)return type(fn)=='table'end;local function fo(fp)return type(fp)=='string'end;local function fq(bd)return fm(bd)and fj(bd.x and bd.y and bd.z)end;local function fr(fs)return fm(fs)and fj(fs.latitude and fs.longitude and fs.altitude and fs.bodyId and fs.systemId)end;local ft=math.pi/180;local fu=180/math.pi;local fv=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bH='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fw=utils.clamp;local function fx(fy,fz)if fy==0 then return math.abs(fz)<1e-09 end;if fz==0 then return math.abs(fy)<1e-09 end;return math.abs(fy-fz)<math.max(math.abs(fy),math.abs(fz))*fv end;local function fA(fk)local be=string.gsub(string.reverse(e('%.4f',fk)),'^0*%.?','')return be==''and'0'or string.reverse(be)end;local function fB(fC)if fq(fC)then return e('{x=%.3f,y=%.3f,z=%.3f}',fC.x,fC.y,fC.z)end;if fm(fC)and not getmetatable(fC)then local fD={}local fE=next(fC)if type(fE)=='nil'or fE==1 then fD=fC else for bc,bd in pairs(fC)do local dr=fB(bd)if type(bc)=='number'then table.insert(fD,e('[%s]=%s',bc,dr))else table.insert(fD,e('%s=%s',bc,dr))end end end;return e('{%s}',table.concat(fD,','))end;if fo(fC)then return e("'%s'",fC:gsub("'",[[\']]))end;return tostring(fC)end;local fF={}fF.__index=fF;fF.__tostring=function(fC,fG)local fH={}for bc in pairs(fC)do table.insert(fH,bc)end;table.sort(fH)local fD={}for _,bc in ipairs(fH)do local dr=fB(fC[bc])if type(bc)=='number'then table.insert(fD,e('[%s]=%s',bc,dr))else table.insert(fD,e('%s=%s',bc,dr))end end;if fG then return e('%s%s',fG,table.concat(fD,',\n'..fG))end;return e('{%s}',table.concat(fD,','))end;fF.__eq=function(fI,fJ)return fI.planetarySystemId==fJ.planetarySystemId and fI.bodyId==fJ.bodyId and fx(fI.radius,fJ.radius)and fx(fI.center.x,fJ.center.x)and fx(fI.center.y,fJ.center.y)and fx(fI.center.z,fJ.center.z)and fx(fI.GM,fJ.GM)end;local function fK(bI,bJ,fL,fM,fN)assert(fl(bI),'Argument 1 (planetarySystemId) must be a number:'..type(bI))assert(fl(bJ),'Argument 2 (bodyId) must be a number:'..type(bJ))assert(fl(fL),'Argument 3 (radius) must be a number:'..type(fL))assert(fm(fM),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fM))assert(fl(fN),'Argument 5 (GM) must be a number:'..type(fN))return setmetatable({planetarySystemId=tonumber(bI),bodyId=tonumber(bJ),radius=tonumber(fL),center=vec3(fM),GM=tonumber(fN)},fF)end;local fO={}fO.__index=fO;fO.__tostring=function(fP)return e('::pos{%d,%d,%s,%s,%s}',fP.systemId,fP.bodyId,fA(fP.latitude*fu),fA(fP.longitude*fu),fA(fP.altitude))end;fO.__eq=function(fI,fJ)return fI.bodyId==fJ.bodyId and fI.systemId==fJ.systemId and fx(fI.latitude,fJ.latitude)and fx(fI.altitude,fJ.altitude)and(fx(fI.longitude,fJ.longitude)or fx(fI.latitude,math.pi/2)or fx(fI.latitude,-math.pi/2))end;local function fQ(fR,bJ,bK,bL,bM)local bI=fR;if fo(fR)and not bL and not bM and not bJ and not bK then bI,bJ,bK,bL,bM=string.match(fR,bH)assert(bI,'Argument 1 (position string) is malformed.')else assert(fl(bI),'Argument 1 (systemId) must be a number:'..type(bI))assert(fl(bJ),'Argument 2 (bodyId) must be a number:'..type(bJ))assert(fl(bK),'Argument 3 (latitude) must be in degrees:'..type(bK))assert(fl(bL),'Argument 4 (longitude) must be in degrees:'..type(bL))assert(fl(bM),'Argument 5 (altitude) must be in meters:'..type(bM))end;bI=tonumber(bI)bJ=tonumber(bJ)bK=tonumber(bK)bL=tonumber(bL)bM=tonumber(bM)if bJ==0 then return setmetatable({latitude=bK,longitude=bL,altitude=bM,bodyId=bJ,systemId=bI},fO)end;return setmetatable({latitude=ft*fw(bK,-90,90),longitude=ft*(bL%360),altitude=bM,bodyId=bJ,systemId=bI},fO)end;local fS={}fS.__index=fS;fS.__tostring=function(fC,fG)local fT=fG and fG..'  'local fU={}local fH={}for bc in pairs(fC)do table.insert(fH,bc)end;table.sort(fH)for _,fV in ipairs(fH)do bdy=fC[fV]local fW=fF.__tostring(bdy,fT)if fG then table.insert(fU,e('[%s]={\n%s\n%s}',fV,fW,fG))else table.insert(fU,e('  [%s]=%s',fV,fW))end end;if fG then return e('\n%s%s%s',fG,table.concat(fU,',\n'..fG),fG)end;return e('{\n%s\n}',table.concat(fU,',\n'))end;local function fX(fY)local aS={}local pid;for _,bd in pairs(fY)do local bT=bd.planetarySystemId;if type(bT)~='number'then error('Invalid planetary system ID: '..tostring(bT))elseif pid and bT~=pid then error('Mismatch planetary system IDs: '..bT..' and '..pid)end;local fZ=bd.bodyId;if type(fZ)~='number'then error('Invalid body ID: '..tostring(fZ))elseif aS[fZ]then error('Duplicate body ID: '..tostring(fZ))end;setmetatable(bd.center,getmetatable(vec3.unit_x))aS[fZ]=setmetatable(bd,fF)pid=bT end;return setmetatable(aS,fS)end;aX={}local function f_(fY)return setmetatable({galaxyAtlas=fY or{}},aX)end;aX.__index=function(fn,i)if type(i)=='number'then local system=fn.galaxyAtlas[i]return fX(system)end;return rawget(aX,i)end;aX.__pairs=function(fC)return function(fn,bc)local g0,nv=next(fn,bc)return g0,nv and fX(nv)end,fC.galaxyAtlas,nil end;aX.__tostring=function(fC)local g1={}for _,g2 in pairs(fC or{})do local g3=g2:getPlanetarySystemId()local g4=fS.__tostring(g2,'    ')table.insert(g1,e('  [%s]={%s\n  }',g3,g4))end;return e('{\n%s\n}\n',table.concat(g1,',\n'))end;aX.BodyParameters=fK;aX.MapPosition=fQ;aX.PlanetarySystem=fX;function aX.createBodyParameters(g5,bJ,g6,g7,g8,g9,ga)assert(fl(g5),'Argument 1 (planetarySystemId) must be a number:'..type(g5))assert(fl(bJ),'Argument 2 (bodyId) must be a number:'..type(bJ))assert(fl(g6),'Argument 3 (surfaceArea) must be a number:'..type(g6))assert(fm(g7),'Argument 4 (aPosition) must be an array or vec3:'..type(g7))assert(fm(g8),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(g8))assert(fl(g9),'Argument 6 (altitude) must be in meters:'..type(g9))assert(fl(ga),'Argument 7 (gravityAtPosition) must be number:'..type(ga))local fL=math.sqrt(g6/4/math.pi)local a3=fL+g9;local gb=vec3(g7)+a3*vec3(g8)local fN=ga*a3*a3;return fK(g5,bJ,fL,gb,fN)end;aX.isMapPosition=fr;function aX:getPlanetarySystem(fR)if i==nil then i=0 end;if nv==nil then nv=0 end;local g5=fR;if fr(fR)then g5=fR.systemId end;if type(g5)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fS then system=fX(system)end;return system end end end;function fS:castIntersections(gc,eK,gd,ge)local gd=gd or function(gf)return 1.05*gf.radius end;local gg={}if ge then for _,i in ipairs(ge)do gg[i]=self[i]end else ge={}for bc,gf in pairs(self)do table.insert(ge,bc)gg[bc]=gf end end;local function gh(gi,gj)local gk=gg[gi].center-gc;local gl=gg[gj].center-gc;return gk:len()<gl:len()end;table.sort(ge,gh)local gm=eK:normalize()for i,bT in ipairs(ge)do local gf=gg[bT]local gn=gf.center-gc;local fL=gd(gf)local go=gn:dot(gm)local gp=go^2-(gn:len2()-fL^2)if gp>=0 then local gq=math.sqrt(gp)local gr=go+gq;local gs=go-gq;if gs>0 then return gf,gr,gs elseif gr>0 then return gf,gr,nil end end end;return nil,nil,nil end;function fS:closestBody(gt)assert(type(gt)=='table','Invalid coordinates.')local gu,gf;local gv=vec3(gt)for _,gw in pairs(self)do local gx=(gw.center-gv):len2()if(not gf or gx<gu)and gw.name~="Space"then gf=gw;gu=gx end end;return gf end;function fS:convertToBodyIdAndWorldCoordinates(fR)local gy=fR;if fo(fR)then gy=fQ(fR)end;if gy.bodyId==0 then return 0,vec3(gy.latitude,gy.longitude,gy.altitude)end;local gw=self:getBodyParameters(gy)if gw then return gy.bodyId,gw:convertToWorldCoordinates(gy)end end;function fS:getBodyParameters(fR)local bJ=fR;if fr(fR)then bJ=fR.bodyId end;assert(fl(bJ),'Argument 1 (bodyId) must be a number:'..type(bJ))return self[bJ]end;function fS:getPlanetarySystemId()local _,bd=next(self)return bd and bd.planetarySystemId end;function fF:convertToMapPosition(fM)assert(fm(fM),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fM))local gz=vec3(fM)if self.bodyId==0 then return setmetatable({latitude=gz.x,longitude=gz.y,altitude=gz.z,bodyId=0,systemId=self.planetarySystemId},fO)end;local gA=gz-self.center;local a3=gA:len()local bM=a3-self.radius;local bK=0;local bL=0;if not fx(a3,0)then local gB=math.atan(gA.y,gA.x)bL=gB>=0 and gB or 2*math.pi+gB;bK=math.pi/2-math.acos(gA.z/a3)end;return setmetatable({latitude=bK,longitude=bL,altitude=bM,bodyId=self.bodyId,systemId=self.planetarySystemId},fO)end;function fF:convertToWorldCoordinates(fR)local gy=fo(fR)and fQ(fR)or fR;if gy.bodyId==0 then return vec3(gy.latitude,gy.longitude,gy.altitude)end;assert(fr(gy),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gy.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gy.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bN=math.cos(gy.latitude)return self.center+(self.radius+gy.altitude)*vec3(bN*math.cos(gy.longitude),bN*math.sin(gy.longitude),math.sin(gy.latitude))end;function fF:getAltitude(fM)return(vec3(fM)-self.center):len()-self.radius end;function fF:getDistance(fM)return(vec3(fM)-self.center):len()end;function fF:getGravity(fM)local gC=self.center-vec3(fM)local gD=gC:len2()return self.GM/gD*gC/math.sqrt(gD)end;return setmetatable(aX,{__call=function(_,...)return f_(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fo(fp)return type(fp)=='string'end;local function fm(fn)return type(fn)=='table'end;local function fx(fy,fz)if fy==0 then return math.abs(fz)<1e-09 end;if fz==0 then return math.abs(fy)<1e-09 end;return math.abs(fy-fz)<math.max(math.abs(fy),math.abs(fz))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bM)assert(self.body)local a3=bM+self.body.radius;if not fx(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fR,b5)assert(self.body)assert(fm(fR)or fo(fR))assert(fm(b5))local bG=(fo(fR)or PlanetRef.isMapPosition(fR))and self.body:convertToWorldCoordinates(fR)or vec3(fR)local bd=vec3(b5)local gE=bG-self.body.center;local gl=bd:len2()local gF=gE:len()local gG=self.body.GM;local gH=((gl-gG/gF)*gE-gE:dot(bd)*bd)/gG;local fy=gG/(2*gG/gF-gl)local gI=gH:len()local gm=gH:normalize()local gJ=fy*(1-gI)local gK=fy*(1+gI)local gL=gJ*gm+self.body.center;local gM=gI<=1 and-gK*gm+self.body.center or nil;local gN=math.sqrt(fy*gG*(1-gI*gI))local gO=gM and 2*math.pi*math.sqrt(fy^3/gG)local gP=math.acos(gH:dot(gE)/(gI*gF))if gE:dot(bd)<0 then gP=-(gP-2*math.pi)end;local gQ=math.acos((math.cos(gP)+gI)/(1+gI*math.cos(gP)))local gR=gQ;if gR<0 then gR=gR+2*math.pi end;local gS=gR-gI*math.sin(gR)local gT=0;local gU=0;local gV=0;if gO~=nil then gT=gS/(2*math.pi/gO)gU=gO-gT;gV=gU+gO/2;if gP-math.pi>0 then gU=gT;gV=gU+gO/2 end;if gV>gO then gV=gV-gO end end;return{periapsis={position=gL,speed=gN/gJ,circularOrbitSpeed=math.sqrt(gG/gJ),altitude=gJ-self.body.radius},apoapsis=gM and{position=gM,speed=gN/gK,circularOrbitSpeed=math.sqrt(gG/gK),altitude=gK-self.body.radius},currentVelocity=bd,currentPosition=bG,eccentricity=gI,period=gO,eccentricAnomaly=gQ,meanAnomaly=gS,timeToPeriapsis=gU,timeToApoapsis=gV}end;local function gW(gX)local gw=PlanetRef.BodyParameters(gX.planetarySystemId,gX.bodyId,gX.radius,gX.center,gX.GM)return setmetatable({body=gw},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gW(...)end})end;function Kinematics()local aZ={}local gY=30000000/3600;local gZ=gY*gY;local g_=100;local function h0(bd)return 1/math.sqrt(1-bd*bd/gZ)end;function aZ.computeAccelerationTime(h1,h2,h3)local h4=gY*math.asin(h1/gY)return(gY*math.asin(h3/gY)-h4)/h2 end;function aZ.computeDistanceAndTime(h1,h3,h5,h6,h7,h8)h7=h7 or 0;h8=h8 or 0;local h9=h1<=h3;local ha=h6*(h9 and 1 or-1)/h5;local hb=-h8/h5;local hc=ha+hb;if h9 and hc<=0 or not h9 and hc>=0 then return-1,-1 end;local hd,he=0,0;if ha~=0 and h7>0 then local h4=math.asin(h1/gY)local hf=math.pi*(ha/2+hb)local hg=ha*h7;local hh=gY*math.pi;local bd=function(fn)local ci=(hf*fn-hg*math.sin(math.pi*fn/2/h7)+hh*h4)/hh;local hi=math.tan(ci)return gY*hi/math.sqrt(hi*hi+1)end;local hj=h9 and function(fp)return fp>=h3 end or function(fp)return fp<=h3 end;he=2*h7;if hj(bd(he))then local hk=0;while math.abs(he-hk)>0.5 do local fn=(he+hk)/2;if hj(bd(fn))then he=fn else hk=fn end end end;local hl=h1;local hm=he/g_;for hn=1,g_ do local br=bd(hn*hm)hd=hd+(br+hl)*hm/2;hl=br end;if he<2*h7 then return hd,he end;h1=hl end;local h4=gY*math.asin(h1/gY)local bf=(gY*math.asin(h3/gY)-h4)/hc;local ho=gZ*math.cos(h4/gY)/hc;local a3=ho-gZ*math.cos((hc*bf+h4)/gY)/hc;return a3+hd,bf+he end;function aZ.computeTravelTime(h1,h2,a3)if a3==0 then return 0 end;if h2>0 then local h4=gY*math.asin(h1/gY)local ho=gZ*math.cos(h4/gY)/h2;return(gY*math.acos(h2*(ho-a3)/gZ)-h4)/h2 end;assert(h1>0,'Acceleration and initial speed are both zero.')return a3/h1 end;function aZ.lorentz(bd)return h0(bd)end;return aZ end;function script.onStart()VERSION_NUMBER=4.932;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})SetupChecks()LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()b0=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(hp)if dbHud_1 then if not Y then for bc,bd in pairs(b)do dbHud_1.setStringValue(bd,g(_G[bd]))if hp and dbHud_2 then dbHud_2.setStringValue(bd,g(_G[bd]))end end;for bc,bd in pairs(a)do dbHud_1.setStringValue(bd,g(_G[bd]))if hp and dbHud_2 then dbHud_2.setStringValue(bd,g(_G[bd]))end end;c("Saved Variables to Datacore")if hp and dbHud_2 then K="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bR=j()if door and(bR>0 or bR==0 and ae<10000)then for _,bd in pairs(door)do bd.toggle()end end;if switch then for _,bd in pairs(switch)do bd.toggle()end end;if forcefield and(bR>0 or bR==0 and ae<10000)then for _,bd in pairs(forcefield)do bd.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(hq)if hq=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hr=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hr then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hq=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bX={}local cY=GetFlightStyle()DrawOdometer(bX,W,TotalDistanceTravelled,cY,X)if ShouldCheckDamage then CheckDamage(bX)end;a5=table.concat(bX,"")collectgarbage("collect")elseif hq=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local be=json.decode(dbHud_1.getStringValue("SavedLocations"))if be~=nil then _G["SavedLocations"]=be;local bV=-1;local bQ;for bc,bd in pairs(SavedLocations)do if bd.name and bd.name=="SatNav Location"then bV=bc;break end end;if bV~=-1 then bQ=SavedLocations[bV]bV=-1;for bc,bd in pairs(aS[0])do if bd.name and bd.name=="SatNav Location"then bV=bc;break end end;if bV>-1 then aS[0][bV]=bQ end;UpdateAtlasLocationsList()K=bQ.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hq=="msgTick"then local bX={}DisplayMessage(bX,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hq=="animateTick"then b2=true;b1=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hq=="hudTick"then local bX={}HUDPrologue(bX)if showHud then UpdateHud(bX)else DisplayOrbitScreen(bX)DrawWarnings(bX)end;HUDEpilogue(bX)bX[#bX+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bX,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bX)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(bX)if screen_1.getMouseState()==1 then CheckButtons()end;bX[#bX+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(bX)if not b1 and not b2 then local hs=table.concat(bX,"")bX={}bX[#bX+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bX[#bX+1]=aT;bX[#bX+1]=hs;bX[#bX+1]="</body>"b1=true;bX[#bX+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bX,"")system.setScreen(content)elseif b2 then local hs=table.concat(bX,"")bX={}bX[#bX+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bX[#bX+1]=aT;bX[#bX+1]=hs;bX[#bX+1]="</body>"end;if not b1 then bX[#bX+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(bX)end else SetButtonContains()DrawButtons(bX)end;bX[#bX+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bX[#bX+1]=[[</svg></body>]]content=table.concat(bX,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hq=="apTick"then b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;b9=system.getMouseDeltaX()ba=system.getMouseDeltaY()if InvertMouse and not J then ba=-ba end;D=0;H=0;C=0;b5=vec3(core.getWorldVelocity())b6=vec3(b5):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b0(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b5)aa=hoverDetectGround()if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b1 then a0=a0+b9;a1=a1+ba end else a0=0;a1=0 end else a0=a0+b9;a1=a1+ba;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(ba,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b9,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local ht=b6>8334;if b6>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not ht then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not ht and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=ht;if ad and j()>0.09 then if not ai then if b6>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b6<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b6>w then local hu=AlignToWorldVector(vec3(b5),0.01)if a7 then b3=true;if b6<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b3=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b6>w then AlignToWorldVector(-vec3(b5))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b6*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)end;P=P;Q=Q;local hv=AutopilotTargetCoords;if orbit.apoapsis==nil and b6>300 and AutopilotAccelerating then local hw=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b5):normalize()local hx=getMagnitudeInDirection(hw,AutopilotShipUp)local hy=getMagnitudeInDirection(hw,AutopilotShipRight)local hz=-hy*AutopilotDistance*b6*TrajectoryAlignmentStrength;local hA=-hx*AutopilotDistance*b6*TrajectoryAlignmentStrength;hv=AutopilotTargetCoords+-hz*vec3(AutopilotShipRight)+-hA*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hv)-vec3(core.getConstructWorldPos())):len()local hB=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hB)..'", "unit":""}')local hC=true;local hD=(V.center-(vec3(core.getConstructWorldPos())+vec3(b5):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hD)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hC=AlignToWorldVector((hv-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hC=AlignToWorldVector(-vec3(b5):normalize())end;if AutopilotAccelerating then if not hC or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b5)<0 and b6>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hD-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b6<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hC then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hC then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b3=true;local hE=0;local bG=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hF=bG-vec3(core.getConstructWorldPos())local hG=vec3(hF):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hH=vec3(hF):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hG*hG+hH*hH)AlignToWorldVector(hF:normalize())local hI=40;local hJ=a3<hI;local hK=100;local hL=utils.clamp((a3-hI)/2,10,hK)C=0;local hC=math.abs(D)<0.1;if hC and b6<hL and not hJ then BrakeIsOn=false;hE=-20 else BrakeIsOn=true;hE=0 end;local b_=vec3(core.getConstructWorldOrientationForward())local c0=vec3(core.getConstructWorldOrientationRight())local c1=vec3(core.getWorldVertical())local c2=getPitch(c1,b_,c0)local hM=1.0;if math.abs(hE-c2)>hM then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hE-c2)local hN=pitchPID:get()C=hN end end;local dv=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local da=unit.getClosestPlanetInfluence()>0;local hO=HoldAltitude-ae;local hP=500+b6;local hE=(utils.smoothstep(hO,-hP,hP)-0.5)*2*MaxPitch;if not AltitudeHold then hE=0 end;if LockPitch~=nil then if da then hE=LockPitch else LockPitch=nil end end;b3=true;if Reentry then local hQ=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hQ then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hQ)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hE=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hE=0;b3=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b3=autoRollPreference end end;local hR=C;if b6>w and not a8 then AlignToWorldVector(vec3(b5))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cQ=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cQ)local hS=planet:getAltitude(CustomTarget.position)local hT=math.sqrt(cQ:len()^2-(ae-hS)^2)local hU=LastMaxBrakeInAtmo;if hU then hU=hU*utils.clamp(b6/100,0.1,1)*j()else hU=LastMaxBrake end;local dt=b5.x*dv.x+b5.y*dv.y+b5.z*dv.z;local hV=b5:len()-math.abs(dt)local hW=vec3(core.getWorldAirFrictionAcceleration())local hX=math.sqrt(hW:len()-hW:project_on(dv):len())*n()if hV>100 then P,Q=aZ.computeDistanceAndTime(hV,100,n(),0,0,hU+hX)local hY,_=aZ.computeDistanceAndTime(100,0,n(),0,0,hU/2)P=P+hY else P,Q=aZ.computeDistanceAndTime(hV,0,n(),0,0,hU/2)end;StrongBrakes=true;if hT<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()end;BrakeLanding=true;VectorToTarget=false elseif not AutoTakeoff then BrakeIsOn=false end end;C=hR;local b_=vec3(core.getConstructWorldOrientationForward())local c0=vec3(core.getConstructWorldOrientationRight())local c1=vec3(core.getWorldVertical())local eW=-1;local c2=getPitch(c1,b_,c0)local hM=0.1;if BrakeLanding then hE=0;local dt=b5.x*dv.x+b5.y*dv.y+b5.z*dv.z;local hZ=false;local h_=0;if a_~=nil and a_>0 then if vbooster and vbooster.getMaxDistance then if vbooster.getMaxDistance()>h_ then h_=vbooster.getMaxDistance()end end;if hover and hover.getMaxDistance then if hover.getMaxDistance()>h_ then h_=hover.getMaxDistance()end end;if telemeter_1 then if telemeter_1.getMaxDistance()>h_ then h_=telemeter_1.getMaxDistance()end end;if h_==0 then h_=30 end;local bo=planet.gravity*9.8*n()local hX=vec3(core.getWorldAirFrictionAcceleration()):len()*n()local hU=LastMaxBrakeInAtmo*utils.clamp(dt/100,0.1,1)*j()local i0=a_*j()+hU+hX-bo;local i1,_=aZ.computeDistanceAndTime(math.abs(dt),0,n(),0,0,i0)if i1>=h_ then BrakeIsOn=true else BrakeIsOn=false end;hZ=true end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)eW=aa;if eW>-1 then if math.abs(hE-c2)<hM then b3=autoRollPreference;if b6<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and b5:normalize():dot(-dv)<0.999 then BrakeIsOn=true elseif dt<-brakeLandingRate and not hZ then BrakeIsOn=true elseif not hZ then BrakeIsOn=false end end;if AutoTakeoff or a8 then if hE<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b6<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hE-c2)>hM then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hE-c2)local hN=pitchPID:get()C=C+hN end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local i2=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local i3=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local i4=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local i5=G;local i6=vec3(core.getWorldVertical())local i7=vec3(core.getConstructWorldOrientationUp())local i8=vec3(core.getConstructWorldOrientationForward())local i9=vec3(core.getConstructWorldOrientationRight())local ia=vec3(core.getWorldVelocity())local ib=vec3(core.getWorldVelocity()):normalize()local ic=getRoll(i6,i8,i9)local id=math.abs(ic)local ie=utils.sign(ic)local j=j()local ig=vec3(core.getWorldAngularVelocity())local ih=i2*pitchSpeedFactor*i9+i3*rollSpeedFactor*i8+i4*yawSpeedFactor*i7;if i6:len()>0.01 and j>0.0 or ProgradeIsOn then local ii=1.0;if b3==true and id>ii and i3==0 then local ij=utils.clamp(0,id-30,id+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(ij-ic)local ik=rollPID:get()ih=ih+ik*i8 end end;if i6:len()>0.01 and j>0.0 then local il=20.0;if turnAssist==true and id>il and i2==0 and i4==0 then local im=turnAssistFactor*0.1;local io=turnAssistFactor*0.025;local ip=(id-il)/(180-il)*180;local iq=0;if ip<90 then iq=ip/90 elseif ip<180 then iq=(180-ip)/90 end;iq=iq*iq;local ir=-ie*io*(1.0-iq)local is=im*iq;ih=ih+is*i9+ir*i7 end end;local it=1;local iu=0;local iv=1;local iw=torqueFactor*(ih-ig)local ix=vec3(core.getWorldAirFrictionAngularAcceleration())iw=iw-ix;Nav:setEngineTorqueCommand('torque',iw,it,'airfoil','','',iv)local iy=-i5*(brakeSpeedFactor*ia+brakeFlatFactor*ib)Nav:setEngineForceCommand('brake',iy)local iz=''local iA=vec3()local iB=false;local iC='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then iC=iC..ExtraLongitudeTags end;local iD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if iD==axisCommandType.byThrottle then local iE=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iC,axisCommandId.longitudinal)Nav:setEngineForceCommand(iC,iE,it)elseif iD==axisCommandType.byTargetSpeed then local iE=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)iz=iz..' , '..iC;iA=iA+iE;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then iB=true end end;local iF='thrust analog lateral 'if ExtraLateralTags~="none"then iF=iF..ExtraLateralTags end;local iG=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if iG==axisCommandType.byThrottle then local iH=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iF,axisCommandId.lateral)Nav:setEngineForceCommand(iF,iH,it)elseif iG==axisCommandType.byTargetSpeed then local iI=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)iz=iz..' , '..iF;iA=iA+iI end;local iJ='thrust analog vertical 'if ExtraVerticalTags~="none"then iJ=iJ..ExtraVerticalTags end;local iK=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if iK==axisCommandType.byThrottle then local iL=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iJ,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(iJ,iL,it,'airfoil','ground','',iv)else Nav:setEngineForceCommand(iJ,vec3(),it)Nav:setEngineForceCommand('airfoil vertical',iL,it,'airfoil','','',iv)Nav:setEngineForceCommand('ground vertical',iL,it,'ground','','',iv)end elseif iK==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),it)end;local iM=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)iz=iz..' , '..iJ;iA=iA+iM end;if iA:len()>constants.epsilon then if G~=0 or iB or math.abs(ib:dot(i8))<0.95 then iz=iz..', brake'end;Nav:setEngineForceCommand(iz,iA,iu,'','','',iv)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local br=vec3(core.getVelocity()):len()local iN=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local iO=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if br*3.6>iO*(1-iN)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif br*3.6<iO*(1-iN)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iP=unit.getThrottle()local hL=iP/100;if j==0 then hL=hL*MaxGameVelocity;if br>=hL*(1-iN)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif br<hL*(1-iN)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hL=hL*ReentrySpeed/3.6;if br>=hL*(1-iN)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif br<hL*(1-iN)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,be=coroutine.resume(beginSetup)if be then SetupComplete=true end else Nav:update()if not b1 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iQ)if iQ=="gear"then if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.retractLandingGears()GearExtended=false else Nav.control.extendLandingGears()GearExtended=true end else GearExtended=not GearExtended end;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b3=true else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iQ=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iQ=="forward"then B=B-1 elseif iQ=="backward"then B=B+1 elseif iQ=="left"then E=E-1 elseif iQ=="right"then E=E+1 elseif iQ=="yawright"then F=F-1 elseif iQ=="yawleft"then F=F+1 elseif iQ=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iQ=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iQ=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iQ=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iQ=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iQ=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iQ=="option1"then IncrementAutopilotTargetIndex()v=false elseif iQ=="option2"then DecrementAutopilotTargetIndex()v=false elseif iQ=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iQ=="option4"then ToggleAutopilot()v=false elseif iQ=="option5"then ToggleLockPitch()v=false elseif iQ=="option6"then ToggleAltitudeHold()v=false elseif iQ=="option7"then wipeSaveVariables()v=false elseif iQ=="option8"then ToggleFollowMode()v=false elseif iQ=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iQ=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b2=false;b1=false end elseif iQ=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iQ=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iQ=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iQ=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iQ=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iQ=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iQ=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iQ)if iQ=="forward"then B=0 elseif iQ=="backward"then B=0 elseif iQ=="left"then E=0 elseif iQ=="right"then E=0 elseif iQ=="yawright"then F=0 elseif iQ=="yawleft"then F=0 elseif iQ=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iQ=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iQ=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iQ=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iQ=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iQ=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iQ=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b2=false;b1=false end elseif iQ=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iQ=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iQ)if iQ=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iQ=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iQ=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iQ=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iR)local i;local iS="/commands /setname /G /agg /addlocation /copydatabank"local iT,iU=nil,nil;local iV="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(iR," ")iT=iR;if i~=nil then iT=string.sub(iR,0,i-1)iU=string.sub(iR,i+1)elseif not string.find(iS,iT)then for fe in string.gmatch(iV,"([^\n]+)")do c(fe)end;return end;if iT=="/setname"then if iU==nil or iU==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iU)else K="Select a saved target to rename first"end elseif iT=="/addlocation"then if iU==nil or iU==""or string.find(iU,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iU,"::")local bP=string.sub(iU,1,i-2)local bG=string.sub(iU,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bH='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bI,bJ,bK,bL,bM=string.match(bG,bH)local planet=aS[tonumber(bI)][tonumber(bJ)]AddNewLocationByWaypoint(bP,planet,bG)K="Added "..bP.." to saved locations,\nplanet "..planet.name.." at "..bG;a2=5 elseif iT=="/agg"then if iU==nil or iU==""then K="Usage: /agg targetheight"return end;iU=tonumber(iU)if iU<1000 then iU=1000 end;AntigravTargetAltitude=iU;K="AGG Target Height set to "..iU elseif iT=="/G"then if iU==nil or iU==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iU=="dump"then for bc,bd in pairs(a)do if type(_G[bd])=="boolean"then if _G[bd]==true then c(bd.." true")else c(bd.." false")end elseif _G[bd]==nil then c(bd.." nil")else c(bd.." ".._G[bd])end end;return end;i=string.find(iU," ")local iW=string.sub(iU,0,i-1)local iX=string.sub(iU,i+1)for bc,bd in pairs(a)do if bd==iW then K="Variable "..iW.." changed to "..iX;local iY=type(_G[bd])if iY=="number"then iX=tonumber(iX)elseif iY=="boolean"then if string.lower(iX)=="true"then iX=true else iX=false end end;_G[bd]=iX;return end end;K="No such global variable: "..iW elseif iT=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else K="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
