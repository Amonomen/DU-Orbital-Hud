name: ButtonsHud - Dimencia and Archaegeo v4.921 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: Default is 1080, does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;DisplayOrbit=true;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags"}local b={"BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;function LoadVariables()if dbHud_1 then local b3=dbHud_1.hasKey;if not useTheseSettings then for b4,b5 in pairs(a)do if b3(b5)then local b6=f(dbHud_1.getStringValue(b5))if b6~=nil then c(b5 .." "..dbHud_1.getStringValue(b5))_G[b5]=b6;az=true end end end end;coroutine.yield()for b4,b5 in pairs(b)do if b3(b5)then local b6=f(dbHud_1.getStringValue(b5))if b6~=nil then c(b5 .." "..dbHud_1.getStringValue(b5))_G[b5]=b6;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local b7=system.getTime()if LastStartTime+180<b7 then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=b7;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(b8,b9)if b8>b9 then b9=b8 end;if ContainerOptimization>0 then b9=b9-b9*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then b9=b9-b9*FuelTankOptimization*0.05 end;return b9 end;function ProcessElements()for b4 in pairs(af)do local type=l(af[b4])if type=="landing gear"then A=true end;if type=="dynamic core"then local ba=h(af[b4])if ba>10000 then aQ=128 elseif ba>1000 then aQ=64 elseif ba>150 then aQ=32 end end;aG=aG+h(af[b4])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local ba=h(af[b4])local bb=m(af[b4])local b8=0;local bc=system.getTime()if type=="Atmospheric Fuel Tank"then local b9=400;local bd=35.03;if ba>10000 then b9=51200;bd=5480 elseif ba>1300 then b9=6400;bd=988.67 elseif ba>150 then b9=1600;bd=182.67 end;b8=bb-bd;if fuelTankHandlingAtmo>0 then b9=b9+b9*fuelTankHandlingAtmo*0.2 end;b9=CalculateFuelVolume(b8,b9)aD[#aD+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end;if type=="Rocket Fuel Tank"then local b9=320;local bd=173.42;if ba>65000 then b9=40000;bd=25740 elseif ba>6000 then b9=5120;bd=4720 elseif ba>700 then b9=640;bd=886.72 end;b8=bb-bd;if fuelTankHandlingRocket>0 then b9=b9+b9*fuelTankHandlingRocket*0.2 end;b9=CalculateFuelVolume(b8,b9)aF[#aF+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end;if type=="Space Fuel Tank"then local b9=2400;local bd=182.67;if ba>10000 then b9=76800;bd=5480 elseif ba>1300 then b9=9600;bd=988.67 end;b8=bb-bd;if fuelTankHandlingSpace>0 then b9=b9+b9*fuelTankHandlingSpace*0.2 end;b9=CalculateFuelVolume(b8,b9)aE[#aE+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,b5 in pairs(door)do b5.toggle()end end;if switch then for _,b5 in pairs(switch)do b5.toggle()end end;if forcefield then for _,b5 in pairs(forcefield)do b5.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not A then GearExtended=true end else if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(b5)if ResolutionX==1920 then return b5 else return round(ResolutionX*b5/1920,0)end end;function ConvertResolutionY(b5)if ResolutionY==1080 then return b5 else return round(ResolutionY*b5/1080,0)end end;function RefreshLastMaxBrake(be,bf)if be==nil then be=core.g()end;be=round(be,5)local bg=j()if bf~=nil and bf or(aC==nil or aC~=be)then local velocity=core.getVelocity()local bh=vec3(velocity):len()local bi=f(unit.getData()).maxBrake;if bi~=nil and bi>0 and ad then bi=bi/utils.clamp(bh/100,0.1,1)bi=bi/bg;if bi>LastMaxBrakeInAtmo and bg>0.10 then LastMaxBrakeInAtmo=bi end end;if bi~=nil and bi>0 then LastMaxBrake=bi end;aC=be end end;function MakeButton(bj,bk,bl,bm,bn,bo,bp,bq,br)local bs={enableName=bj,disableName=bk,width=bl,height=bm,x=bn,y=bo,toggleVar=bp,toggleFunction=bq,drawCondition=br,hovered=false}table.insert(aq,bs)return bs end;function UpdateAtlasLocationsList()AtlasOrdered={}for b4,b5 in pairs(aS[0])do table.insert(AtlasOrdered,{name=b5.name,index=b4})end;local function bt(bu,bv)return bu.name<bv.name end;table.sort(AtlasOrdered,bt)end;function AddLocationsToAtlas()for b4,b5 in pairs(SavedLocations)do table.insert(aS[0],b5)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bw)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bx='::pos{'..p..','..p..','..p..','..p..','..p..'}'local by,bz,bA,bB,bC=string.match(bw,bx)bB=math.rad(bB)bA=math.rad(bA)if by==0 and bz==0 then return vec3(bA,bB,bC)end;local planet=aS[tonumber(by)][tonumber(bz)]local bD=math.cos(bA)local bE=vec3(bD*math.cos(bB),bD*math.sin(bB),math.sin(bA))return planet.center+(planet.radius+bC)*bE end;function AddNewLocationByWaypoint(bF,bG,bw)if dbHud_1 then local bH={}local position=zeroConvertToWorldCoordinates(bw)local planet=aS[0][bG]if bG==0 then bH={position=position,name=bF,atmosphere=0,planetname="Space",gravity=0}else local bI=false;if planet.atmos then bI=true else bI=false end;bH={position=position,name=bF,atmosphere=bI,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bH;table.insert(aS[0],bH)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())c(position.x.." "..position.y.." "..position.z)local bJ=planet.name..". "..#SavedLocations;if radar_1 then local bK,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bK~=nil and bK~=""then bJ=bJ.." "..radar_1.getConstructName(bK)end end;local bH={position=position,name=bJ,atmosphere=ad,planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=bH;table.insert(aS[0],bH)UpdateAtlasLocationsList()K="Location saved as "..bJ else K="Databank must be installed to save locations"end end;function UpdatePosition(bL)local bM=-1;local bH;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name==CustomTarget.name then bM=b4;break end end;if bM~=-1 then local bN;if bL~=nil then bH={position=SavedLocations[bM].position,name=bL,atmosphere=SavedLocations[bM].atmosphere,planetname=SavedLocations[bM].planetname,gravity=SavedLocations[bM].gravity}else bH={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bM].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bM]=bH;bM=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name==CustomTarget.name then bM=b4 end end;if bM>-1 then aS[0][bM]=bH end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bM=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name==CustomTarget.name then bM=b4 end end;if bM>-1 then table.remove(aS[0],bM)end;bM=-1;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name==CustomTarget.name then K=b5.name.." saved location cleared"bM=b4;break end end;if bM~=-1 then table.remove(SavedLocations,bM)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bO)bO[#bO+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bP,bQ,bn,bo,bl,bm)if bP>bn and bP<bn+bl and bQ>bo and bQ<bo+bm then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bR=vec3(core.getConstructWorldOrientationForward())local bS=vec3(core.getConstructWorldOrientationRight())local bT=vec3(core.getWorldVertical())local bU=getPitch(bT,bR,bS)LockPitch=bU;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else a7=true end else a8=true;RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bO)local bV=0;ao=""local bW=aG;local bX=0;local bY=0;local bZ=0;local b_=0;local c0=""for b4 in pairs(af)do local ba=0;local c1=0;c1=h(af[b4])ba=k(af[b4])bX=bX+ba;if ba<c1 then if ba==0 then bZ=bZ+1 else bY=bY+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[b4]))local bn=position.x-aQ;local bo=position.y-aQ;local c2=position.z-aQ;table.insert(al,core.spawnArrowSticker(bn,bo,c2+1,"down"))table.insert(al,core.spawnArrowSticker(bn,bo,c2+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bn+1,bo,c2,"north"))table.insert(al,core.spawnArrowSticker(bn+1,bo,c2,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bn-1,bo,c2,"south"))table.insert(al,core.spawnArrowSticker(bn-1,bo,c2,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bn,bo-1,c2,"east"))table.insert(al,core.spawnArrowSticker(bn,bo-1,c2,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bn,bo+1,c2,"west"))table.insert(al,core.spawnArrowSticker(bn,bo+1,c2,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[b4])end elseif aH and#al>0 and al[11]==af[b4]then for c3 in pairs(al)do core.deleteSticker(al[c3])end;al={}end end;bV=d(bX/bW*100)if bV<100 then bO[#bO+1]=[[<g class="pbright txt">]]b_=d(bV*2.55)c0=e("rgb(%d,%d,%d)",255-b_,b_,0)if bV<100 then bO[#bO+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],c0,bV)if bZ>0 then bO[#bO+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],c0,bZ,bY)elseif bY>0 then bO[#bO+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],c0,bY)end end;bO[#bO+1]=[[<\g>]]end end;function DrawCursorLine(bO)local c4=d(utils.clamp(a3/(at/4)*255,0,255))bO[#bO+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+c4,d(PrimaryG+0.5)-c4,d(PrimaryB+0.5)-c4)end;function getPitch(c5,c6,bv)local c7=c5:cross(bv):normalize_inplace()local bU=math.acos(utils.clamp(c7:dot(-c6),-1,1))*constants.rad2deg;if c7:cross(-c6):dot(bv)<0 then bU=-bU end;return bU end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for b4,b5 in pairs(a)do dbHud_1.setStringValue(b5,g(nil))end;for b4,b5 in pairs(b)do if b5~="SavedLocations"then dbHud_1.setStringValue(b5,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,b5 in pairs(aq)do if b5.hovered then if not b5.drawCondition or b5.drawCondition()then b5.toggleFunction()end;b5.hovered=false end end end;function SetButtonContains()local bn=a0+at/2;local bo=a1+au/2;for _,b5 in pairs(aq)do b5.hovered=Contains(bn,bo,b5.x,b5.y,b5.width,b5.height)end end;function DrawButton(bO,c8,hover,bn,bo,c9,ca,cb,cc,cd,ce)if type(cd)=="function"then cd=cd()end;if type(ce)=="function"then ce=ce()end;bO[#bO+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bn,bo,c9,ca)if c8 then bO[#bO+1]=e("%s'",cb)else bO[#bO+1]=cc end;if hover then bO[#bO+1]=" style='stroke:white; stroke-width:2'"else bO[#bO+1]=" style='stroke:black; stroke-width:1'"end;bO[#bO+1]="></rect>"bO[#bO+1]=e("<text x='%f' y='%f' font-size='24' fill='",bn+c9/2,bo+ca/2+5)if c8 then bO[#bO+1]="black"else bO[#bO+1]="white"end;bO[#bO+1]="' text-anchor='middle' font-family='Montserrat'>"if c8 then bO[#bO+1]=e("%s</text>",cd)else bO[#bO+1]=e("%s</text>",ce)end end;function DrawButtons(bO)local cf="rgb(50,50,50)'"local cg="rgb(210,200,200)"local ch=DrawButton;for _,b5 in pairs(aq)do local bk=b5.disableName;local bj=b5.enableName;if type(bk)=="function"then bk=bk()end;if type(bj)=="function"then bj=bj()end;if not b5.drawCondition or b5.drawCondition()then ch(bO,b5.toggleVar(),b5.hovered,b5.x,b5.y,b5.width,b5.height,cg,cf,bk,bj)end end end;function DrawTank(bO,aP,bn,ci,cj,ck,cl,cm)local cn=1;local co=2;local cp=3;local cq=4;local cr=5;local cs=6;local ct=""local cu=0;local cv=fuelY;local cw=fuelY+10;if o()==1 and not RemoteHud then cv=cv-50;cw=cw-50 end;bO[#bO+1]=[[<g class="pdim txtfuel">]]if cj=="ATMO"then ct="atmofueltank"elseif cj=="SPACE"then ct="spacefueltank"else ct="rocketfueltank"end;cu=_G[ct.."_size"]if#ck>0 then for i=1,#ck do local bJ=string.sub(ck[i][co],1,12)local cx=0;for c3=1,cu do if ck[i][co]==f(unit[ct.."_"..c3].getData()).name then cx=c3;break end end;if aP or cl[i]==nil or cm[i]==nil then local cy=0;local cz=0;local cA=0;local cB=0;local bc=system.getTime()if cx~=0 then cm[i]=f(unit[ct.."_"..cx].getData()).percentage;cl[i]=f(unit[ct.."_"..cx].getData()).timeLeft;if cl[i]=="n/a"then cl[i]=0 end else cA=m(ck[i][cn])-ck[i][cq]cy=ck[i][cp]cm[i]=d(0.5+cA*100/cy)cz=ck[i][cr]cB=ck[i][cs]if cz<=cA then cl[i]=0 else cl[i]=d(0.5+cA/((cz-cA)/(bc-cB)))end;ck[i][cr]=cA;ck[i][cs]=bc end end;if bJ==ci then bJ=e("%s %d",cj,i)end;if cx==0 then bJ=bJ.." *"end;local cC;if cl[i]==0 then cC="n/a"else cC=FormatTimeString(cl[i])end;if cm[i]~=nil then local b_=d(cm[i]*2.55)local c0=e("rgb(%d,%d,%d)",255-b_,b_,0)local cD=""if cC~="n/a"and cl[i]<120 or cm[i]<5 then if aP then cD=[[class="red"]]end end;bO[#bO+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bn,cv,cD,bJ,bn,cw,c0,cm[i],cC)cv=cv+30;cw=cw+30 end end end;bO[#bO+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(velocity)velocity=vec3(velocity)local bU=-math.deg(math.atan(velocity.y,velocity.z))+180;bU=bU-90;if bU<0 then bU=360+bU end;if bU>180 then bU=-180+bU-180 end;return-bU end;function getRelativeYaw(velocity)velocity=vec3(velocity)local cE=math.deg(math.atan(velocity.y,velocity.x))-90;if cE<-180 then cE=360+cE end;return cE end;function AlignToWorldVector(cF,cG)if not ad or RateOfChange>MinimumRateOfChange+0.08 or aa~=-1 then if cG==nil then cG=as end;cF=vec3(cF):normalize()local cH=vec3(core.getConstructWorldOrientationForward())-cF;local cI=-getMagnitudeInDirection(cH,core.getConstructWorldOrientationRight())*ar;local cJ=-getMagnitudeInDirection(cH,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cI/2 end;if an==0 then an=cJ/2 end;D=D-(cI+(cI-am)*DampingMultiplier)C=C+cJ+(cJ-an)*DampingMultiplier;am=cI;an=cJ;if math.abs(cI)<cG and math.abs(cJ)<cG then return true end;return false end end;function getAPEnableName()local bJ=AutopilotTargetName;if bJ==nil then bJ=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bJ==nil then bJ="None"end;return"Engage Autopilot: "..bJ end;function getAPDisableName()local bJ=AutopilotTargetName;if bJ==nil then bJ=CustomTarget.name end;if bJ==nil then bJ="None"end;return"Disable Autopilot: "..bJ end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cK=50;local cL=260;local cM=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cL,cK,at/2-cL/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cL,cK,at/2-cL/2-50-cM.width,au/2-cK+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cL,cK,at/2-cL/2+cM.width+50,au/2-cK+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cN=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cN.height,cN.x+cN.width+30,cN.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cN.height,cN.x+cN.width+30,cN.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cN.height,cN.x-200-30,cN.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cK=60;cL=300;local bn=10;local bo=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cL,cK,bn,bo,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cL,cK,bn+cL+20,bo,function()return AltitudeHold end,ToggleAltitudeHold)bo=bo+cK+20;MakeButton("Engage Autoland","Disable Autoland",cL,cK,bn,bo,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cL,cK,bn+cL+20,bo,function()return AutoTakeoff end,ToggleAutoTakeoff)bo=bo+cK+20;MakeButton("Show Orbit Display","Hide Orbit Display",cL,cK,bn,bo,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bo=bo+cK+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cL,cK,bn,bo,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cL,cK,bn+cL+20,bo,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bo=bo+cK+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cL,cK,bn,bo,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cL,cK,bn+cL+20,bo,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bo=bo+cK+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cL,cK,bn,bo,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bo=bo+cK+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cL*2,cK,bn,bo,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cO=Nav.axisCommandManager:getAxisCommandType(0)local cP="TRAVEL"if cO==1 then cP="CRUISE"end;if Autopilot then cP="AUTOPILOT"end;return cP end;function updateHud(bO)local bC=ae;local velocity=core.getVelocity()local bh=vec3(velocity):len()local bT=vec3(core.getWorldVertical())local bR=vec3(core.getConstructWorldOrientationForward())local bS=vec3(core.getConstructWorldOrientationRight())local cQ=vec3(core.getConstructWorldOrientationUp())local cR=getRoll(bT,bR,bS)local cS=cR/180*math.pi;local cT=math.cos(cS)local cU=math.sin(cS)local bU=getPitch(bT,bR,bS*cT+cQ*cU)local cV=cR;local cW=bU;local cX=j()local cY=d(unit.getThrottle())local cZ=bh*3.6;local c_=unit.getAxisCommandValue(0)local cP=GetFlightStyle()local d0="ROLL"local d1=unit.getClosestPlanetInfluence()>0;if cY==nil then cY=0 end;if not d1 then if bh>5 then bU=getRelativePitch(velocity)cR=getRelativeYaw(velocity)else bU=0;cR=0 end;d0="YAW"end;bO[#bO+1]=a5;bO[#bO+1]=ao;bO[#bO+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bO,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bO,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bO,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bO,bC)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d1 then DrawRollLines(bO,centerX,centerY,cV,d0,d1)DrawArtificialHorizon(bO,cW,cV,centerX,centerY,d1,d(getRelativeYaw(velocity)),bh)else DrawRollLines(bO,centerX,centerY,cR,d0,d1)DrawArtificialHorizon(bO,bU,cR,centerX,centerY,d1,d(cR),bh)end;DrawAltitudeDisplay(bO,bC,d1)DrawPrograde(bO,velocity,bh,centerX,centerY)end end;DrawThrottle(bO,cP,cY,c_)DrawSpeed(bO,cZ)DrawWarnings(bO)DisplayOrbitScreen(bO)if screen_2 then local bw=vec3(core.getConstructWorldPos())local bn=960+bw.x/aU;local bo=450+bw.y/aV;screen_2.moveContent(aW,(bn-80)/19.2,(bo-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bO)local d2=aj;local d3=ak;local d4=aj;local d5=ak;if IsInFreeLook()and not brightHud then d2=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]d3=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bO[#bO+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],d2,d2,d4,d4,d3,d3,d5,d5,ResolutionX,ResolutionY)end;function HUDEpilogue(bO)bO[#bO+1]="</svg>"end;function DrawSpeed(bO,cZ)local d6=throtPosY-10;local d7=throtPosX+10;bO[#bO+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d6=75 end;bO[#bO+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],d7,d6,d(cZ))end;function DrawOdometer(bO,W,TotalDistanceTravelled,cP,X,cX)local d8=ConvertResolutionX(1240)local d9=ConvertResolutionY(55)local da=d9+10;local cX=j()local be=core.g()local db=0;local dc=0;local dd=0;RefreshLastMaxBrake(be)if ad then dd=LastMaxBrakeInAtmo else dd=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local de=vec3(core.getWorldAcceleration()):len()/9.80665;if be>0.1 then dc=aB*be;db=maxThrust/be end;bO[#bO+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d8=ConvertResolutionX(1120)d9=ConvertResolutionY(55)da=d9+10 elseif ad then local df=ConvertResolutionX(770)bO[#bO+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],df,d9,df,da,cX)end;bO[#bO+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],d8,d9,d8,da,be/9.80665,d8,d9+20,d8,da+20,de)bO[#bO+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bO[#bO+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dd/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cP)if be>0.1 then bO[#bO+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),db/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dc/1000)else bO[#bO+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bO[#bO+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cP)end;bO[#bO+1]="</g>"end;function DrawThrottle(bO,cP,cY,c_)local cv=throtPosY+10;local cw=throtPosY+20;if o()==1 and not RemoteHud then cv=55;cw=65 end;local dg="CRUISE"local unit="km/h"local dh=c_;if cP=="TRAVEL"or cP=="AUTOPILOT"then dg="THROT"unit="%"dh=cY;local di="dim"if cY<0 then di="red"end;bO[#bO+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],di,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(cY),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bO[#bO+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cv,dg,throtPosX+10,cw,dh,unit)end;function DrawVerticalSpeed(bO,bC)if bC<200000 and not ad or bC and ad then local dj=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dk=0;if math.abs(dj)>1 then dk=45*math.log(math.abs(dj),10)if dj<0 then dk=-dk end end;bO[#bO+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dj),d(dk))end end;function getHeading(c6)local dl=-vec3(core.getWorldVertical())c6=c6-c6:project_on(dl)local dm=vec3(0,0,1)dm=dm-dm:project_on(dl)local dn=dm:cross(dl)local dk=dm:angle_between(c6)*constants.rad2deg;if c6:dot(dn)<0 then dk=360-dk end;return dk end;function DrawRollLines(bO,centerX,centerY,cV,d0,d1)local dp=circleRad;local dq=20;dq=d(dq)local dr=d(cV)if d1 then for i=-45,45,5 do local ds=i;bO[#bO+1]=e([[<g transform="rotate(%f,%d,%d)">]],ds,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bO[#bO+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dp+dq-len,centerX,centerY+dp+dq)end;bO[#bO+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dp+dq-35,d0,centerX,centerY+dp+dq-25,dr)bO[#bO+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cV,centerX,centerY)bO[#bO+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dp+dq-20,centerX+5,centerY+dp+dq-20,centerX,centerY+dp+dq-15)bO[#bO+1]="</g>"end;local cE=dr;if d1 then cE=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dt=20;local du=d(cE)local dv=0;local dw=centerY+dp+dq+20;local dx=centerX;if d0~="YAW"then dw=ConvertResolutionY(130)dx=ConvertResolutionX(960)end;local dy=[[<path class="txttick line" d="]]for i=d(du-(dt+10)-du%5+0.5),d(du+dt+10+du%5+0.5),5 do local bn=dx+-i*5+cE*5;if i%10==0 then dv=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bO[#bO+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bn+5,dw-12,p)elseif i%5==0 then dv=5 end;if dv==10 then dy=e([[%s M %f %f v %d]],dy,bn,dw-5,dv)else dy=e([[%s M %f %f v %d]],dy,bn,dw-2.5,dv)end end;bO[#bO+1]=dy..[["/>]]bO[#bO+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dx-5,dw+10,dx+5,dw+10,dx,dw+5)if d1 then d0="HDG"end;bO[#bO+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dx,dw+25,du,dx,dw+35,d0)end;function DrawArtificialHorizon(bO,cW,cV,centerX,centerY,d1,dz,bh)local dp=circleRad;local dA=d(dp*3/5)if dp>0 then local dB=d(cW)local len=0;local dy=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cV,centerX,centerY)if not ad then dy=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bO[#bO+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dp-1,centerX,centerY)bO[#bO+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dB-30-dB%5+0.5),d(dB+30+dB%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bo=centerY+-i*5+cW*5;if len==30 then dy=e([[%s M %d %f h %d]],dy,centerX-dA-len,bo,len)if ad then bO[#bO+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cV,centerX,centerY,centerX-dA+10,bo,i)bO[#bO+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cV,centerX,centerY,centerX+dA-10,bo,i)if i==0 or i==180 or i==-180 then bO[#bO+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cV,centerX,centerY,centerX-dA+20,bo,dA*2-40)end else bO[#bO+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dA+10,bo,i)bO[#bO+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dA-10,bo,i)end;dy=e([[%s M %d %f h %d]],dy,centerX+dA,bo,len)else dy=e([[%s M %d %f h %d]],dy,centerX-dA-len,bo,len)dy=e([[%s M %d %f h %d]],dy,centerX+dA,bo,len)end end;bO[#bO+1]=dy..[["/>]]local dC="PITCH"if not d1 then dC="REL PITCH"end;if cW>90 and not ad then cW=90-(cW-90)elseif cW<-90 and not ad then cW=-90-(cW+90)end;if dp>200 then if ad then if bh>w then bO[#bO+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dz)end;bO[#bO+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cV,centerX,centerY)else bO[#bO+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bO[#bO+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dA+25,centerY-5,centerX-dA+20,centerY,centerX-dA+25,centerY+5,centerX-dA+50,centerY+4,dB)bO[#bO+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dA-25,centerY-5,centerX+dA-20,centerY,centerX+dA-25,centerY+5,centerX+dA-30,centerY+4,dB)bO[#bO+1]="</g>"end;local dD=d(dp/3)bO[#bO+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dD,centerY,dp-dD)if not ad and d1 then bO[#bO+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cV,centerX,centerY,centerX-dA+10,centerY,dA*2-20)end;bO[#bO+1]="</g>"if dp<200 then if ad and bh>w then bO[#bO+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dp,dC,centerX,centerY-dp+10,dB,centerX,centerY-15,"Yaw",centerX,centerY+20,dz)else bO[#bO+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dp,dC,centerX,centerY-dp+15,dB)end end end end;function DrawAltitudeDisplay(bO,bC,d1)local dE=altMeterX;local dF=altMeterY;local dG=78;local dH=19;local dI=AboveGroundLevel()if dI~=-1 then table.insert(bO,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dE+dG,dF+dH+20,dI))end;if d1 and(bC<200000 and not ad or bC and ad)then table.insert(bO,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dE-1,dF-4,dG+2,dH+6,dE+1,dF-1,dG-4,dH))local bM=0;local dJ=1;local dK=0;local dL=bC<0;local dM=9;if dL then dM=0 end;local bC=math.abs(bC)while bM<6 do local dN=11;local dO=16;local dP=9;local dQ=14;local cD="altsm"if bM>2 then dO=dO+3;dN=dN+2;dQ=dQ+2;dP=dP-6;cD="altbig"end;if dL then cD=cD.." red"end;local dR=bC/dJ%10;local dS=d(dR)local dT=d((dS+1)%10)local dU=dK;if bM==0 then dU=dR-dS;if dL then dU=1-dU end end;if dL and(bM==0 or dK~=0)then local dV=dT;dT=dS;dS=dV end;local dW=dO*(dU-1)local dX=dW+dO;local bn=dE+dP+(6-bM)*dN;local bo=dF+dQ;table.insert(bO,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cD,bn,bo+dW,dT,bn,bo+dX,dS))bM=bM+1;dJ=dJ*10;if dS==dM then dK=dU else dK=0 end end;table.insert(bO,[[</g></g>]])end end;function DrawPrograde(bO,velocity,bh,centerX,centerY)if bh>5 and not ad or bh>w then local dp=circleRad;local dY=20;local dZ=20;local d_=vec3(velocity)local e0=getRelativePitch(d_)local e1=getRelativeYaw(d_)local e2=-e1/dZ*dp;local e3=e0/dY*dp;local bn=centerX+e2;local bo=centerY+e3;local a3=math.sqrt(e2^2+e3^2)if a3<dp then bO[#bO+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bn,bo)else local dk=math.atan(e3,e2)local e4=centerX+dp*math.cos(dk)local e5=centerY+dp*math.sin(dk)bO[#bO+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',e4,e5)end;e0=getRelativePitch(-d_)e1=getRelativeYaw(-d_)e2=-e1/dZ*dp;e3=e0/dY*dp;bn=centerX+e2;bo=centerY+e3;a3=math.sqrt(e2^2+e3^2)if not ad then if a3<dp then bO[#bO+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bn,bo)else local dk=math.atan(e3,e2)local e4=centerX+dp*math.cos(dk)local e5=centerY+dp*math.sin(dk)bO[#bO+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',e4,e5)end end end end;function DrawWarnings(bO)bO[#bO+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bO[#bO+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bO[#bO+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bO[#bO+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bO[#bO+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local e6=ConvertResolutionX(960)local e7=ConvertResolutionY(860)local e8=ConvertResolutionY(880)local e9=ConvertResolutionY(900)local ea=ConvertResolutionY(960)local eb=ConvertResolutionY(200)local ec=ConvertResolutionY(150)local ed=ConvertResolutionY(960)if o()==1 and not RemoteHud then e7=ConvertResolutionY(135)e8=ConvertResolutionY(155)e9=ConvertResolutionY(175)eb=ConvertResolutionY(115)ec=ConvertResolutionY(95)end;if BrakeIsOn then bO[#bO+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],e6,e7)end;if ad and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bO[#bO+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],e6,eb+50)end;if ah then bO[#bO+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],e6,ed)end;if GearExtended then if A then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],e6,e8)else bO[#bO+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],e6,e8)end;bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],e6,e9,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],e6,ea+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],e6,eb+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bO[#bO+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],e6,eb+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],e6,eb+20,AutopilotStatus)elseif LockPitch~=nil then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],e6,eb+20,d(LockPitch))elseif I then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],e6,eb+20)elseif Reentry then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],e6,eb+20)end;if AltitudeHold then if AutoTakeoff then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],e6,eb,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bO[#bO+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],e6,eb+50)end else bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],e6,eb,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bO[#bO+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],e6,eb)else bO[#bO+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],e6,eb)end end;if ProgradeIsOn then bO[#bO+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],e6,eb)end;if RetrogradeIsOn then bO[#bO+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],e6,eb)end;if TurnBurn then bO[#bO+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],e6,ec)end;if VectorToTarget then bO[#bO+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],e6,eb+30,VectorStatus)end;bO[#bO+1]="</g>"end;function DisplayOrbitScreen(bO)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ee=75;local ef=0;local eg=250;local eh=4;ef=ef+eh;local ei=15;local bn=ee+eg+ee/2+eh;local bo=ef+eg/2+5+eh;local ej,ek,el,em;ej=eg/4;em=0;bO[#bO+1]=[[<g class="pbright txtorb txtmid">]]bO[#bO+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eg+ee*2,eg+ef,eh,eh)if orbit.periapsis~=nil and orbit.apoapsis~=nil then el=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ej*2)ek=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/el*(1-orbit.eccentricity)em=ej-orbit.periapsis.altitude/el-planet.radius/el;local en=""if orbit.periapsis.altitude<=0 then en='redout'end;bO[#bO+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],en,ee+eg/2+em+eh,ef+eg/2+eh,ej,ek)bO[#bO+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ee+eg/2+eh,ef+eg/2+eh,planet.radius/el)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bO[#bO+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bn-35,bo-5,ee+eg/2+ej+em,bo-5)bO[#bO+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bn,bo)bo=bo+ei;bO[#bO+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getDistanceDisplayString(orbit.apoapsis.altitude))bo=bo+ei;bO[#bO+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,FormatTimeString(orbit.timeToApoapsis))bo=bo+ei;bO[#bO+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getSpeedDisplayString(orbit.apoapsis.speed))end;bo=ef+eg/2+5+eh;bn=ee-ee/2+10+eh;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bO[#bO+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bn+35,bo-5,ee+eg/2-ej+em,bo-5)bO[#bO+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bn,bo)bo=bo+ei;bO[#bO+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getDistanceDisplayString(orbit.periapsis.altitude))bo=bo+ei;bO[#bO+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,FormatTimeString(orbit.timeToPeriapsis))bo=bo+ei;bO[#bO+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getSpeedDisplayString(orbit.periapsis.speed))end;bO[#bO+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ee+eg/2+eh,20+eh,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eo=orbit.timeToApoapsis/orbit.period*2*math.pi;local ep=ej*math.cos(eo)local eq=ek*math.sin(eo)bO[#bO+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ee+eg/2+ep+em+eh,ef+eg/2+eq+eh)end;bO[#bO+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local er=a3>100000;local b6=""if er then b6=round(a3/1000/200,1).." SU"elseif a3<1000 then b6=round(a3,1).." M"else b6=round(a3/1000,1).." KM"end;return b6 end;function getDistanceDisplayString2(a3)local er=a3>100000;local b6=""if er then b6=round(a3/1000/200,2).." SU"elseif a3<1000 then b6=round(a3,2).." M"else b6=round(a3/1000,2).." KM"end;return b6 end;function getSpeedDisplayString(bh)return d(round(bh*3.6,0)+0.5).." km/h"end;function FormatTimeString(es)local et=0;local eu=0;local ev=0;if es<60 then es=d(es)elseif es<3600 then et=d(es/60)es=d(es%60)elseif es<86400 then eu=d(es/3600)et=d(es%3600/60)else ev=d(es/86400)eu=d(es%86400/60)end;if ev>0 then return ev.."d "..eu.."h "elseif eu>0 then return eu.."h "..et.."m "elseif et>0 then return et.."m "..es.."s"elseif es>0 then return es.."s"else return"0s"end end;function getMagnitudeInDirection(cF,ew)cF=vec3(cF)ew=vec3(ew):normalize()local b6=cF*ew;return b6.x+b6.y+b6.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local ex=AtlasOrdered[AutopilotTargetIndex].index;local ey=aS[0][ex]if ey.center then AutopilotTargetName=ey.name;V=aY[0][ex]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=ey;for _,b5 in pairs(aY[0])do if b5.name==CustomTarget.planetname then V=b5;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(V.center)_,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local ez=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return ez end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local bh=vec3(velocity):len()local eA,eB=aZ.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eC;if not TurnBurn then _,eC=GetAutopilotBrakeDistanceAndTime(bh)else _,eC=GetAutopilotTBBrakeDistanceAndTime(bh)end;local eD=0;local eE=0;if AutopilotCruising or not Autopilot and bh>5 then eE=aZ.computeTravelTime(bh,0,AutopilotDistance)elseif P+eA<AutopilotDistance then eD=AutopilotDistance-(P+eA)eE=aZ.computeTravelTime(8333.0556,0,eD)else local eF=(AutopilotDistance-P)/eA;eA=AutopilotDistance-P;eB=eB*eF end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eE elseif AutopilotBraking then return eC elseif AutopilotCruising then return eE+eC else return eB+Q+eE end end;function GetAutopilotBrakeDistanceAndTime(bh)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bh)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eG=-1;local eH=-1;if vBooster then eG=vBooster.distance()end;if hover then eH=hover.distance()end;if eG~=-1 and eH~=-1 then if eG<eH then return eG else return eH end elseif eG~=-1 then return eG elseif eH~=-1 then return eH else return-1 end end;function AboveGroundLevel()local eI=-1;local eJ=aa;if telemeter_1 then eI=telemeter_1.getDistance()end;if eJ~=-1 and eI~=-1 then if eJ<eI then return eJ else return eI end elseif eJ~=-1 then return eJ else return eI end end;function tablelength(eK)local eL=0;for _ in pairs(eK)do eL=eL+1 end;return eL end;function BeginProfile(eM)ProfileTimeStart=system.getTime()end;function EndProfile(eM)local eN=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eN;ProfileCount=ProfileCount+1;if eN>ProfileTimeMax then ProfileTimeMax=eN end;if eN<ProfileTimeMin then ProfileTimeMin=eN end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eO=ProfileTimeSum;local eP=ProfileTimeSum/ProfileCount;local eQ=ProfileTimeMin;local eR=ProfileTimeMax;local eS=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eO,eP,eQ,eR,eS))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eT=radar_1.getEntries()local eU=radar_1.getData()local eV=ConvertResolutionX(1770)local eW=ConvertResolutionY(330)if#eT>0 then local eX=eU:find('identifiedConstructs":%[%]')if eX==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if eX~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],eV,eW,#eT)local eY={}for b4,b5 in pairs(eT)do if radar_1.hasMatchingTransponder(b5)==1 then eY[#eY+1]=b5 end end;if#eY>0 then local bo=ConvertResolutionY(15)local bn=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bn,bo)for b4,b5 in pairs(eY)do bo=bo+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bn,bo,radar_1.getConstructName(b5))end end else local eZ;eZ=eU:find('worksInEnvironment":false')if eZ then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],eV,eW)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],eV,eW)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bO,e_)if e_~="empty"then bO[#bO+1]=[[<text class="msg" x="50%%" y="310" >]]for f0 in string.gmatch(e_,"([^\n]+)")do bO[#bO+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],f0)end;bO[#bO+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bc=system.getTime()local velocity=vec3(core.getWorldVelocity())local cZ=vec3(velocity):len()local f1=bc-ag;if cZ>1.38889 then cZ=cZ/1000;local f2=cZ*(bc-ag)TotalDistanceTravelled=TotalDistanceTravelled+f2;W=W+f2 end;X=X+f1;TotalFlightTime=TotalFlightTime+f1;ag=bc end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for b4,b5 in pairs(aS[0])do if av==nil or b5.center.x<av then av=b5.center.x end;if aw==nil or b5.center.x>aw then aw=b5.center.x end;if ax==nil or b5.center.y<ax then ax=b5.center.y end;if ay==nil or b5.center.y>ay then ay=b5.center.y end end;aT=""local f3=1.1*(aw-av)/1920;local f4=1.4*(ay-ax)/1080;for b4,b5 in pairs(aS[0])do local bn=960+b5.center.x/f3;local bo=540+b5.center.y/f4;aT=aT..'<circle cx="'..bn..'" cy="'..bo..'" r="'..b5.radius/f3*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(b5.name,"Moon")and not string.match(b5.name,"Sanctuary")then aT=aT.."<text x='"..bn.."' y='"..bo+b5.radius/f3*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..b5.name.."</text>"end end;local bw=vec3(core.getConstructWorldPos())local bn=960+bw.x/f3;local bo=540+bw.y/f4;aT=aT..'<circle cx="'..bn..'" cy="'..bo..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bn.."' y='"..bo-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=f3;aV=f4;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bw=vec3(core.getConstructWorldPos())local bn=960+bw.x/f3;local bo=540+bw.y/f4;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bn-80)/19.20,(bo-80)/10.80,aT)end end;function PlanetRef()local function f5(f6)return type(f6)=='number'end;local function f7(f6)return type(tonumber(f6))=='number'end;local function f8(f9)return type(f9)=='table'end;local function fa(fb)return type(fb)=='string'end;local function fc(b5)return f8(b5)and f5(b5.x and b5.y and b5.z)end;local function fd(fe)return f8(fe)and f5(fe.latitude and fe.longitude and fe.altitude and fe.bodyId and fe.systemId)end;local ff=math.pi/180;local fg=180/math.pi;local fh=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bx='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fi=utils.clamp;local function fj(fk,fl)if fk==0 then return math.abs(fl)<1e-09 end;if fl==0 then return math.abs(fk)<1e-09 end;return math.abs(fk-fl)<math.max(math.abs(fk),math.abs(fl))*fh end;local function fm(f6)local b6=string.gsub(string.reverse(e('%.4f',f6)),'^0*%.?','')return b6==''and'0'or string.reverse(b6)end;local function fn(fo)if fc(fo)then return e('{x=%.3f,y=%.3f,z=%.3f}',fo.x,fo.y,fo.z)end;if f8(fo)and not getmetatable(fo)then local fp={}local fq=next(fo)if type(fq)=='nil'or fq==1 then fp=fo else for b4,b5 in pairs(fo)do local dh=fn(b5)if type(b4)=='number'then table.insert(fp,e('[%s]=%s',b4,dh))else table.insert(fp,e('%s=%s',b4,dh))end end end;return e('{%s}',table.concat(fp,','))end;if fa(fo)then return e("'%s'",fo:gsub("'",[[\']]))end;return tostring(fo)end;local fr={}fr.__index=fr;fr.__tostring=function(fo,fs)local ft={}for b4 in pairs(fo)do table.insert(ft,b4)end;table.sort(ft)local fp={}for _,b4 in ipairs(ft)do local dh=fn(fo[b4])if type(b4)=='number'then table.insert(fp,e('[%s]=%s',b4,dh))else table.insert(fp,e('%s=%s',b4,dh))end end;if fs then return e('%s%s',fs,table.concat(fp,',\n'..fs))end;return e('{%s}',table.concat(fp,','))end;fr.__eq=function(fu,fv)return fu.planetarySystemId==fv.planetarySystemId and fu.bodyId==fv.bodyId and fj(fu.radius,fv.radius)and fj(fu.center.x,fv.center.x)and fj(fu.center.y,fv.center.y)and fj(fu.center.z,fv.center.z)and fj(fu.GM,fv.GM)end;local function fw(by,bz,fx,fy,fz)assert(f7(by),'Argument 1 (planetarySystemId) must be a number:'..type(by))assert(f7(bz),'Argument 2 (bodyId) must be a number:'..type(bz))assert(f7(fx),'Argument 3 (radius) must be a number:'..type(fx))assert(f8(fy),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fy))assert(f7(fz),'Argument 5 (GM) must be a number:'..type(fz))return setmetatable({planetarySystemId=tonumber(by),bodyId=tonumber(bz),radius=tonumber(fx),center=vec3(fy),GM=tonumber(fz)},fr)end;local fA={}fA.__index=fA;fA.__tostring=function(fB)return e('::pos{%d,%d,%s,%s,%s}',fB.systemId,fB.bodyId,fm(fB.latitude*fg),fm(fB.longitude*fg),fm(fB.altitude))end;fA.__eq=function(fu,fv)return fu.bodyId==fv.bodyId and fu.systemId==fv.systemId and fj(fu.latitude,fv.latitude)and fj(fu.altitude,fv.altitude)and(fj(fu.longitude,fv.longitude)or fj(fu.latitude,math.pi/2)or fj(fu.latitude,-math.pi/2))end;local function fC(fD,bz,bA,bB,bC)local by=fD;if fa(fD)and not bB and not bC and not bz and not bA then by,bz,bA,bB,bC=string.match(fD,bx)assert(by,'Argument 1 (position string) is malformed.')else assert(f7(by),'Argument 1 (systemId) must be a number:'..type(by))assert(f7(bz),'Argument 2 (bodyId) must be a number:'..type(bz))assert(f7(bA),'Argument 3 (latitude) must be in degrees:'..type(bA))assert(f7(bB),'Argument 4 (longitude) must be in degrees:'..type(bB))assert(f7(bC),'Argument 5 (altitude) must be in meters:'..type(bC))end;by=tonumber(by)bz=tonumber(bz)bA=tonumber(bA)bB=tonumber(bB)bC=tonumber(bC)if bz==0 then return setmetatable({latitude=bA,longitude=bB,altitude=bC,bodyId=bz,systemId=by},fA)end;return setmetatable({latitude=ff*fi(bA,-90,90),longitude=ff*(bB%360),altitude=bC,bodyId=bz,systemId=by},fA)end;local fE={}fE.__index=fE;fE.__tostring=function(fo,fs)local fF=fs and fs..'  'local fG={}local ft={}for b4 in pairs(fo)do table.insert(ft,b4)end;table.sort(ft)for _,fH in ipairs(ft)do bdy=fo[fH]local fI=fr.__tostring(bdy,fF)if fs then table.insert(fG,e('[%s]={\n%s\n%s}',fH,fI,fs))else table.insert(fG,e('  [%s]=%s',fH,fI))end end;if fs then return e('\n%s%s%s',fs,table.concat(fG,',\n'..fs),fs)end;return e('{\n%s\n}',table.concat(fG,',\n'))end;local function fJ(fK)local aS={}local pid;for _,b5 in pairs(fK)do local bK=b5.planetarySystemId;if type(bK)~='number'then error('Invalid planetary system ID: '..tostring(bK))elseif pid and bK~=pid then error('Mismatch planetary system IDs: '..bK..' and '..pid)end;local fL=b5.bodyId;if type(fL)~='number'then error('Invalid body ID: '..tostring(fL))elseif aS[fL]then error('Duplicate body ID: '..tostring(fL))end;setmetatable(b5.center,getmetatable(vec3.unit_x))aS[fL]=setmetatable(b5,fr)pid=bK end;return setmetatable(aS,fE)end;aX={}local function fM(fK)return setmetatable({galaxyAtlas=fK or{}},aX)end;aX.__index=function(f9,i)if type(i)=='number'then local system=f9.galaxyAtlas[i]return fJ(system)end;return rawget(aX,i)end;aX.__pairs=function(fo)return function(f9,b4)local fN,nv=next(f9,b4)return fN,nv and fJ(nv)end,fo.galaxyAtlas,nil end;aX.__tostring=function(fo)local fO={}for _,fP in pairs(fo or{})do local fQ=fP:getPlanetarySystemId()local fR=fE.__tostring(fP,'    ')table.insert(fO,e('  [%s]={%s\n  }',fQ,fR))end;return e('{\n%s\n}\n',table.concat(fO,',\n'))end;aX.BodyParameters=fw;aX.MapPosition=fC;aX.PlanetarySystem=fJ;function aX.createBodyParameters(fS,bz,fT,fU,fV,fW,fX)assert(f7(fS),'Argument 1 (planetarySystemId) must be a number:'..type(fS))assert(f7(bz),'Argument 2 (bodyId) must be a number:'..type(bz))assert(f7(fT),'Argument 3 (surfaceArea) must be a number:'..type(fT))assert(f8(fU),'Argument 4 (aPosition) must be an array or vec3:'..type(fU))assert(f8(fV),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(fV))assert(f7(fW),'Argument 6 (altitude) must be in meters:'..type(fW))assert(f7(fX),'Argument 7 (gravityAtPosition) must be number:'..type(fX))local fx=math.sqrt(fT/4/math.pi)local a3=fx+fW;local fY=vec3(fU)+a3*vec3(fV)local fz=fX*a3*a3;return fw(fS,bz,fx,fY,fz)end;aX.isMapPosition=fd;function aX:getPlanetarySystem(fD)if i==nil then i=0 end;if nv==nil then nv=0 end;local fS=fD;if fd(fD)then fS=fD.systemId end;if type(fS)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fE then system=fJ(system)end;return system end end end;function fE:castIntersections(fZ,ew,f_,g0)local f_=f_ or function(g1)return 1.05*g1.radius end;local g2={}if g0 then for _,i in ipairs(g0)do g2[i]=self[i]end else g0={}for b4,g1 in pairs(self)do table.insert(g0,b4)g2[b4]=g1 end end;local function g3(g4,g5)local g6=g2[g4].center-fZ;local g7=g2[g5].center-fZ;return g6:len()<g7:len()end;table.sort(g0,g3)local g8=ew:normalize()for i,bK in ipairs(g0)do local g1=g2[bK]local g9=g1.center-fZ;local fx=f_(g1)local ga=g9:dot(g8)local gb=ga^2-(g9:len2()-fx^2)if gb>=0 then local gc=math.sqrt(gb)local gd=ga+gc;local ge=ga-gc;if ge>0 then return g1,gd,ge elseif gd>0 then return g1,gd,nil end end end;return nil,nil,nil end;function fE:closestBody(gf)assert(type(gf)=='table','Invalid coordinates.')local gg,g1;local gh=vec3(gf)for _,gi in pairs(self)do local gj=(gi.center-gh):len2()if not g1 or gj<gg then g1=gi;gg=gj end end;return g1 end;function fE:convertToBodyIdAndWorldCoordinates(fD)local gk=fD;if fa(fD)then gk=fC(fD)end;if gk.bodyId==0 then return 0,vec3(gk.latitude,gk.longitude,gk.altitude)end;local gi=self:getBodyParameters(gk)if gi then return gk.bodyId,gi:convertToWorldCoordinates(gk)end end;function fE:getBodyParameters(fD)local bz=fD;if fd(fD)then bz=fD.bodyId end;assert(f7(bz),'Argument 1 (bodyId) must be a number:'..type(bz))return self[bz]end;function fE:getPlanetarySystemId()local _,b5=next(self)return b5 and b5.planetarySystemId end;function fr:convertToMapPosition(fy)assert(f8(fy),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fy))local gl=vec3(fy)if self.bodyId==0 then return setmetatable({latitude=gl.x,longitude=gl.y,altitude=gl.z,bodyId=0,systemId=self.planetarySystemId},fA)end;local gm=gl-self.center;local a3=gm:len()local bC=a3-self.radius;local bA=0;local bB=0;if not fj(a3,0)then local gn=math.atan(gm.y,gm.x)bB=gn>=0 and gn or 2*math.pi+gn;bA=math.pi/2-math.acos(gm.z/a3)end;return setmetatable({latitude=bA,longitude=bB,altitude=bC,bodyId=self.bodyId,systemId=self.planetarySystemId},fA)end;function fr:convertToWorldCoordinates(fD)local gk=fa(fD)and fC(fD)or fD;if gk.bodyId==0 then return vec3(gk.latitude,gk.longitude,gk.altitude)end;assert(fd(gk),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gk.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gk.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bD=math.cos(gk.latitude)return self.center+(self.radius+gk.altitude)*vec3(bD*math.cos(gk.longitude),bD*math.sin(gk.longitude),math.sin(gk.latitude))end;function fr:getAltitude(fy)return(vec3(fy)-self.center):len()-self.radius end;function fr:getDistance(fy)return(vec3(fy)-self.center):len()end;function fr:getGravity(fy)local go=self.center-vec3(fy)local gp=go:len2()return self.GM/gp*go/math.sqrt(gp)end;return setmetatable(aX,{__call=function(_,...)return fM(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fa(fb)return type(fb)=='string'end;local function f8(f9)return type(f9)=='table'end;local function fj(fk,fl)if fk==0 then return math.abs(fl)<1e-09 end;if fl==0 then return math.abs(fk)<1e-09 end;return math.abs(fk-fl)<math.max(math.abs(fk),math.abs(fl))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bC)assert(self.body)local a3=bC+self.body.radius;if not fj(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fD,velocity)assert(self.body)assert(f8(fD)or fa(fD))assert(f8(velocity))local bw=(fa(fD)or PlanetRef.isMapPosition(fD))and self.body:convertToWorldCoordinates(fD)or vec3(fD)local b5=vec3(velocity)local gq=bw-self.body.center;local g7=b5:len2()local gr=gq:len()local gs=self.body.GM;local gt=((g7-gs/gr)*gq-gq:dot(b5)*b5)/gs;local fk=gs/(2*gs/gr-g7)local gu=gt:len()local g8=gt:normalize()local gv=fk*(1-gu)local gw=fk*(1+gu)local gx=gv*g8+self.body.center;local gy=gu<=1 and-gw*g8+self.body.center or nil;local gz=math.sqrt(fk*gs*(1-gu*gu))local gA=gy and 2*math.pi*math.sqrt(fk^3/gs)local gB=math.acos(gt:dot(gq)/(gu*gr))if gq:dot(b5)<0 then gB=-(gB-2*math.pi)end;local gC=math.acos((math.cos(gB)+gu)/(1+gu*math.cos(gB)))local gD=gC;if gD<0 then gD=gD+2*math.pi end;local gE=gD-gu*math.sin(gD)local gF=0;local gG=0;local gH=0;if gA~=nil then gF=gE/(2*math.pi/gA)gG=gA-gF;gH=gG+gA/2;if gB-math.pi>0 then gG=gF;gH=gG+gA/2 end;if gH>gA then gH=gH-gA end end;return{periapsis={position=gx,speed=gz/gv,circularOrbitSpeed=math.sqrt(gs/gv),altitude=gv-self.body.radius},apoapsis=gy and{position=gy,speed=gz/gw,circularOrbitSpeed=math.sqrt(gs/gw),altitude=gw-self.body.radius},currentVelocity=b5,currentPosition=bw,eccentricity=gu,period=gA,eccentricAnomaly=gC,meanAnomaly=gE,timeToPeriapsis=gG,timeToApoapsis=gH}end;local function gI(gJ)local gi=PlanetRef.BodyParameters(gJ.planetarySystemId,gJ.bodyId,gJ.radius,gJ.center,gJ.GM)return setmetatable({body=gi},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gI(...)end})end;function Kinematics()local aZ={}local gK=30000000/3600;local gL=gK*gK;local gM=100;local function gN(b5)return 1/math.sqrt(1-b5*b5/gL)end;function aZ.computeAccelerationTime(gO,gP,gQ)local gR=gK*math.asin(gO/gK)return(gK*math.asin(gQ/gK)-gR)/gP end;function aZ.computeDistanceAndTime(gO,gQ,gS,gT,gU,gV)gU=gU or 0;gV=gV or 0;local gW=gO<=gQ;local gX=gT*(gW and 1 or-1)/gS;local gY=-gV/gS;local gZ=gX+gY;if gW and gZ<=0 or not gW and gZ>=0 then return-1,-1 end;local g_,h0=0,0;if gX~=0 and gU>0 then local gR=math.asin(gO/gK)local h1=math.pi*(gX/2+gY)local h2=gX*gU;local h3=gK*math.pi;local b5=function(f9)local c9=(h1*f9-h2*math.sin(math.pi*f9/2/gU)+h3*gR)/h3;local h4=math.tan(c9)return gK*h4/math.sqrt(h4*h4+1)end;local h5=gW and function(fb)return fb>=gQ end or function(fb)return fb<=gQ end;h0=2*gU;if h5(b5(h0))then local h6=0;while math.abs(h0-h6)>0.5 do local f9=(h0+h6)/2;if h5(b5(f9))then h0=f9 else h6=f9 end end end;local h7=gO;local h8=h0/gM;for h9=1,gM do local bh=b5(h9*h8)g_=g_+(bh+h7)*h8/2;h7=bh end;if h0<2*gU then return g_,h0 end;gO=h7 end;local gR=gK*math.asin(gO/gK)local b7=(gK*math.asin(gQ/gK)-gR)/gZ;local ha=gL*math.cos(gR/gK)/gZ;local a3=ha-gL*math.cos((gZ*b7+gR)/gK)/gZ;return a3+g_,b7+h0 end;function aZ.computeTravelTime(gO,gP,a3)if a3==0 then return 0 end;if gP>0 then local gR=gK*math.asin(gO/gK)local ha=gL*math.cos(gR/gK)/gP;return(gK*math.acos(gP*(ha-a3)/gL)-gR)/gP end;assert(gO>0,'Acceleration and initial speed are both zero.')return a3/gO end;function aZ.lorentz(b5)return gN(b5)end;return aZ end;function script.onStart()VERSION_NUMBER=4.921;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bI=j()if door and(bI>0 or bI==0 and ae<10000)then for _,b5 in pairs(door)do b5.toggle()end end;if switch then for _,b5 in pairs(switch)do b5.toggle()end end;if forcefield and(bI>0 or bI==0 and ae<10000)then for _,b5 in pairs(forcefield)do b5.toggle()end end;if dbHud_1 then if not Y then for b4,b5 in pairs(b)do dbHud_1.setStringValue(b5,g(_G[b5]))end;for b4,b5 in pairs(a)do dbHud_1.setStringValue(b5,g(_G[b5]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(hb)if hb=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hc=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hc then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hb=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bO={}local cP=GetFlightStyle()DrawOdometer(bO,W,TotalDistanceTravelled,cP,X)CheckDamage(bO)a5=table.concat(bO,"")collectgarbage("collect")elseif hb=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local b6=json.decode(dbHud_1.getStringValue("SavedLocations"))if b6~=nil then _G["SavedLocations"]=b6;local bM=-1;local bH;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name=="SatNav Location"then bM=b4;break end end;if bM~=-1 then bH=SavedLocations[bM]bM=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name=="SatNav Location"then bM=b4;break end end;if bM>-1 then aS[0][bM]=bH end;UpdateAtlasLocationsList()K=bH.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hb=="msgTick"then local bO={}DisplayMessage(bO,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hb=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hb=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)aa=hoverDetectGround()local hd=system.getMouseDeltaX()local he=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local hf=velMag>8334;if not hf and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hf;if ad and j()>0.09 then if not ai then if velMag>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if velMag<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bO={}HUDPrologue(bO)if showHud then updateHud(bO)else DisplayOrbitScreen(bO)DrawWarnings(bO)end;HUDEpilogue(bO)bO[#bO+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bO,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bO)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bO)if screen_1.getMouseState()==1 then CheckButtons()end;bO[#bO+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+hd;a1=a1+he end;SetButtonContains()DrawButtons(bO)if not b0 and not b1 then local hg=table.concat(bO,"")bO={}bO[#bO+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bO[#bO+1]=aT;bO[#bO+1]=hg;bO[#bO+1]="</body>"b0=true;bO[#bO+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bO,"")system.setScreen(content)elseif b1 then local hg=table.concat(bO,"")bO={}bO[#bO+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bO[#bO+1]=aT;bO[#bO+1]=hg;bO[#bO+1]="</body>"end;if not b0 then bO[#bO+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+hd;a1=a1+he;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(he,-100,100)+0.5)*2*y;D=(-utils.smoothstep(hd,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bO)end else SetButtonContains()DrawButtons(bO)end;bO[#bO+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bO[#bO+1]=[[</svg></body>]]content=table.concat(bO,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>w then local hh=AlignToWorldVector(vec3(velocity),0.01)if a7 then b2=true;if hh then ProgradeIsOn=false;x=true;BeginReentry()a7=false;a9=true;b2=autoRollPreference end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif velMag>w then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)end;P=P;Q=Q;local hi=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local hj=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local hk=getMagnitudeInDirection(hj,AutopilotShipUp)local hl=getMagnitudeInDirection(hj,AutopilotShipRight)local hm=-hl*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local hn=-hk*AutopilotDistance*velMag*TrajectoryAlignmentStrength;hi=AutopilotTargetCoords+-hm*vec3(AutopilotShipRight)+-hn*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hi)-vec3(core.getConstructWorldPos())):len()local ho=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(ho)..'", "unit":""}')local hp=true;local hq=(V.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hq)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hp=AlignToWorldVector((hi-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hp=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not hp or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hq-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hp then if not AutopilotRealigned then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif hp then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hr=0;local bw=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hs=bw-vec3(core.getConstructWorldPos())local ht=vec3(hs):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hu=vec3(hs):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(ht*ht+hu*hu)AlignToWorldVector(hs:normalize())local hv=40;local hw=a3<hv;local hx=100;local hy=utils.clamp((a3-hv)/2,10,hx)C=0;local hp=math.abs(D)<0.1;if hp and velMag<hy and not hw then BrakeIsOn=false;hr=-20 else BrakeIsOn=true;hr=0 end;local bR=vec3(core.getConstructWorldOrientationForward())local bS=vec3(core.getConstructWorldOrientationRight())local bT=vec3(core.getWorldVertical())local bU=getPitch(bT,bR,bS)local hz=1.0;if math.abs(hr-bU)>hz then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hr-bU)local hA=pitchPID:get()C=hA end end;local dl=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d1=unit.getClosestPlanetInfluence()>0;local bC=ae;local hB=HoldAltitude-bC;local hC=500+velMag;local hr=(utils.smoothstep(hB,-hC,hC)-0.5)*2*MaxPitch;if not AltitudeHold then hr=0 end;if LockPitch~=nil then if d1 then hr=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hD=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hD then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hD)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hr=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hr=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hE=C;if velMag>w then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cH=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cH)local hF=cH:len()-cH:project_on(dl):len()local bi=LastMaxBrakeInAtmo;local dj=velocity.x*dl.x+velocity.y*dl.y+velocity.z*dl.z;local hG=velocity:len()-math.abs(dj)local hH=vec3(core.getWorldAirFrictionAcceleration())if bi~=nil then P,Q=aZ.computeDistanceAndTime(hG,0,n(),0,0,bi+(hH:len()-hH:project_on(dl):len())*n())else P,Q=aZ.computeDistanceAndTime(hG,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hF<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hF>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hF end;C=hE;local bR=vec3(core.getConstructWorldOrientationForward())local bS=vec3(core.getConstructWorldOrientationRight())local bT=vec3(core.getWorldVertical())local eI=-1;local bU=getPitch(bT,bR,bS)local hz=0.1;if BrakeLanding then hr=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local dj=velocity.x*dl.x+velocity.y*dl.y+velocity.z*dl.z;eI=aa;if eI>-1 then if math.abs(hr-bU)<hz then b2=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-dl)<0.99 then BrakeIsOn=true elseif dj<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hr<20 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif a8 and j()==0 and ae>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hr-bU)>hz then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hr-bU)local hA=pitchPID:get()C=C+hA end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local hI=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)hI=math.max(hI,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hJ=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hK=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hL=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hM=G;local hN=vec3(core.getWorldVertical())local hO=vec3(core.getConstructWorldOrientationUp())local hP=vec3(core.getConstructWorldOrientationForward())local hQ=vec3(core.getConstructWorldOrientationRight())local hR=vec3(core.getWorldVelocity())local hS=vec3(core.getWorldVelocity()):normalize()local hT=getRoll(hN,hP,hQ)local hU=math.abs(hT)local hV=utils.sign(hT)local j=j()local hW=vec3(core.getWorldAngularVelocity())local hX=hJ*pitchSpeedFactor*hQ+hK*rollSpeedFactor*hP+hL*yawSpeedFactor*hO;if hN:len()>0.01 and j>0.0 or ProgradeIsOn then local hY=1.0;if b2==true and hU>hY and hK==0 then local hZ=utils.clamp(0,hU-30,hU+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hZ-hT)local h_=rollPID:get()hX=hX+h_*hP end end;if hN:len()>0.01 and j>0.0 then local i0=20.0;if turnAssist==true and hU>i0 and hJ==0 and hL==0 then local i1=turnAssistFactor*0.1;local i2=turnAssistFactor*0.025;local i3=(hU-i0)/(180-i0)*180;local i4=0;if i3<90 then i4=i3/90 elseif i3<180 then i4=(180-i3)/90 end;i4=i4*i4;local i5=-hV*i2*(1.0-i4)local i6=i1*i4;hX=hX+i6*hQ+i5*hO end end;local i7=1;local i8=0;local i9=1;local ia=hI*(hX-hW)local ib=vec3(core.getWorldAirFrictionAngularAcceleration())ia=ia-ib;Nav:setEngineTorqueCommand('torque',ia,i7,'airfoil','','',i9)local ic=-hM*(brakeSpeedFactor*hR+brakeFlatFactor*hS)Nav:setEngineForceCommand('brake',ic)local id=''local ie=vec3()local ig=false;local ih='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then ih=ih..ExtraLongitudeTags end;local ii=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ii==axisCommandType.byThrottle then local ij=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ih,axisCommandId.longitudinal)Nav:setEngineForceCommand(ih,ij,i7)elseif ii==axisCommandType.byTargetSpeed then local ij=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)id=id..' , '..ih;ie=ie+ij;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then ig=true end end;local ik='thrust analog lateral 'if ExtraLateralTags~="none"then ik=ik..ExtraLateralTags end;local il=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if il==axisCommandType.byThrottle then local im=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ik,axisCommandId.lateral)Nav:setEngineForceCommand(ik,im,i7)elseif il==axisCommandType.byTargetSpeed then local io=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)id=id..' , '..ik;ie=ie+io end;local ip='thrust analog vertical 'if ExtraVerticalTags~="none"then ip=ip..ExtraVerticalTags end;local iq=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if iq==axisCommandType.byThrottle then local ir=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ip,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(ip,ir,i7,'airfoil','ground','',i9)else Nav:setEngineForceCommand(ip,vec3(),i7)Nav:setEngineForceCommand('airfoil vertical',ir,i7,'airfoil','','',i9)Nav:setEngineForceCommand('ground vertical',ir,i7,'ground','','',i9)end elseif iq==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),i7)end;local is=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)id=id..' , '..ip;ie=ie+is end;if ie:len()>constants.epsilon then if G~=0 or ig or math.abs(hS:dot(hP))<0.95 then id=id..', brake'end;Nav:setEngineForceCommand(id,ie,i8,'','','',i9)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bh=vec3(core.getVelocity()):len()local it=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local iu=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bh*3.6>iu*(1-it)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh*3.6<iu*(1-it)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iv=unit.getThrottle()local hy=iv/100;if j==0 then hy=hy*MaxGameVelocity;if bh>=hy*(1-it)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh<hy*(1-it)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hy=hy*ReentrySpeed/3.6;if bh>=hy*(1-it)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh<hy*(1-it)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,b6=coroutine.resume(beginSetup)if b6 then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iw)if iw=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iw=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iw=="forward"then B=B-1 elseif iw=="backward"then B=B+1 elseif iw=="left"then E=E-1 elseif iw=="right"then E=E+1 elseif iw=="yawright"then F=F-1 elseif iw=="yawleft"then F=F+1 elseif iw=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iw=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iw=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iw=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iw=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iw=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iw=="option1"then IncrementAutopilotTargetIndex()v=false elseif iw=="option2"then DecrementAutopilotTargetIndex()v=false elseif iw=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iw=="option4"then ToggleAutopilot()v=false elseif iw=="option5"then ToggleLockPitch()v=false elseif iw=="option6"then ToggleAltitudeHold()v=false elseif iw=="option7"then wipeSaveVariables()v=false elseif iw=="option8"then ToggleFollowMode()v=false elseif iw=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iw=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iw=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iw=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iw=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iw=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iw=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iw=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iw=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iw)if iw=="forward"then B=0 elseif iw=="backward"then B=0 elseif iw=="left"then E=0 elseif iw=="right"then E=0 elseif iw=="yawright"then F=0 elseif iw=="yawleft"then F=0 elseif iw=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iw=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iw=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iw=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iw=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iw=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iw=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iw=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iw=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iw)if iw=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iw=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iw=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iw=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(ix)local i;local iy="/commands /setname /G /agg /addlocation"local iz,iA;local iB="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n"iB=iB.."/agg <targetheight> - Manually set agg target height\n/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(ix," ")if i~=nil then iz=string.sub(ix,0,i-1)iA=string.sub(ix,i+1)elseif i==nil or not string.find(iy,iz)then for f0 in string.gmatch(iB,"([^\n]+)")do c(f0)end;return end;if iz=="/setname"then if iA==nil or iA==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iA)else K="Select a saved target to rename first"end elseif iz=="/addlocation"then if iA==nil or iA==""or string.find(iA,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iA,"::")local bF=string.sub(iA,1,i-2)local bw=string.sub(iA,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bx='::pos{'..p..','..p..','..p..','..p..','..p..'}'local by,bz,bA,bB,bC=string.match(bw,bx)local planet=aS[tonumber(by)][tonumber(bz)]AddNewLocationByWaypoint(bF,tonumber(bz),bw)K="Added "..bF.." to saved locations,\nplanet "..planet.name.." at "..bw;a2=5 elseif iz=="/agg"then if iA==nil or iA==""then K="Usage: /agg targetheight"return end;iA=tonumber(iA)if iA<1000 then iA=1000 end;AntigravTargetAltitude=iA;K="AGG Target Height set to "..iA elseif iz=="/G"then if iA==nil or iA==""then K="Usage: /G VariableName variablevalue"return end;i=string.find(iA," ")local iC=string.sub(iA,0,i-1)local iD=string.sub(iA,i+1)for b4,b5 in pairs(a)do if b5==iC then K="Variable "..iC.." changed to "..iD;local iE=type(_G[b5])if iE=="number"then iD=tonumber(iD)elseif iE=="boolean"then if string.lower(iD)=="true"then iD=true else iD=false end end;_G[b5]=iD;return end end;K="No such global variable: "..iC end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
