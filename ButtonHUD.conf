name: ButtonsHud - Dimencia and Archaegeo v4.843 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        ResolutionX = 1920 --export: Default is 1920, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        ResolutionY = 1080 --export: Default is 1080, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        IgnoreEmergencyWarpDistance = 500 --export: Any targets within this distance are ignored for emergency warp.
        RequireLock = false --export: Set to true to require a target to lock onto you before starting an emergency warp.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.843;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;InAtmo=f()>0;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;SpaceLand=false;SpaceLaunch=false;FinalLand=false;HovGndDet=-1;clearAllCheck=false;LockPitch=nil;LastStartTime=0;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=16;local S=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","RequireLock","StallAngle","ResolutionX","ResolutionY"}AutoVariables={"EmergencyWarp","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}if dbHud then local T=dbHud.hasKey;if not useTheseSettings then for U,V in pairs(SaveableVariables)do if T(V)then local W=c(dbHud.getStringValue(V))if W~=nil then system.print(V.." "..dbHud.getStringValue(V))_G[V]=W;A=true end end end end;for U,V in pairs(AutoVariables)do if T(V)then local W=c(dbHud.getStringValue(V))if W~=nil then system.print(V.." "..dbHud.getStringValue(V))_G[V]=W;A=true end end end;if useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;coroutine.yield()local X=system.getTime()if LastStartTime+180<X then LastMaxBrakeInAtmo=0 end;LastStartTime=X;brakeToggle=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then MsgText="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Y=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]for U in pairs(ElementsID)do local type=h(ElementsID[U])if type=="landing gear"then HasGear=true end;if type=="dynamic core"then local Z=e(ElementsID[U])if Z>10000 then R=128 elseif Z>1000 then R=64 elseif Z>150 then R=32 end end;H=H+e(ElementsID[U])if fuelX~=0 and fuelY~=0 then if type=="atmospheric fuel-tank"or type=="space fuel-tank"or type=="rocket fuel-tank"then local Z=e(ElementsID[U])local a0=j(ElementsID[U])local a1=0;local a2=system.getTime()if type=="atmospheric fuel-tank"then local a3=400;local a4=35.03;if Z>10000 then a3=51200;a4=5480 elseif Z>1300 then a3=6400;a4=988.67 elseif Z>150 then a3=1600;a4=182.67 end;a1=a0-a4;if fuelTankHandlingAtmo>0 then a3=a3+a3*fuelTankHandlingAtmo*0.2 end;if a1>a3 then a3=a1 end;E[#E+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a3,a4,a1,a2}end;if type=="rocket fuel-tank"then local a3=320;local a4=173.42;if Z>65000 then a3=40000;a4=25740 elseif Z>6000 then a3=5120;a4=4720 elseif Z>700 then a3=640;a4=886.72 end;a1=a0-a4;if fuelTankHandlingRocket>0 then a3=a3+a3*fuelTankHandlingRocket*0.2 end;if a1>a3 then a3=a1 end;G[#G+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a3,a4,a1,a2}end;if type=="space fuel-tank"then local a3=2400;local a4=182.67;if Z>10000 then a3=76800;a4=5480 elseif Z>1300 then a3=9600;a4=988.67 end;a1=a0-a4;if fuelTankHandlingSpace>0 then a3=a3+a3*fuelTankHandlingSpace*0.2 end;if a1>a3 then a3=a1 end;F[#F+1]={ElementsID[U],core.getElementNameById(ElementsID[U]),a3,a4,a1,a2}end end end end;coroutine.yield()if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if InAtmo then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,V in pairs(door)do V.deactivate()end end;if forcefield then for _,V in pairs(forcefield)do V.deactivate()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if InAtmo and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=InAtmo;unit.hide()function refreshLastMaxBrake(a5,a6)if a5==nil then a5=core.g()end;a5=round(a5,5)local a7=f()if a6~=nil and a6 or(D==nil or D~=a5)then local velocity=core.getVelocity()local a8=vec3(velocity):len()local a9=c(unit.getData()).maxBrake;if a9~=nil and a9>0 and InAtmo then a9=a9*utils.clamp(a8/100,0.1,1)*a7;if a9>LastMaxBrakeInAtmo and a7>0.10 then LastMaxBrakeInAtmo=a9 end end;if a9~=nil and a9>0 then LastMaxBrake=a9 end;D=a5 end end;function MakeButton(aa,ab,ac,ad,ae,af,ag,ah,ai)local aj={enableName=aa,disableName=ab,width=ac,height=ad,x=ae,y=af,toggleVar=ag,toggleFunction=ah,drawCondition=ai,hovered=false}table.insert(r,aj)return aj end;function UpdateAtlasLocationsList()AtlasOrdered={}for U,V in pairs(atlas[0])do table.insert(AtlasOrdered,{name=V.name,index=U})end;local function ak(al,am)return al.name<am.name end;table.sort(AtlasOrdered,ak)end;function AddLocationsToAtlas()for U,V in pairs(SavedLocations)do table.insert(atlas[0],V)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local an=planet.name..". "..#SavedLocations;if radar_1 then local ao,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if ao~=nil and ao~=""then an=an.." "..radar_1.getConstructName(ao)end end;local ap={position=position,name=an,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=ap;table.insert(atlas[0],ap)UpdateAtlasLocationsList()MsgText="Location saved as "..an else MsgText="Databank must be installed to save locations"end end;function UpdatePosition()local aq=-1;local ap;for U,V in pairs(SavedLocations)do if V.name and V.name==CustomTarget.name then aq=U;break end end;if aq~=-1 then ap={position=vec3(core.getConstructWorldPos()),name=SavedLocations[aq].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[aq]=ap;aq=-1;for U,V in pairs(atlas[0])do if V.name and V.name==CustomTarget.name then aq=U end end;if aq>-1 then atlas[0][aq]=ap end;UpdateAtlasLocationsList()MsgText=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local aq=-1;for U,V in pairs(atlas[0])do if V.name and V.name==CustomTarget.name then aq=U end end;if aq>-1 then table.remove(atlas[0],aq)end;aq=-1;for U,V in pairs(SavedLocations)do if V.name and V.name==CustomTarget.name then MsgText=V.name.." saved location cleared"aq=U;break end end;if aq~=-1 then table.remove(SavedLocations,aq)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(ar)ar[#ar+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(as,at,ae,af,ac,ad)if as>ae and as<ae+ac and at>af and at<af+ad then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local au=vec3(core.getConstructWorldOrientationForward())local av=vec3(core.getConstructWorldOrientationRight())local aw=vec3(core.getWorldVertical())local ax=getPitch(aw,au,av)LockPitch=ax;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not InAtmo then AutoTakeoff=false;HoldAltitude=CoreAltitude;if not SpaceLaunch and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if SpaceLaunch then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else SpaceLand=true end else SpaceLaunch=true;RetrogradeIsOn=false;ProgradeIsOn=false;if unit.getAtmosphereDensity()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;APThrottleSet=false;LockPitch=nil else SpaceLaunch=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;APThrottleSet=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function checkDamage(ar)local ay=0;p=""local az=H;local aA=0;local aB=0;local aC=0;local aD=0;local aE=""for U in pairs(ElementsID)do local Z=0;local aF=0;aF=e(ElementsID[U])Z=g(ElementsID[U])aA=aA+Z;if Z<aF then if Z==0 then aC=aC+1 else aB=aB+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[U]))local ae=position.x-R;local af=position.y-R;local aG=position.z-R;table.insert(m,core.spawnArrowSticker(ae,af,aG+1,"down"))table.insert(m,core.spawnArrowSticker(ae,af,aG+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ae+1,af,aG,"north"))table.insert(m,core.spawnArrowSticker(ae+1,af,aG,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ae-1,af,aG,"south"))table.insert(m,core.spawnArrowSticker(ae-1,af,aG,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ae,af-1,aG,"east"))table.insert(m,core.spawnArrowSticker(ae,af-1,aG,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ae,af+1,aG,"west"))table.insert(m,core.spawnArrowSticker(ae,af+1,aG,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[U])end elseif I and#m>0 and m[11]==ElementsID[U]then for aH in pairs(m)do core.deleteSticker(m[aH])end;m={}end end;ay=a(aA/az*100)if ay<100 then ar[#ar+1]=[[<g class="pbright txt">]]aD=a(ay*2.55)aE=b("rgb(%d,%d,%d)",255-aD,aD,0)if ay<100 then ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aE,ay)if aC>0 then ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aE,aC,aB)elseif aB>0 then ar[#ar+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aE,aB)end end;ar[#ar+1]=[[<\g>]]end end;function DrawCursorLine(ar)local aI=a(utils.clamp(Distance/(u/4)*255,0,255))ar[#ar+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aI,a(PrimaryG+0.5)-aI,a(PrimaryB+0.5)-aI)end;function getPitch(aJ,aK,am)local aL=aJ:cross(am):normalize_inplace()local ax=math.acos(utils.clamp(aL:dot(-aK),-1,1))*constants.rad2deg;if aL:cross(-aK):dot(am)<0 then ax=-ax end;return ax end;function clearAll()if clearAllCheck then clearAllCheck=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;FollowMode=false;APThrottleSet=false;SpaceLand=false;SpaceLaunch=false;ReentryMode=false;autoRoll=autoRollPreference;EmergencyWarp=false;VectorToTarget=false;TurnBurn=false;GyroIsOn=false;LockPitch=nil else clearAllCheck=true end end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 else if B then for U,V in pairs(SaveableVariables)do dbHud.setStringValue(V,d(nil))end;for U,V in pairs(AutoVariables)do if V~="SavedLocations"then dbHud.setStringValue(V,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe of ALL data"B=true end end end;function CheckButtons()for _,V in pairs(r)do if V.hovered then if not V.drawCondition or V.drawCondition()then V.toggleFunction()end;V.hovered=false end end end;function SetButtonContains()local ae=SimulatedX+u/2;local af=SimulatedY+v/2;for _,V in pairs(r)do V.hovered=Contains(ae,af,V.x,V.y,V.width,V.height)end end;function DrawButton(ar,aM,hover,ae,af,aN,aO,aP,aQ,aR,aS)if type(aR)=="function"then aR=aR()end;if type(aS)=="function"then aS=aS()end;ar[#ar+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ae,af,aN,aO)if aM then ar[#ar+1]=b("%s'",aP)else ar[#ar+1]=aQ end;if hover then ar[#ar+1]=" style='stroke:white; stroke-width:2'"else ar[#ar+1]=" style='stroke:black; stroke-width:1'"end;ar[#ar+1]="></rect>"ar[#ar+1]=b("<text x='%f' y='%f' font-size='24' fill='",ae+aN/2,af+aO/2+5)if aM then ar[#ar+1]="black"else ar[#ar+1]="white"end;ar[#ar+1]="' text-anchor='middle' font-family='Montserrat'>"if aM then ar[#ar+1]=b("%s</text>",aR)else ar[#ar+1]=b("%s</text>",aS)end end;function DrawButtons(ar)local aT="rgb(50,50,50)'"local aU="rgb(210,200,200)"local aV=DrawButton;for _,V in pairs(r)do local ab=V.disableName;local aa=V.enableName;if type(ab)=="function"then ab=ab()end;if type(aa)=="function"then aa=aa()end;if not V.drawCondition or V.drawCondition()then aV(ar,V.toggleVar(),V.hovered,V.x,V.y,V.width,V.height,aU,aT,ab,aa)end end end;function DrawTank(ar,Q,ae,aW,aX,aY,aZ,a_)local b0=1;local b1=2;local b2=3;local b3=4;local b4=5;local b5=6;local b6=""local b7=0;local b8=fuelY;local b9=fuelY+10;if l()==1 and not RemoteHud then b8=b8-50;b9=b9-50 end;ar[#ar+1]=[[<g class="pdim txtfuel">]]if aX=="ATMO"then b6="atmofueltank"elseif aX=="SPACE"then b6="spacefueltank"else b6="rocketfueltank"end;b7=_G[b6 .."_size"]if#aY>0 then for i=1,#aY do local an=string.sub(aY[i][b1],1,12)local ba=0;for aH=1,b7 do if aY[i][b1]==json.decode(unit[b6 .."_"..aH].getData()).name then ba=aH;break end end;if Q or aZ[i]==nil or a_[i]==nil then local bb=0;local bc=0;local bd=0;local be=0;local a2=system.getTime()if ba~=0 then a_[i]=json.decode(unit[b6 .."_"..ba].getData()).percentage;aZ[i]=json.decode(unit[b6 .."_"..ba].getData()).timeLeft;if aZ[i]=="n/a"then aZ[i]=0 end else bd=j(aY[i][b0])-aY[i][b3]bb=aY[i][b2]a_[i]=a(0.5+bd*100/bb)bc=aY[i][b4]be=aY[i][b5]if bc<=bd then aZ[i]=0 else aZ[i]=a(0.5+bd/((bc-bd)/(a2-be)))end;aY[i][b4]=bd;aY[i][b5]=a2 end end;if an==aW then an=b("%s %d",aX,i)end;if ba==0 then an=an.." *"end;local bf;if aZ[i]==0 then bf="n/a"else bf=FormatTimeString(aZ[i])end;if a_[i]~=nil then local aD=a(a_[i]*2.55)local aE=b("rgb(%d,%d,%d)",255-aD,aD,0)local bg=""if bf~="n/a"and aZ[i]<120 or a_[i]<5 then if Q then bg=[[class="red"]]end end;ar[#ar+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ae,b8,bg,an,ae,b9,aE,a_[i],bf)b8=b8+30;b9=b9+30 end end end;ar[#ar+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local ax=-math.deg(math.atan(velocity.y,velocity.z))+180;ax=ax-90;if ax<0 then ax=360+ax end;if ax>180 then ax=-180+ax-180 end;return-ax end;function getRelativeYaw(velocity)velocity=vec3(velocity)local bh=math.deg(math.atan(velocity.y,velocity.x))-90;if bh<-180 then bh=360+bh end;return bh end;function AlignToWorldVector(bi,bj)if not InAtmo or RateOfChange>MinimumRateOfChange+0.08 or HovGndDet~=-1 then if bj==nil then bj=t end;bi=vec3(bi):normalize()local bk=vec3(core.getConstructWorldOrientationForward())-bi;local bl=-getMagnitudeInDirection(bk,core.getConstructWorldOrientationRight())*s;local bm=-getMagnitudeInDirection(bk,core.getConstructWorldOrientationUp())*s;if n==0 then n=bl/2 end;if o==0 then o=bm/2 end;YawInput2=YawInput2-(bl+(bl-n)*DampingMultiplier)PitchInput2=PitchInput2+bm+(bm-o)*DampingMultiplier;n=bl;o=bm;if math.abs(bl)<bj and math.abs(bm)<bj then return true end;return false end end;function getAPEnableName()local an=AutopilotTargetName;if an==nil then an=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if an==nil then an="None"end;return"Engage Autopilot: "..an end;function getAPDisableName()local an=AutopilotTargetName;if an==nil then an=CustomTarget.name end;if an==nil then an="None"end;return"Disable Autopilot: "..an end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bn=50;local bo=260;local bp=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bo,bn,u/2-bo/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bo,bn,u/2-bo/2-50-bp.width,v/2-bn+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bo,bn,u/2-bo/2+bp.width+50,v/2-bn+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bq=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bq.height,bq.x+bq.width+30,bq.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,bq.height,bq.x+bq.width+30,bq.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,bq.height,bq.x-200-30,bq.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bn=60;bo=300;local ae=10;local af=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bo,bn,ae,af,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bo,bn,ae+bo+20,af,function()return AltitudeHold end,ToggleAltitudeHold)af=af+bn+20;MakeButton("Engage Autoland","Disable Autoland",bo,bn,ae,af,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bo,bn,ae+bo+20,af,function()return AutoTakeoff end,ToggleAutoTakeoff)af=af+bn+20;MakeButton("Show Orbit Display","Hide Orbit Display",bo,bn,ae,af,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bo,bn,ae+bo+20,af,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)af=af+bn+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bo,bn,ae,af,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bo,bn,ae+bo+20,af,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)af=af+bn+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bo,bn,ae,af,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bo,bn,ae+bo+20,af,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)af=af+bn+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",bo,bn,ae,af,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;af=af+bn+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bo*2,bn,ae,af,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function GetFlightStyle()local br=Nav.axisCommandManager:getAxisCommandType(0)local bs="TRAVEL"if br==1 then bs="CRUISE"end;if Autopilot then bs="AUTOPILOT"end;return bs end;function updateHud(ar)local bt=CoreAltitude;local velocity=core.getVelocity()local a8=vec3(velocity):len()local aw=vec3(core.getWorldVertical())local au=vec3(core.getConstructWorldOrientationForward())local av=vec3(core.getConstructWorldOrientationRight())local bu=vec3(core.getConstructWorldOrientationUp())local bv=getRoll(aw,au,av)local bw=bv/180*math.pi;local bx=math.cos(bw)local by=math.sin(bw)local ax=getPitch(aw,au,av*bx+bu*by)local bz=bv;local bA=ax;local bB=f()local bC=a(unit.getThrottle())local bD=a8*3.6;local bE=unit.getAxisCommandValue(0)local bs=GetFlightStyle()local bF="ROLL"local bG=unit.getClosestPlanetInfluence()>0;if bC==nil then bC=0 end;if not bG then if a8>5 then ax=getRelativePitch(velocity)bv=getRelativeYaw(velocity)else ax=0;bv=0 end;bF="YAW"end;ar[#ar+1]=LastOdometerOutput;ar[#ar+1]=p;ar[#ar+1]=RadarMessage;if S%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(ar,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(ar,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(ar,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;S=0 end;S=S+1;DrawVerticalSpeed(ar,bt)if l()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if bG then DrawRollLines(ar,centerX,centerY,bz,bF,bG)DrawArtificialHorizon(ar,bA,bz,centerX,centerY,bG,a(getRelativeYaw(velocity)),a8)DrawAltitudeDisplay(ar,bt)else DrawRollLines(ar,centerX,centerY,bv,bF,bG)DrawArtificialHorizon(ar,ax,bv,centerX,centerY,bG,a(bv),a8)end;DrawPrograde(ar,velocity,a8,centerX,centerY)end end;DrawThrottle(ar,bs,bC,bE)DrawSpeed(ar,bD)DrawWarnings(ar)DisplayOrbitScreen(ar)if screen_2 then local bH=vec3(core.getConstructWorldPos())local ae=960+bH.x/MapXRatio;local af=450+bH.y/MapYRatio;screen_2.moveContent(YouAreHere,(ae-80)/19.2,(af-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and l()==0 end;function HUDPrologue(ar)local bI=rgb;local bJ=Y;local bK=rgb;local bL=Y;if IsInFreeLook()and not brightHud then bI=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bJ=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;ar[#ar+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],bI,bI,bK,bK,bJ,bJ,bL,bL,ResolutionX,ResolutionY)end;function HUDEpilogue(ar)ar[#ar+1]="</svg>"end;function DrawSpeed(ar,bD)local bM=throtPosY-10;local bN=throtPosX+10;ar[#ar+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bM=75 end;ar[#ar+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bN,bM,a(bD))end;function DrawOdometer(ar,TotalDistanceTrip,TotalDistanceTravelled,bs,bO,bB)local bP=1240;local bQ=55;local bR=65;local bB=f()local a5=core.g()local bS=0;local bT=0;local bU=0;refreshLastMaxBrake(a5)if InAtmo then bU=LastMaxBrakeInAtmo else bU=LastMaxBrake end;maxThrust=Nav:maxForceForward()C=k()if not ShowOdometer then return end;local bV=vec3(core.getWorldAcceleration()):len()/9.80665;if a5>0.1 then bT=C*a5;bS=maxThrust/a5 end;ar[#ar+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bP=1120;bQ=55;bR=65 elseif InAtmo then ar[#ar+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bB)end;ar[#ar+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bP,bQ,bP,bR,a5/9.80665,bP,bQ+20,bP,bR+20,bV)ar[#ar+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 or RemoteHud then ar[#ar+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="180">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bO),FormatTimeString(TotalFlightTime),C/1000,bU/1000,maxThrust/1000,bs)if a5>0.1 then ar[#ar+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bS/1000,bT/1000)else ar[#ar+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else ar[#ar+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bs)end;ar[#ar+1]="</g>"end;function DrawThrottle(ar,bs,bC,bE)local b8=throtPosY+10;local b9=throtPosY+20;if l()==1 and not RemoteHud then b8=55;b9=65 end;local bW="CRUISE"local unit="km/h"local bX=bE;if bs=="TRAVEL"or bs=="AUTOPILOT"then bW="THROT"unit="%"bX=bC;local bY="dim"if bC<0 then bY="red"end;ar[#ar+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bY,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(bC),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;ar[#ar+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,b8,bW,throtPosX+10,b9,bX,unit)end;function DrawVerticalSpeed(ar,bt)if bt<200000 and not InAtmo or bt and InAtmo then local bZ=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local b_=0;if math.abs(bZ)>1 then b_=45*math.log(math.abs(bZ),10)if bZ<0 then b_=-b_ end end;ar[#ar+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bZ),a(b_))end end;function getHeading(aK)local c0=-vec3(core.getWorldVertical())aK=aK-aK:project_on(c0)local c1=vec3(0,0,1)c1=c1-c1:project_on(c0)local c2=c1:cross(c0)local b_=c1:angle_between(aK)*constants.rad2deg;if aK:dot(c2)<0 then b_=360-b_ end;return b_ end;function DrawRollLines(ar,centerX,centerY,bz,bF,bG)local c3=circleRad;local c4=20;c4=math.floor(c4)local c5=a(bz)if bG then for i=-45,45,5 do local c6=i;ar[#ar+1]=b([[<g transform="rotate(%f,%d,%d)">]],c6,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;ar[#ar+1]=b([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+c3+c4-len,centerX,centerY+c3+c4)end;ar[#ar+1]=b([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+c3+c4-35,bF,centerX,centerY+c3+c4-25,c5)ar[#ar+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bz,centerX,centerY)ar[#ar+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+c3+c4-20,centerX+5,centerY+c3+c4-20,centerX,centerY+c3+c4-15)ar[#ar+1]="</g>"end;local bh=c5;if bG then bh=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local c7=20;local c8=a(bh)local c9=0;local ca=centerY+c3+c4+20;local cb=centerX;if bF~="YAW"then ca=130;cb=960 end;local cc=[[<path class="txttick line" d="]]for i=a(c8-(c7+10)-c8%5+0.5),a(c8+c7+10+c8%5+0.5),5 do local ae=cb+-i*5+bh*5;if i%10==0 then c9=10;local cd=i;if cd==360 then cd=0 elseif cd>360 then cd=cd-360 elseif cd<0 then cd=cd+360 end;ar[#ar+1]=b([[
                                    <text x="%f" y="%f">%d</text>]],ae+5,ca-12,cd)elseif i%5==0 then c9=5 end;if c9==10 then cc=b([[%s M %f %f v %d]],cc,ae,ca-5,c9)else cc=b([[%s M %f %f v %d]],cc,ae,ca-2.5,c9)end end;ar[#ar+1]=cc..[["/>]]ar[#ar+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/>]],cb-5,ca+10,cb+5,ca+10,cb,ca+5)if bG then bF="HDG"end;ar[#ar+1]=b([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],cb,ca+25,c8,cb,ca+35,bF)end;function DrawArtificialHorizon(ar,bA,bz,centerX,centerY,bG,ce,a8)local c3=circleRad;local cf=math.floor(c3*3/5)if c3>0 then local cg=a(bA)local len=0;local cc=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bz,centerX,centerY)if not InAtmo then cc=b([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;ar[#ar+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],c3-1,centerX,centerY)ar[#ar+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(cg-30-cg%5+0.5),a(cg+30+cg%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local af=centerY+-i*5+bA*5;if len==30 then cc=b([[%s M %d %f h %d]],cc,centerX-cf-len,af,len)if InAtmo then ar[#ar+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bz,centerX,centerY,centerX-cf+10,af,i)ar[#ar+1]=b([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*bz,centerX,centerY,centerX+cf-10,af,i)if i==0 or i==180 or i==-180 then ar[#ar+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bz,centerX,centerY,centerX-cf+20,af,cf*2-40)end else ar[#ar+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-cf+10,af,i)ar[#ar+1]=b([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+cf-10,af,i)end;cc=b([[%s M %d %f h %d]],cc,centerX+cf,af,len)else cc=b([[%s M %d %f h %d]],cc,centerX-cf-len,af,len)cc=b([[%s M %d %f h %d]],cc,centerX+cf,af,len)end end;ar[#ar+1]=cc..[["/>]]local ch="PITCH"if not bG then ch="REL PITCH"end;if bA>90 and not InAtmo then bA=90-(bA-90)elseif bA<-90 and not InAtmo then bA=-90-(bA+90)end;if c3>200 then if InAtmo then if a8>MinAutopilotSpeed then ar[#ar+1]=b([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,ce)end;ar[#ar+1]=b([[<g transform="rotate(%f,%d,%d)">]],-bz,centerX,centerY)else ar[#ar+1]=b([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;ar[#ar+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-cf+25,centerY-5,centerX-cf+20,centerY,centerX-cf+25,centerY+5,centerX-cf+50,centerY+4,cg)ar[#ar+1]=b([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+cf-25,centerY-5,centerX+cf-20,centerY,centerX+cf-25,centerY+5,centerX+cf-30,centerY+4,cg)ar[#ar+1]="</g>"end;local ci=math.floor(c3/3)ar[#ar+1]=b([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-ci,centerY,c3-ci)if not InAtmo and bG then ar[#ar+1]=b([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*bz,centerX,centerY,centerX-cf+10,centerY,cf*2-20)end;ar[#ar+1]="</g>"if c3<200 then if InAtmo and a8>MinAutopilotSpeed then ar[#ar+1]=b([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-c3,ch,centerX,centerY-c3+10,cg,centerX,centerY-15,"Yaw",centerX,centerY+20,ce)else ar[#ar+1]=b([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-c3,ch,centerX,centerY-c3+15,cg)end end end end;function DrawAltitudeDisplay(ar,bt)if bt<200000 and not InAtmo or bt and InAtmo then local cj=altMeterX;local ck=altMeterY;local cl=78;local cm=19;table.insert(ar,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],cj-1,ck-4,cl+2,cm+6,cj+1,ck-1,cl-4,cm))local aq=0;local cn=1;local co=0;local cp=bt<0;local cq=9;if cp then cq=0 end;local bt=math.abs(bt)while aq<6 do local cr=11;local cs=16;local ct=9;local cu=14;local bg="altsm"if aq>2 then cs=cs+3;cr=cr+2;cu=cu+2;ct=ct-6;bg="altbig"end;if cp then bg=bg.." red"end;local cv=bt/cn%10;local cw=a(cv)local cx=a((cw+1)%10)local cy=co;if aq==0 then cy=cv-cw;if cp then cy=1-cy end end;if cp and(aq==0 or co~=0)then local cz=cx;cx=cw;cw=cz end;local cA=cs*(cy-1)local cB=cA+cs;local ae=cj+ct+(6-aq)*cr;local af=ck+cu;table.insert(ar,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bg,ae,af+cA,cx,ae,af+cB,cw))aq=aq+1;cn=cn*10;if cw==cq then co=cy else co=0 end end;table.insert(ar,[[</g></g>]])end end;function DrawPrograde(ar,velocity,a8,centerX,centerY)if a8>5 and not InAtmo or a8>MinAutopilotSpeed then local c3=circleRad;local cC=20;local cD=20;local cE=vec3(velocity)local cF=getRelativePitch(cE)local cG=getRelativeYaw(cE)local cH=-cG/cD*c3;local cI=cF/cC*c3;local ae=centerX+cH;local af=centerY+cI;local cJ=math.sqrt(cH^2+cI^2)if cJ<c3 then ar[#ar+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ae,af)else local b_=math.atan(cI,cH)local cK=centerX+c3*math.cos(b_)local cL=centerY+c3*math.sin(b_)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cK,cL)end;cF=getRelativePitch(-cE)cG=getRelativeYaw(-cE)cH=-cG/cD*c3;cI=cF/cC*c3;ae=centerX+cH;af=centerY+cI;cJ=math.sqrt(cH^2+cI^2)if not InAtmo then if cJ<c3 then ar[#ar+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ae,af)else local b_=math.atan(cI,cH)local cK=centerX+c3*math.cos(b_)local cL=centerY+c3*math.sin(b_)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cK,cL)end end end end;function DrawWarnings(ar)ar[#ar+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)ar[#ar+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ar[#ar+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]ar[#ar+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]ar[#ar+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cM=960;local cN=860;local cO=880;local cP=900;local cQ=960;local cR=200;local cS=150;local cT=960;if l()==1 and not RemoteHud then cN=135;cO=155;cP=175;cR=115;cS=95 end;if BrakeIsOn then ar[#ar+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cM,cN)end;if InAtmo and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then ar[#ar+1]=b([[<text x="%d" y="%d">** STALL WARNING **</text>]],cM,cR+50)end;if GyroIsOn then ar[#ar+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cM,cT)end;if GearExtended then if HasGear then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cM,cO)else ar[#ar+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cM,cO)end;ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cM,cP,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cM,cQ)end;if IsBoosting then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cM,cQ+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cM,cR+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))else ar[#ar+1]=b([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cM,cR+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cM,cR,AutopilotStatus)elseif LockPitch~=nil then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],cM,cR,math.floor(LockPitch))elseif FollowMode then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cM,cR)elseif AltitudeHold then if AutoTakeoff then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cM,cR,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then ar[#ar+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cM,cR+50)end else ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cM,cR,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cM,cR)end;if BrakeLanding then if StrongBrakes then ar[#ar+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cM,cR)else ar[#ar+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cM,cR)end end;if ProgradeIsOn then ar[#ar+1]=b([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],cM,cR)end;if RetrogradeIsOn then ar[#ar+1]=b([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],cM,cR)end;if TurnBurn then ar[#ar+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cM,cS)end;if VectorToTarget then ar[#ar+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cM,cR+30,VectorStatus)end;ar[#ar+1]="</g>"end;function DisplayOrbitScreen(ar)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cU=75;local cV=0;local cW=250;local cX=4;cV=cV+cX;local cY=15;local ae=cU+cW+cU/2+cX;local af=cV+cW/2+5+cX;local cZ,c_,d0,d1;cZ=cW/4;d1=0;ar[#ar+1]=[[<g class="pbright txtorb txtmid">]]ar[#ar+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cW+cU*2,cW+cV,cX,cX)if orbit.periapsis~=nil and orbit.apoapsis~=nil then d0=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cZ*2)c_=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/d0*(1-orbit.eccentricity)d1=cZ-orbit.periapsis.altitude/d0-planet.radius/d0;local d2=""if orbit.periapsis.altitude<=0 then d2='redout'end;ar[#ar+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],d2,cU+cW/2+d1+cX,cV+cW/2+cX,cZ,c_)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cU+cW/2+cX,cV+cW/2+cX,planet.radius/d0)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ar[#ar+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae-35,af-5,cU+cW/2+cZ+d1,af-5)ar[#ar+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ae,af)af=af+cY;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.apoapsis.altitude))af=af+cY;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToApoapsis))af=af+cY;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.apoapsis.speed))end;af=cV+cW/2+5+cX;ae=cU-cU/2+10+cX;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ar[#ar+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae+35,af-5,cU+cW/2-cZ+d1,af-5)ar[#ar+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ae,af)af=af+cY;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.periapsis.altitude))af=af+cY;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToPeriapsis))af=af+cY;ar[#ar+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.periapsis.speed))end;ar[#ar+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cU+cW/2+cX,20+cX,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local d3=orbit.timeToApoapsis/orbit.period*2*math.pi;local d4=cZ*math.cos(d3)local d5=c_*math.sin(d3)ar[#ar+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cU+cW/2+d4+d1+cX,cV+cW/2+d5+cX)end;ar[#ar+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for U,V in pairs(atlas[0])do if w==nil or V.center.x<w then w=V.center.x end;if x==nil or V.center.x>x then x=V.center.x end;if y==nil or V.center.y<y then y=V.center.y end;if z==nil or V.center.y>z then z=V.center.y end end;GalaxyMapHTML=""local d6=1.1*(x-w)/1920;local d7=1.4*(z-y)/1080;for U,V in pairs(atlas[0])do local ae=960+V.center.x/d6;local af=540+V.center.y/d7;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="'..V.radius/d6*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(V.name,"Moon")and not string.match(V.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af+V.radius/d6*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..V.name.."</text>"end end;local bH=vec3(core.getConstructWorldPos())local ae=960+bH.x/d6;local af=540+bH.y/d7;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=d6;MapYRatio=d7;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bH=vec3(core.getConstructWorldPos())local ae=960+bH.x/d6;local af=540+bH.y/d7;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ae-80)/19.20,(af-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function d8(d9)return type(d9)=='number'end;local function da(d9)return type(tonumber(d9))=='number'end;local function db(dc)return type(dc)=='table'end;local function dd(de)return type(de)=='string'end;local function df(V)return db(V)and d8(V.x and V.y and V.z)end;local function dg(dh)return db(dh)and d8(dh.latitude and dh.longitude and dh.altitude and dh.bodyId and dh.systemId)end;local di=math.pi/180;local dj=180/math.pi;local dk=1e-10;local cd=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local dl='::pos{'..cd..','..cd..','..cd..','..cd..','..cd..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local dm=utils.clamp;local function dn(dp,dq)if dp==0 then return math.abs(dq)<1e-09 end;if dq==0 then return math.abs(dp)<1e-09 end;return math.abs(dp-dq)<math.max(math.abs(dp),math.abs(dq))*dk end;local function dr(d9)local W=string.gsub(string.reverse(b('%.4f',d9)),'^0*%.?','')return W==''and'0'or string.reverse(W)end;local function ds(dt)if df(dt)then return b('{x=%.3f,y=%.3f,z=%.3f}',dt.x,dt.y,dt.z)end;if db(dt)and not getmetatable(dt)then local du={}local dv=next(dt)if type(dv)=='nil'or dv==1 then du=dt else for U,V in pairs(dt)do local bX=ds(V)if type(U)=='number'then table.insert(du,b('[%s]=%s',U,bX))else table.insert(du,b('%s=%s',U,bX))end end end;return b('{%s}',table.concat(du,','))end;if dd(dt)then return b("'%s'",dt:gsub("'",[[\']]))end;return tostring(dt)end;local dw={}dw.__index=dw;dw.__tostring=function(dt,dx)local dy={}for U in pairs(dt)do table.insert(dy,U)end;table.sort(dy)local du={}for _,U in ipairs(dy)do local bX=ds(dt[U])if type(U)=='number'then table.insert(du,b('[%s]=%s',U,bX))else table.insert(du,b('%s=%s',U,bX))end end;if dx then return b('%s%s',dx,table.concat(du,',\n'..dx))end;return b('{%s}',table.concat(du,','))end;dw.__eq=function(dz,dA)return dz.planetarySystemId==dA.planetarySystemId and dz.bodyId==dA.bodyId and dn(dz.radius,dA.radius)and dn(dz.center.x,dA.center.x)and dn(dz.center.y,dA.center.y)and dn(dz.center.z,dA.center.z)and dn(dz.GM,dA.GM)end;local function dB(dC,dD,dE,dF,dG)assert(da(dC),'Argument 1 (planetarySystemId) must be a number:'..type(dC))assert(da(dD),'Argument 2 (bodyId) must be a number:'..type(dD))assert(da(dE),'Argument 3 (radius) must be a number:'..type(dE))assert(db(dF),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dF))assert(da(dG),'Argument 5 (GM) must be a number:'..type(dG))return setmetatable({planetarySystemId=tonumber(dC),bodyId=tonumber(dD),radius=tonumber(dE),center=vec3(dF),GM=tonumber(dG)},dw)end;local dH={}dH.__index=dH;dH.__tostring=function(dI)return b('::pos{%d,%d,%s,%s,%s}',dI.systemId,dI.bodyId,dr(dI.latitude*dj),dr(dI.longitude*dj),dr(dI.altitude))end;dH.__eq=function(dz,dA)return dz.bodyId==dA.bodyId and dz.systemId==dA.systemId and dn(dz.latitude,dA.latitude)and dn(dz.altitude,dA.altitude)and(dn(dz.longitude,dA.longitude)or dn(dz.latitude,math.pi/2)or dn(dz.latitude,-math.pi/2))end;local function dJ(dK,dD,dL,dM,bt)local dC=dK;if dd(dK)and not dM and not bt and not dD and not dL then dC,dD,dL,dM,bt=string.match(dK,dl)assert(dC,'Argument 1 (position string) is malformed.')else assert(da(dC),'Argument 1 (systemId) must be a number:'..type(dC))assert(da(dD),'Argument 2 (bodyId) must be a number:'..type(dD))assert(da(dL),'Argument 3 (latitude) must be in degrees:'..type(dL))assert(da(dM),'Argument 4 (longitude) must be in degrees:'..type(dM))assert(da(bt),'Argument 5 (altitude) must be in meters:'..type(bt))end;dC=tonumber(dC)dD=tonumber(dD)dL=tonumber(dL)dM=tonumber(dM)bt=tonumber(bt)if dD==0 then return setmetatable({latitude=dL,longitude=dM,altitude=bt,bodyId=dD,systemId=dC},dH)end;return setmetatable({latitude=di*dm(dL,-90,90),longitude=di*(dM%360),altitude=bt,bodyId=dD,systemId=dC},dH)end;local dN={}dN.__index=dN;dN.__tostring=function(dt,dx)local dO=dx and dx..'  'local dP={}local dy={}for U in pairs(dt)do table.insert(dy,U)end;table.sort(dy)for _,dQ in ipairs(dy)do bdy=dt[dQ]local dR=dw.__tostring(bdy,dO)if dx then table.insert(dP,b('[%s]={\n%s\n%s}',dQ,dR,dx))else table.insert(dP,b('  [%s]=%s',dQ,dR))end end;if dx then return b('\n%s%s%s',dx,table.concat(dP,',\n'..dx),dx)end;return b('{\n%s\n}',table.concat(dP,',\n'))end;local function dS(dT)local atlas={}local pid;for _,V in pairs(dT)do local ao=V.planetarySystemId;if type(ao)~='number'then error('Invalid planetary system ID: '..tostring(ao))elseif pid and ao~=pid then error('Mismatch planetary system IDs: '..ao..' and '..pid)end;local dU=V.bodyId;if type(dU)~='number'then error('Invalid body ID: '..tostring(dU))elseif atlas[dU]then error('Duplicate body ID: '..tostring(dU))end;setmetatable(V.center,getmetatable(vec3.unit_x))atlas[dU]=setmetatable(V,dw)pid=ao end;return setmetatable(atlas,dN)end;PlanetaryReference={}local function dV(dT)return setmetatable({galaxyAtlas=dT or{}},PlanetaryReference)end;PlanetaryReference.__index=function(dc,i)if type(i)=='number'then local system=dc.galaxyAtlas[i]return dS(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(dt)return function(dc,U)local dW,nv=next(dc,U)return dW,nv and dS(nv)end,dt.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(dt)local dX={}for _,dY in pairs(dt or{})do local dZ=dY:getPlanetarySystemId()local d_=dN.__tostring(dY,'    ')table.insert(dX,b('  [%s]={%s\n  }',dZ,d_))end;return b('{\n%s\n}\n',table.concat(dX,',\n'))end;PlanetaryReference.BodyParameters=dB;PlanetaryReference.MapPosition=dJ;PlanetaryReference.PlanetarySystem=dS;function PlanetaryReference.createBodyParameters(e0,dD,e1,e2,e3,e4,e5)assert(da(e0),'Argument 1 (planetarySystemId) must be a number:'..type(e0))assert(da(dD),'Argument 2 (bodyId) must be a number:'..type(dD))assert(da(e1),'Argument 3 (surfaceArea) must be a number:'..type(e1))assert(db(e2),'Argument 4 (aPosition) must be an array or vec3:'..type(e2))assert(db(e3),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(e3))assert(da(e4),'Argument 6 (altitude) must be in meters:'..type(e4))assert(da(e5),'Argument 7 (gravityAtPosition) must be number:'..type(e5))local dE=math.sqrt(e1/4/math.pi)local cJ=dE+e4;local e6=vec3(e2)+cJ*vec3(e3)local dG=e5*cJ*cJ;return dB(e0,dD,dE,e6,dG)end;PlanetaryReference.isMapPosition=dg;function PlanetaryReference:getPlanetarySystem(dK)if i==nil then i=0 end;if nv==nil then nv=0 end;local e0=dK;if dg(dK)then e0=dK.systemId end;if type(e0)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dN then system=dS(system)end;return system end end end;function dN:castIntersections(e7,e8,e9,ea)local e9=e9 or function(eb)return 1.05*eb.radius end;local ec={}if ea then for _,i in ipairs(ea)do ec[i]=self[i]end else ea={}for U,eb in pairs(self)do table.insert(ea,U)ec[U]=eb end end;local function ed(ee,ef)local eg=ec[ee].center-e7;local eh=ec[ef].center-e7;return eg:len()<eh:len()end;table.sort(ea,ed)local ei=e8:normalize()for i,ao in ipairs(ea)do local eb=ec[ao]local ej=eb.center-e7;local dE=e9(eb)local ek=ej:dot(ei)local el=ek^2-(ej:len2()-dE^2)if el>=0 then local em=math.sqrt(el)local en=ek+em;local eo=ek-em;if eo>0 then return eb,en,eo elseif en>0 then return eb,en,nil end end end;return nil,nil,nil end;function dN:closestBody(ep)assert(type(ep)=='table','Invalid coordinates.')local eq,eb;local er=vec3(ep)for _,es in pairs(self)do local et=(es.center-er):len2()if not eb or et<eq then eb=es;eq=et end end;return eb end;function dN:convertToBodyIdAndWorldCoordinates(dK)local eu=dK;if dd(dK)then eu=dJ(dK)end;if eu.bodyId==0 then return 0,vec3(eu.latitude,eu.longitude,eu.altitude)end;local es=self:getBodyParameters(eu)if es then return eu.bodyId,es:convertToWorldCoordinates(eu)end end;function dN:getBodyParameters(dK)local dD=dK;if dg(dK)then dD=dK.bodyId end;assert(da(dD),'Argument 1 (bodyId) must be a number:'..type(dD))return self[dD]end;function dN:getPlanetarySystemId()local _,V=next(self)return V and V.planetarySystemId end;function dw:convertToMapPosition(dF)assert(db(dF),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dF))local ev=vec3(dF)if self.bodyId==0 then return setmetatable({latitude=ev.x,longitude=ev.y,altitude=ev.z,bodyId=0,systemId=self.planetarySystemId},dH)end;local ew=ev-self.center;local cJ=ew:len()local bt=cJ-self.radius;local dL=0;local dM=0;if not dn(cJ,0)then local ex=math.atan(ew.y,ew.x)dM=ex>=0 and ex or 2*math.pi+ex;dL=math.pi/2-math.acos(ew.z/cJ)end;return setmetatable({latitude=dL,longitude=dM,altitude=bt,bodyId=self.bodyId,systemId=self.planetarySystemId},dH)end;function dw:convertToWorldCoordinates(dK)local eu=dd(dK)and dJ(dK)or dK;if eu.bodyId==0 then return vec3(eu.latitude,eu.longitude,eu.altitude)end;assert(dg(eu),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(eu.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(eu.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ey=math.cos(eu.latitude)return self.center+(self.radius+eu.altitude)*vec3(ey*math.cos(eu.longitude),ey*math.sin(eu.longitude),math.sin(eu.latitude))end;function dw:getAltitude(dF)return(vec3(dF)-self.center):len()-self.radius end;function dw:getDistance(dF)return(vec3(dF)-self.center):len()end;function dw:getGravity(dF)local ez=self.center-vec3(dF)local eA=ez:len2()return self.GM/eA*ez/math.sqrt(eA)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dV(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function dd(de)return type(de)=='string'end;local function db(dc)return type(dc)=='table'end;local function dn(dp,dq)if dp==0 then return math.abs(dq)<1e-09 end;if dq==0 then return math.abs(dp)<1e-09 end;return math.abs(dp-dq)<math.max(math.abs(dp),math.abs(dq))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bt)assert(self.body)local cJ=bt+self.body.radius;if not dn(cJ,0)then local orbit=math.sqrt(self.body.GM/cJ)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dK,velocity)assert(self.body)assert(db(dK)or dd(dK))assert(db(velocity))local bH=(dd(dK)or PlanetRef.isMapPosition(dK))and self.body:convertToWorldCoordinates(dK)or vec3(dK)local V=vec3(velocity)local eB=bH-self.body.center;local eh=V:len2()local eC=eB:len()local eD=self.body.GM;local eE=((eh-eD/eC)*eB-eB:dot(V)*V)/eD;local dp=eD/(2*eD/eC-eh)local eF=eE:len()local ei=eE:normalize()local eG=dp*(1-eF)local eH=dp*(1+eF)local eI=eG*ei+self.body.center;local eJ=eF<=1 and-eH*ei+self.body.center or nil;local eK=math.sqrt(dp*eD*(1-eF*eF))local eL=eJ and 2*math.pi*math.sqrt(dp^3/eD)local eM=math.acos(eE:dot(eB)/(eF*eC))if eB:dot(V)<0 then eM=-(eM-2*math.pi)end;local eN=math.acos((math.cos(eM)+eF)/(1+eF*math.cos(eM)))local eO=eN;if eO<0 then eO=eO+2*math.pi end;local eP=eO-eF*math.sin(eO)local eQ=0;local eR=0;local eS=0;if eL~=nil then eQ=eP/(2*math.pi/eL)eR=eL-eQ;eS=eR+eL/2;if eM-math.pi>0 then eR=eQ;eS=eR+eL/2 end;if eS>eL then eS=eS-eL end end;return{periapsis={position=eI,speed=eK/eG,circularOrbitSpeed=math.sqrt(eD/eG),altitude=eG-self.body.radius},apoapsis=eJ and{position=eJ,speed=eK/eH,circularOrbitSpeed=math.sqrt(eD/eH),altitude=eH-self.body.radius},currentVelocity=V,currentPosition=bH,eccentricity=eF,period=eL,eccentricAnomaly=eN,meanAnomaly=eP,timeToPeriapsis=eR,timeToApoapsis=eS}end;local function eT(eU)local es=PlanetRef.BodyParameters(eU.planetarySystemId,eU.bodyId,eU.radius,eU.center,eU.GM)return setmetatable({body=es},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eT(...)end})end;function Kinematics()local Kinematic={}local eV=30000000/3600;local eW=eV*eV;local eX=100;local function eY(V)return 1/math.sqrt(1-V*V/eW)end;function Kinematic.computeAccelerationTime(eZ,e_,f0)local f1=eV*math.asin(eZ/eV)return(eV*math.asin(f0/eV)-f1)/e_ end;function Kinematic.computeDistanceAndTime(eZ,f0,f2,f3,f4,f5)f4=f4 or 0;f5=f5 or 0;local f6=eZ<=f0;local f7=f3*(f6 and 1 or-1)/f2;local f8=-f5/f2;local f9=f7+f8;if f6 and f9<=0 or not f6 and f9>=0 then return-1,-1 end;local fa,fb=0,0;if f7~=0 and f4>0 then local f1=math.asin(eZ/eV)local fc=math.pi*(f7/2+f8)local fd=f7*f4;local fe=eV*math.pi;local V=function(dc)local aN=(fc*dc-fd*math.sin(math.pi*dc/2/f4)+fe*f1)/fe;local ff=math.tan(aN)return eV*ff/math.sqrt(ff*ff+1)end;local fg=f6 and function(de)return de>=f0 end or function(de)return de<=f0 end;fb=2*f4;if fg(V(fb))then local fh=0;while math.abs(fb-fh)>0.5 do local dc=(fb+fh)/2;if fg(V(dc))then fb=dc else fh=dc end end end;local fi=eZ;local fj=fb/eX;for fk=1,eX do local a8=V(fk*fj)fa=fa+(a8+fi)*fj/2;fi=a8 end;if fb<2*f4 then return fa,fb end;eZ=fi end;local f1=eV*math.asin(eZ/eV)local X=(eV*math.asin(f0/eV)-f1)/f9;local fl=eW*math.cos(f1/eV)/f9;local cJ=fl-eW*math.cos((f9*X+f1)/eV)/f9;return cJ+fa,X+fb end;function Kinematic.computeTravelTime(eZ,e_,cJ)if cJ==0 then return 0 end;if e_>0 then local f1=eV*math.asin(eZ/eV)local fl=eW*math.cos(f1/eV)/e_;return(eV*math.acos(e_*(fl-cJ)/eW)-f1)/e_ end;assert(eZ>0,'Acceleration and initial speed are both zero.')return cJ/eZ end;function Kinematic.lorentz(V)return eY(V)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cJ)local fm=cJ>100000;local W=""if fm then W=round(cJ/1000/200,1).." SU"elseif cJ<1000 then W=round(cJ,1).." M"else W=round(cJ/1000,1).." KM"end;return W end;function getDistanceDisplayString2(cJ)local fm=cJ>100000;local W=""if fm then W=round(cJ/1000/200,2).." SU"elseif cJ<1000 then W=round(cJ,2).." M"else W=round(cJ/1000,2).." KM"end;return W end;function getSpeedDisplayString(a8)return a(round(a8*3.6,0)+0.5).." km/h"end;function FormatTimeString(fn)local fo=a(fn/86400)local fp=a(fn/3600)local fq=a(fn/60%60)local fn=a(fn%60)if fn<0 or fp<0 or fq<0 then return"0s"end;if fo>0 then return fo.."d "..fp.."h "elseif fp>0 then return fp.."h "..fq.."m "elseif fq>0 then return fq.."m "..fn.."s"else return fn.."s"end end;function getMagnitudeInDirection(bi,e8)bi=vec3(bi)e8=vec3(e8):normalize()local W=bi*e8;return W.x+W.y+W.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local fr=AtlasOrdered[AutopilotTargetIndex].index;local fs=atlas[0][fr]if fs.center then AutopilotTargetName=fs.name;AutopilotTargetPlanet=galaxyReference[0][fr]if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=fs;for _,V in pairs(galaxyReference[0])do if V.name==CustomTarget.planetname then AutopilotTargetPlanet=V;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local ft=LastMaxBrakeInAtmo/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return ft end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local a8=vec3(velocity):len()local fu,fv=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local fw,fx;if not TurnBurn then fw,fx=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fw,fx=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fy;if not TurnBurn then _,fy=GetAutopilotBrakeDistanceAndTime(a8)else _,fy=GetAutopilotTBBrakeDistanceAndTime(a8)end;local fz=0;local fA=0;if AutopilotCruising or not Autopilot and a8>5 then fA=Kinematic.computeTravelTime(a8,0,AutopilotDistance)elseif fw+fu<AutopilotDistance then fz=AutopilotDistance-(fw+fu)fA=Kinematic.computeTravelTime(8333.0556,0,fz)else local fB=(AutopilotDistance-fw)/fu;fu=AutopilotDistance-fw;fv=fv*fB end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return fA elseif AutopilotBraking then return fy elseif AutopilotCruising then return fA+fy else return fv+fx+fA end end;function GetAutopilotBrakeDistanceAndTime(a8)if not InAtmo then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(a8,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return Kinematic.computeDistanceAndTime(a8,AutopilotEndSpeed,k(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(a8)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(a8,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function hoverDetectGround()local fC=-1;if vBooster then fC=vBooster.distance()elseif hover then fC=hover.distance()end;return fC end;function round(cd,fD)local fE=10^(fD or 0)return a(cd*fE+0.5)/fE end;function tablelength(fF)local fG=0;for _ in pairs(fF)do fG=fG+1 end;return fG end;function BeginProfile(fH)ProfileTimeStart=system.getTime()end;function EndProfile(fH)local fI=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fI;ProfileCount=ProfileCount+1;if fI>ProfileTimeMax then ProfileTimeMax=fI end;if fI<ProfileTimeMin then ProfileTimeMin=fI end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fJ=ProfileTimeSum;local fK=ProfileTimeSum/ProfileCount;local fL=ProfileTimeMin;local fM=ProfileTimeMax;local fN=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fJ,fK,fL,fM,fN))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fO=radar_1.getEntries()local fP=radar_1.getData()if#fO>0 then if HasSpaceRadar and EmergencyWarp then local fQ=fP:gmatch('{"constructId[^}]*}[^}]*}')for V in fQ do local ao,cJ=V:match([[{"constructId":"([%d%.]*)","distance":([%d%.]*)]])if ao~=nil and ao~=""then cJ=math.floor(cJ)if cJ<EmergencyWarpDistance and cJ>IgnoreEmergencyWarpDistance then if NotTriedEmergencyWarp and json.decode(warpdrive.getData()).errorMsg~="PLANET TOO CLOSE"then if radar_1.hasMatchingTransponder(ao)~=1 then if RequireLock then if not V:find('targetThreatState":0')then InEmergencyWarp=true;NotTriedEmergencyWarp=false;break end else InEmergencyWarp=true;NotTriedEmergencyWarp=false;break end end end end end end end;local fR=fP:find('identifiedConstructs":%[%]')if fR==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fR~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fO)local fS={}for U,V in pairs(fO)do if radar_1.hasMatchingTransponder(V)==1 then fS[#fS+1]=V end end;if#fS>0 then local af=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,af)for U,V in pairs(fS)do af=af+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,af,radar_1.getConstructName(V))end end else local fQ;fQ=fP:find('worksInEnvironment":false')if fQ then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fT=unit.getAtmosphereDensity()if door and(fT>0 or fT==0 and CoreAltitude<10000)then for _,V in pairs(door)do V.activate()end end;if forcefield and(fT>0 or fT==0 and CoreAltitude<10000)then for _,V in pairs(forcefield)do V.activate()end end;if dbHud then if not WipedDatabank then for U,V in pairs(AutoVariables)do dbHud.setStringValue(V,json.encode(_G[V]))end;for U,V in pairs(SaveableVariables)do dbHud.setStringValue(V,json.encode(_G[V]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fU)if fU=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local fV=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if fV then Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;EmergencyWarp=false;InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).destination~="Unknown"and json.decode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fU=="oneSecond"then clearAllCheck=false;refreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local ar={}local bs=GetFlightStyle()DrawOdometer(ar,TotalDistanceTrip,TotalDistanceTravelled,bs,FlightTime)checkDamage(ar)LastOdometerOutput=table.concat(ar,"")collectgarbage("collect")elseif fU=="reEmergencyWarp"then if EmergencyWarp then NotTriedEmergencyWarp=true;InEmergencyWarp=true end;unit.stopTimer("reEmergencyWarp")elseif fU=="msgTick"then local ar={}DisplayMessage(ar,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fU=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fU=="apTick"then local l=Nav.control.isRemoteControlled;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())InAtmo=unit.getAtmosphereDensity()>0;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)HovGndDet=hoverDetectGround()local fW=system.getMouseDeltaX()local fX=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fY=velMag>8334;if not fY and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fY;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local ar={}HUDPrologue(ar)if showHud then updateHud(ar)else DisplayOrbitScreen(ar)DrawWarnings(ar)end;HUDEpilogue(ar)ar[#ar+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(ar,MsgText)end;if l()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(ar)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(ar)if screen_1.getMouseState()==1 then CheckButtons()end;ar[#ar+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fW;SimulatedY=SimulatedY+fX end;SetButtonContains()DrawButtons(ar)if not Animating and not Animated then local fZ=table.concat(ar,"")ar={}ar[#ar+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ar[#ar+1]=GalaxyMapHTML;ar[#ar+1]=fZ;ar[#ar+1]="</body>"Animating=true;ar[#ar+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ar,"")system.setScreen(content)elseif Animated then local fZ=table.concat(ar,"")ar={}ar[#ar+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ar[#ar+1]=GalaxyMapHTML;ar[#ar+1]=fZ;ar[#ar+1]="</body>"end;if not Animating then ar[#ar+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fW;SimulatedY=SimulatedY+fX;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="virtual joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fX,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fW,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(ar)end else SetButtonContains()DrawButtons(ar)end;ar[#ar+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;ar[#ar+1]=[[</svg></body>]]content=table.concat(ar,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then local f_=AlignToWorldVector(vec3(velocity),0.01)if SpaceLand then autoRoll=true;if f_ then ProgradeIsOn=false;ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if InAtmo then RetrogradeIsOn=false elseif velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and SpaceLand then if unit.getAtmosphereDensity()==0 then ReentryMode=true;BeginReentry()SpaceLand=false;FinalLand=true else SpaceLand=false;ToggleAutopilot()end end;if FinalLand and CoreAltitude<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()FinalLand=false end;if Autopilot and unit.getAtmosphereDensity()==0 then local fw,fx;if not TurnBurn then fw,fx=GetAutopilotBrakeDistanceAndTime(velMag)else fw,fx=GetAutopilotTBBrakeDistanceAndTime(velMag)end;fw=fw;fx=fx;local g0=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local g1=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local g2=getMagnitudeInDirection(g1,AutopilotShipUp)local g3=getMagnitudeInDirection(g1,AutopilotShipRight)local g4=-g3*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local g5=-g2*AutopilotDistance*velMag*TrajectoryAlignmentStrength;g0=AutopilotTargetCoords+-g4*vec3(AutopilotShipRight)+-g5*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(g0)-vec3(core.getConstructWorldPos())):len()local g6=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(g6)..'", "unit":""}')local g7=true;local g8=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(g8)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then g7=AlignToWorldVector((g0-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then g7=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not g7 or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false elseif not APThrottleSet then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(g8-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and APThrottleSet then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end;if AutopilotDistance<=fw then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"MsgText="Autopilot completed, orbit established"BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false;if CustomTarget~=nil then ProgradeIsOn=true;SpaceLand=true end end end elseif AutopilotCruising then if AutopilotDistance<=fw then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if g7 then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif g7 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not APThrottleSet then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true;BrakeIsOn=false end end end end end;if FollowMode then autoRoll=true;local g9=0;local bH=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local ga=bH-vec3(core.getConstructWorldPos())local gb=vec3(ga):project_on(vec3(core.getConstructWorldOrientationForward())):len()local gc=vec3(ga):project_on(vec3(core.getConstructWorldOrientationRight())):len()local cJ=math.sqrt(gb*gb+gc*gc)AlignToWorldVector(ga:normalize())local gd=40;local ge=cJ<gd;local gf=100;local gg=utils.clamp((cJ-gd)/2,10,gf)PitchInput2=0;local g7=math.abs(YawInput2)<0.1;if g7 and velMag<gg and not ge then BrakeIsOn=false;g9=-20 else BrakeIsOn=true;g9=0 end;local au=vec3(core.getConstructWorldOrientationForward())local av=vec3(core.getConstructWorldOrientationRight())local aw=vec3(core.getWorldVertical())local ax=getPitch(aw,au,av)local gh=1.0;if math.abs(g9-ax)>gh then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(g9-ax)local gi=pitchPID:get()PitchInput2=gi end end;local c0=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local bG=unit.getClosestPlanetInfluence()>0;local bt=CoreAltitude;local gj=HoldAltitude-bt;local gk=500+velMag;local g9=(utils.smoothstep(gj,-gk,gk)-0.5)*2*MaxPitch;if not AltitudeHold then g9=0 end;if LockPitch~=nil then if bG then g9=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local gl=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=gl then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,gl)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then g9=-80;if unit.getAtmosphereDensity()>0.02 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;g9=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false;autoRoll=autoRollPreference end end;local gm=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bk=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bk)local gn=bk:len()-bk:project_on(c0):len()local a9=LastMaxBrakeInAtmo;local bZ=velocity.x*c0.x+velocity.y*c0.y+velocity.z*c0.z;local go=velocity:len()-math.abs(bZ)local gp=vec3(core.getWorldAirFrictionAcceleration())if a9~=nil then BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(go,0,core.getConstructMass(),0,0,a9+(gp:len()-gp:project_on(c0):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(go,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if gn<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and gn>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=gn end;PitchInput2=gm;local au=vec3(core.getConstructWorldOrientationForward())local av=vec3(core.getConstructWorldOrientationRight())local aw=vec3(core.getWorldVertical())local fC=-1;local ax=getPitch(aw,au,av)local gh=0.1;if BrakeLanding then g9=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bZ=velocity.x*c0.x+velocity.y*c0.y+velocity.z*c0.z;fC=HovGndDet;if fC>-1 then if math.abs(g9-ax)<gh then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-c0)<0.99 then BrakeIsOn=true elseif bZ<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or SpaceLaunch then if g9<20 then AutoTakeoff=false;if not SpaceLaunch then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;SpaceLaunch=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif SpaceLaunch and unit.getAtmosphereDensity()==0 and CoreAltitude>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(g9-ax)>gh then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(g9-ax)local gi=pitchPID:get()PitchInput2=PitchInput2+gi end end;LastEccentricity=orbit.eccentricity;if antigrav and not ExternalAGG and CoreAltitude<200000 then if antigrav.getState()==1 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local gq=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)gq=math.max(gq,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local gr=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local gs=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local gt=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local gu=BrakeInput;local gv=vec3(core.getWorldVertical())local gw=vec3(core.getConstructWorldOrientationUp())local gx=vec3(core.getConstructWorldOrientationForward())local gy=vec3(core.getConstructWorldOrientationRight())local gz=vec3(core.getWorldVelocity())local gA=vec3(core.getWorldVelocity()):normalize()local gB=getRoll(gv,gx,gy)local gC=math.abs(gB)local gD=utils.sign(gB)local f=unit.getAtmosphereDensity()local gE=vec3(core.getWorldAngularVelocity())local gF=gr*pitchSpeedFactor*gy+gs*rollSpeedFactor*gx+gt*yawSpeedFactor*gw;if gv:len()>0.01 and f>0.0 or ProgradeIsOn then local gG=1.0;if autoRoll==true and gC>gG and gs==0 then local gH=utils.clamp(0,gC-30,gC+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gH-gB)local gI=rollPID:get()gF=gF+gI*gx end end;if gv:len()>0.01 and f>0.0 then local gJ=20.0;if turnAssist==true and gC>gJ and gr==0 and gt==0 then local gK=turnAssistFactor*0.1;local gL=turnAssistFactor*0.025;local gM=(gC-gJ)/(180-gJ)*180;local gN=0;if gM<90 then gN=gM/90 elseif gM<180 then gN=(180-gM)/90 end;gN=gN*gN;local gO=-gD*gL*(1.0-gN)local gP=gK*gN;gF=gF+gP*gy+gO*gw end end;local gQ=1;local gR=0;local gS=1;local gT=gq*(gF-gE)local gU=vec3(core.getWorldAirFrictionAngularAcceleration())gT=gT-gU;Nav:setEngineTorqueCommand('torque',gT,gQ,'airfoil','','',gS)local gV=-gu*(brakeSpeedFactor*gz+brakeFlatFactor*gA)Nav:setEngineForceCommand('brake',gV)local gW=''local gX=vec3()local gY=false;local gZ='thrust analog longitudinal'local g_=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if g_==axisCommandType.byThrottle then local h0=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gZ,axisCommandId.longitudinal)Nav:setEngineForceCommand(gZ,h0,gQ)elseif g_==axisCommandType.byTargetSpeed then local h0=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gW=gW..' , '..gZ;gX=gX+h0;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gY=true end end;local h1='thrust analog lateral'local h2=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if h2==axisCommandType.byThrottle then local h3=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(h1,axisCommandId.lateral)Nav:setEngineForceCommand(h1,h3,gQ)elseif h2==axisCommandType.byTargetSpeed then local h4=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gW=gW..' , '..h1;gX=gX+h4 end;local h5='thrust analog vertical'local h6=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if h6==axisCommandType.byThrottle then local h7=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(h5,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(h5,h7,gQ,'airfoil','ground','',gS)else Nav:setEngineForceCommand(h5,vec3(),gQ)Nav:setEngineForceCommand('airfoil vertical',h7,gQ,'airfoil','','',gS)Nav:setEngineForceCommand('ground vertical',h7,gQ,'ground','','',gS)end elseif h6==axisCommandType.byTargetSpeed then if UpAmount==0 then Nav:setEngineForceCommand('hover',vec3(),gQ)end;local h8=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gW=gW..' , '..h5;gX=gX+h8 end;if gX:len()>constants.epsilon then if BrakeInput~=0 or gY or math.abs(gA:dot(gx))<0.95 then gW=gW..', brake'end;Nav:setEngineForceCommand(gW,gX,gR,'','','',gS)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local a8=vec3(core.getVelocity()):len()local h9=unit.setEngineThrust;local ha=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local hb=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if a8*3.6>hb*(1-ha)then h9('rocket_engine',0)elseif IsBoosting then h9('rocket_engine',1)end else local hc=unit.getThrottle()local gg=hc/100;if f==0 then gg=gg*MaxGameVelocity;if a8>=gg*(1-ha)then h9('rocket_engine',0)elseif IsBoosting then h9('rocket_engine',1)end else gg=gg*1050/3.6;if a8>=gg*(1-ha)then h9('rocket_engine',0)elseif IsBoosting then h9('rocket_engine',1)end end end end end;function script.onUpdate()if not SetupComplete then local _,W=coroutine.resume(beginSetup)if W then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(hd)if hd=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and HovGndDet==-1 and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif hd=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif hd=="forward"then PitchInput=PitchInput-1 elseif hd=="backward"then PitchInput=PitchInput+1 elseif hd=="left"then RollInput=RollInput-1 elseif hd=="right"then RollInput=RollInput+1 elseif hd=="yawright"then YawInput=YawInput-1 elseif hd=="yawleft"then YawInput=YawInput+1 elseif hd=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif hd=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif hd=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif hd=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif hd=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif hd=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif hd=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif hd=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif hd=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif hd=="option4"then ToggleAutopilot()ToggleView=false elseif hd=="option5"then ToggleLockPitch()ToggleView=false elseif hd=="option6"then ToggleAltitudeHold()ToggleView=false elseif hd=="option7"then wipeSaveVariables()ToggleView=false elseif hd=="option8"then ToggleFollowMode()ToggleView=false elseif hd=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif hd=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif hd=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif hd=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif hd=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif hd=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif hd=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif hd=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif hd=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end elseif hd=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(hd)if hd=="forward"then PitchInput=0 elseif hd=="backward"then PitchInput=0 elseif hd=="left"then RollInput=0 elseif hd=="right"then RollInput=0 elseif hd=="yawright"then YawInput=0 elseif hd=="yawleft"then YawInput=0 elseif hd=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif hd=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif hd=="up"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif hd=="down"then UpAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif hd=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif hd=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif hd=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif hd=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif hd=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(hd)if hd=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif hd=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif hd=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif hd=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(ar,he)if he~="empty"then ar[#ar+1]=[[<text class="msg" x="50%%" y="310" >]]for hf in string.gmatch(he,"([^\n]+)")do ar[#ar+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],hf)end;ar[#ar+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a2=system.getTime()local velocity=vec3(core.getWorldVelocity())local bD=vec3(velocity):len()local hg=a2-LastTravelTime;if bD>1.38889 then bD=bD/1000;local hh=bD*(a2-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+hh;TotalDistanceTrip=TotalDistanceTrip+hh end;FlightTime=FlightTime+hg;TotalFlightTime=TotalFlightTime+hg;LastTravelTime=a2 end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
