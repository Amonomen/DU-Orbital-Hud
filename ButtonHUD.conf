name: ButtonsHud - Dimencia and Archaegeo v4.924 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;function LoadVariables()if dbHud_1 then local b3=dbHud_1.hasKey;if not useTheseSettings then for b4,b5 in pairs(a)do if b3(b5)then local b6=f(dbHud_1.getStringValue(b5))if b6~=nil then c(b5 .." "..dbHud_1.getStringValue(b5))_G[b5]=b6;az=true end end end end;coroutine.yield()for b4,b5 in pairs(b)do if b3(b5)then local b6=f(dbHud_1.getStringValue(b5))if b6~=nil then c(b5 .." "..dbHud_1.getStringValue(b5))_G[b5]=b6;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local b7=system.getTime()if LastStartTime+180<b7 then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=b7;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(b8,b9)if b8>b9 then b9=b8 end;if ContainerOptimization>0 then b9=b9-b9*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then b9=b9-b9*FuelTankOptimization*0.05 end;return b9 end;function ProcessElements()for b4 in pairs(af)do local type=l(af[b4])if type=="landing gear"then A=true end;if type=="dynamic core"then local ba=h(af[b4])if ba>10000 then aQ=128 elseif ba>1000 then aQ=64 elseif ba>150 then aQ=32 end end;aG=aG+h(af[b4])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local ba=h(af[b4])local bb=m(af[b4])local b8=0;local bc=system.getTime()if type=="Atmospheric Fuel Tank"then local b9=400;local bd=35.03;if ba>10000 then b9=51200;bd=5480 elseif ba>1300 then b9=6400;bd=988.67 elseif ba>150 then b9=1600;bd=182.67 end;b8=bb-bd;if fuelTankHandlingAtmo>0 then b9=b9+b9*fuelTankHandlingAtmo*0.2 end;b9=CalculateFuelVolume(b8,b9)aD[#aD+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end;if type=="Rocket Fuel Tank"then local b9=320;local bd=173.42;if ba>65000 then b9=40000;bd=25740 elseif ba>6000 then b9=5120;bd=4720 elseif ba>700 then b9=640;bd=886.72 end;b8=bb-bd;if fuelTankHandlingRocket>0 then b9=b9+b9*fuelTankHandlingRocket*0.2 end;b9=CalculateFuelVolume(b8,b9)aF[#aF+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end;if type=="Space Fuel Tank"then local b9=2400;local bd=182.67;if ba>10000 then b9=76800;bd=5480 elseif ba>1300 then b9=9600;bd=988.67 end;b8=bb-bd;if fuelTankHandlingSpace>0 then b9=b9+b9*fuelTankHandlingSpace*0.2 end;b9=CalculateFuelVolume(b8,b9)aE[#aE+1]={af[b4],core.getElementNameById(af[b4]),b9,bd,b8,bc}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,b5 in pairs(door)do b5.toggle()end end;if switch then for _,b5 in pairs(switch)do b5.toggle()end end;if forcefield then for _,b5 in pairs(forcefield)do b5.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not A then GearExtended=true end else if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(b5)if ResolutionX==1920 then return b5 else return round(ResolutionX*b5/1920,0)end end;function ConvertResolutionY(b5)if ResolutionY==1080 then return b5 else return round(ResolutionY*b5/1080,0)end end;function RefreshLastMaxBrake(be,bf)if be==nil then be=core.g()end;be=round(be,5)local bg=j()if bf~=nil and bf or(aC==nil or aC~=be)then local velocity=core.getVelocity()local bh=vec3(velocity):len()local bi=f(unit.getData()).maxBrake;if bi~=nil and bi>0 and ad then bi=bi/utils.clamp(bh/100,0.1,1)bi=bi/bg;if bi>LastMaxBrakeInAtmo and bg>0.10 then LastMaxBrakeInAtmo=bi end end;if bi~=nil and bi>0 then LastMaxBrake=bi end;aC=be end end;function MakeButton(bj,bk,bl,bm,bn,bo,bp,bq,br)local bs={enableName=bj,disableName=bk,width=bl,height=bm,x=bn,y=bo,toggleVar=bp,toggleFunction=bq,drawCondition=br,hovered=false}table.insert(aq,bs)return bs end;function UpdateAtlasLocationsList()AtlasOrdered={}for b4,b5 in pairs(aS[0])do table.insert(AtlasOrdered,{name=b5.name,index=b4})end;local function bt(bu,bv)return bu.name<bv.name end;table.sort(AtlasOrdered,bt)end;function AddLocationsToAtlas()for b4,b5 in pairs(SavedLocations)do table.insert(aS[0],b5)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bw)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bx='::pos{'..p..','..p..','..p..','..p..','..p..'}'local by,bz,bA,bB,bC=string.match(bw,bx)if by=="0"and bz=="0"then return vec3(tonumber(bA),tonumber(bB),tonumber(bC))end;bB=math.rad(bB)bA=math.rad(bA)local planet=aS[tonumber(by)][tonumber(bz)]local bD=math.cos(bA)local bE=vec3(bD*math.cos(bB),bD*math.sin(bB),math.sin(bA))return planet.center+(planet.radius+bC)*bE end;function AddNewLocationByWaypoint(bF,planet,bw)if dbHud_1 then local bG={}local position=zeroConvertToWorldCoordinates(bw)if planet.name=="Space"then bG={position=position,name=bF,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bH=false;if planet.atmos then bH=true else bH=false end;bG={position=position,name=bF,atmosphere=bH,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bG;table.insert(aS[0],bG)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bI=planet.name..". "..#SavedLocations;if radar_1 then local bJ,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bJ~=nil and bJ~=""then bI=bI.." "..radar_1.getConstructName(bJ)end end;local bG={}local bH=false;if planet.atmos then bH=true end;bG={position=position,name=bI,atmosphere=bH,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bG;table.insert(aS[0],bG)UpdateAtlasLocationsList()K="Location saved as "..bI else K="Databank must be installed to save locations"end end;function UpdatePosition(bK)local bL=-1;local bG;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name==CustomTarget.name then bL=b4;break end end;if bL~=-1 then local bM;if bK~=nil then bG={position=SavedLocations[bL].position,name=bK,atmosphere=SavedLocations[bL].atmosphere,planetname=SavedLocations[bL].planetname,gravity=SavedLocations[bL].gravity}else bG={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bL].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bL]=bG;bL=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name==CustomTarget.name then bL=b4 end end;if bL>-1 then aS[0][bL]=bG end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bL=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name==CustomTarget.name then bL=b4 end end;if bL>-1 then table.remove(aS[0],bL)end;bL=-1;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name==CustomTarget.name then K=b5.name.." saved location cleared"bL=b4;break end end;if bL~=-1 then table.remove(SavedLocations,bL)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bN)bN[#bN+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bO,bP,bn,bo,bl,bm)if bO>bn and bO<bn+bl and bP>bo and bP<bo+bm then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bQ=vec3(core.getConstructWorldOrientationForward())local bR=vec3(core.getConstructWorldOrientationRight())local bS=vec3(core.getWorldVertical())local bT=getPitch(bS,bQ,bR)LockPitch=bT;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bN)local bU=0;ao=""local bV=aG;local bW=0;local bX=0;local bY=0;local bZ=0;local b_=""for b4 in pairs(af)do local ba=0;local c0=0;c0=h(af[b4])ba=k(af[b4])bW=bW+ba;if ba<c0 then if ba==0 then bY=bY+1 else bX=bX+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[b4]))local bn=position.x-aQ;local bo=position.y-aQ;local c1=position.z-aQ;table.insert(al,core.spawnArrowSticker(bn,bo,c1+1,"down"))table.insert(al,core.spawnArrowSticker(bn,bo,c1+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bn+1,bo,c1,"north"))table.insert(al,core.spawnArrowSticker(bn+1,bo,c1,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bn-1,bo,c1,"south"))table.insert(al,core.spawnArrowSticker(bn-1,bo,c1,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bn,bo-1,c1,"east"))table.insert(al,core.spawnArrowSticker(bn,bo-1,c1,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bn,bo+1,c1,"west"))table.insert(al,core.spawnArrowSticker(bn,bo+1,c1,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[b4])end elseif aH and#al>0 and al[11]==af[b4]then for c2 in pairs(al)do core.deleteSticker(al[c2])end;al={}end end;bU=d(bW/bV*100)if bU<100 then bN[#bN+1]=[[<g class="pbright txt">]]bZ=d(bU*2.55)b_=e("rgb(%d,%d,%d)",255-bZ,bZ,0)if bU<100 then bN[#bN+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],b_,bU)if bY>0 then bN[#bN+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],b_,bY,bX)elseif bX>0 then bN[#bN+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],b_,bX)end end;bN[#bN+1]=[[<\g>]]end end;function DrawCursorLine(bN)local c3=d(utils.clamp(a3/(at/4)*255,0,255))bN[#bN+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+c3,d(PrimaryG+0.5)-c3,d(PrimaryB+0.5)-c3)end;function getPitch(c4,c5,bv)local c6=c4:cross(bv):normalize_inplace()local bT=math.acos(utils.clamp(c6:dot(-c5),-1,1))*constants.rad2deg;if c6:cross(-c5):dot(bv)<0 then bT=-bT end;return bT end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for b4,b5 in pairs(a)do dbHud_1.setStringValue(b5,g(nil))end;for b4,b5 in pairs(b)do if b5~="SavedLocations"then dbHud_1.setStringValue(b5,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,b5 in pairs(aq)do if b5.hovered then if not b5.drawCondition or b5.drawCondition()then b5.toggleFunction()end;b5.hovered=false end end end;function SetButtonContains()local bn=a0+at/2;local bo=a1+au/2;for _,b5 in pairs(aq)do b5.hovered=Contains(bn,bo,b5.x,b5.y,b5.width,b5.height)end end;function DrawButton(bN,c7,hover,bn,bo,c8,c9,ca,cb,cc,cd)if type(cc)=="function"then cc=cc()end;if type(cd)=="function"then cd=cd()end;bN[#bN+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bn,bo,c8,c9)if c7 then bN[#bN+1]=e("%s'",ca)else bN[#bN+1]=cb end;if hover then bN[#bN+1]=" style='stroke:white; stroke-width:2'"else bN[#bN+1]=" style='stroke:black; stroke-width:1'"end;bN[#bN+1]="></rect>"bN[#bN+1]=e("<text x='%f' y='%f' font-size='24' fill='",bn+c8/2,bo+c9/2+5)if c7 then bN[#bN+1]="black"else bN[#bN+1]="white"end;bN[#bN+1]="' text-anchor='middle' font-family='Montserrat'>"if c7 then bN[#bN+1]=e("%s</text>",cc)else bN[#bN+1]=e("%s</text>",cd)end end;function DrawButtons(bN)local ce="rgb(50,50,50)'"local cf="rgb(210,200,200)"local cg=DrawButton;for _,b5 in pairs(aq)do local bk=b5.disableName;local bj=b5.enableName;if type(bk)=="function"then bk=bk()end;if type(bj)=="function"then bj=bj()end;if not b5.drawCondition or b5.drawCondition()then cg(bN,b5.toggleVar(),b5.hovered,b5.x,b5.y,b5.width,b5.height,cf,ce,bk,bj)end end end;function DrawTank(bN,aP,bn,ch,ci,cj,ck,cl)local cm=1;local cn=2;local co=3;local cp=4;local cq=5;local cr=6;local cs=""local ct=0;local cu=fuelY;local cv=fuelY+10;if o()==1 and not RemoteHud then cu=cu-50;cv=cv-50 end;bN[#bN+1]=[[<g class="pdim txtfuel">]]if ci=="ATMO"then cs="atmofueltank"elseif ci=="SPACE"then cs="spacefueltank"else cs="rocketfueltank"end;ct=_G[cs.."_size"]if#cj>0 then for i=1,#cj do local bI=string.sub(cj[i][cn],1,12)local cw=0;for c2=1,ct do if cj[i][cn]==f(unit[cs.."_"..c2].getData()).name then cw=c2;break end end;if aP or ck[i]==nil or cl[i]==nil then local cx=0;local cy=0;local cz=0;local cA=0;local bc=system.getTime()if cw~=0 then cl[i]=f(unit[cs.."_"..cw].getData()).percentage;ck[i]=f(unit[cs.."_"..cw].getData()).timeLeft;if ck[i]=="n/a"then ck[i]=0 end else cz=m(cj[i][cm])-cj[i][cp]cx=cj[i][co]cl[i]=d(0.5+cz*100/cx)cy=cj[i][cq]cA=cj[i][cr]if cy<=cz then ck[i]=0 else ck[i]=d(0.5+cz/((cy-cz)/(bc-cA)))end;cj[i][cq]=cz;cj[i][cr]=bc end end;if bI==ch then bI=e("%s %d",ci,i)end;if cw==0 then bI=bI.." *"end;local cB;if ck[i]==0 then cB="n/a"else cB=FormatTimeString(ck[i])end;if cl[i]~=nil then local bZ=d(cl[i]*2.55)local b_=e("rgb(%d,%d,%d)",255-bZ,bZ,0)local cC=""if cB~="n/a"and ck[i]<120 or cl[i]<5 then if aP then cC=[[class="red"]]end end;bN[#bN+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bn,cu,cC,bI,bn,cv,b_,cl[i],cB)cu=cu+30;cv=cv+30 end end end;bN[#bN+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(velocity)velocity=vec3(velocity)local bT=-math.deg(math.atan(velocity.y,velocity.z))+180;bT=bT-90;if bT<0 then bT=360+bT end;if bT>180 then bT=-180+bT-180 end;return-bT end;function getRelativeYaw(velocity)velocity=vec3(velocity)local cD=math.deg(math.atan(velocity.y,velocity.x))-90;if cD<-180 then cD=360+cD end;return cD end;function AlignToWorldVector(cE,cF)if not ad or RateOfChange>MinimumRateOfChange+0.08 or aa~=-1 then if cF==nil then cF=as end;cE=vec3(cE):normalize()local cG=vec3(core.getConstructWorldOrientationForward())-cE;local cH=-getMagnitudeInDirection(cG,core.getConstructWorldOrientationRight())*ar;local cI=-getMagnitudeInDirection(cG,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cH/2 end;if an==0 then an=cI/2 end;D=D-(cH+(cH-am)*DampingMultiplier)C=C+cI+(cI-an)*DampingMultiplier;am=cH;an=cI;if math.abs(cH)<cF and math.abs(cI)<cF then return true end;return false end end;function getAPEnableName()local bI=AutopilotTargetName;if bI==nil then bI=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bI==nil then bI="None"end;return"Engage Autopilot: "..bI end;function getAPDisableName()local bI=AutopilotTargetName;if bI==nil then bI=CustomTarget.name end;if bI==nil then bI="None"end;return"Disable Autopilot: "..bI end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cJ=50;local cK=260;local cL=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cK,cJ,at/2-cK/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cK,cJ,at/2-cK/2-50-cL.width,au/2-cJ+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cK,cJ,at/2-cK/2+cL.width+50,au/2-cJ+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cM=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cM.height,cM.x+cM.width+30,cM.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cM.height,cM.x+cM.width+30,cM.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cM.height,cM.x-200-30,cM.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cJ=60;cK=300;local bn=10;local bo=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cK,cJ,bn,bo,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cK,cJ,bn+cK+20,bo,function()return AltitudeHold end,ToggleAltitudeHold)bo=bo+cJ+20;MakeButton("Engage Autoland","Disable Autoland",cK,cJ,bn,bo,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cK,cJ,bn+cK+20,bo,function()return AutoTakeoff end,ToggleAutoTakeoff)bo=bo+cJ+20;MakeButton("Show Orbit Display","Hide Orbit Display",cK,cJ,bn,bo,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bo=bo+cJ+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cK,cJ,bn,bo,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cK,cJ,bn+cK+20,bo,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bo=bo+cJ+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cK,cJ,bn,bo,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cK,cJ,bn+cK+20,bo,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bo=bo+cJ+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cK,cJ,bn,bo,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bo=bo+cJ+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cK*2,cJ,bn,bo,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cN=Nav.axisCommandManager:getAxisCommandType(0)local cO="TRAVEL"if cN==1 then cO="CRUISE"end;if Autopilot then cO="AUTOPILOT"end;return cO end;function updateHud(bN)local bC=ae;local velocity=core.getVelocity()local bh=vec3(velocity):len()local bS=vec3(core.getWorldVertical())local bQ=vec3(core.getConstructWorldOrientationForward())local bR=vec3(core.getConstructWorldOrientationRight())local cP=vec3(core.getConstructWorldOrientationUp())local cQ=getRoll(bS,bQ,bR)local cR=cQ/180*math.pi;local cS=math.cos(cR)local cT=math.sin(cR)local bT=getPitch(bS,bQ,bR*cS+cP*cT)local cU=cQ;local cV=bT;local cW=j()local cX=d(unit.getThrottle())local cY=bh*3.6;local cZ=unit.getAxisCommandValue(0)local cO=GetFlightStyle()local c_="ROLL"local d0=unit.getClosestPlanetInfluence()>0;if cX==nil then cX=0 end;if not d0 then if bh>5 then bT=getRelativePitch(velocity)cQ=getRelativeYaw(velocity)else bT=0;cQ=0 end;c_="YAW"end;bN[#bN+1]=a5;bN[#bN+1]=ao;bN[#bN+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bN,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bN,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bN,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bN,bC)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d0 then DrawRollLines(bN,centerX,centerY,cU,c_,d0)DrawArtificialHorizon(bN,cV,cU,centerX,centerY,d0,d(getRelativeYaw(velocity)),bh)else DrawRollLines(bN,centerX,centerY,cQ,c_,d0)DrawArtificialHorizon(bN,bT,cQ,centerX,centerY,d0,d(cQ),bh)end;DrawAltitudeDisplay(bN,bC,d0)DrawPrograde(bN,velocity,bh,centerX,centerY)end end;DrawThrottle(bN,cO,cX,cZ)DrawSpeed(bN,cY)DrawWarnings(bN)DisplayOrbitScreen(bN)if screen_2 then local bw=vec3(core.getConstructWorldPos())local bn=960+bw.x/aU;local bo=450+bw.y/aV;screen_2.moveContent(aW,(bn-80)/19.2,(bo-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bN)local d1=aj;local d2=ak;local d3=aj;local d4=ak;if IsInFreeLook()and not brightHud then d1=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]d2=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bN[#bN+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],d1,d1,d3,d3,d2,d2,d4,d4,ResolutionX,ResolutionY)end;function HUDEpilogue(bN)bN[#bN+1]="</svg>"end;function DrawSpeed(bN,cY)local d5=throtPosY-10;local d6=throtPosX+10;bN[#bN+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d5=75 end;bN[#bN+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],d6,d5,d(cY))end;function DrawOdometer(bN,W,TotalDistanceTravelled,cO,X,cW)local d7=ConvertResolutionX(1240)local d8=ConvertResolutionY(55)local d9=d8+10;local cW=j()local be=core.g()local da=0;local db=0;local dc=0;RefreshLastMaxBrake(be)if ad then dc=LastMaxBrakeInAtmo else dc=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dd=vec3(core.getWorldAcceleration()):len()/9.80665;if be>0.1 then db=aB*be;da=maxThrust/be end;bN[#bN+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then d7=ConvertResolutionX(1120)d8=ConvertResolutionY(55)d9=d8+10 elseif ad then local de=ConvertResolutionX(770)bN[#bN+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],de,d8,de,d9,cW)end;bN[#bN+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],d7,d8,d7,d9,be/9.80665,d7,d8+20,d7,d9+20,dd)bN[#bN+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bN[#bN+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dc/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cO)if be>0.1 then bN[#bN+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),da/1000,ConvertResolutionX(1240),ConvertResolutionY(20),db/1000)else bN[#bN+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bN[#bN+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cO)end;bN[#bN+1]="</g>"end;function DrawThrottle(bN,cO,cX,cZ)local cu=throtPosY+10;local cv=throtPosY+20;if o()==1 and not RemoteHud then cu=55;cv=65 end;local df="CRUISE"local unit="km/h"local dg=cZ;if cO=="TRAVEL"or cO=="AUTOPILOT"then df="THROT"unit="%"dg=cX;local dh="dim"if cX<0 then dh="red"end;bN[#bN+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dh,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(cX),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bN[#bN+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cu,df,throtPosX+10,cv,dg,unit)end;function DrawVerticalSpeed(bN,bC)if bC<200000 and not ad or bC and ad then local di=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dj=0;if math.abs(di)>1 then dj=45*math.log(math.abs(di),10)if di<0 then dj=-dj end end;bN[#bN+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(di),d(dj))end end;function getHeading(c5)local dk=-vec3(core.getWorldVertical())c5=c5-c5:project_on(dk)local dl=vec3(0,0,1)dl=dl-dl:project_on(dk)local dm=dl:cross(dk)local dj=dl:angle_between(c5)*constants.rad2deg;if c5:dot(dm)<0 then dj=360-dj end;return dj end;function DrawRollLines(bN,centerX,centerY,cU,c_,d0)local dn=circleRad;local dp=20;dp=d(dp)local dq=d(cU)if d0 then for i=-45,45,5 do local dr=i;bN[#bN+1]=e([[<g transform="rotate(%f,%d,%d)">]],dr,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bN[#bN+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dn+dp-len,centerX,centerY+dn+dp)end;bN[#bN+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dn+dp-35,c_,centerX,centerY+dn+dp-25,dq)bN[#bN+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cU,centerX,centerY)bN[#bN+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dn+dp-20,centerX+5,centerY+dn+dp-20,centerX,centerY+dn+dp-15)bN[#bN+1]="</g>"end;local cD=dq;if d0 then cD=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local ds=20;local dt=d(cD)local du=0;local dv=centerY+dn+dp+20;local dw=centerX;if c_~="YAW"then dv=ConvertResolutionY(130)dw=ConvertResolutionX(960)end;local dx=[[<path class="txttick line" d="]]for i=d(dt-(ds+10)-dt%5+0.5),d(dt+ds+10+dt%5+0.5),5 do local bn=dw+-i*5+cD*5;if i%10==0 then du=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bN[#bN+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bn+5,dv-12,p)elseif i%5==0 then du=5 end;if du==10 then dx=e([[%s M %f %f v %d]],dx,bn,dv-5,du)else dx=e([[%s M %f %f v %d]],dx,bn,dv-2.5,du)end end;bN[#bN+1]=dx..[["/>]]bN[#bN+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dw-5,dv+10,dw+5,dv+10,dw,dv+5)if d0 then c_="HDG"end;bN[#bN+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dw,dv+25,dt,dw,dv+35,c_)end;function DrawArtificialHorizon(bN,cV,cU,centerX,centerY,d0,dy,bh)local dn=circleRad;local dz=d(dn*3/5)if dn>0 then local dA=d(cV)local len=0;local dx=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cU,centerX,centerY)if not ad then dx=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bN[#bN+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dn-1,centerX,centerY)bN[#bN+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dA-30-dA%5+0.5),d(dA+30+dA%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bo=centerY+-i*5+cV*5;if len==30 then dx=e([[%s M %d %f h %d]],dx,centerX-dz-len,bo,len)if ad then bN[#bN+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cU,centerX,centerY,centerX-dz+10,bo,i)bN[#bN+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cU,centerX,centerY,centerX+dz-10,bo,i)if i==0 or i==180 or i==-180 then bN[#bN+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cU,centerX,centerY,centerX-dz+20,bo,dz*2-40)end else bN[#bN+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dz+10,bo,i)bN[#bN+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dz-10,bo,i)end;dx=e([[%s M %d %f h %d]],dx,centerX+dz,bo,len)else dx=e([[%s M %d %f h %d]],dx,centerX-dz-len,bo,len)dx=e([[%s M %d %f h %d]],dx,centerX+dz,bo,len)end end;bN[#bN+1]=dx..[["/>]]local dB="PITCH"if not d0 then dB="REL PITCH"end;if cV>90 and not ad then cV=90-(cV-90)elseif cV<-90 and not ad then cV=-90-(cV+90)end;if dn>200 then if ad then if bh>w then bN[#bN+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dy)end;bN[#bN+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cU,centerX,centerY)else bN[#bN+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bN[#bN+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dz+25,centerY-5,centerX-dz+20,centerY,centerX-dz+25,centerY+5,centerX-dz+50,centerY+4,dA)bN[#bN+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dz-25,centerY-5,centerX+dz-20,centerY,centerX+dz-25,centerY+5,centerX+dz-30,centerY+4,dA)bN[#bN+1]="</g>"end;local dC=d(dn/3)bN[#bN+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dC,centerY,dn-dC)if not ad and d0 then bN[#bN+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cU,centerX,centerY,centerX-dz+10,centerY,dz*2-20)end;bN[#bN+1]="</g>"if dn<200 then if ad and bh>w then bN[#bN+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dn,dB,centerX,centerY-dn+10,dA,centerX,centerY-15,"Yaw",centerX,centerY+20,dy)else bN[#bN+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dn,dB,centerX,centerY-dn+15,dA)end end end end;function DrawAltitudeDisplay(bN,bC,d0)local dD=altMeterX;local dE=altMeterY;local dF=78;local dG=19;local dH=AboveGroundLevel()if dH~=-1 then table.insert(bN,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dD+dF,dE+dG+20,dH))end;if d0 and(bC<200000 and not ad or bC and ad)then table.insert(bN,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dD-1,dE-4,dF+2,dG+6,dD+1,dE-1,dF-4,dG))local bL=0;local dI=1;local dJ=0;local dK=bC<0;local dL=9;if dK then dL=0 end;local bC=math.abs(bC)while bL<6 do local dM=11;local dN=16;local dO=9;local dP=14;local cC="altsm"if bL>2 then dN=dN+3;dM=dM+2;dP=dP+2;dO=dO-6;cC="altbig"end;if dK then cC=cC.." red"end;local dQ=bC/dI%10;local dR=d(dQ)local dS=d((dR+1)%10)local dT=dJ;if bL==0 then dT=dQ-dR;if dK then dT=1-dT end end;if dK and(bL==0 or dJ~=0)then local dU=dS;dS=dR;dR=dU end;local dV=dN*(dT-1)local dW=dV+dN;local bn=dD+dO+(6-bL)*dM;local bo=dE+dP;table.insert(bN,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cC,bn,bo+dV,dS,bn,bo+dW,dR))bL=bL+1;dI=dI*10;if dR==dL then dJ=dT else dJ=0 end end;table.insert(bN,[[</g></g>]])end end;function DrawPrograde(bN,velocity,bh,centerX,centerY)if bh>5 and not ad or bh>w then local dn=circleRad;local dX=20;local dY=20;local dZ=vec3(velocity)local d_=getRelativePitch(dZ)local e0=getRelativeYaw(dZ)local e1=-e0/dY*dn;local e2=d_/dX*dn;local bn=centerX+e1;local bo=centerY+e2;local a3=math.sqrt(e1^2+e2^2)if a3<dn then bN[#bN+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bn,bo)else local dj=math.atan(e2,e1)local e3=centerX+dn*math.cos(dj)local e4=centerY+dn*math.sin(dj)bN[#bN+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',e3,e4)end;d_=getRelativePitch(-dZ)e0=getRelativeYaw(-dZ)e1=-e0/dY*dn;e2=d_/dX*dn;bn=centerX+e1;bo=centerY+e2;a3=math.sqrt(e1^2+e2^2)if not ad then if a3<dn then bN[#bN+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bn,bo)else local dj=math.atan(e2,e1)local e3=centerX+dn*math.cos(dj)local e4=centerY+dn*math.sin(dj)bN[#bN+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',e3,e4)end end end end;function DrawWarnings(bN)bN[#bN+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bN[#bN+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bN[#bN+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bN[#bN+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bN[#bN+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local e5=ConvertResolutionX(960)local e6=ConvertResolutionY(860)local e7=ConvertResolutionY(880)local e8=ConvertResolutionY(900)local e9=ConvertResolutionY(960)local ea=ConvertResolutionY(200)local eb=ConvertResolutionY(150)local ec=ConvertResolutionY(960)if o()==1 and not RemoteHud then e6=ConvertResolutionY(135)e7=ConvertResolutionY(155)e8=ConvertResolutionY(175)ea=ConvertResolutionY(115)eb=ConvertResolutionY(95)end;if BrakeIsOn then bN[#bN+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],e5,e6)end;if ad and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bN[#bN+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],e5,ea+50)end;if ah then bN[#bN+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],e5,ec)end;if GearExtended then if A then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],e5,e7)else bN[#bN+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],e5,e7)end;bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],e5,e8,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],e5,e9+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],e5,ea+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bN[#bN+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],e5,ea+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],e5,ea+20,AutopilotStatus)elseif LockPitch~=nil then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],e5,ea+20,d(LockPitch))elseif I then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],e5,ea+20)elseif Reentry then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],e5,ea+20)end;if AltitudeHold then if AutoTakeoff then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],e5,ea,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bN[#bN+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],e5,ea+50)end else bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],e5,ea,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bN[#bN+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],e5,ea)else bN[#bN+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],e5,ea)end end;if ProgradeIsOn then bN[#bN+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],e5,ea)end;if RetrogradeIsOn then bN[#bN+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],e5,ea)end;if TurnBurn then bN[#bN+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],e5,eb)end;if VectorToTarget then bN[#bN+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],e5,ea+30,VectorStatus)end;bN[#bN+1]="</g>"end;function DisplayOrbitScreen(bN)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ed=OrbitMapX;local ee=OrbitMapY;local ef=OrbitMapSize;local eg=4;ee=ee+eg;local eh=15;local bn=ed+ef+ed/2+eg;local bo=ee+ef/2+5+eg;local ei,ej,ek,el;ei=ef/4;el=0;bN[#bN+1]=[[<g class="pbright txtorb txtmid">]]bN[#bN+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ef+ed*2,ef+ee,eg,eg)if orbit.periapsis~=nil and orbit.apoapsis~=nil then ek=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(ei*2)ej=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/ek*(1-orbit.eccentricity)el=ei-orbit.periapsis.altitude/ek-planet.radius/ek;local em=""if orbit.periapsis.altitude<=0 then em='redout'end;bN[#bN+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],em,ed+ef/2+el+eg,ee+ef/2+eg,ei,ej)bN[#bN+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ed+ef/2+eg,ee+ef/2+eg,planet.radius/ek)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bN[#bN+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bn-35,bo-5,ed+ef/2+ei+el,bo-5)bN[#bN+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bn,bo)bo=bo+eh;bN[#bN+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getDistanceDisplayString(orbit.apoapsis.altitude))bo=bo+eh;bN[#bN+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,FormatTimeString(orbit.timeToApoapsis))bo=bo+eh;bN[#bN+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getSpeedDisplayString(orbit.apoapsis.speed))end;bo=ee+ef/2+5+eg;bn=ed-ed/2+10+eg;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bN[#bN+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bn+35,bo-5,ed+ef/2-ei+el,bo-5)bN[#bN+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bn,bo)bo=bo+eh;bN[#bN+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getDistanceDisplayString(orbit.periapsis.altitude))bo=bo+eh;bN[#bN+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,FormatTimeString(orbit.timeToPeriapsis))bo=bo+eh;bN[#bN+1]=e([[<text x="%f" y="%f">%s</text>]],bn,bo,getSpeedDisplayString(orbit.periapsis.speed))end;bN[#bN+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ed+ef/2+eg,20+eg,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local en=orbit.timeToApoapsis/orbit.period*2*math.pi;local eo=ei*math.cos(en)local ep=ej*math.sin(en)bN[#bN+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ed+ef/2+eo+el+eg,ee+ef/2+ep+eg)end;bN[#bN+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local eq=a3>100000;local b6=""if eq then b6=round(a3/1000/200,1).." SU"elseif a3<1000 then b6=round(a3,1).." M"else b6=round(a3/1000,1).." KM"end;return b6 end;function getDistanceDisplayString2(a3)local eq=a3>100000;local b6=""if eq then b6=round(a3/1000/200,2).." SU"elseif a3<1000 then b6=round(a3,2).." M"else b6=round(a3/1000,2).." KM"end;return b6 end;function getSpeedDisplayString(bh)return d(round(bh*3.6,0)+0.5).." km/h"end;function FormatTimeString(er)local es=0;local et=0;local eu=0;if er<60 then er=d(er)elseif er<3600 then es=d(er/60)er=d(er%60)elseif er<86400 then et=d(er/3600)es=d(er%3600/60)else eu=d(er/86400)et=d(er%86400/3600)end;if eu>0 then return eu.."d "..et.."h "elseif et>0 then return et.."h "..es.."m "elseif es>0 then return es.."m "..er.."s"elseif er>0 then return er.."s"else return"0s"end end;function getMagnitudeInDirection(cE,ev)cE=vec3(cE)ev=vec3(ev):normalize()local b6=cE*ev;return b6.x+b6.y+b6.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local ew=AtlasOrdered[AutopilotTargetIndex].index;local ex=aS[0][ew]if ex.center then AutopilotTargetName=ex.name;V=aY[0][ew]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=ex;for _,b5 in pairs(aY[0])do if b5.name==CustomTarget.planetname then V=b5;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local ey=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return ey end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local bh=vec3(velocity):len()local ez,eA=aZ.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eB;if not TurnBurn then _,eB=GetAutopilotBrakeDistanceAndTime(bh)else _,eB=GetAutopilotTBBrakeDistanceAndTime(bh)end;local eC=0;local eD=0;if AutopilotCruising or not Autopilot and bh>5 then eD=aZ.computeTravelTime(bh,0,AutopilotDistance)elseif P+ez<AutopilotDistance then eC=AutopilotDistance-(P+ez)eD=aZ.computeTravelTime(8333.0556,0,eC)else local eE=(AutopilotDistance-P)/ez;ez=AutopilotDistance-P;eA=eA*eE end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eD elseif AutopilotBraking then return eB elseif AutopilotCruising then return eD+eB else return eA+Q+eD end end;function GetAutopilotBrakeDistanceAndTime(bh)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bh)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bh,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eF=-1;local eG=-1;if vBooster then eF=vBooster.distance()end;if hover then eG=hover.distance()end;if eF~=-1 and eG~=-1 then if eF<eG then return eF else return eG end elseif eF~=-1 then return eF elseif eG~=-1 then return eG else return-1 end end;function AboveGroundLevel()local eH=-1;local eI=aa;if telemeter_1 then eH=telemeter_1.getDistance()end;if eI~=-1 and eH~=-1 then if eI<eH then return eI else return eH end elseif eI~=-1 then return eI else return eH end end;function tablelength(eJ)local eK=0;for _ in pairs(eJ)do eK=eK+1 end;return eK end;function BeginProfile(eL)ProfileTimeStart=system.getTime()end;function EndProfile(eL)local eM=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eM;ProfileCount=ProfileCount+1;if eM>ProfileTimeMax then ProfileTimeMax=eM end;if eM<ProfileTimeMin then ProfileTimeMin=eM end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eN=ProfileTimeSum;local eO=ProfileTimeSum/ProfileCount;local eP=ProfileTimeMin;local eQ=ProfileTimeMax;local eR=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eN,eO,eP,eQ,eR))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eS=radar_1.getEntries()local eT=radar_1.getData()local eU=ConvertResolutionX(1770)local eV=ConvertResolutionY(330)if#eS>0 then local eW=eT:find('identifiedConstructs":%[%]')if eW==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if eW~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],eU,eV,#eS)local eX={}for b4,b5 in pairs(eS)do if radar_1.hasMatchingTransponder(b5)==1 then table.insert(eX,b5)end end;if#eX>0 then local bo=ConvertResolutionY(15)local bn=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bn,bo)for b4,b5 in pairs(eX)do bo=bo+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bn,bo,radar_1.getConstructName(b5))end end else local eY;eY=eT:find('worksInEnvironment":false')if eY then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],eU,eV)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],eU,eV)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bN,eZ)if eZ~="empty"then bN[#bN+1]=[[<text class="msg" x="50%%" y="310" >]]for e_ in string.gmatch(eZ,"([^\n]+)")do bN[#bN+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],e_)end;bN[#bN+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bc=system.getTime()local velocity=vec3(core.getWorldVelocity())local cY=vec3(velocity):len()local f0=bc-ag;if cY>1.38889 then cY=cY/1000;local f1=cY*(bc-ag)TotalDistanceTravelled=TotalDistanceTravelled+f1;W=W+f1 end;X=X+f0;TotalFlightTime=TotalFlightTime+f0;ag=bc end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,atmos=false,gravity=0},[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for b4,b5 in pairs(aS[0])do if av==nil or b5.center.x<av then av=b5.center.x end;if aw==nil or b5.center.x>aw then aw=b5.center.x end;if ax==nil or b5.center.y<ax then ax=b5.center.y end;if ay==nil or b5.center.y>ay then ay=b5.center.y end end;aT=""local f2=1.1*(aw-av)/1920;local f3=1.4*(ay-ax)/1080;for b4,b5 in pairs(aS[0])do local bn=960+b5.center.x/f2;local bo=540+b5.center.y/f3;aT=aT..'<circle cx="'..bn..'" cy="'..bo..'" r="'..b5.radius/f2*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(b5.name,"Moon")and not string.match(b5.name,"Sanctuary")and not string.match(b5.name,"Space")then aT=aT.."<text x='"..bn.."' y='"..bo+b5.radius/f2*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..b5.name.."</text>"end end;local bw=vec3(core.getConstructWorldPos())local bn=960+bw.x/f2;local bo=540+bw.y/f3;aT=aT..'<circle cx="'..bn..'" cy="'..bo..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bn.."' y='"..bo-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=f2;aV=f3;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bw=vec3(core.getConstructWorldPos())local bn=960+bw.x/f2;local bo=540+bw.y/f3;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bn-80)/19.20,(bo-80)/10.80,aT)end end;function PlanetRef()local function f4(f5)return type(f5)=='number'end;local function f6(f5)return type(tonumber(f5))=='number'end;local function f7(f8)return type(f8)=='table'end;local function f9(fa)return type(fa)=='string'end;local function fb(b5)return f7(b5)and f4(b5.x and b5.y and b5.z)end;local function fc(fd)return f7(fd)and f4(fd.latitude and fd.longitude and fd.altitude and fd.bodyId and fd.systemId)end;local fe=math.pi/180;local ff=180/math.pi;local fg=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bx='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fh=utils.clamp;local function fi(fj,fk)if fj==0 then return math.abs(fk)<1e-09 end;if fk==0 then return math.abs(fj)<1e-09 end;return math.abs(fj-fk)<math.max(math.abs(fj),math.abs(fk))*fg end;local function fl(f5)local b6=string.gsub(string.reverse(e('%.4f',f5)),'^0*%.?','')return b6==''and'0'or string.reverse(b6)end;local function fm(fn)if fb(fn)then return e('{x=%.3f,y=%.3f,z=%.3f}',fn.x,fn.y,fn.z)end;if f7(fn)and not getmetatable(fn)then local fo={}local fp=next(fn)if type(fp)=='nil'or fp==1 then fo=fn else for b4,b5 in pairs(fn)do local dg=fm(b5)if type(b4)=='number'then table.insert(fo,e('[%s]=%s',b4,dg))else table.insert(fo,e('%s=%s',b4,dg))end end end;return e('{%s}',table.concat(fo,','))end;if f9(fn)then return e("'%s'",fn:gsub("'",[[\']]))end;return tostring(fn)end;local fq={}fq.__index=fq;fq.__tostring=function(fn,fr)local fs={}for b4 in pairs(fn)do table.insert(fs,b4)end;table.sort(fs)local fo={}for _,b4 in ipairs(fs)do local dg=fm(fn[b4])if type(b4)=='number'then table.insert(fo,e('[%s]=%s',b4,dg))else table.insert(fo,e('%s=%s',b4,dg))end end;if fr then return e('%s%s',fr,table.concat(fo,',\n'..fr))end;return e('{%s}',table.concat(fo,','))end;fq.__eq=function(ft,fu)return ft.planetarySystemId==fu.planetarySystemId and ft.bodyId==fu.bodyId and fi(ft.radius,fu.radius)and fi(ft.center.x,fu.center.x)and fi(ft.center.y,fu.center.y)and fi(ft.center.z,fu.center.z)and fi(ft.GM,fu.GM)end;local function fv(by,bz,fw,fx,fy)assert(f6(by),'Argument 1 (planetarySystemId) must be a number:'..type(by))assert(f6(bz),'Argument 2 (bodyId) must be a number:'..type(bz))assert(f6(fw),'Argument 3 (radius) must be a number:'..type(fw))assert(f7(fx),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fx))assert(f6(fy),'Argument 5 (GM) must be a number:'..type(fy))return setmetatable({planetarySystemId=tonumber(by),bodyId=tonumber(bz),radius=tonumber(fw),center=vec3(fx),GM=tonumber(fy)},fq)end;local fz={}fz.__index=fz;fz.__tostring=function(fA)return e('::pos{%d,%d,%s,%s,%s}',fA.systemId,fA.bodyId,fl(fA.latitude*ff),fl(fA.longitude*ff),fl(fA.altitude))end;fz.__eq=function(ft,fu)return ft.bodyId==fu.bodyId and ft.systemId==fu.systemId and fi(ft.latitude,fu.latitude)and fi(ft.altitude,fu.altitude)and(fi(ft.longitude,fu.longitude)or fi(ft.latitude,math.pi/2)or fi(ft.latitude,-math.pi/2))end;local function fB(fC,bz,bA,bB,bC)local by=fC;if f9(fC)and not bB and not bC and not bz and not bA then by,bz,bA,bB,bC=string.match(fC,bx)assert(by,'Argument 1 (position string) is malformed.')else assert(f6(by),'Argument 1 (systemId) must be a number:'..type(by))assert(f6(bz),'Argument 2 (bodyId) must be a number:'..type(bz))assert(f6(bA),'Argument 3 (latitude) must be in degrees:'..type(bA))assert(f6(bB),'Argument 4 (longitude) must be in degrees:'..type(bB))assert(f6(bC),'Argument 5 (altitude) must be in meters:'..type(bC))end;by=tonumber(by)bz=tonumber(bz)bA=tonumber(bA)bB=tonumber(bB)bC=tonumber(bC)if bz==0 then return setmetatable({latitude=bA,longitude=bB,altitude=bC,bodyId=bz,systemId=by},fz)end;return setmetatable({latitude=fe*fh(bA,-90,90),longitude=fe*(bB%360),altitude=bC,bodyId=bz,systemId=by},fz)end;local fD={}fD.__index=fD;fD.__tostring=function(fn,fr)local fE=fr and fr..'  'local fF={}local fs={}for b4 in pairs(fn)do table.insert(fs,b4)end;table.sort(fs)for _,fG in ipairs(fs)do bdy=fn[fG]local fH=fq.__tostring(bdy,fE)if fr then table.insert(fF,e('[%s]={\n%s\n%s}',fG,fH,fr))else table.insert(fF,e('  [%s]=%s',fG,fH))end end;if fr then return e('\n%s%s%s',fr,table.concat(fF,',\n'..fr),fr)end;return e('{\n%s\n}',table.concat(fF,',\n'))end;local function fI(fJ)local aS={}local pid;for _,b5 in pairs(fJ)do local bJ=b5.planetarySystemId;if type(bJ)~='number'then error('Invalid planetary system ID: '..tostring(bJ))elseif pid and bJ~=pid then error('Mismatch planetary system IDs: '..bJ..' and '..pid)end;local fK=b5.bodyId;if type(fK)~='number'then error('Invalid body ID: '..tostring(fK))elseif aS[fK]then error('Duplicate body ID: '..tostring(fK))end;setmetatable(b5.center,getmetatable(vec3.unit_x))aS[fK]=setmetatable(b5,fq)pid=bJ end;return setmetatable(aS,fD)end;aX={}local function fL(fJ)return setmetatable({galaxyAtlas=fJ or{}},aX)end;aX.__index=function(f8,i)if type(i)=='number'then local system=f8.galaxyAtlas[i]return fI(system)end;return rawget(aX,i)end;aX.__pairs=function(fn)return function(f8,b4)local fM,nv=next(f8,b4)return fM,nv and fI(nv)end,fn.galaxyAtlas,nil end;aX.__tostring=function(fn)local fN={}for _,fO in pairs(fn or{})do local fP=fO:getPlanetarySystemId()local fQ=fD.__tostring(fO,'    ')table.insert(fN,e('  [%s]={%s\n  }',fP,fQ))end;return e('{\n%s\n}\n',table.concat(fN,',\n'))end;aX.BodyParameters=fv;aX.MapPosition=fB;aX.PlanetarySystem=fI;function aX.createBodyParameters(fR,bz,fS,fT,fU,fV,fW)assert(f6(fR),'Argument 1 (planetarySystemId) must be a number:'..type(fR))assert(f6(bz),'Argument 2 (bodyId) must be a number:'..type(bz))assert(f6(fS),'Argument 3 (surfaceArea) must be a number:'..type(fS))assert(f7(fT),'Argument 4 (aPosition) must be an array or vec3:'..type(fT))assert(f7(fU),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(fU))assert(f6(fV),'Argument 6 (altitude) must be in meters:'..type(fV))assert(f6(fW),'Argument 7 (gravityAtPosition) must be number:'..type(fW))local fw=math.sqrt(fS/4/math.pi)local a3=fw+fV;local fX=vec3(fT)+a3*vec3(fU)local fy=fW*a3*a3;return fv(fR,bz,fw,fX,fy)end;aX.isMapPosition=fc;function aX:getPlanetarySystem(fC)if i==nil then i=0 end;if nv==nil then nv=0 end;local fR=fC;if fc(fC)then fR=fC.systemId end;if type(fR)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fD then system=fI(system)end;return system end end end;function fD:castIntersections(fY,ev,fZ,f_)local fZ=fZ or function(g0)return 1.05*g0.radius end;local g1={}if f_ then for _,i in ipairs(f_)do g1[i]=self[i]end else f_={}for b4,g0 in pairs(self)do table.insert(f_,b4)g1[b4]=g0 end end;local function g2(g3,g4)local g5=g1[g3].center-fY;local g6=g1[g4].center-fY;return g5:len()<g6:len()end;table.sort(f_,g2)local g7=ev:normalize()for i,bJ in ipairs(f_)do local g0=g1[bJ]local g8=g0.center-fY;local fw=fZ(g0)local g9=g8:dot(g7)local ga=g9^2-(g8:len2()-fw^2)if ga>=0 then local gb=math.sqrt(ga)local gc=g9+gb;local gd=g9-gb;if gd>0 then return g0,gc,gd elseif gc>0 then return g0,gc,nil end end end;return nil,nil,nil end;function fD:closestBody(ge)assert(type(ge)=='table','Invalid coordinates.')local gf,g0;local gg=vec3(ge)for _,gh in pairs(self)do local gi=(gh.center-gg):len2()if not g0 or gi<gf then g0=gh;gf=gi end end;return g0 end;function fD:convertToBodyIdAndWorldCoordinates(fC)local gj=fC;if f9(fC)then gj=fB(fC)end;if gj.bodyId==0 then return 0,vec3(gj.latitude,gj.longitude,gj.altitude)end;local gh=self:getBodyParameters(gj)if gh then return gj.bodyId,gh:convertToWorldCoordinates(gj)end end;function fD:getBodyParameters(fC)local bz=fC;if fc(fC)then bz=fC.bodyId end;assert(f6(bz),'Argument 1 (bodyId) must be a number:'..type(bz))return self[bz]end;function fD:getPlanetarySystemId()local _,b5=next(self)return b5 and b5.planetarySystemId end;function fq:convertToMapPosition(fx)assert(f7(fx),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fx))local gk=vec3(fx)if self.bodyId==0 then return setmetatable({latitude=gk.x,longitude=gk.y,altitude=gk.z,bodyId=0,systemId=self.planetarySystemId},fz)end;local gl=gk-self.center;local a3=gl:len()local bC=a3-self.radius;local bA=0;local bB=0;if not fi(a3,0)then local gm=math.atan(gl.y,gl.x)bB=gm>=0 and gm or 2*math.pi+gm;bA=math.pi/2-math.acos(gl.z/a3)end;return setmetatable({latitude=bA,longitude=bB,altitude=bC,bodyId=self.bodyId,systemId=self.planetarySystemId},fz)end;function fq:convertToWorldCoordinates(fC)local gj=f9(fC)and fB(fC)or fC;if gj.bodyId==0 then return vec3(gj.latitude,gj.longitude,gj.altitude)end;assert(fc(gj),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gj.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gj.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bD=math.cos(gj.latitude)return self.center+(self.radius+gj.altitude)*vec3(bD*math.cos(gj.longitude),bD*math.sin(gj.longitude),math.sin(gj.latitude))end;function fq:getAltitude(fx)return(vec3(fx)-self.center):len()-self.radius end;function fq:getDistance(fx)return(vec3(fx)-self.center):len()end;function fq:getGravity(fx)local gn=self.center-vec3(fx)local go=gn:len2()return self.GM/go*gn/math.sqrt(go)end;return setmetatable(aX,{__call=function(_,...)return fL(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function f9(fa)return type(fa)=='string'end;local function f7(f8)return type(f8)=='table'end;local function fi(fj,fk)if fj==0 then return math.abs(fk)<1e-09 end;if fk==0 then return math.abs(fj)<1e-09 end;return math.abs(fj-fk)<math.max(math.abs(fj),math.abs(fk))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bC)assert(self.body)local a3=bC+self.body.radius;if not fi(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fC,velocity)assert(self.body)assert(f7(fC)or f9(fC))assert(f7(velocity))local bw=(f9(fC)or PlanetRef.isMapPosition(fC))and self.body:convertToWorldCoordinates(fC)or vec3(fC)local b5=vec3(velocity)local gp=bw-self.body.center;local g6=b5:len2()local gq=gp:len()local gr=self.body.GM;local gs=((g6-gr/gq)*gp-gp:dot(b5)*b5)/gr;local fj=gr/(2*gr/gq-g6)local gt=gs:len()local g7=gs:normalize()local gu=fj*(1-gt)local gv=fj*(1+gt)local gw=gu*g7+self.body.center;local gx=gt<=1 and-gv*g7+self.body.center or nil;local gy=math.sqrt(fj*gr*(1-gt*gt))local gz=gx and 2*math.pi*math.sqrt(fj^3/gr)local gA=math.acos(gs:dot(gp)/(gt*gq))if gp:dot(b5)<0 then gA=-(gA-2*math.pi)end;local gB=math.acos((math.cos(gA)+gt)/(1+gt*math.cos(gA)))local gC=gB;if gC<0 then gC=gC+2*math.pi end;local gD=gC-gt*math.sin(gC)local gE=0;local gF=0;local gG=0;if gz~=nil then gE=gD/(2*math.pi/gz)gF=gz-gE;gG=gF+gz/2;if gA-math.pi>0 then gF=gE;gG=gF+gz/2 end;if gG>gz then gG=gG-gz end end;return{periapsis={position=gw,speed=gy/gu,circularOrbitSpeed=math.sqrt(gr/gu),altitude=gu-self.body.radius},apoapsis=gx and{position=gx,speed=gy/gv,circularOrbitSpeed=math.sqrt(gr/gv),altitude=gv-self.body.radius},currentVelocity=b5,currentPosition=bw,eccentricity=gt,period=gz,eccentricAnomaly=gB,meanAnomaly=gD,timeToPeriapsis=gF,timeToApoapsis=gG}end;local function gH(gI)local gh=PlanetRef.BodyParameters(gI.planetarySystemId,gI.bodyId,gI.radius,gI.center,gI.GM)return setmetatable({body=gh},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gH(...)end})end;function Kinematics()local aZ={}local gJ=30000000/3600;local gK=gJ*gJ;local gL=100;local function gM(b5)return 1/math.sqrt(1-b5*b5/gK)end;function aZ.computeAccelerationTime(gN,gO,gP)local gQ=gJ*math.asin(gN/gJ)return(gJ*math.asin(gP/gJ)-gQ)/gO end;function aZ.computeDistanceAndTime(gN,gP,gR,gS,gT,gU)gT=gT or 0;gU=gU or 0;local gV=gN<=gP;local gW=gS*(gV and 1 or-1)/gR;local gX=-gU/gR;local gY=gW+gX;if gV and gY<=0 or not gV and gY>=0 then return-1,-1 end;local gZ,g_=0,0;if gW~=0 and gT>0 then local gQ=math.asin(gN/gJ)local h0=math.pi*(gW/2+gX)local h1=gW*gT;local h2=gJ*math.pi;local b5=function(f8)local c8=(h0*f8-h1*math.sin(math.pi*f8/2/gT)+h2*gQ)/h2;local h3=math.tan(c8)return gJ*h3/math.sqrt(h3*h3+1)end;local h4=gV and function(fa)return fa>=gP end or function(fa)return fa<=gP end;g_=2*gT;if h4(b5(g_))then local h5=0;while math.abs(g_-h5)>0.5 do local f8=(g_+h5)/2;if h4(b5(f8))then g_=f8 else h5=f8 end end end;local h6=gN;local h7=g_/gL;for h8=1,gL do local bh=b5(h8*h7)gZ=gZ+(bh+h6)*h7/2;h6=bh end;if g_<2*gT then return gZ,g_ end;gN=h6 end;local gQ=gJ*math.asin(gN/gJ)local b7=(gJ*math.asin(gP/gJ)-gQ)/gY;local h9=gK*math.cos(gQ/gJ)/gY;local a3=h9-gK*math.cos((gY*b7+gQ)/gJ)/gY;return a3+gZ,b7+g_ end;function aZ.computeTravelTime(gN,gO,a3)if a3==0 then return 0 end;if gO>0 then local gQ=gJ*math.asin(gN/gJ)local h9=gK*math.cos(gQ/gJ)/gO;return(gJ*math.acos(gO*(h9-a3)/gK)-gQ)/gO end;assert(gN>0,'Acceleration and initial speed are both zero.')return a3/gN end;function aZ.lorentz(b5)return gM(b5)end;return aZ end;function script.onStart()VERSION_NUMBER=4.924;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bH=j()if door and(bH>0 or bH==0 and ae<10000)then for _,b5 in pairs(door)do b5.toggle()end end;if switch then for _,b5 in pairs(switch)do b5.toggle()end end;if forcefield and(bH>0 or bH==0 and ae<10000)then for _,b5 in pairs(forcefield)do b5.toggle()end end;if dbHud_1 then if not Y then for b4,b5 in pairs(b)do dbHud_1.setStringValue(b5,g(_G[b5]))end;for b4,b5 in pairs(a)do dbHud_1.setStringValue(b5,g(_G[b5]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(ha)if ha=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hb=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hb then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif ha=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bN={}local cO=GetFlightStyle()DrawOdometer(bN,W,TotalDistanceTravelled,cO,X)CheckDamage(bN)a5=table.concat(bN,"")collectgarbage("collect")elseif ha=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local b6=json.decode(dbHud_1.getStringValue("SavedLocations"))if b6~=nil then _G["SavedLocations"]=b6;local bL=-1;local bG;for b4,b5 in pairs(SavedLocations)do if b5.name and b5.name=="SatNav Location"then bL=b4;break end end;if bL~=-1 then bG=SavedLocations[bL]bL=-1;for b4,b5 in pairs(aS[0])do if b5.name and b5.name=="SatNav Location"then bL=b4;break end end;if bL>-1 then aS[0][bL]=bG end;UpdateAtlasLocationsList()K=bG.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif ha=="msgTick"then local bN={}DisplayMessage(bN,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif ha=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif ha=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())if planet.name=="Space"then planet=aS[0][2]end;kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)aa=hoverDetectGround()local hc=system.getMouseDeltaX()local hd=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local he=velMag>8334;if velMag>SpaceSpeedLimit/3.6 and not ad and not Autopilot then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not he and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=he;if ad and j()>0.09 then if not ai then if velMag>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if velMag<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bN={}HUDPrologue(bN)if showHud then updateHud(bN)else DisplayOrbitScreen(bN)DrawWarnings(bN)end;HUDEpilogue(bN)bN[#bN+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bN,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bN)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bN)if screen_1.getMouseState()==1 then CheckButtons()end;bN[#bN+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+hc;a1=a1+hd end;SetButtonContains()DrawButtons(bN)if not b0 and not b1 then local hf=table.concat(bN,"")bN={}bN[#bN+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bN[#bN+1]=aT;bN[#bN+1]=hf;bN[#bN+1]="</body>"b0=true;bN[#bN+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bN,"")system.setScreen(content)elseif b1 then local hf=table.concat(bN,"")bN={}bN[#bN+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bN[#bN+1]=aT;bN[#bN+1]=hf;bN[#bN+1]="</body>"end;if not b0 then bN[#bN+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+hc;a1=a1+hd;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(hd,-100,100)+0.5)*2*y;D=(-utils.smoothstep(hc,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bN)end else SetButtonContains()DrawButtons(bN)end;bN[#bN+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bN[#bN+1]=[[</svg></body>]]content=table.concat(bN,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>w then local hg=AlignToWorldVector(vec3(velocity),0.01)if a7 then b2=true;if velMag<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b2=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif velMag>w then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)end;P=P;Q=Q;local hh=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local hi=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local hj=getMagnitudeInDirection(hi,AutopilotShipUp)local hk=getMagnitudeInDirection(hi,AutopilotShipRight)local hl=-hk*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local hm=-hj*AutopilotDistance*velMag*TrajectoryAlignmentStrength;hh=AutopilotTargetCoords+-hl*vec3(AutopilotShipRight)+-hm*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hh)-vec3(core.getConstructWorldPos())):len()local hn=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hn)..'", "unit":""}')local ho=true;local hp=(V.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hp)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then ho=AlignToWorldVector((hh-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then ho=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not ho or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hp-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and velMag<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if ho then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif ho then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hq=0;local bw=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hr=bw-vec3(core.getConstructWorldPos())local hs=vec3(hr):project_on(vec3(core.getConstructWorldOrientationForward())):len()local ht=vec3(hr):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hs*hs+ht*ht)AlignToWorldVector(hr:normalize())local hu=40;local hv=a3<hu;local hw=100;local hx=utils.clamp((a3-hu)/2,10,hw)C=0;local ho=math.abs(D)<0.1;if ho and velMag<hx and not hv then BrakeIsOn=false;hq=-20 else BrakeIsOn=true;hq=0 end;local bQ=vec3(core.getConstructWorldOrientationForward())local bR=vec3(core.getConstructWorldOrientationRight())local bS=vec3(core.getWorldVertical())local bT=getPitch(bS,bQ,bR)local hy=1.0;if math.abs(hq-bT)>hy then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hq-bT)local hz=pitchPID:get()C=hz end end;local dk=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d0=unit.getClosestPlanetInfluence()>0;local bC=ae;local hA=HoldAltitude-bC;local hB=500+velMag;local hq=(utils.smoothstep(hA,-hB,hB)-0.5)*2*MaxPitch;if not AltitudeHold then hq=0 end;if LockPitch~=nil then if d0 then hq=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hC=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hC then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hC)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hq=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hq=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hD=C;if velMag>w and not a8 then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cG=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cG)local hE=cG:len()-cG:project_on(dk):len()local bi=LastMaxBrakeInAtmo;local di=velocity.x*dk.x+velocity.y*dk.y+velocity.z*dk.z;local hF=velocity:len()-math.abs(di)local hG=vec3(core.getWorldAirFrictionAcceleration())if bi~=nil then P,Q=aZ.computeDistanceAndTime(hF,0,n(),0,0,bi+(hG:len()-hG:project_on(dk):len())*n())else P,Q=aZ.computeDistanceAndTime(hF,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hE<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hE>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hE end;C=hD;local bQ=vec3(core.getConstructWorldOrientationForward())local bR=vec3(core.getConstructWorldOrientationRight())local bS=vec3(core.getWorldVertical())local eH=-1;local bT=getPitch(bS,bQ,bR)local hy=0.1;if BrakeLanding then hq=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local di=velocity.x*dk.x+velocity.y*dk.y+velocity.z*dk.z;eH=aa;if eH>-1 then if math.abs(hq-bT)<hy then b2=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-dk)<0.99 then BrakeIsOn=true elseif di<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hq<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and velMag<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hq-bT)>hy then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hq-bT)local hz=pitchPID:get()C=C+hz end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hH=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hI=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hJ=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hK=G;local hL=vec3(core.getWorldVertical())local hM=vec3(core.getConstructWorldOrientationUp())local hN=vec3(core.getConstructWorldOrientationForward())local hO=vec3(core.getConstructWorldOrientationRight())local hP=vec3(core.getWorldVelocity())local hQ=vec3(core.getWorldVelocity()):normalize()local hR=getRoll(hL,hN,hO)local hS=math.abs(hR)local hT=utils.sign(hR)local j=j()local hU=vec3(core.getWorldAngularVelocity())local hV=hH*pitchSpeedFactor*hO+hI*rollSpeedFactor*hN+hJ*yawSpeedFactor*hM;if hL:len()>0.01 and j>0.0 or ProgradeIsOn then local hW=1.0;if b2==true and hS>hW and hI==0 then local hX=utils.clamp(0,hS-30,hS+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hX-hR)local hY=rollPID:get()hV=hV+hY*hN end end;if hL:len()>0.01 and j>0.0 then local hZ=20.0;if turnAssist==true and hS>hZ and hH==0 and hJ==0 then local h_=turnAssistFactor*0.1;local i0=turnAssistFactor*0.025;local i1=(hS-hZ)/(180-hZ)*180;local i2=0;if i1<90 then i2=i1/90 elseif i1<180 then i2=(180-i1)/90 end;i2=i2*i2;local i3=-hT*i0*(1.0-i2)local i4=h_*i2;hV=hV+i4*hO+i3*hM end end;local i5=1;local i6=0;local i7=1;local i8=torqueFactor*(hV-hU)local i9=vec3(core.getWorldAirFrictionAngularAcceleration())i8=i8-i9;Nav:setEngineTorqueCommand('torque',i8,i5,'airfoil','','',i7)local ia=-hK*(brakeSpeedFactor*hP+brakeFlatFactor*hQ)Nav:setEngineForceCommand('brake',ia)local ib=''local ic=vec3()local id=false;local ie='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then ie=ie..ExtraLongitudeTags end;local ig=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ig==axisCommandType.byThrottle then local ih=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ie,axisCommandId.longitudinal)Nav:setEngineForceCommand(ie,ih,i5)elseif ig==axisCommandType.byTargetSpeed then local ih=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)ib=ib..' , '..ie;ic=ic+ih;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then id=true end end;local ii='thrust analog lateral 'if ExtraLateralTags~="none"then ii=ii..ExtraLateralTags end;local ij=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ij==axisCommandType.byThrottle then local ik=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ii,axisCommandId.lateral)Nav:setEngineForceCommand(ii,ik,i5)elseif ij==axisCommandType.byTargetSpeed then local il=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)ib=ib..' , '..ii;ic=ic+il end;local im='thrust analog vertical 'if ExtraVerticalTags~="none"then im=im..ExtraVerticalTags end;local io=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if io==axisCommandType.byThrottle then local ip=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(im,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(im,ip,i5,'airfoil','ground','',i7)else Nav:setEngineForceCommand(im,vec3(),i5)Nav:setEngineForceCommand('airfoil vertical',ip,i5,'airfoil','','',i7)Nav:setEngineForceCommand('ground vertical',ip,i5,'ground','','',i7)end elseif io==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),i5)end;local iq=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)ib=ib..' , '..im;ic=ic+iq end;if ic:len()>constants.epsilon then if G~=0 or id or math.abs(hQ:dot(hN))<0.95 then ib=ib..', brake'end;Nav:setEngineForceCommand(ib,ic,i6,'','','',i7)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bh=vec3(core.getVelocity()):len()local ir=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local is=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bh*3.6>is*(1-ir)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh*3.6<is*(1-ir)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local it=unit.getThrottle()local hx=it/100;if j==0 then hx=hx*MaxGameVelocity;if bh>=hx*(1-ir)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh<hx*(1-ir)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hx=hx*ReentrySpeed/3.6;if bh>=hx*(1-ir)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bh<hx*(1-ir)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,b6=coroutine.resume(beginSetup)if b6 then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iu)if iu=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iu=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iu=="forward"then B=B-1 elseif iu=="backward"then B=B+1 elseif iu=="left"then E=E-1 elseif iu=="right"then E=E+1 elseif iu=="yawright"then F=F-1 elseif iu=="yawleft"then F=F+1 elseif iu=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iu=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iu=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iu=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iu=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iu=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iu=="option1"then IncrementAutopilotTargetIndex()v=false elseif iu=="option2"then DecrementAutopilotTargetIndex()v=false elseif iu=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iu=="option4"then ToggleAutopilot()v=false elseif iu=="option5"then ToggleLockPitch()v=false elseif iu=="option6"then ToggleAltitudeHold()v=false elseif iu=="option7"then wipeSaveVariables()v=false elseif iu=="option8"then ToggleFollowMode()v=false elseif iu=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iu=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iu=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iu=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iu=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iu=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iu=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iu=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iu=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iu)if iu=="forward"then B=0 elseif iu=="backward"then B=0 elseif iu=="left"then E=0 elseif iu=="right"then E=0 elseif iu=="yawright"then F=0 elseif iu=="yawleft"then F=0 elseif iu=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iu=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iu=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iu=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iu=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iu=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iu=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iu=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iu=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iu)if iu=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iu=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iu=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iu=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iv)local i;local iw="/commands /setname /G /agg /addlocation"local ix,iy;local iz="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n/".."addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iv," ")if i~=nil then ix=string.sub(iv,0,i-1)iy=string.sub(iv,i+1)elseif i==nil or not string.find(iw,ix)then for e_ in string.gmatch(iz,"([^\n]+)")do c(e_)end;return end;if ix=="/setname"then if iy==nil or iy==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iy)else K="Select a saved target to rename first"end elseif ix=="/addlocation"then if iy==nil or iy==""or string.find(iy,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iy,"::")local bF=string.sub(iy,1,i-2)local bw=string.sub(iy,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bx='::pos{'..p..','..p..','..p..','..p..','..p..'}'local by,bz,bA,bB,bC=string.match(bw,bx)local planet=aS[tonumber(by)][tonumber(bz)]AddNewLocationByWaypoint(bF,planet,bw)K="Added "..bF.." to saved locations,\nplanet "..planet.name.." at "..bw;a2=5 elseif ix=="/agg"then if iy==nil or iy==""then K="Usage: /agg targetheight"return end;iy=tonumber(iy)if iy<1000 then iy=1000 end;AntigravTargetAltitude=iy;K="AGG Target Height set to "..iy elseif ix=="/G"then if iy==nil or iy==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iy=="dump"then for b4,b5 in pairs(a)do if type(_G[b5])=="boolean"then if _G[b5]==true then c(b5 .." true")else c(b5 .." false")end elseif _G[b5]==nil then c(b5 .." nil")else c(b5 .." ".._G[b5])end end;return end;i=string.find(iy," ")local iA=string.sub(iy,0,i-1)local iB=string.sub(iy,i+1)for b4,b5 in pairs(a)do if b5==iA then K="Variable "..iA.." changed to "..iB;local iC=type(_G[b5])if iC=="number"then iB=tonumber(iB)elseif iC=="boolean"then if string.lower(iB)=="true"then iB=true else iB=false end end;_G[b5]=iB;return end end;K="No such global variable: "..iA end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
