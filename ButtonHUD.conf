name: ButtonsHud - Dimencia and Archaegeo v4.900 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        ResolutionY = 1080 --export: Default is 1080, automatically scales, variable for use for wierd resolutions (1920x1200, etc)
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;DisplayOrbit=true;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav"}local b={"BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;local p=false;local q=true;local r=55;local s=false;local t=1;local u=1;local v=false;local w=0;local x=0;local y=0;local z=0;local A=0;local B=0;local C=0;local D=false;local E=false;local F="empty"local G=1;local H=5;local I=5;local J=false;local K,L=0;local M,N=0;local O=false;local P=false;local Q=nil;local R=0;local S=0;local T=false;local U=0;local V=0;local W=0;local X=3;local Y=0;local Z=""local a0=""local a1=0;local a2=false;local a3=false;local a4=false;local a5=-1;local a6=false;local a7=""local a8=j()>0;local a9=core.getAltitude()local aa=core.getElementIdList()local ab=system.getTime()local ac=nil;local ad={}local ae=0;local af=0;local ag=""local ah=true;local ai={}local aj=1;local ak=0.001;local al=ResolutionX;local am=ResolutionY;local an=nil;local ao=nil;local ap=nil;local aq=nil;local ar=false;local as=false;local at=0;local au=nil;local av={}local aw={}local ax={}local ay=0;local az=false;local aA={}local aB={}local aC=d(1/apTickRate)*2;local aD={}local aE={}local aF={}local aG={}local aH=false;local aI=16;local aJ=0;function script.onStart()VERSION_NUMBER=4.900;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})if dbHud_1 then local aK=dbHud_1.hasKey;if not useTheseSettings then for aL,aM in pairs(a)do if aK(aM)then local aN=f(dbHud_1.getStringValue(aM))if aN~=nil then c(aM.." "..dbHud_1.getStringValue(aM))_G[aM]=aN;ar=true end end end end;coroutine.yield()for aL,aM in pairs(b)do if aK(aM)then local aN=f(dbHud_1.getStringValue(aM))if aN~=nil then c(aM.." "..dbHud_1.getStringValue(aM))_G[aM]=aN;ar=true end end end;if useTheseSettings then F="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"elseif ar then F="Loaded Saved Variables (see Lua Chat Tab for list)"else F="No Saved Variables Found - Stand up / leave remote to save settings"end else F="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;coroutine.yield()local aO=system.getTime()if LastStartTime+180<aO then LastMaxBrakeInAtmo=0 end;LastStartTime=aO;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then F="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick"end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=a9 end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;local aP=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local aQ=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]for aL in pairs(aa)do local type=l(aa[aL])if type=="landing gear"then v=true end;if type=="dynamic core"then local aR=h(aa[aL])if aR>10000 then aI=128 elseif aR>1000 then aI=64 elseif aR>150 then aI=32 end end;ay=ay+h(aa[aL])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local aR=h(aa[aL])local aS=m(aa[aL])local aT=0;local aU=system.getTime()if type=="Atmospheric Fuel Tank"then local aV=400;local aW=35.03;if aR>10000 then aV=51200;aW=5480 elseif aR>1300 then aV=6400;aW=988.67 elseif aR>150 then aV=1600;aW=182.67 end;aT=aS-aW;if fuelTankHandlingAtmo>0 then aV=aV+aV*fuelTankHandlingAtmo*0.2 end;if aT>aV then aV=aT end;av[#av+1]={aa[aL],core.getElementNameById(aa[aL]),aV,aW,aT,aU}end;if type=="Rocket Fuel Tank"then local aV=320;local aW=173.42;if aR>65000 then aV=40000;aW=25740 elseif aR>6000 then aV=5120;aW=4720 elseif aR>700 then aV=640;aW=886.72 end;aT=aS-aW;if fuelTankHandlingRocket>0 then aV=aV+aV*fuelTankHandlingRocket*0.2 end;if aT>aV then aV=aT end;ax[#ax+1]={aa[aL],core.getElementNameById(aa[aL]),aV,aW,aT,aU}end;if type=="Space Fuel Tank"then local aV=2400;local aW=182.67;if aR>10000 then aV=76800;aW=5480 elseif aR>1300 then aV=9600;aW=988.67 end;aT=aS-aW;if fuelTankHandlingSpace>0 then aV=aV+aV*fuelTankHandlingSpace*0.2 end;if aT>aV then aV=aT end;aw[#aw+1]={aa[aL],core.getElementNameById(aa[aL]),aV,aW,aT,aU}end end end end;coroutine.yield()if gyro~=nil then ac=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if a8 then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then O=true else P=true end end;if door then for _,aM in pairs(door)do aM.toggle()end end;if switch then for _,aM in pairs(switch)do aM.toggle()end end;if forcefield then for _,aM in pairs(forcefield)do aM.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if v then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not v then GearExtended=true end else if GearExtended or not v then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if a8 and not dbHud_1 and(GearExtended or not v)then BrakeIsOn=true end;WasInAtmo=a8;unit.hide()function RefreshLastMaxBrake(aX,aY)if aX==nil then aX=core.g()end;aX=round(aX,5)local aZ=j()if aY~=nil and aY or(au==nil or au~=aX)then local velocity=core.getVelocity()local a_=vec3(velocity):len()local b0=f(unit.getData()).maxBrake;if b0~=nil and b0>0 and a8 then b0=b0/utils.clamp(a_/100,0.1,1)b0=b0/aZ;if b0>LastMaxBrakeInAtmo and aZ>0.10 then LastMaxBrakeInAtmo=b0 end end;if b0~=nil and b0>0 then LastMaxBrake=b0 end;au=aX end end;function MakeButton(b1,b2,b3,b4,b5,b6,b7,b8,b9)local ba={enableName=b1,disableName=b2,width=b3,height=b4,x=b5,y=b6,toggleVar=b7,toggleFunction=b8,drawCondition=b9,hovered=false}table.insert(ai,ba)return ba end;function UpdateAtlasLocationsList()AtlasOrdered={}for aL,aM in pairs(atlas[0])do table.insert(AtlasOrdered,{name=aM.name,index=aL})end;local function bb(bc,bd)return bc.name<bd.name end;table.sort(AtlasOrdered,bb)end;function AddLocationsToAtlas()for aL,aM in pairs(SavedLocations)do table.insert(atlas[0],aM)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local be=planet.name..". "..#SavedLocations;if radar_1 then local bf,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bf~=nil and bf~=""then be=be.." "..radar_1.getConstructName(bf)end end;local bg={position=position,name=be,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=bg;table.insert(atlas[0],bg)UpdateAtlasLocationsList()F="Location saved as "..be else F="Databank must be installed to save locations"end end;function UpdatePosition()local bh=-1;local bg;for aL,aM in pairs(SavedLocations)do if aM.name and aM.name==CustomTarget.name then bh=aL;break end end;if bh~=-1 then bg={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bh].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[bh]=bg;bh=-1;for aL,aM in pairs(atlas[0])do if aM.name and aM.name==CustomTarget.name then bh=aL end end;if bh>-1 then atlas[0][bh]=bg end;UpdateAtlasLocationsList()F=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local bh=-1;for aL,aM in pairs(atlas[0])do if aM.name and aM.name==CustomTarget.name then bh=aL end end;if bh>-1 then table.remove(atlas[0],bh)end;bh=-1;for aL,aM in pairs(SavedLocations)do if aM.name and aM.name==CustomTarget.name then F=aM.name.." saved location cleared"bh=aL;break end end;if bh~=-1 then table.remove(SavedLocations,bh)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bi)bi[#bi+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a1==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a1==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a1=0 end end;function ToggleWidgets()if ah then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ah=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ah=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not a8 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bj,bk,b5,b6,b3,b4)if bj>b5 and bj<b5+b3 and bk>b6 and bk<b6+b4 then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>r then F="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=a9+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bl=vec3(core.getConstructWorldOrientationForward())local bm=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local bo=getPitch(bn,bl,bm)LockPitch=bo;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;D=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not a8 then AutoTakeoff=false;HoldAltitude=a9;if not a3 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=a9+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a3 then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then D=not D;if D then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else F="Follow Mode only works with Remote controller"D=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>r then F="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else a2=true end else a3=true;RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;D=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;p=false;LockPitch=nil else a3=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;p=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;D=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;D=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function CheckDamage(bi)local bp=0;ag=""local bq=ay;local br=0;local bs=0;local bt=0;local bu=0;local bv=""for aL in pairs(aa)do local aR=0;local bw=0;bw=h(aa[aL])aR=k(aa[aL])br=br+aR;if aR<bw then if aR==0 then bt=bt+1 else bs=bs+1 end;if az and#ad==0 then position=vec3(core.getElementPositionById(aa[aL]))local b5=position.x-aI;local b6=position.y-aI;local bx=position.z-aI;table.insert(ad,core.spawnArrowSticker(b5,b6,bx+1,"down"))table.insert(ad,core.spawnArrowSticker(b5,b6,bx+1,"down"))core.rotateSticker(ad[2],0,0,90)table.insert(ad,core.spawnArrowSticker(b5+1,b6,bx,"north"))table.insert(ad,core.spawnArrowSticker(b5+1,b6,bx,"north"))core.rotateSticker(ad[4],90,90,0)table.insert(ad,core.spawnArrowSticker(b5-1,b6,bx,"south"))table.insert(ad,core.spawnArrowSticker(b5-1,b6,bx,"south"))core.rotateSticker(ad[6],90,-90,0)table.insert(ad,core.spawnArrowSticker(b5,b6-1,bx,"east"))table.insert(ad,core.spawnArrowSticker(b5,b6-1,bx,"east"))core.rotateSticker(ad[8],90,0,90)table.insert(ad,core.spawnArrowSticker(b5,b6+1,bx,"west"))table.insert(ad,core.spawnArrowSticker(b5,b6+1,bx,"west"))core.rotateSticker(ad[10],-90,0,90)table.insert(ad,aa[aL])end elseif az and#ad>0 and ad[11]==aa[aL]then for by in pairs(ad)do core.deleteSticker(ad[by])end;ad={}end end;bp=d(br/bq*100)if bp<100 then bi[#bi+1]=[[<g class="pbright txt">]]bu=d(bp*2.55)bv=e("rgb(%d,%d,%d)",255-bu,bu,0)if bp<100 then bi[#bi+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],bv,bp)if bt>0 then bi[#bi+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],bv,bt,bs)elseif bs>0 then bi[#bi+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],bv,bs)end end;bi[#bi+1]=[[<\g>]]end end;function DrawCursorLine(bi)local bz=d(utils.clamp(Y/(al/4)*255,0,255))bi[#bi+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",V,W,d(PrimaryR+0.5)+bz,d(PrimaryG+0.5)-bz,d(PrimaryB+0.5)-bz)end;function getPitch(bA,bB,bd)local bC=bA:cross(bd):normalize_inplace()local bo=math.acos(utils.clamp(bC:dot(-bB),-1,1))*constants.rad2deg;if bC:cross(-bB):dot(bd)<0 then bo=-bo end;return bo end;function clearAll()if a6 then a6=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;D=false;p=false;a2=false;a3=false;s=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;ac=false;LockPitch=nil else a6=true end end;function wipeSaveVariables()if not dbHud_1 then F="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"X=5 else if as then for aL,aM in pairs(a)do dbHud_1.setStringValue(aM,g(nil))end;for aL,aM in pairs(b)do if aM~="SavedLocations"then dbHud_1.setStringValue(aM,g(nil))end end;F="Databank wiped. New variables will save after re-enter seat and exit"X=5;as=false;ar=false;T=true else F="Press ALT-7 again to confirm wipe of ALL data"as=true end end end;function CheckButtons()for _,aM in pairs(ai)do if aM.hovered then if not aM.drawCondition or aM.drawCondition()then aM.toggleFunction()end;aM.hovered=false end end end;function SetButtonContains()local b5=V+al/2;local b6=W+am/2;for _,aM in pairs(ai)do aM.hovered=Contains(b5,b6,aM.x,aM.y,aM.width,aM.height)end end;function DrawButton(bi,bD,hover,b5,b6,bE,bF,bG,bH,bI,bJ)if type(bI)=="function"then bI=bI()end;if type(bJ)=="function"then bJ=bJ()end;bi[#bi+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",b5,b6,bE,bF)if bD then bi[#bi+1]=e("%s'",bG)else bi[#bi+1]=bH end;if hover then bi[#bi+1]=" style='stroke:white; stroke-width:2'"else bi[#bi+1]=" style='stroke:black; stroke-width:1'"end;bi[#bi+1]="></rect>"bi[#bi+1]=e("<text x='%f' y='%f' font-size='24' fill='",b5+bE/2,b6+bF/2+5)if bD then bi[#bi+1]="black"else bi[#bi+1]="white"end;bi[#bi+1]="' text-anchor='middle' font-family='Montserrat'>"if bD then bi[#bi+1]=e("%s</text>",bI)else bi[#bi+1]=e("%s</text>",bJ)end end;function DrawButtons(bi)local bK="rgb(50,50,50)'"local bL="rgb(210,200,200)"local bM=DrawButton;for _,aM in pairs(ai)do local b2=aM.disableName;local b1=aM.enableName;if type(b2)=="function"then b2=b2()end;if type(b1)=="function"then b1=b1()end;if not aM.drawCondition or aM.drawCondition()then bM(bi,aM.toggleVar(),aM.hovered,aM.x,aM.y,aM.width,aM.height,bL,bK,b2,b1)end end end;function DrawTank(bi,aH,b5,bN,bO,bP,bQ,bR)local bS=1;local bT=2;local bU=3;local bV=4;local bW=5;local bX=6;local bY=""local bZ=0;local b_=fuelY;local c0=fuelY+10;if o()==1 and not RemoteHud then b_=b_-50;c0=c0-50 end;bi[#bi+1]=[[<g class="pdim txtfuel">]]if bO=="ATMO"then bY="atmofueltank"elseif bO=="SPACE"then bY="spacefueltank"else bY="rocketfueltank"end;bZ=_G[bY.."_size"]if#bP>0 then for i=1,#bP do local be=string.sub(bP[i][bT],1,12)local c1=0;for by=1,bZ do if bP[i][bT]==f(unit[bY.."_"..by].getData()).name then c1=by;break end end;if aH or bQ[i]==nil or bR[i]==nil then local c2=0;local c3=0;local c4=0;local c5=0;local aU=system.getTime()if c1~=0 then bR[i]=f(unit[bY.."_"..c1].getData()).percentage;bQ[i]=f(unit[bY.."_"..c1].getData()).timeLeft;if bQ[i]=="n/a"then bQ[i]=0 end else c4=m(bP[i][bS])-bP[i][bV]c2=bP[i][bU]bR[i]=d(0.5+c4*100/c2)c3=bP[i][bW]c5=bP[i][bX]if c3<=c4 then bQ[i]=0 else bQ[i]=d(0.5+c4/((c3-c4)/(aU-c5)))end;bP[i][bW]=c4;bP[i][bX]=aU end end;if be==bN then be=e("%s %d",bO,i)end;if c1==0 then be=be.." *"end;local c6;if bQ[i]==0 then c6="n/a"else c6=FormatTimeString(bQ[i])end;if bR[i]~=nil then local bu=d(bR[i]*2.55)local bv=e("rgb(%d,%d,%d)",255-bu,bu,0)local c7=""if c6~="n/a"and bQ[i]<120 or bR[i]<5 then if aH then c7=[[class="red"]]end end;bi[#bi+1]=e([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],b5,b_,c7,be,b5,c0,bv,bR[i],c6)b_=b_+30;c0=c0+30 end end end;bi[#bi+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local bo=-math.deg(math.atan(velocity.y,velocity.z))+180;bo=bo-90;if bo<0 then bo=360+bo end;if bo>180 then bo=-180+bo-180 end;return-bo end;function getRelativeYaw(velocity)velocity=vec3(velocity)local c8=math.deg(math.atan(velocity.y,velocity.x))-90;if c8<-180 then c8=360+c8 end;return c8 end;function AlignToWorldVector(c9,ca)if not a8 or RateOfChange>MinimumRateOfChange+0.08 or a5~=-1 then if ca==nil then ca=ak end;c9=vec3(c9):normalize()local cb=vec3(core.getConstructWorldOrientationForward())-c9;local cc=-getMagnitudeInDirection(cb,core.getConstructWorldOrientationRight())*aj;local cd=-getMagnitudeInDirection(cb,core.getConstructWorldOrientationUp())*aj;if ae==0 then ae=cc/2 end;if af==0 then af=cd/2 end;y=y-(cc+(cc-ae)*DampingMultiplier)x=x+cd+(cd-af)*DampingMultiplier;ae=cc;af=cd;if math.abs(cc)<ca and math.abs(cd)<ca then return true end;return false end end;function getAPEnableName()local be=AutopilotTargetName;if be==nil then be=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if be==nil then be="None"end;return"Engage Autopilot: "..be end;function getAPDisableName()local be=AutopilotTargetName;if be==nil then be=CustomTarget.name end;if be==nil then be="None"end;return"Disable Autopilot: "..be end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=a9 end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then F="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then F="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"X=5 elseif not s then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then F="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;F="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;F="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local ce=50;local cf=260;local cg=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cf,ce,al/2-cf/2,am/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then F="Brakes in Toggle Mode"else F="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cf,ce,al/2-cf/2-50-cg.width,am/2-ce+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cf,ce,al/2-cf/2+cg.width+50,am/2-ce+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local ch=MakeButton(getAPEnableName,getAPDisableName,600,60,al/2-600/2,am/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,ch.height,ch.x+ch.width+30,ch.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,ch.height,ch.x+ch.width+30,ch.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,ch.height,ch.x-200-30,ch.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)ce=60;cf=300;local b5=10;local b6=am/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cf,ce,b5,b6,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cf,ce,b5+cf+20,b6,function()return AltitudeHold end,ToggleAltitudeHold)b6=b6+ce+20;MakeButton("Engage Autoland","Disable Autoland",cf,ce,b5,b6,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cf,ce,b5+cf+20,b6,function()return AutoTakeoff end,ToggleAutoTakeoff)b6=b6+ce+20;MakeButton("Show Orbit Display","Hide Orbit Display",cf,ce,b5,b6,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then F="Orbit Display Enabled"else F="Orbit Display Disabled"end end)b6=b6+ce+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cf,ce,b5,b6,function()return Reentry end,function()s=true;BeginReentry()end,function()return a9>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cf,ce,b5+cf+20,b6,function()return Reentry end,BeginReentry,function()return a9>ReentryAltitude end)b6=b6+ce+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cf,ce,b5,b6,function()return D end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cf,ce,b5+cf+20,b6,function()return az end,function()az=not az;if az then F="Repair Arrows Enabled"else F="Repair Arrows Diabled"end end,function()return o()==1 end)b6=b6+ce+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cf,ce,b5,b6,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;b6=b6+ce+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cf*2,ce,b5,b6,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)coroutine.yield()function GetFlightStyle()local ci=Nav.axisCommandManager:getAxisCommandType(0)local cj="TRAVEL"if ci==1 then cj="CRUISE"end;if Autopilot then cj="AUTOPILOT"end;return cj end;function updateHud(bi)local ck=a9;local velocity=core.getVelocity()local a_=vec3(velocity):len()local bn=vec3(core.getWorldVertical())local bl=vec3(core.getConstructWorldOrientationForward())local bm=vec3(core.getConstructWorldOrientationRight())local cl=vec3(core.getConstructWorldOrientationUp())local cm=getRoll(bn,bl,bm)local cn=cm/180*math.pi;local co=math.cos(cn)local cp=math.sin(cn)local bo=getPitch(bn,bl,bm*co+cl*cp)local cq=cm;local cr=bo;local cs=j()local ct=d(unit.getThrottle())local cu=a_*3.6;local cv=unit.getAxisCommandValue(0)local cj=GetFlightStyle()local cw="ROLL"local cx=unit.getClosestPlanetInfluence()>0;if ct==nil then ct=0 end;if not cx then if a_>5 then bo=getRelativePitch(velocity)cm=getRelativeYaw(velocity)else bo=0;cm=0 end;cw="YAW"end;bi[#bi+1]=a0;bi[#bi+1]=ag;bi[#bi+1]=Z;if aJ%aC==0 then aH=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bi,aH,fuelX,"Atmospheric ","ATMO",av,aF,aG)DrawTank(bi,aH,fuelX+100,"Space fuel t","SPACE",aw,aD,aE)DrawTank(bi,aH,fuelX+200,"Rocket fuel ","ROCKET",ax,aA,aB)end;if aH then aH=false;aJ=0 end;aJ=aJ+1;DrawVerticalSpeed(bi,ck)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cx then DrawRollLines(bi,centerX,centerY,cq,cw,cx)DrawArtificialHorizon(bi,cr,cq,centerX,centerY,cx,d(getRelativeYaw(velocity)),a_)else DrawRollLines(bi,centerX,centerY,cm,cw,cx)DrawArtificialHorizon(bi,bo,cm,centerX,centerY,cx,d(cm),a_)end;DrawAltitudeDisplay(bi,ck,cx)DrawPrograde(bi,velocity,a_,centerX,centerY)end end;DrawThrottle(bi,cj,ct,cv)DrawSpeed(bi,cu)DrawWarnings(bi)DisplayOrbitScreen(bi)if screen_2 then local cy=vec3(core.getConstructWorldPos())local b5=960+cy.x/MapXRatio;local b6=450+cy.y/MapYRatio;screen_2.moveContent(YouAreHere,(b5-80)/19.2,(b6-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bi)local cz=aP;local cA=aQ;local cB=aP;local cC=aQ;if IsInFreeLook()and not brightHud then cz=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]cA=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bi[#bi+1]=e([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                            ]],cz,cz,cB,cB,cA,cA,cC,cC,ResolutionX,ResolutionY)end;function HUDEpilogue(bi)bi[#bi+1]="</svg>"end;function DrawSpeed(bi,cu)local cD=throtPosY-10;local cE=throtPosX+10;bi[#bi+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cD=75 end;bi[#bi+1]=e([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],cE,cD,d(cu))end;function DrawOdometer(bi,R,TotalDistanceTravelled,cj,S,cs)local cF=1240;local cG=55;local cH=65;local cs=j()local aX=core.g()local cI=0;local cJ=0;local cK=0;RefreshLastMaxBrake(aX)if a8 then cK=LastMaxBrakeInAtmo else cK=LastMaxBrake end;maxThrust=Nav:maxForceForward()at=n()if not ShowOdometer then return end;local cL=vec3(core.getWorldAcceleration()):len()/9.80665;if aX>0.1 then cJ=at*aX;cI=maxThrust/aX end;bi[#bi+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cF=1120;cG=55;cH=65 elseif a8 then bi[#bi+1]=e([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],cs)end;bi[#bi+1]=e([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],cF,cG,cF,cH,aX/9.80665,cF,cG+20,cF,cH+20,cL)bi[#bi+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if o()==0 or RemoteHud then bi[#bi+1]=e([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="180">%s</text>
                        ]],R,TotalDistanceTravelled/1000,FormatTimeString(S),FormatTimeString(TotalFlightTime),at/1000,cK/1000,maxThrust/1000,cj)if aX>0.1 then bi[#bi+1]=e([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],cI/1000,cJ/1000)else bi[#bi+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else bi[#bi+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],cj)end;bi[#bi+1]="</g>"end;function DrawThrottle(bi,cj,ct,cv)local b_=throtPosY+10;local c0=throtPosY+20;if o()==1 and not RemoteHud then b_=55;c0=65 end;local cM="CRUISE"local unit="km/h"local cN=cv;if cj=="TRAVEL"or cj=="AUTOPILOT"then cM="THROT"unit="%"cN=ct;local cO="dim"if ct<0 then cO="red"end;bi[#bi+1]=e([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],cO,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(ct),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bi[#bi+1]=e([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX+10,b_,cM,throtPosX+10,c0,cN,unit)end;function DrawVerticalSpeed(bi,ck)if ck<200000 and not a8 or ck and a8 then local cP=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local cQ=0;if math.abs(cP)>1 then cQ=45*math.log(math.abs(cP),10)if cP<0 then cQ=-cQ end end;bi[#bi+1]=e([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,d(cP),d(cQ))end end;function getHeading(bB)local cR=-vec3(core.getWorldVertical())bB=bB-bB:project_on(cR)local cS=vec3(0,0,1)cS=cS-cS:project_on(cR)local cT=cS:cross(cR)local cQ=cS:angle_between(bB)*constants.rad2deg;if bB:dot(cT)<0 then cQ=360-cQ end;return cQ end;function DrawRollLines(bi,centerX,centerY,cq,cw,cx)local cU=circleRad;local cV=20;cV=d(cV)local cW=d(cq)if cx then for i=-45,45,5 do local cX=i;bi[#bi+1]=e([[<g transform="rotate(%f,%d,%d)">]],cX,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bi[#bi+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+cU+cV-len,centerX,centerY+cU+cV)end;bi[#bi+1]=e([["
                            <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY+cU+cV-35,cw,centerX,centerY+cU+cV-25,cW)bi[#bi+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cq,centerX,centerY)bi[#bi+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+cU+cV-20,centerX+5,centerY+cU+cV-20,centerX,centerY+cU+cV-15)bi[#bi+1]="</g>"end;local c8=cW;if cx then c8=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local cY=20;local cZ=d(c8)local c_=0;local d0=centerY+cU+cV+20;local d1=centerX;if cw~="YAW"then d0=130;d1=960 end;local d2=[[<path class="txttick line" d="]]for i=d(cZ-(cY+10)-cZ%5+0.5),d(cZ+cY+10+cZ%5+0.5),5 do local b5=d1+-i*5+c8*5;if i%10==0 then c_=10;local d3=i;if d3==360 then d3=0 elseif d3>360 then d3=d3-360 elseif d3<0 then d3=d3+360 end;bi[#bi+1]=e([[
                                    <text x="%f" y="%f">%d</text>]],b5+5,d0-12,d3)elseif i%5==0 then c_=5 end;if c_==10 then d2=e([[%s M %f %f v %d]],d2,b5,d0-5,c_)else d2=e([[%s M %f %f v %d]],d2,b5,d0-2.5,c_)end end;bi[#bi+1]=d2 ..[["/>]]bi[#bi+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],d1-5,d0+10,d1+5,d0+10,d1,d0+5)if cx then cw="HDG"end;bi[#bi+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        </g>
                        ]],d1,d0+25,cZ,d1,d0+35,cw)end;function DrawArtificialHorizon(bi,cr,cq,centerX,centerY,cx,d4,a_)local cU=circleRad;local d5=d(cU*3/5)if cU>0 then local d6=d(cr)local len=0;local d2=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cq,centerX,centerY)if not a8 then d2=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bi[#bi+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],cU-1,centerX,centerY)bi[#bi+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(d6-30-d6%5+0.5),d(d6+30+d6%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local b6=centerY+-i*5+cr*5;if len==30 then d2=e([[%s M %d %f h %d]],d2,centerX-d5-len,b6,len)if a8 then bi[#bi+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cq,centerX,centerY,centerX-d5+10,b6,i)bi[#bi+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cq,centerX,centerY,centerX+d5-10,b6,i)if i==0 or i==180 or i==-180 then bi[#bi+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cq,centerX,centerY,centerX-d5+20,b6,d5*2-40)end else bi[#bi+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-d5+10,b6,i)bi[#bi+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+d5-10,b6,i)end;d2=e([[%s M %d %f h %d]],d2,centerX+d5,b6,len)else d2=e([[%s M %d %f h %d]],d2,centerX-d5-len,b6,len)d2=e([[%s M %d %f h %d]],d2,centerX+d5,b6,len)end end;bi[#bi+1]=d2 ..[["/>]]local d7="PITCH"if not cx then d7="REL PITCH"end;if cr>90 and not a8 then cr=90-(cr-90)elseif cr<-90 and not a8 then cr=-90-(cr+90)end;if cU>200 then if a8 then if a_>r then bi[#bi+1]=e([["
                                    <g class="pdim txt txtmid">
                                    <text x="%d" y="%d">%s</text>
                                    <text x="%d" y="%d">%d deg</text>
                                    </g>
                                    ]],centerX,centerY-15,"Yaw",centerX,centerY+20,d4)end;bi[#bi+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cq,centerX,centerY)else bi[#bi+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bi[#bi+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-d5+25,centerY-5,centerX-d5+20,centerY,centerX-d5+25,centerY+5,centerX-d5+50,centerY+4,d6)bi[#bi+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+d5-25,centerY-5,centerX+d5-20,centerY,centerX+d5-25,centerY+5,centerX+d5-30,centerY+4,d6)bi[#bi+1]="</g>"end;local d8=d(cU/3)bi[#bi+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-d8,centerY,cU-d8)if not a8 and cx then bi[#bi+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cq,centerX,centerY,centerX-d5+10,centerY,d5*2-20)end;bi[#bi+1]="</g>"if cU<200 then if a8 and a_>r then bi[#bi+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-cU,d7,centerX,centerY-cU+10,d6,centerX,centerY-15,"Yaw",centerX,centerY+20,d4)else bi[#bi+1]=e([["
                                <g class="pdim txt txtmid">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d deg</text>
                                </g>
                                ]],centerX,centerY-cU,d7,centerX,centerY-cU+15,d6)end end end end;function DrawAltitudeDisplay(bi,ck,cx)local d9=altMeterX;local da=altMeterY;local db=78;local dc=19;local dd=AboveGroundLevel()if dd~=-1 then table.insert(bi,e([[
                        <g class="pdim altsm txtend">
                        <text x="%d" y="%d">AGL: %.1fm</text>
                        </g>
                        ]],d9+db,da+dc+20,dd))end;if cx and(ck<200000 and not a8 or ck and a8)then table.insert(bi,e([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],d9-1,da-4,db+2,dc+6,d9+1,da-1,db-4,dc))local bh=0;local de=1;local df=0;local dg=ck<0;local dh=9;if dg then dh=0 end;local ck=math.abs(ck)while bh<6 do local di=11;local dj=16;local dk=9;local dl=14;local c7="altsm"if bh>2 then dj=dj+3;di=di+2;dl=dl+2;dk=dk-6;c7="altbig"end;if dg then c7=c7 .." red"end;local dm=ck/de%10;local dn=d(dm)local dp=d((dn+1)%10)local dq=df;if bh==0 then dq=dm-dn;if dg then dq=1-dq end end;if dg and(bh==0 or df~=0)then local dr=dp;dp=dn;dn=dr end;local ds=dj*(dq-1)local dt=ds+dj;local b5=d9+dk+(6-bh)*di;local b6=da+dl;table.insert(bi,e([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],c7,b5,b6+ds,dp,b5,b6+dt,dn))bh=bh+1;de=de*10;if dn==dh then df=dq else df=0 end end;table.insert(bi,[[</g></g>]])end end;function DrawPrograde(bi,velocity,a_,centerX,centerY)if a_>5 and not a8 or a_>r then local cU=circleRad;local du=20;local dv=20;local dw=vec3(velocity)local dx=getRelativePitch(dw)local dy=getRelativeYaw(dw)local dz=-dy/dv*cU;local dA=dx/du*cU;local b5=centerX+dz;local b6=centerY+dA;local Y=math.sqrt(dz^2+dA^2)if Y<cU then bi[#bi+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',b5,b6)else local cQ=math.atan(dA,dz)local dB=centerX+cU*math.cos(cQ)local dC=centerY+cU*math.sin(cQ)bi[#bi+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',dB,dC)end;dx=getRelativePitch(-dw)dy=getRelativeYaw(-dw)dz=-dy/dv*cU;dA=dx/du*cU;b5=centerX+dz;b6=centerY+dA;Y=math.sqrt(dz^2+dA^2)if not a8 then if Y<cU then bi[#bi+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',b5,b6)else local cQ=math.atan(dA,dz)local dB=centerX+cU*math.cos(cQ)local dC=centerY+cU*math.sin(cQ)bi[#bi+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',dB,dC)end end end end;function DrawWarnings(bi)bi[#bi+1]=e([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)bi[#bi+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bi[#bi+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]bi[#bi+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]bi[#bi+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local dD=960;local dE=860;local dF=880;local dG=900;local dH=960;local dI=200;local dJ=150;local dK=960;if o()==1 and not RemoteHud then dE=135;dF=155;dG=175;dI=115;dJ=95 end;if BrakeIsOn then bi[#bi+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],dD,dE)end;if a8 and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bi[#bi+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],dD,dI+50)end;if ac then bi[#bi+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],dD,dK)end;if GearExtended then if v then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],dD,dF)else bi[#bi+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],dD,dF)end;bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],dD,dG,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if J then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],dD,dH+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(a9-antigrav.getBaseAltitude())<501 then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dD,dI+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bi[#bi+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dD,dI+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],dD,dI+20,AutopilotStatus)elseif LockPitch~=nil then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],dD,dI+20,d(LockPitch))elseif D then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],dD,dI+20)elseif Reentry then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],dD,dI+20)end;if AltitudeHold then if AutoTakeoff then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],dD,dI,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bi[#bi+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],dD,dI+50)end else bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],dD,dI,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bi[#bi+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],dD,dI)else bi[#bi+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],dD,dI)end end;if ProgradeIsOn then bi[#bi+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],dD,dI)end;if RetrogradeIsOn then bi[#bi+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],dD,dI)end;if TurnBurn then bi[#bi+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],dD,dJ)end;if VectorToTarget then bi[#bi+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],dD,dI+30,VectorStatus)end;bi[#bi+1]="</g>"end;function DisplayOrbitScreen(bi)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local dL=75;local dM=0;local dN=250;local dO=4;dM=dM+dO;local dP=15;local b5=dL+dN+dL/2+dO;local b6=dM+dN/2+5+dO;local dQ,dR,dS,dT;dQ=dN/4;dT=0;bi[#bi+1]=[[<g class="pbright txtorb txtmid">]]bi[#bi+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',dN+dL*2,dN+dM,dO,dO)if orbit.periapsis~=nil and orbit.apoapsis~=nil then dS=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(dQ*2)dR=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/dS*(1-orbit.eccentricity)dT=dQ-orbit.periapsis.altitude/dS-planet.radius/dS;local dU=""if orbit.periapsis.altitude<=0 then dU='redout'end;bi[#bi+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],dU,dL+dN/2+dT+dO,dM+dN/2+dO,dQ,dR)bi[#bi+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',dL+dN/2+dO,dM+dN/2+dO,planet.radius/dS)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bi[#bi+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b5-35,b6-5,dL+dN/2+dQ+dT,b6-5)bi[#bi+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],b5,b6)b6=b6+dP;bi[#bi+1]=e([[<text x="%f" y="%f">%s</text>]],b5,b6,getDistanceDisplayString(orbit.apoapsis.altitude))b6=b6+dP;bi[#bi+1]=e([[<text x="%f" y="%f">%s</text>]],b5,b6,FormatTimeString(orbit.timeToApoapsis))b6=b6+dP;bi[#bi+1]=e([[<text x="%f" y="%f">%s</text>]],b5,b6,getSpeedDisplayString(orbit.apoapsis.speed))end;b6=dM+dN/2+5+dO;b5=dL-dL/2+10+dO;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bi[#bi+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],b5+35,b6-5,dL+dN/2-dQ+dT,b6-5)bi[#bi+1]=e([[<text x="%f" y="%f">Periapsis</text>]],b5,b6)b6=b6+dP;bi[#bi+1]=e([[<text x="%f" y="%f">%s</text>]],b5,b6,getDistanceDisplayString(orbit.periapsis.altitude))b6=b6+dP;bi[#bi+1]=e([[<text x="%f" y="%f">%s</text>]],b5,b6,FormatTimeString(orbit.timeToPeriapsis))b6=b6+dP;bi[#bi+1]=e([[<text x="%f" y="%f">%s</text>]],b5,b6,getSpeedDisplayString(orbit.periapsis.speed))end;bi[#bi+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],dL+dN/2+dO,20+dO,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local dV=orbit.timeToApoapsis/orbit.period*2*math.pi;local dW=dQ*math.cos(dV)local dX=dR*math.sin(dV)bi[#bi+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',dL+dN/2+dW+dT+dO,dM+dN/2+dX+dO)end;bi[#bi+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for aL,aM in pairs(atlas[0])do if an==nil or aM.center.x<an then an=aM.center.x end;if ao==nil or aM.center.x>ao then ao=aM.center.x end;if ap==nil or aM.center.y<ap then ap=aM.center.y end;if aq==nil or aM.center.y>aq then aq=aM.center.y end end;GalaxyMapHTML=""local dY=1.1*(ao-an)/1920;local dZ=1.4*(aq-ap)/1080;for aL,aM in pairs(atlas[0])do local b5=960+aM.center.x/dY;local b6=540+aM.center.y/dZ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..b5 ..'" cy="'..b6 ..'" r="'..aM.radius/dY*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(aM.name,"Moon")and not string.match(aM.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..b5 .."' y='"..b6+aM.radius/dY*30+20 .."' font-size='28' fill="..aP.." text-anchor='middle' font-family='Montserrat'>"..aM.name.."</text>"end end;local cy=vec3(core.getConstructWorldPos())local b5=960+cy.x/dY;local b6=540+cy.y/dZ;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..b5 ..'" cy="'..b6 ..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..b5 .."' y='"..b6-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=dY;MapYRatio=dZ;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local cy=vec3(core.getConstructWorldPos())local b5=960+cy.x/dY;local b6=540+cy.y/dZ;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..aP.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((b5-80)/19.20,(b6-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function d_(e0)return type(e0)=='number'end;local function e1(e0)return type(tonumber(e0))=='number'end;local function e2(e3)return type(e3)=='table'end;local function e4(e5)return type(e5)=='string'end;local function e6(aM)return e2(aM)and d_(aM.x and aM.y and aM.z)end;local function e7(e8)return e2(e8)and d_(e8.latitude and e8.longitude and e8.altitude and e8.bodyId and e8.systemId)end;local e9=math.pi/180;local ea=180/math.pi;local eb=1e-10;local d3=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local ec='::pos{'..d3 ..','..d3 ..','..d3 ..','..d3 ..','..d3 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local ed=utils.clamp;local function ee(ef,eg)if ef==0 then return math.abs(eg)<1e-09 end;if eg==0 then return math.abs(ef)<1e-09 end;return math.abs(ef-eg)<math.max(math.abs(ef),math.abs(eg))*eb end;local function eh(e0)local aN=string.gsub(string.reverse(e('%.4f',e0)),'^0*%.?','')return aN==''and'0'or string.reverse(aN)end;local function ei(ej)if e6(ej)then return e('{x=%.3f,y=%.3f,z=%.3f}',ej.x,ej.y,ej.z)end;if e2(ej)and not getmetatable(ej)then local ek={}local el=next(ej)if type(el)=='nil'or el==1 then ek=ej else for aL,aM in pairs(ej)do local cN=ei(aM)if type(aL)=='number'then table.insert(ek,e('[%s]=%s',aL,cN))else table.insert(ek,e('%s=%s',aL,cN))end end end;return e('{%s}',table.concat(ek,','))end;if e4(ej)then return e("'%s'",ej:gsub("'",[[\']]))end;return tostring(ej)end;local em={}em.__index=em;em.__tostring=function(ej,en)local eo={}for aL in pairs(ej)do table.insert(eo,aL)end;table.sort(eo)local ek={}for _,aL in ipairs(eo)do local cN=ei(ej[aL])if type(aL)=='number'then table.insert(ek,e('[%s]=%s',aL,cN))else table.insert(ek,e('%s=%s',aL,cN))end end;if en then return e('%s%s',en,table.concat(ek,',\n'..en))end;return e('{%s}',table.concat(ek,','))end;em.__eq=function(ep,eq)return ep.planetarySystemId==eq.planetarySystemId and ep.bodyId==eq.bodyId and ee(ep.radius,eq.radius)and ee(ep.center.x,eq.center.x)and ee(ep.center.y,eq.center.y)and ee(ep.center.z,eq.center.z)and ee(ep.GM,eq.GM)end;local function er(es,et,eu,ev,ew)assert(e1(es),'Argument 1 (planetarySystemId) must be a number:'..type(es))assert(e1(et),'Argument 2 (bodyId) must be a number:'..type(et))assert(e1(eu),'Argument 3 (radius) must be a number:'..type(eu))assert(e2(ev),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(ev))assert(e1(ew),'Argument 5 (GM) must be a number:'..type(ew))return setmetatable({planetarySystemId=tonumber(es),bodyId=tonumber(et),radius=tonumber(eu),center=vec3(ev),GM=tonumber(ew)},em)end;local ex={}ex.__index=ex;ex.__tostring=function(ey)return e('::pos{%d,%d,%s,%s,%s}',ey.systemId,ey.bodyId,eh(ey.latitude*ea),eh(ey.longitude*ea),eh(ey.altitude))end;ex.__eq=function(ep,eq)return ep.bodyId==eq.bodyId and ep.systemId==eq.systemId and ee(ep.latitude,eq.latitude)and ee(ep.altitude,eq.altitude)and(ee(ep.longitude,eq.longitude)or ee(ep.latitude,math.pi/2)or ee(ep.latitude,-math.pi/2))end;local function ez(eA,et,eB,eC,ck)local es=eA;if e4(eA)and not eC and not ck and not et and not eB then es,et,eB,eC,ck=string.match(eA,ec)assert(es,'Argument 1 (position string) is malformed.')else assert(e1(es),'Argument 1 (systemId) must be a number:'..type(es))assert(e1(et),'Argument 2 (bodyId) must be a number:'..type(et))assert(e1(eB),'Argument 3 (latitude) must be in degrees:'..type(eB))assert(e1(eC),'Argument 4 (longitude) must be in degrees:'..type(eC))assert(e1(ck),'Argument 5 (altitude) must be in meters:'..type(ck))end;es=tonumber(es)et=tonumber(et)eB=tonumber(eB)eC=tonumber(eC)ck=tonumber(ck)if et==0 then return setmetatable({latitude=eB,longitude=eC,altitude=ck,bodyId=et,systemId=es},ex)end;return setmetatable({latitude=e9*ed(eB,-90,90),longitude=e9*(eC%360),altitude=ck,bodyId=et,systemId=es},ex)end;local eD={}eD.__index=eD;eD.__tostring=function(ej,en)local eE=en and en..'  'local eF={}local eo={}for aL in pairs(ej)do table.insert(eo,aL)end;table.sort(eo)for _,eG in ipairs(eo)do bdy=ej[eG]local eH=em.__tostring(bdy,eE)if en then table.insert(eF,e('[%s]={\n%s\n%s}',eG,eH,en))else table.insert(eF,e('  [%s]=%s',eG,eH))end end;if en then return e('\n%s%s%s',en,table.concat(eF,',\n'..en),en)end;return e('{\n%s\n}',table.concat(eF,',\n'))end;local function eI(eJ)local atlas={}local pid;for _,aM in pairs(eJ)do local bf=aM.planetarySystemId;if type(bf)~='number'then error('Invalid planetary system ID: '..tostring(bf))elseif pid and bf~=pid then error('Mismatch planetary system IDs: '..bf..' and '..pid)end;local eK=aM.bodyId;if type(eK)~='number'then error('Invalid body ID: '..tostring(eK))elseif atlas[eK]then error('Duplicate body ID: '..tostring(eK))end;setmetatable(aM.center,getmetatable(vec3.unit_x))atlas[eK]=setmetatable(aM,em)pid=bf end;return setmetatable(atlas,eD)end;PlanetaryReference={}local function eL(eJ)return setmetatable({galaxyAtlas=eJ or{}},PlanetaryReference)end;PlanetaryReference.__index=function(e3,i)if type(i)=='number'then local system=e3.galaxyAtlas[i]return eI(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(ej)return function(e3,aL)local eM,nv=next(e3,aL)return eM,nv and eI(nv)end,ej.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(ej)local eN={}for _,eO in pairs(ej or{})do local eP=eO:getPlanetarySystemId()local eQ=eD.__tostring(eO,'    ')table.insert(eN,e('  [%s]={%s\n  }',eP,eQ))end;return e('{\n%s\n}\n',table.concat(eN,',\n'))end;PlanetaryReference.BodyParameters=er;PlanetaryReference.MapPosition=ez;PlanetaryReference.PlanetarySystem=eI;function PlanetaryReference.createBodyParameters(eR,et,eS,eT,eU,eV,eW)assert(e1(eR),'Argument 1 (planetarySystemId) must be a number:'..type(eR))assert(e1(et),'Argument 2 (bodyId) must be a number:'..type(et))assert(e1(eS),'Argument 3 (surfaceArea) must be a number:'..type(eS))assert(e2(eT),'Argument 4 (aPosition) must be an array or vec3:'..type(eT))assert(e2(eU),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(eU))assert(e1(eV),'Argument 6 (altitude) must be in meters:'..type(eV))assert(e1(eW),'Argument 7 (gravityAtPosition) must be number:'..type(eW))local eu=math.sqrt(eS/4/math.pi)local Y=eu+eV;local eX=vec3(eT)+Y*vec3(eU)local ew=eW*Y*Y;return er(eR,et,eu,eX,ew)end;PlanetaryReference.isMapPosition=e7;function PlanetaryReference:getPlanetarySystem(eA)if i==nil then i=0 end;if nv==nil then nv=0 end;local eR=eA;if e7(eA)then eR=eA.systemId end;if type(eR)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=eD then system=eI(system)end;return system end end end;function eD:castIntersections(eY,eZ,e_,f0)local e_=e_ or function(f1)return 1.05*f1.radius end;local f2={}if f0 then for _,i in ipairs(f0)do f2[i]=self[i]end else f0={}for aL,f1 in pairs(self)do table.insert(f0,aL)f2[aL]=f1 end end;local function f3(f4,f5)local f6=f2[f4].center-eY;local f7=f2[f5].center-eY;return f6:len()<f7:len()end;table.sort(f0,f3)local f8=eZ:normalize()for i,bf in ipairs(f0)do local f1=f2[bf]local f9=f1.center-eY;local eu=e_(f1)local fa=f9:dot(f8)local fb=fa^2-(f9:len2()-eu^2)if fb>=0 then local fc=math.sqrt(fb)local fd=fa+fc;local fe=fa-fc;if fe>0 then return f1,fd,fe elseif fd>0 then return f1,fd,nil end end end;return nil,nil,nil end;function eD:closestBody(ff)assert(type(ff)=='table','Invalid coordinates.')local fg,f1;local fh=vec3(ff)for _,fi in pairs(self)do local fj=(fi.center-fh):len2()if not f1 or fj<fg then f1=fi;fg=fj end end;return f1 end;function eD:convertToBodyIdAndWorldCoordinates(eA)local fk=eA;if e4(eA)then fk=ez(eA)end;if fk.bodyId==0 then return 0,vec3(fk.latitude,fk.longitude,fk.altitude)end;local fi=self:getBodyParameters(fk)if fi then return fk.bodyId,fi:convertToWorldCoordinates(fk)end end;function eD:getBodyParameters(eA)local et=eA;if e7(eA)then et=eA.bodyId end;assert(e1(et),'Argument 1 (bodyId) must be a number:'..type(et))return self[et]end;function eD:getPlanetarySystemId()local _,aM=next(self)return aM and aM.planetarySystemId end;function em:convertToMapPosition(ev)assert(e2(ev),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(ev))local fl=vec3(ev)if self.bodyId==0 then return setmetatable({latitude=fl.x,longitude=fl.y,altitude=fl.z,bodyId=0,systemId=self.planetarySystemId},ex)end;local fm=fl-self.center;local Y=fm:len()local ck=Y-self.radius;local eB=0;local eC=0;if not ee(Y,0)then local fn=math.atan(fm.y,fm.x)eC=fn>=0 and fn or 2*math.pi+fn;eB=math.pi/2-math.acos(fm.z/Y)end;return setmetatable({latitude=eB,longitude=eC,altitude=ck,bodyId=self.bodyId,systemId=self.planetarySystemId},ex)end;function em:convertToWorldCoordinates(eA)local fk=e4(eA)and ez(eA)or eA;if fk.bodyId==0 then return vec3(fk.latitude,fk.longitude,fk.altitude)end;assert(e7(fk),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(fk.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(fk.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local fo=math.cos(fk.latitude)return self.center+(self.radius+fk.altitude)*vec3(fo*math.cos(fk.longitude),fo*math.sin(fk.longitude),math.sin(fk.latitude))end;function em:getAltitude(ev)return(vec3(ev)-self.center):len()-self.radius end;function em:getDistance(ev)return(vec3(ev)-self.center):len()end;function em:getGravity(ev)local fp=self.center-vec3(ev)local fq=fp:len2()return self.GM/fq*fp/math.sqrt(fq)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return eL(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function e4(e5)return type(e5)=='string'end;local function e2(e3)return type(e3)=='table'end;local function ee(ef,eg)if ef==0 then return math.abs(eg)<1e-09 end;if eg==0 then return math.abs(ef)<1e-09 end;return math.abs(ef-eg)<math.max(math.abs(ef),math.abs(eg))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(ck)assert(self.body)local Y=ck+self.body.radius;if not ee(Y,0)then local orbit=math.sqrt(self.body.GM/Y)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(eA,velocity)assert(self.body)assert(e2(eA)or e4(eA))assert(e2(velocity))local cy=(e4(eA)or PlanetRef.isMapPosition(eA))and self.body:convertToWorldCoordinates(eA)or vec3(eA)local aM=vec3(velocity)local fr=cy-self.body.center;local f7=aM:len2()local fs=fr:len()local ft=self.body.GM;local fu=((f7-ft/fs)*fr-fr:dot(aM)*aM)/ft;local ef=ft/(2*ft/fs-f7)local fv=fu:len()local f8=fu:normalize()local fw=ef*(1-fv)local fx=ef*(1+fv)local fy=fw*f8+self.body.center;local fz=fv<=1 and-fx*f8+self.body.center or nil;local fA=math.sqrt(ef*ft*(1-fv*fv))local fB=fz and 2*math.pi*math.sqrt(ef^3/ft)local fC=math.acos(fu:dot(fr)/(fv*fs))if fr:dot(aM)<0 then fC=-(fC-2*math.pi)end;local fD=math.acos((math.cos(fC)+fv)/(1+fv*math.cos(fC)))local fE=fD;if fE<0 then fE=fE+2*math.pi end;local fF=fE-fv*math.sin(fE)local fG=0;local fH=0;local fI=0;if fB~=nil then fG=fF/(2*math.pi/fB)fH=fB-fG;fI=fH+fB/2;if fC-math.pi>0 then fH=fG;fI=fH+fB/2 end;if fI>fB then fI=fI-fB end end;return{periapsis={position=fy,speed=fA/fw,circularOrbitSpeed=math.sqrt(ft/fw),altitude=fw-self.body.radius},apoapsis=fz and{position=fz,speed=fA/fx,circularOrbitSpeed=math.sqrt(ft/fx),altitude=fx-self.body.radius},currentVelocity=aM,currentPosition=cy,eccentricity=fv,period=fB,eccentricAnomaly=fD,meanAnomaly=fF,timeToPeriapsis=fH,timeToApoapsis=fI}end;local function fJ(fK)local fi=PlanetRef.BodyParameters(fK.planetarySystemId,fK.bodyId,fK.radius,fK.center,fK.GM)return setmetatable({body=fi},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return fJ(...)end})end;function Kinematics()local Kinematic={}local fL=30000000/3600;local fM=fL*fL;local fN=100;local function fO(aM)return 1/math.sqrt(1-aM*aM/fM)end;function Kinematic.computeAccelerationTime(fP,fQ,fR)local fS=fL*math.asin(fP/fL)return(fL*math.asin(fR/fL)-fS)/fQ end;function Kinematic.computeDistanceAndTime(fP,fR,fT,fU,fV,fW)fV=fV or 0;fW=fW or 0;local fX=fP<=fR;local fY=fU*(fX and 1 or-1)/fT;local fZ=-fW/fT;local f_=fY+fZ;if fX and f_<=0 or not fX and f_>=0 then return-1,-1 end;local g0,g1=0,0;if fY~=0 and fV>0 then local fS=math.asin(fP/fL)local g2=math.pi*(fY/2+fZ)local g3=fY*fV;local g4=fL*math.pi;local aM=function(e3)local bE=(g2*e3-g3*math.sin(math.pi*e3/2/fV)+g4*fS)/g4;local g5=math.tan(bE)return fL*g5/math.sqrt(g5*g5+1)end;local g6=fX and function(e5)return e5>=fR end or function(e5)return e5<=fR end;g1=2*fV;if g6(aM(g1))then local g7=0;while math.abs(g1-g7)>0.5 do local e3=(g1+g7)/2;if g6(aM(e3))then g1=e3 else g7=e3 end end end;local g8=fP;local g9=g1/fN;for ga=1,fN do local a_=aM(ga*g9)g0=g0+(a_+g8)*g9/2;g8=a_ end;if g1<2*fV then return g0,g1 end;fP=g8 end;local fS=fL*math.asin(fP/fL)local aO=(fL*math.asin(fR/fL)-fS)/f_;local gb=fM*math.cos(fS/fL)/f_;local Y=gb-fM*math.cos((f_*aO+fS)/fL)/f_;return Y+g0,aO+g1 end;function Kinematic.computeTravelTime(fP,fQ,Y)if Y==0 then return 0 end;if fQ>0 then local fS=fL*math.asin(fP/fL)local gb=fM*math.cos(fS/fL)/fQ;return(fL*math.acos(fQ*(gb-Y)/fM)-fS)/fQ end;assert(fP>0,'Acceleration and initial speed are both zero.')return Y/fP end;function Kinematic.lorentz(aM)return fO(aM)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(Y)local gc=Y>100000;local aN=""if gc then aN=round(Y/1000/200,1).." SU"elseif Y<1000 then aN=round(Y,1).." M"else aN=round(Y/1000,1).." KM"end;return aN end;function getDistanceDisplayString2(Y)local gc=Y>100000;local aN=""if gc then aN=round(Y/1000/200,2).." SU"elseif Y<1000 then aN=round(Y,2).." M"else aN=round(Y/1000,2).." KM"end;return aN end;function getSpeedDisplayString(a_)return d(round(a_*3.6,0)+0.5).." km/h"end;function FormatTimeString(gd)local ge=0;local gf=0;local gg=0;if gd<60 then gd=d(gd)elseif gd<3600 then ge=d(gd/60)gd=d(gd%60)elseif gd<86400 then gf=d(gd/3600)ge=d(gd%3600/60)else gg=d(gd/86400)gf=d(gd%86400/60)end;if gg>0 then return gg.."d "..gf.."h "elseif gf>0 then return gf.."h "..ge.."m "elseif ge>0 then return ge.."m "..gd.."s"elseif gd>0 then return gd.."s"else return"0s"end end;function getMagnitudeInDirection(c9,eZ)c9=vec3(c9)eZ=vec3(eZ):normalize()local aN=c9*eZ;return aN.x+aN.y+aN.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"Q=nil;return true end;local gh=AtlasOrdered[AutopilotTargetIndex].index;local gi=atlas[0][gh]if gi.center then AutopilotTargetName=gi.name;Q=galaxyReference[0][gh]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=gi;for _,aM in pairs(galaxyReference[0])do if aM.name==CustomTarget.planetname then Q=aM;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(Q.center)_,AutopilotEndSpeed=Kep(Q):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local gj=LastMaxBrakeInAtmo/Q:getGravity(Q.center+vec3(0,0,1)*Q.radius):len()return gj end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(Q.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local a_=vec3(velocity):len()local gk,gl=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local K,L;if not TurnBurn then K,L=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else K,L=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,gm;if not TurnBurn then _,gm=GetAutopilotBrakeDistanceAndTime(a_)else _,gm=GetAutopilotTBBrakeDistanceAndTime(a_)end;local gn=0;local go=0;if AutopilotCruising or not Autopilot and a_>5 then go=Kinematic.computeTravelTime(a_,0,AutopilotDistance)elseif K+gk<AutopilotDistance then gn=AutopilotDistance-(K+gk)go=Kinematic.computeTravelTime(8333.0556,0,gn)else local gp=(AutopilotDistance-K)/gk;gk=AutopilotDistance-K;gl=gl*gp end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return go elseif AutopilotBraking then return gm elseif AutopilotCruising then return go+gm else return gl+L+go end end;function GetAutopilotBrakeDistanceAndTime(a_)if not a8 then RefreshLastMaxBrake()return Kinematic.computeDistanceAndTime(a_,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return Kinematic.computeDistanceAndTime(a_,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(a_)RefreshLastMaxBrake()return Kinematic.computeDistanceAndTime(a_,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local gq=-1;local gr=-1;if vBooster then gq=vBooster.distance()end;if hover then gr=hover.distance()end;if gq~=-1 and gr~=-1 then if gq<gr then return gq else return gr end elseif gq~=-1 then return gq elseif gr~=-1 then return gr else return-1 end end;function AboveGroundLevel()local gs=-1;local gt=a5;if telemeter_1 then gs=telemeter_1.getDistance()end;if gt~=-1 and gs~=-1 then if gt<gs then return gt else return gs end elseif gt~=-1 then return gt else return gs end end;function round(d3,gu)local gv=10^(gu or 0)return d(d3*gv+0.5)/gv end;function tablelength(gw)local gx=0;for _ in pairs(gw)do gx=gx+1 end;return gx end;function BeginProfile(gy)ProfileTimeStart=system.getTime()end;function EndProfile(gy)local gz=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+gz;ProfileCount=ProfileCount+1;if gz>ProfileTimeMax then ProfileTimeMax=gz end;if gz<ProfileTimeMin then ProfileTimeMin=gz end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local gA=ProfileTimeSum;local gB=ProfileTimeSum/ProfileCount;local gC=ProfileTimeMin;local gD=ProfileTimeMax;local gE=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",gA,gB,gC,gD,gE))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local gF=radar_1.getEntries()local gG=radar_1.getData()if#gF>0 then local gH=gG:find('identifiedConstructs":%[%]')if gH==nil and perisPanelID==nil then a1=1;ToggleRadarPanel()end;if gH~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;Z=e([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#gF)local gI={}for aL,aM in pairs(gF)do if radar_1.hasMatchingTransponder(aM)==1 then gI[#gI+1]=aM end end;if#gI>0 then local b6=15;Z=e([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],Z,b6)for aL,aM in pairs(gI)do b6=b6+20;Z=e([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],Z,b6,radar_1.getConstructName(aM))end end else local gJ;gJ=gG:find('worksInEnvironment":false')if gJ then Z=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else Z=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then a1=0;ToggleRadarPanel()end end end end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local gK=j()if door and(gK>0 or gK==0 and a9<10000)then for _,aM in pairs(door)do aM.toggle()end end;if switch then for _,aM in pairs(switch)do aM.toggle()end end;if forcefield and(gK>0 or gK==0 and a9<10000)then for _,aM in pairs(forcefield)do aM.toggle()end end;if dbHud_1 then if not T then for aL,aM in pairs(b)do dbHud_1.setStringValue(aM,g(_G[aM]))end;for aL,aM in pairs(a)do dbHud_1.setStringValue(aM,g(_G[aM]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(gL)if gL=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local gM=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if gM then Y=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else Y=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then K,L=GetAutopilotBrakeDistanceAndTime(velMag)M,N=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else K,L=GetAutopilotTBBrakeDistanceAndTime(velMag)M,N=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(Y)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(K)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(L)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(M)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(N)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif gL=="oneSecond"then a6=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bi={}local cj=GetFlightStyle()DrawOdometer(bi,R,TotalDistanceTravelled,cj,S)CheckDamage(bi)a0=table.concat(bi,"")collectgarbage("collect")elseif gL=="fiveSecond"then a7=dbHud_1.getStringValue("SPBAutopilotTargetName")if a7~=nil and a7~=""and a7~="SatNavNotChanged"then local aN=json.decode(dbHud_1.getStringValue("SavedLocations"))if aN~=nil then _G["SavedLocations"]=aN;local bh=-1;local bg;for aL,aM in pairs(SavedLocations)do if aM.name and aM.name=="SatNav Location"then bh=aL;break end end;if bh~=-1 then bg=SavedLocations[bh]bh=-1;for aL,aM in pairs(atlas[0])do if aM.name and aM.name=="SatNav Location"then bh=aL;break end end;if bh>-1 then atlas[0][bh]=bg end;UpdateAtlasLocationsList()F=bg.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==a7 then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif gL=="msgTick"then local bi={}DisplayMessage(bi,"empty")F="empty"unit.stopTimer("msgTick")X=3 elseif gL=="animateTick"then Animated=true;Animating=false;V=0;W=0;unit.stopTimer("animateTick")elseif gL=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())a8=j()>0;y=0;C=0;x=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)a5=hoverDetectGround()local gN=system.getMouseDeltaX()local gO=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local gP=velMag>8334;if not gP and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=gP;if BrakeIsOn then B=1 else B=0 end;a9=core.getAltitude()if a9==0 then a9=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bi={}HUDPrologue(bi)if showHud then updateHud(bi)else DisplayOrbitScreen(bi)DrawWarnings(bi)end;HUDEpilogue(bi)bi[#bi+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if F~="empty"then DisplayMessage(bi,F)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bi)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then V=screen_1.getMouseX()*2560;W=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(bi)if screen_1.getMouseState()==1 then CheckButtons()end;bi[#bi+1]=e([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],V,W)elseif system.isViewLocked()==0 then if o()==1 and E then if not Animating then V=V+gN;W=W+gO end;SetButtonContains()DrawButtons(bi)if not Animating and not Animated then local gQ=table.concat(bi,"")bi={}bi[#bi+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"bi[#bi+1]=GalaxyMapHTML;bi[#bi+1]=gQ;bi[#bi+1]="</body>"Animating=true;bi[#bi+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bi,"")system.setScreen(content)elseif Animated then local gQ=table.concat(bi,"")bi={}bi[#bi+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"bi[#bi+1]=GalaxyMapHTML;bi[#bi+1]=gQ;bi[#bi+1]="</body>"end;if not Animating then bi[#bi+1]=e([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],V,W)end else CheckButtons()V=0;W=0 end else V=V+gN;W=W+gO;Y=math.sqrt(V*V+W*W)if not E and o()==0 then if userControlScheme=="virtual joystick"then if V>0 and V>DeadZone then y=y-(V-DeadZone)*MouseXSensitivity elseif V<0 and V<DeadZone*-1 then y=y-(V+DeadZone)*MouseXSensitivity else y=0 end;if W>0 and W>DeadZone then x=x-(W-DeadZone)*MouseYSensitivity elseif W<0 and W<DeadZone*-1 then x=x-(W+DeadZone)*MouseYSensitivity else x=0 end elseif userControlScheme=="mouse"then V=0;W=0;x=(-utils.smoothstep(gO,-100,100)+0.5)*2*t;y=(-utils.smoothstep(gN,-100,100)+0.5)*2*u else V=0;W=0 end;CheckButtons()if Y>DeadZone then DrawCursorLine(bi)end else SetButtonContains()DrawButtons(bi)end;bi[#bi+1]=e([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],V,W)end;bi[#bi+1]=[[</svg></body>]]content=table.concat(bi,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>r then local gR=AlignToWorldVector(vec3(velocity),0.01)if a2 then autoRoll=true;if gR then ProgradeIsOn=false;s=true;BeginReentry()a2=false;a4=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if a8 then RetrogradeIsOn=false elseif velMag>r then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a2 then if j()==0 then s=true;BeginReentry()a2=false;a4=true else a2=false;ToggleAutopilot()end end;if a4 and a9<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a4=false end;if Autopilot and j()==0 then local K,L;if not TurnBurn then K,L=GetAutopilotBrakeDistanceAndTime(velMag)else K,L=GetAutopilotTBBrakeDistanceAndTime(velMag)end;K=K;L=L;local gS=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local gT=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local gU=getMagnitudeInDirection(gT,AutopilotShipUp)local gV=getMagnitudeInDirection(gT,AutopilotShipRight)local gW=-gV*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local gX=-gU*AutopilotDistance*velMag*TrajectoryAlignmentStrength;gS=AutopilotTargetCoords+-gW*vec3(AutopilotShipRight)+-gX*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(gS)-vec3(core.getConstructWorldPos())):len()local gY=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(gY)..'", "unit":""}')local gZ=true;local g_=(Q.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-Q.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(g_)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then gZ=AlignToWorldVector((gS-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then gZ=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not gZ or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false elseif not p then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)p=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(g_-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and p then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false end;if AutopilotDistance<=K then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false end elseif AutopilotBraking then BrakeIsOn=true;B=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>G or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"F="Autopilot completed, orbit established"B=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)p=false;if CustomTarget~=nil then ProgradeIsOn=true;a2=true end end end elseif AutopilotCruising then if AutopilotDistance<=K then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if gZ then if not AutopilotRealigned then AutopilotTargetCoords=vec3(Q.center)+(AutopilotTargetOrbit+Q.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif gZ then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not p then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)p=true;BrakeIsOn=false end end end end end;if D then autoRoll=true;local h0=0;local cy=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local h1=cy-vec3(core.getConstructWorldPos())local h2=vec3(h1):project_on(vec3(core.getConstructWorldOrientationForward())):len()local h3=vec3(h1):project_on(vec3(core.getConstructWorldOrientationRight())):len()local Y=math.sqrt(h2*h2+h3*h3)AlignToWorldVector(h1:normalize())local h4=40;local h5=Y<h4;local h6=100;local h7=utils.clamp((Y-h4)/2,10,h6)x=0;local gZ=math.abs(y)<0.1;if gZ and velMag<h7 and not h5 then BrakeIsOn=false;h0=-20 else BrakeIsOn=true;h0=0 end;local bl=vec3(core.getConstructWorldOrientationForward())local bm=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local bo=getPitch(bn,bl,bm)local h8=1.0;if math.abs(h0-bo)>h8 then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(h0-bo)local h9=pitchPID:get()x=h9 end end;local cR=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cx=unit.getClosestPlanetInfluence()>0;local ck=a9;local ha=HoldAltitude-ck;local hb=500+velMag;local h0=(utils.smoothstep(ha,-hb,hb)-0.5)*2*MaxPitch;if not AltitudeHold then h0=0 end;if LockPitch~=nil then if cx then h0=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local hc=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hc then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hc)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not s then h0=-80;if j()>0.02 then F="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;h0=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then s=false;Reentry=false;autoRoll=autoRollPreference end end;local hd=x;if velMag>r then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cb=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cb)local he=cb:len()-cb:project_on(cR):len()local b0=LastMaxBrakeInAtmo;local cP=velocity.x*cR.x+velocity.y*cR.y+velocity.z*cR.z;local hf=velocity:len()-math.abs(cP)local hg=vec3(core.getWorldAirFrictionAcceleration())if b0~=nil then K,L=Kinematic.computeDistanceAndTime(hf,0,n(),0,0,b0+(hg:len()-hg:project_on(cR):len())*n())else K,L=Kinematic.computeDistanceAndTime(hf,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if he<=K then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and he>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=he end;x=hd;local bl=vec3(core.getConstructWorldOrientationForward())local bm=vec3(core.getConstructWorldOrientationRight())local bn=vec3(core.getWorldVertical())local gs=-1;local bo=getPitch(bn,bl,bm)local h8=0.1;if BrakeLanding then h0=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local cP=velocity.x*cR.x+velocity.y*cR.y+velocity.z*cR.z;gs=a5;if gs>-1 then if math.abs(h0-bo)<h8 then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)U=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-cR)<0.99 then BrakeIsOn=true elseif cP<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a3 then if h0<20 then AutoTakeoff=false;if not a3 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;a3=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif a3 and j()==0 and a9>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(h0-bo)>h8 then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(h0-bo)local h9=pitchPID:get()x=x+h9 end end;G=orbit.eccentricity;if antigrav and not ExternalAGG and a9<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local hh=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)hh=math.max(hh,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hi=utils.clamp(w+x+system.getControlDeviceForwardInput(),-1,1)local hj=utils.clamp(z+C+system.getControlDeviceYawInput(),-1,1)local hk=utils.clamp(A+y-system.getControlDeviceLeftRightInput(),-1,1)local hl=B;local hm=vec3(core.getWorldVertical())local hn=vec3(core.getConstructWorldOrientationUp())local ho=vec3(core.getConstructWorldOrientationForward())local hp=vec3(core.getConstructWorldOrientationRight())local hq=vec3(core.getWorldVelocity())local hr=vec3(core.getWorldVelocity()):normalize()local hs=getRoll(hm,ho,hp)local ht=math.abs(hs)local hu=utils.sign(hs)local j=j()local hv=vec3(core.getWorldAngularVelocity())local hw=hi*pitchSpeedFactor*hp+hj*rollSpeedFactor*ho+hk*yawSpeedFactor*hn;if hm:len()>0.01 and j>0.0 or ProgradeIsOn then local hx=1.0;if autoRoll==true and ht>hx and hj==0 then local hy=utils.clamp(0,ht-30,ht+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hy-hs)local hz=rollPID:get()hw=hw+hz*ho end end;if hm:len()>0.01 and j>0.0 then local hA=20.0;if turnAssist==true and ht>hA and hi==0 and hk==0 then local hB=turnAssistFactor*0.1;local hC=turnAssistFactor*0.025;local hD=(ht-hA)/(180-hA)*180;local hE=0;if hD<90 then hE=hD/90 elseif hD<180 then hE=(180-hD)/90 end;hE=hE*hE;local hF=-hu*hC*(1.0-hE)local hG=hB*hE;hw=hw+hG*hp+hF*hn end end;local hH=1;local hI=0;local hJ=1;local hK=hh*(hw-hv)local hL=vec3(core.getWorldAirFrictionAngularAcceleration())hK=hK-hL;Nav:setEngineTorqueCommand('torque',hK,hH,'airfoil','','',hJ)local hM=-hl*(brakeSpeedFactor*hq+brakeFlatFactor*hr)Nav:setEngineForceCommand('brake',hM)local hN=''local hO=vec3()local hP=false;local hQ='thrust analog longitudinal'local hR=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if hR==axisCommandType.byThrottle then local hS=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hQ,axisCommandId.longitudinal)Nav:setEngineForceCommand(hQ,hS,hH)elseif hR==axisCommandType.byTargetSpeed then local hS=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)hN=hN..' , '..hQ;hO=hO+hS;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then hP=true end end;local hT='thrust analog lateral'local hU=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if hU==axisCommandType.byThrottle then local hV=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hT,axisCommandId.lateral)Nav:setEngineForceCommand(hT,hV,hH)elseif hU==axisCommandType.byTargetSpeed then local hW=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)hN=hN..' , '..hT;hO=hO+hW end;local hX='thrust analog vertical'local hY=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if hY==axisCommandType.byThrottle then local hZ=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(hX,axisCommandId.vertical)if U~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(hX,hZ,hH,'airfoil','ground','',hJ)else Nav:setEngineForceCommand(hX,vec3(),hH)Nav:setEngineForceCommand('airfoil vertical',hZ,hH,'airfoil','','',hJ)Nav:setEngineForceCommand('ground vertical',hZ,hH,'ground','','',hJ)end elseif hY==axisCommandType.byTargetSpeed then if U==0 then Nav:setEngineForceCommand('hover',vec3(),hH)end;local h_=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)hN=hN..' , '..hX;hO=hO+h_ end;if hO:len()>constants.epsilon then if B~=0 or hP or math.abs(hr:dot(ho))<0.95 then hN=hN..', brake'end;Nav:setEngineForceCommand(hN,hO,hI,'','','',hJ)end;Nav:setBoosterCommand('rocket_engine')if J and not VanillaRockets then local a_=vec3(core.getVelocity()):len()local i0=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local i1=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if a_*3.6>i1*(1-i0)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif a_*3.6<i1*(1-i0)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local i2=unit.getThrottle()local h7=i2/100;if j==0 then h7=h7*MaxGameVelocity;if a_>=h7*(1-i0)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif a_<h7*(1-i0)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else h7=h7*ReentrySpeed/3.6;if a_>=h7*(1-i0)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif a_<h7*(1-i0)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,aN=coroutine.resume(beginSetup)if aN then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(i3)if i3=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and a5==-1 and(j()>0 or a9<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>r then F="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif i3=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif i3=="forward"then w=w-1 elseif i3=="backward"then w=w+1 elseif i3=="left"then z=z-1 elseif i3=="right"then z=z+1 elseif i3=="yawright"then A=A-1 elseif i3=="yawleft"then A=A+1 elseif i3=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif i3=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif i3=="up"then U=U+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif i3=="down"then U=U-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif i3=="groundaltitudeup"then OldButtonMod=H;OldAntiMod=I;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+I;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+I end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+H else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif i3=="groundaltitudedown"then OldButtonMod=H;OldAntiMod=I;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-H else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif i3=="option1"then IncrementAutopilotTargetIndex()q=false elseif i3=="option2"then DecrementAutopilotTargetIndex()q=false elseif i3=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;q=false;ToggleWidgets()elseif i3=="option4"then ToggleAutopilot()q=false elseif i3=="option5"then ToggleLockPitch()q=false elseif i3=="option6"then ToggleAltitudeHold()q=false elseif i3=="option7"then wipeSaveVariables()q=false elseif i3=="option8"then ToggleFollowMode()q=false elseif i3=="option9"then if gyro~=nil then gyro.toggle()ac=gyro.getState()==1 end;q=false elseif i3=="lshift"then if system.isViewLocked()==1 then E=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then E=true;Animated=false;Animating=false end elseif i3=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif i3=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif i3=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not J then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;J=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;J=false end elseif i3=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif i3=="speedup"then if not E then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif i3=="speeddown"then if not E then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif i3=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(i3)if i3=="forward"then w=0 elseif i3=="backward"then w=0 elseif i3=="left"then z=0 elseif i3=="right"then z=0 elseif i3=="yawright"then A=0 elseif i3=="yawleft"then A=0 elseif i3=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif i3=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif i3=="up"then U=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif i3=="down"then U=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif i3=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then I=OldAntiMod end;if AltitudeHold then H=OldButtonMod end;q=false elseif i3=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then I=OldAntiMod end;if AltitudeHold then H=OldButtonMod end;q=false elseif i3=="lshift"then if system.isViewLocked()==1 then E=false;V=0;W=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then E=false;Animated=false;Animating=false end elseif i3=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif i3=="lalt"then if o()==0 and freeLookToggle then if q then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else q=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(i3)if i3=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+I;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+I end;I=I*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+H;H=H*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif i3=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-I;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;I=I*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-H;H=H*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif i3=="speedup"then if not E then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif i3=="speeddown"then if not E then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(bi,i4)if i4~="empty"then bi[#bi+1]=[[<text class="msg" x="50%%" y="310" >]]for i5 in string.gmatch(i4,"([^\n]+)")do bi[#bi+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],i5)end;bi[#bi+1]=[[</text>]]end;if X~=0 then unit.setTimer("msgTick",X)X=0 end end;function updateDistance()local aU=system.getTime()local velocity=vec3(core.getWorldVelocity())local cu=vec3(velocity):len()local i6=aU-ab;if cu>1.38889 then cu=cu/1000;local i7=cu*(aU-ab)TotalDistanceTravelled=TotalDistanceTravelled+i7;R=R+i7 end;S=S+i6;TotalFlightTime=TotalFlightTime+i6;ab=aU end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
