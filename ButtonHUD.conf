name: ButtonsHud - Dimencia and Archaegeo v4.914 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: If on, rockets behave like vanilla
        userControlScheme = "virtual joystick" --export: Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: Default is 1920, does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: Default is 1080, does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExternalAGG = false --export: Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;DisplayOrbit=true;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TargetGroundAltitude=LandingGearGroundHeight;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization"}local b={"BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;function LoadVariables()if dbHud_1 then local b2=dbHud_1.hasKey;if not useTheseSettings then for b3,b4 in pairs(a)do if b2(b4)then local b5=f(dbHud_1.getStringValue(b4))if b5~=nil then c(b4 .." "..dbHud_1.getStringValue(b4))_G[b4]=b5;az=true end end end end;coroutine.yield()for b3,b4 in pairs(b)do if b2(b4)then local b5=f(dbHud_1.getStringValue(b4))if b5~=nil then c(b4 .." "..dbHud_1.getStringValue(b4))_G[b4]=b5;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local b6=system.getTime()if LastStartTime+180<b6 then LastMaxBrakeInAtmo=0 end;s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)LastStartTime=b6;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;MinimumRateOfChange=math.cos(StallAngle*constants.deg2rad)autoRoll=autoRollPreference;if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(b7,b8)if b7>b8 then b8=b7 end;if ContainerOptimization>0 then b8=b8-b8*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then b8=b8-b8*FuelTankOptimization*0.05 end;return b8 end;function ProcessElements()for b3 in pairs(af)do local type=l(af[b3])if type=="landing gear"then A=true end;if type=="dynamic core"then local b9=h(af[b3])if b9>10000 then aQ=128 elseif b9>1000 then aQ=64 elseif b9>150 then aQ=32 end end;aG=aG+h(af[b3])if fuelX~=0 and fuelY~=0 then if type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank"then local b9=h(af[b3])local ba=m(af[b3])local b7=0;local bb=system.getTime()if type=="Atmospheric Fuel Tank"then local b8=400;local bc=35.03;if b9>10000 then b8=51200;bc=5480 elseif b9>1300 then b8=6400;bc=988.67 elseif b9>150 then b8=1600;bc=182.67 end;b7=ba-bc;if fuelTankHandlingAtmo>0 then b8=b8+b8*fuelTankHandlingAtmo*0.2 end;b8=CalculateFuelVolume(b7,b8)aD[#aD+1]={af[b3],core.getElementNameById(af[b3]),b8,bc,b7,bb}end;if type=="Rocket Fuel Tank"then local b8=320;local bc=173.42;if b9>65000 then b8=40000;bc=25740 elseif b9>6000 then b8=5120;bc=4720 elseif b9>700 then b8=640;bc=886.72 end;b7=ba-bc;if fuelTankHandlingRocket>0 then b8=b8+b8*fuelTankHandlingRocket*0.2 end;b8=CalculateFuelVolume(b7,b8)aF[#aF+1]={af[b3],core.getElementNameById(af[b3]),b8,bc,b7,bb}end;if type=="Space Fuel Tank"then local b8=2400;local bc=182.67;if b9>10000 then b8=76800;bc=5480 elseif b9>1300 then b8=9600;bc=988.67 end;b7=ba-bc;if fuelTankHandlingSpace>0 then b8=b8+b8*fuelTankHandlingSpace*0.2 end;b8=CalculateFuelVolume(b7,b8)aE[#aE+1]={af[b3],core.getElementNameById(af[b3]),b8,bc,b7,bb}end end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if ad then BrakeIsOn=true end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,b4 in pairs(door)do b4.toggle()end end;if switch then for _,b4 in pairs(switch)do b4.toggle()end end;if forcefield then for _,b4 in pairs(forcefield)do b4.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not A then GearExtended=true end else if GearExtended or not A then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and not dbHud_1 and(GearExtended or not A)then BrakeIsOn=true end;WasInAtmo=ad end;function ConvertResolutionX(b4)if ResolutionX==1920 then return b4 else return round(ResolutionX*b4/1920,0)end end;function ConvertResolutionY(b4)if ResolutionY==1080 then return b4 else return round(ResolutionY*b4/1080,0)end end;function RefreshLastMaxBrake(bd,be)if bd==nil then bd=core.g()end;bd=round(bd,5)local bf=j()if be~=nil and be or(aC==nil or aC~=bd)then local velocity=core.getVelocity()local bg=vec3(velocity):len()local bh=f(unit.getData()).maxBrake;if bh~=nil and bh>0 and ad then bh=bh/utils.clamp(bg/100,0.1,1)bh=bh/bf;if bh>LastMaxBrakeInAtmo and bf>0.10 then LastMaxBrakeInAtmo=bh end end;if bh~=nil and bh>0 then LastMaxBrake=bh end;aC=bd end end;function MakeButton(bi,bj,bk,bl,bm,bn,bo,bp,bq)local br={enableName=bi,disableName=bj,width=bk,height=bl,x=bm,y=bn,toggleVar=bo,toggleFunction=bp,drawCondition=bq,hovered=false}table.insert(aq,br)return br end;function UpdateAtlasLocationsList()AtlasOrdered={}for b3,b4 in pairs(aS[0])do table.insert(AtlasOrdered,{name=b4.name,index=b3})end;local function bs(bt,bu)return bt.name<bu.name end;table.sort(AtlasOrdered,bs)end;function AddLocationsToAtlas()for b3,b4 in pairs(SavedLocations)do table.insert(aS[0],b4)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bv=planet.name..". "..#SavedLocations;if radar_1 then local bw,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bw~=nil and bw~=""then bv=bv.." "..radar_1.getConstructName(bw)end end;local bx={position=position,name=bv,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=bx;table.insert(aS[0],bx)UpdateAtlasLocationsList()K="Location saved as "..bv else K="Databank must be installed to save locations"end end;function UpdatePosition()local by=-1;local bx;for b3,b4 in pairs(SavedLocations)do if b4.name and b4.name==CustomTarget.name then by=b3;break end end;if by~=-1 then bx={position=vec3(core.getConstructWorldPos()),name=SavedLocations[by].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[by]=bx;by=-1;for b3,b4 in pairs(aS[0])do if b4.name and b4.name==CustomTarget.name then by=b3 end end;if by>-1 then aS[0][by]=bx end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local by=-1;for b3,b4 in pairs(aS[0])do if b4.name and b4.name==CustomTarget.name then by=b3 end end;if by>-1 then table.remove(aS[0],by)end;by=-1;for b3,b4 in pairs(SavedLocations)do if b4.name and b4.name==CustomTarget.name then K=b4.name.." saved location cleared"by=b3;break end end;if by~=-1 then table.remove(SavedLocations,by)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bz)bz[#bz+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bA,bB,bm,bn,bk,bl)if bA>bm and bA<bm+bk and bB>bn and bB<bn+bl then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bC=vec3(core.getConstructWorldOrientationForward())local bD=vec3(core.getConstructWorldOrientationRight())local bE=vec3(core.getWorldVertical())local bF=getPitch(bE,bC,bD)LockPitch=bF;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;autoRoll=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget then if CustomTarget~=nil then LockPitch=nil;if planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end else a7=true end else a8=true;RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;autoRoll=autoRollPreference end end;function CheckDamage(bz)local bG=0;ao=""local bH=aG;local bI=0;local bJ=0;local bK=0;local bL=0;local bM=""for b3 in pairs(af)do local b9=0;local bN=0;bN=h(af[b3])b9=k(af[b3])bI=bI+b9;if b9<bN then if b9==0 then bK=bK+1 else bJ=bJ+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[b3]))local bm=position.x-aQ;local bn=position.y-aQ;local bO=position.z-aQ;table.insert(al,core.spawnArrowSticker(bm,bn,bO+1,"down"))table.insert(al,core.spawnArrowSticker(bm,bn,bO+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bm+1,bn,bO,"north"))table.insert(al,core.spawnArrowSticker(bm+1,bn,bO,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bm-1,bn,bO,"south"))table.insert(al,core.spawnArrowSticker(bm-1,bn,bO,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bm,bn-1,bO,"east"))table.insert(al,core.spawnArrowSticker(bm,bn-1,bO,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bm,bn+1,bO,"west"))table.insert(al,core.spawnArrowSticker(bm,bn+1,bO,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[b3])end elseif aH and#al>0 and al[11]==af[b3]then for bP in pairs(al)do core.deleteSticker(al[bP])end;al={}end end;bG=d(bI/bH*100)if bG<100 then bz[#bz+1]=[[<g class="pbright txt">]]bL=d(bG*2.55)bM=e("rgb(%d,%d,%d)",255-bL,bL,0)if bG<100 then bz[#bz+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],bM,bG)if bK>0 then bz[#bz+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],bM,bK,bJ)elseif bJ>0 then bz[#bz+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],bM,bJ)end end;bz[#bz+1]=[[<\g>]]end end;function DrawCursorLine(bz)local bQ=d(utils.clamp(a3/(at/4)*255,0,255))bz[#bz+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+bQ,d(PrimaryG+0.5)-bQ,d(PrimaryB+0.5)-bQ)end;function getPitch(bR,bS,bu)local bT=bR:cross(bu):normalize_inplace()local bF=math.acos(utils.clamp(bT:dot(-bS),-1,1))*constants.rad2deg;if bT:cross(-bS):dot(bu)<0 then bF=-bF end;return bF end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;autoRoll=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for b3,b4 in pairs(a)do dbHud_1.setStringValue(b4,g(nil))end;for b3,b4 in pairs(b)do if b4~="SavedLocations"then dbHud_1.setStringValue(b4,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,b4 in pairs(aq)do if b4.hovered then if not b4.drawCondition or b4.drawCondition()then b4.toggleFunction()end;b4.hovered=false end end end;function SetButtonContains()local bm=a0+at/2;local bn=a1+au/2;for _,b4 in pairs(aq)do b4.hovered=Contains(bm,bn,b4.x,b4.y,b4.width,b4.height)end end;function DrawButton(bz,bU,hover,bm,bn,bV,bW,bX,bY,bZ,b_)if type(bZ)=="function"then bZ=bZ()end;if type(b_)=="function"then b_=b_()end;bz[#bz+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bm,bn,bV,bW)if bU then bz[#bz+1]=e("%s'",bX)else bz[#bz+1]=bY end;if hover then bz[#bz+1]=" style='stroke:white; stroke-width:2'"else bz[#bz+1]=" style='stroke:black; stroke-width:1'"end;bz[#bz+1]="></rect>"bz[#bz+1]=e("<text x='%f' y='%f' font-size='24' fill='",bm+bV/2,bn+bW/2+5)if bU then bz[#bz+1]="black"else bz[#bz+1]="white"end;bz[#bz+1]="' text-anchor='middle' font-family='Montserrat'>"if bU then bz[#bz+1]=e("%s</text>",bZ)else bz[#bz+1]=e("%s</text>",b_)end end;function DrawButtons(bz)local c0="rgb(50,50,50)'"local c1="rgb(210,200,200)"local c2=DrawButton;for _,b4 in pairs(aq)do local bj=b4.disableName;local bi=b4.enableName;if type(bj)=="function"then bj=bj()end;if type(bi)=="function"then bi=bi()end;if not b4.drawCondition or b4.drawCondition()then c2(bz,b4.toggleVar(),b4.hovered,b4.x,b4.y,b4.width,b4.height,c1,c0,bj,bi)end end end;function DrawTank(bz,aP,bm,c3,c4,c5,c6,c7)local c8=1;local c9=2;local ca=3;local cb=4;local cc=5;local cd=6;local ce=""local cf=0;local cg=fuelY;local ch=fuelY+10;if o()==1 and not RemoteHud then cg=cg-50;ch=ch-50 end;bz[#bz+1]=[[<g class="pdim txtfuel">]]if c4=="ATMO"then ce="atmofueltank"elseif c4=="SPACE"then ce="spacefueltank"else ce="rocketfueltank"end;cf=_G[ce.."_size"]if#c5>0 then for i=1,#c5 do local bv=string.sub(c5[i][c9],1,12)local ci=0;for bP=1,cf do if c5[i][c9]==f(unit[ce.."_"..bP].getData()).name then ci=bP;break end end;if aP or c6[i]==nil or c7[i]==nil then local cj=0;local ck=0;local cl=0;local cm=0;local bb=system.getTime()if ci~=0 then c7[i]=f(unit[ce.."_"..ci].getData()).percentage;c6[i]=f(unit[ce.."_"..ci].getData()).timeLeft;if c6[i]=="n/a"then c6[i]=0 end else cl=m(c5[i][c8])-c5[i][cb]cj=c5[i][ca]c7[i]=d(0.5+cl*100/cj)ck=c5[i][cc]cm=c5[i][cd]if ck<=cl then c6[i]=0 else c6[i]=d(0.5+cl/((ck-cl)/(bb-cm)))end;c5[i][cc]=cl;c5[i][cd]=bb end end;if bv==c3 then bv=e("%s %d",c4,i)end;if ci==0 then bv=bv.." *"end;local cn;if c6[i]==0 then cn="n/a"else cn=FormatTimeString(c6[i])end;if c7[i]~=nil then local bL=d(c7[i]*2.55)local bM=e("rgb(%d,%d,%d)",255-bL,bL,0)local co=""if cn~="n/a"and c6[i]<120 or c7[i]<5 then if aP then co=[[class="red"]]end end;bz[#bz+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bm,cg,co,bv,bm,ch,bM,c7[i],cn)cg=cg+30;ch=ch+30 end end end;bz[#bz+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(velocity)velocity=vec3(velocity)local bF=-math.deg(math.atan(velocity.y,velocity.z))+180;bF=bF-90;if bF<0 then bF=360+bF end;if bF>180 then bF=-180+bF-180 end;return-bF end;function getRelativeYaw(velocity)velocity=vec3(velocity)local cp=math.deg(math.atan(velocity.y,velocity.x))-90;if cp<-180 then cp=360+cp end;return cp end;function AlignToWorldVector(cq,cr)if not ad or RateOfChange>MinimumRateOfChange+0.08 or aa~=-1 then if cr==nil then cr=as end;cq=vec3(cq):normalize()local cs=vec3(core.getConstructWorldOrientationForward())-cq;local ct=-getMagnitudeInDirection(cs,core.getConstructWorldOrientationRight())*ar;local cu=-getMagnitudeInDirection(cs,core.getConstructWorldOrientationUp())*ar;if am==0 then am=ct/2 end;if an==0 then an=cu/2 end;D=D-(ct+(ct-am)*DampingMultiplier)C=C+cu+(cu-an)*DampingMultiplier;am=ct;an=cu;if math.abs(ct)<cr and math.abs(cu)<cr then return true end;return false end end;function getAPEnableName()local bv=AutopilotTargetName;if bv==nil then bv=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bv==nil then bv="None"end;return"Engage Autopilot: "..bv end;function getAPDisableName()local bv=AutopilotTargetName;if bv==nil then bv=CustomTarget.name end;if bv==nil then bv="None"end;return"Disable Autopilot: "..bv end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoRoll=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoRoll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cv=50;local cw=260;local cx=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cw,cv,at/2-cw/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cw,cv,at/2-cw/2-50-cx.width,au/2-cv+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cw,cv,at/2-cw/2+cx.width+50,au/2-cv+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cy=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cy.height,cy.x+cy.width+30,cy.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cy.height,cy.x+cy.width+30,cy.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cy.height,cy.x-200-30,cy.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cv=60;cw=300;local bm=10;local bn=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cw,cv,bm,bn,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cw,cv,bm+cw+20,bn,function()return AltitudeHold end,ToggleAltitudeHold)bn=bn+cv+20;MakeButton("Engage Autoland","Disable Autoland",cw,cv,bm,bn,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cw,cv,bm+cw+20,bn,function()return AutoTakeoff end,ToggleAutoTakeoff)bn=bn+cv+20;MakeButton("Show Orbit Display","Hide Orbit Display",cw,cv,bm,bn,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bn=bn+cv+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cw,cv,bm,bn,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cw,cv,bm+cw+20,bn,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bn=bn+cv+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cw,cv,bm,bn,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cw,cv,bm+cw+20,bn,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bn=bn+cv+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cw,cv,bm,bn,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bn=bn+cv+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cw*2,cv,bm,bn,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cz=Nav.axisCommandManager:getAxisCommandType(0)local cA="TRAVEL"if cz==1 then cA="CRUISE"end;if Autopilot then cA="AUTOPILOT"end;return cA end;function updateHud(bz)local cB=ae;local velocity=core.getVelocity()local bg=vec3(velocity):len()local bE=vec3(core.getWorldVertical())local bC=vec3(core.getConstructWorldOrientationForward())local bD=vec3(core.getConstructWorldOrientationRight())local cC=vec3(core.getConstructWorldOrientationUp())local cD=getRoll(bE,bC,bD)local cE=cD/180*math.pi;local cF=math.cos(cE)local cG=math.sin(cE)local bF=getPitch(bE,bC,bD*cF+cC*cG)local cH=cD;local cI=bF;local cJ=j()local cK=d(unit.getThrottle())local cL=bg*3.6;local cM=unit.getAxisCommandValue(0)local cA=GetFlightStyle()local cN="ROLL"local cO=unit.getClosestPlanetInfluence()>0;if cK==nil then cK=0 end;if not cO then if bg>5 then bF=getRelativePitch(velocity)cD=getRelativeYaw(velocity)else bF=0;cD=0 end;cN="YAW"end;bz[#bz+1]=a5;bz[#bz+1]=ao;bz[#bz+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bz,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bz,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bz,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bz,cB)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if cO then DrawRollLines(bz,centerX,centerY,cH,cN,cO)DrawArtificialHorizon(bz,cI,cH,centerX,centerY,cO,d(getRelativeYaw(velocity)),bg)else DrawRollLines(bz,centerX,centerY,cD,cN,cO)DrawArtificialHorizon(bz,bF,cD,centerX,centerY,cO,d(cD),bg)end;DrawAltitudeDisplay(bz,cB,cO)DrawPrograde(bz,velocity,bg,centerX,centerY)end end;DrawThrottle(bz,cA,cK,cM)DrawSpeed(bz,cL)DrawWarnings(bz)DisplayOrbitScreen(bz)if screen_2 then local cP=vec3(core.getConstructWorldPos())local bm=960+cP.x/aU;local bn=450+cP.y/aV;screen_2.moveContent(aW,(bm-80)/19.2,(bn-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bz)local cQ=aj;local cR=ak;local cS=aj;local cT=ak;if IsInFreeLook()and not brightHud then cQ=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]cR=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bz[#bz+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],cQ,cQ,cS,cS,cR,cR,cT,cT,ResolutionX,ResolutionY)end;function HUDEpilogue(bz)bz[#bz+1]="</svg>"end;function DrawSpeed(bz,cL)local cU=throtPosY-10;local cV=throtPosX+10;bz[#bz+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cU=75 end;bz[#bz+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],cV,cU,d(cL))end;function DrawOdometer(bz,W,TotalDistanceTravelled,cA,X,cJ)local cW=ConvertResolutionX(1240)local cX=ConvertResolutionY(55)local cY=cX+10;local cJ=j()local bd=core.g()local cZ=0;local c_=0;local d0=0;RefreshLastMaxBrake(bd)if ad then d0=LastMaxBrakeInAtmo else d0=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local d1=vec3(core.getWorldAcceleration()):len()/9.80665;if bd>0.1 then c_=aB*bd;cZ=maxThrust/bd end;bz[#bz+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then cW=ConvertResolutionX(1120)cX=ConvertResolutionY(55)cY=cX+10 elseif ad then local d2=ConvertResolutionX(770)bz[#bz+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],d2,cX,d2,cY,cJ)end;bz[#bz+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],cW,cX,cW,cY,bd/9.80665,cW,cX+20,cW,cY+20,d1)bz[#bz+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bz[#bz+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),d0/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cA)if bd>0.1 then bz[#bz+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),cZ/1000,ConvertResolutionX(1240),ConvertResolutionY(20),c_/1000)else bz[#bz+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bz[#bz+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cA)end;bz[#bz+1]="</g>"end;function DrawThrottle(bz,cA,cK,cM)local cg=throtPosY+10;local ch=throtPosY+20;if o()==1 and not RemoteHud then cg=55;ch=65 end;local d3="CRUISE"local unit="km/h"local d4=cM;if cA=="TRAVEL"or cA=="AUTOPILOT"then d3="THROT"unit="%"d4=cK;local d5="dim"if cK<0 then d5="red"end;bz[#bz+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],d5,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(cK),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bz[#bz+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cg,d3,throtPosX+10,ch,d4,unit)end;function DrawVerticalSpeed(bz,cB)if cB<200000 and not ad or cB and ad then local d6=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local d7=0;if math.abs(d6)>1 then d7=45*math.log(math.abs(d6),10)if d6<0 then d7=-d7 end end;bz[#bz+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(d6),d(d7))end end;function getHeading(bS)local d8=-vec3(core.getWorldVertical())bS=bS-bS:project_on(d8)local d9=vec3(0,0,1)d9=d9-d9:project_on(d8)local da=d9:cross(d8)local d7=d9:angle_between(bS)*constants.rad2deg;if bS:dot(da)<0 then d7=360-d7 end;return d7 end;function DrawRollLines(bz,centerX,centerY,cH,cN,cO)local db=circleRad;local dc=20;dc=d(dc)local dd=d(cH)if cO then for i=-45,45,5 do local de=i;bz[#bz+1]=e([[<g transform="rotate(%f,%d,%d)">]],de,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bz[#bz+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+db+dc-len,centerX,centerY+db+dc)end;bz[#bz+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+db+dc-35,cN,centerX,centerY+db+dc-25,dd)bz[#bz+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cH,centerX,centerY)bz[#bz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+db+dc-20,centerX+5,centerY+db+dc-20,centerX,centerY+db+dc-15)bz[#bz+1]="</g>"end;local cp=dd;if cO then cp=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local df=20;local dg=d(cp)local dh=0;local di=centerY+db+dc+20;local dj=centerX;if cN~="YAW"then di=ConvertResolutionY(130)dj=ConvertResolutionX(960)end;local dk=[[<path class="txttick line" d="]]for i=d(dg-(df+10)-dg%5+0.5),d(dg+df+10+dg%5+0.5),5 do local bm=dj+-i*5+cp*5;if i%10==0 then dh=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bz[#bz+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bm+5,di-12,p)elseif i%5==0 then dh=5 end;if dh==10 then dk=e([[%s M %f %f v %d]],dk,bm,di-5,dh)else dk=e([[%s M %f %f v %d]],dk,bm,di-2.5,dh)end end;bz[#bz+1]=dk..[["/>]]bz[#bz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dj-5,di+10,dj+5,di+10,dj,di+5)if cO then cN="HDG"end;bz[#bz+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dj,di+25,dg,dj,di+35,cN)end;function DrawArtificialHorizon(bz,cI,cH,centerX,centerY,cO,dl,bg)local db=circleRad;local dm=d(db*3/5)if db>0 then local dn=d(cI)local len=0;local dk=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*cH,centerX,centerY)if not ad then dk=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bz[#bz+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],db-1,centerX,centerY)bz[#bz+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dn-30-dn%5+0.5),d(dn+30+dn%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bn=centerY+-i*5+cI*5;if len==30 then dk=e([[%s M %d %f h %d]],dk,centerX-dm-len,bn,len)if ad then bz[#bz+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cH,centerX,centerY,centerX-dm+10,bn,i)bz[#bz+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*cH,centerX,centerY,centerX+dm-10,bn,i)if i==0 or i==180 or i==-180 then bz[#bz+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cH,centerX,centerY,centerX-dm+20,bn,dm*2-40)end else bz[#bz+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dm+10,bn,i)bz[#bz+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dm-10,bn,i)end;dk=e([[%s M %d %f h %d]],dk,centerX+dm,bn,len)else dk=e([[%s M %d %f h %d]],dk,centerX-dm-len,bn,len)dk=e([[%s M %d %f h %d]],dk,centerX+dm,bn,len)end end;bz[#bz+1]=dk..[["/>]]local dp="PITCH"if not cO then dp="REL PITCH"end;if cI>90 and not ad then cI=90-(cI-90)elseif cI<-90 and not ad then cI=-90-(cI+90)end;if db>200 then if ad then if bg>w then bz[#bz+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dl)end;bz[#bz+1]=e([[<g transform="rotate(%f,%d,%d)">]],-cH,centerX,centerY)else bz[#bz+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bz[#bz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dm+25,centerY-5,centerX-dm+20,centerY,centerX-dm+25,centerY+5,centerX-dm+50,centerY+4,dn)bz[#bz+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dm-25,centerY-5,centerX+dm-20,centerY,centerX+dm-25,centerY+5,centerX+dm-30,centerY+4,dn)bz[#bz+1]="</g>"end;local dq=d(db/3)bz[#bz+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dq,centerY,db-dq)if not ad and cO then bz[#bz+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*cH,centerX,centerY,centerX-dm+10,centerY,dm*2-20)end;bz[#bz+1]="</g>"if db<200 then if ad and bg>w then bz[#bz+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-db,dp,centerX,centerY-db+10,dn,centerX,centerY-15,"Yaw",centerX,centerY+20,dl)else bz[#bz+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-db,dp,centerX,centerY-db+15,dn)end end end end;function DrawAltitudeDisplay(bz,cB,cO)local dr=altMeterX;local ds=altMeterY;local dt=78;local du=19;local dv=AboveGroundLevel()if dv~=-1 then table.insert(bz,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dr+dt,ds+du+20,dv))end;if cO and(cB<200000 and not ad or cB and ad)then table.insert(bz,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dr-1,ds-4,dt+2,du+6,dr+1,ds-1,dt-4,du))local by=0;local dw=1;local dx=0;local dy=cB<0;local dz=9;if dy then dz=0 end;local cB=math.abs(cB)while by<6 do local dA=11;local dB=16;local dC=9;local dD=14;local co="altsm"if by>2 then dB=dB+3;dA=dA+2;dD=dD+2;dC=dC-6;co="altbig"end;if dy then co=co.." red"end;local dE=cB/dw%10;local dF=d(dE)local dG=d((dF+1)%10)local dH=dx;if by==0 then dH=dE-dF;if dy then dH=1-dH end end;if dy and(by==0 or dx~=0)then local dI=dG;dG=dF;dF=dI end;local dJ=dB*(dH-1)local dK=dJ+dB;local bm=dr+dC+(6-by)*dA;local bn=ds+dD;table.insert(bz,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],co,bm,bn+dJ,dG,bm,bn+dK,dF))by=by+1;dw=dw*10;if dF==dz then dx=dH else dx=0 end end;table.insert(bz,[[</g></g>]])end end;function DrawPrograde(bz,velocity,bg,centerX,centerY)if bg>5 and not ad or bg>w then local db=circleRad;local dL=20;local dM=20;local dN=vec3(velocity)local dO=getRelativePitch(dN)local dP=getRelativeYaw(dN)local dQ=-dP/dM*db;local dR=dO/dL*db;local bm=centerX+dQ;local bn=centerY+dR;local a3=math.sqrt(dQ^2+dR^2)if a3<db then bz[#bz+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bm,bn)else local d7=math.atan(dR,dQ)local dS=centerX+db*math.cos(d7)local dT=centerY+db*math.sin(d7)bz[#bz+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',dS,dT)end;dO=getRelativePitch(-dN)dP=getRelativeYaw(-dN)dQ=-dP/dM*db;dR=dO/dL*db;bm=centerX+dQ;bn=centerY+dR;a3=math.sqrt(dQ^2+dR^2)if not ad then if a3<db then bz[#bz+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bm,bn)else local d7=math.atan(dR,dQ)local dS=centerX+db*math.cos(d7)local dT=centerY+db*math.sin(d7)bz[#bz+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',dS,dT)end end end end;function DrawWarnings(bz)bz[#bz+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bz[#bz+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bz[#bz+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bz[#bz+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bz[#bz+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local dU=ConvertResolutionX(960)local dV=ConvertResolutionY(860)local dW=ConvertResolutionY(880)local dX=ConvertResolutionY(900)local dY=ConvertResolutionY(960)local dZ=ConvertResolutionY(200)local d_=ConvertResolutionY(150)local e0=ConvertResolutionY(960)if o()==1 and not RemoteHud then dV=ConvertResolutionY(135)dW=ConvertResolutionY(155)dX=ConvertResolutionY(175)dZ=ConvertResolutionY(115)d_=ConvertResolutionY(95)end;if BrakeIsOn then bz[#bz+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],dU,dV)end;if ad and RateOfChange<MinimumRateOfChange and velMag>brakeLandingRate+5 then bz[#bz+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],dU,dZ+50)end;if ah then bz[#bz+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],dU,e0)end;if GearExtended then if A then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],dU,dW)else bz[#bz+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],dU,dW)end;bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],dU,dX,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],dU,dY+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dU,dZ+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bz[#bz+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],dU,dZ+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],dU,dZ+20,AutopilotStatus)elseif LockPitch~=nil then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],dU,dZ+20,d(LockPitch))elseif I then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],dU,dZ+20)elseif Reentry then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],dU,dZ+20)end;if AltitudeHold then if AutoTakeoff then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],dU,dZ,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bz[#bz+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],dU,dZ+50)end else bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],dU,dZ,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bz[#bz+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],dU,dZ)else bz[#bz+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],dU,dZ)end end;if ProgradeIsOn then bz[#bz+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],dU,dZ)end;if RetrogradeIsOn then bz[#bz+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],dU,dZ)end;if TurnBurn then bz[#bz+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],dU,d_)end;if VectorToTarget then bz[#bz+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],dU,dZ+30,VectorStatus)end;bz[#bz+1]="</g>"end;function DisplayOrbitScreen(bz)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local e1=75;local e2=0;local e3=250;local e4=4;e2=e2+e4;local e5=15;local bm=e1+e3+e1/2+e4;local bn=e2+e3/2+5+e4;local e6,e7,e8,e9;e6=e3/4;e9=0;bz[#bz+1]=[[<g class="pbright txtorb txtmid">]]bz[#bz+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',e3+e1*2,e3+e2,e4,e4)if orbit.periapsis~=nil and orbit.apoapsis~=nil then e8=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(e6*2)e7=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/e8*(1-orbit.eccentricity)e9=e6-orbit.periapsis.altitude/e8-planet.radius/e8;local ea=""if orbit.periapsis.altitude<=0 then ea='redout'end;bz[#bz+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],ea,e1+e3/2+e9+e4,e2+e3/2+e4,e6,e7)bz[#bz+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',e1+e3/2+e4,e2+e3/2+e4,planet.radius/e8)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bz[#bz+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bm-35,bn-5,e1+e3/2+e6+e9,bn-5)bz[#bz+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bm,bn)bn=bn+e5;bz[#bz+1]=e([[<text x="%f" y="%f">%s</text>]],bm,bn,getDistanceDisplayString(orbit.apoapsis.altitude))bn=bn+e5;bz[#bz+1]=e([[<text x="%f" y="%f">%s</text>]],bm,bn,FormatTimeString(orbit.timeToApoapsis))bn=bn+e5;bz[#bz+1]=e([[<text x="%f" y="%f">%s</text>]],bm,bn,getSpeedDisplayString(orbit.apoapsis.speed))end;bn=e2+e3/2+5+e4;bm=e1-e1/2+10+e4;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bz[#bz+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bm+35,bn-5,e1+e3/2-e6+e9,bn-5)bz[#bz+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bm,bn)bn=bn+e5;bz[#bz+1]=e([[<text x="%f" y="%f">%s</text>]],bm,bn,getDistanceDisplayString(orbit.periapsis.altitude))bn=bn+e5;bz[#bz+1]=e([[<text x="%f" y="%f">%s</text>]],bm,bn,FormatTimeString(orbit.timeToPeriapsis))bn=bn+e5;bz[#bz+1]=e([[<text x="%f" y="%f">%s</text>]],bm,bn,getSpeedDisplayString(orbit.periapsis.speed))end;bz[#bz+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],e1+e3/2+e4,20+e4,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eb=orbit.timeToApoapsis/orbit.period*2*math.pi;local ec=e6*math.cos(eb)local ed=e7*math.sin(eb)bz[#bz+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',e1+e3/2+ec+e9+e4,e2+e3/2+ed+e4)end;bz[#bz+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local ee=a3>100000;local b5=""if ee then b5=round(a3/1000/200,1).." SU"elseif a3<1000 then b5=round(a3,1).." M"else b5=round(a3/1000,1).." KM"end;return b5 end;function getDistanceDisplayString2(a3)local ee=a3>100000;local b5=""if ee then b5=round(a3/1000/200,2).." SU"elseif a3<1000 then b5=round(a3,2).." M"else b5=round(a3/1000,2).." KM"end;return b5 end;function getSpeedDisplayString(bg)return d(round(bg*3.6,0)+0.5).." km/h"end;function FormatTimeString(ef)local eg=0;local eh=0;local ei=0;if ef<60 then ef=d(ef)elseif ef<3600 then eg=d(ef/60)ef=d(ef%60)elseif ef<86400 then eh=d(ef/3600)eg=d(ef%3600/60)else ei=d(ef/86400)eh=d(ef%86400/60)end;if ei>0 then return ei.."d "..eh.."h "elseif eh>0 then return eh.."h "..eg.."m "elseif eg>0 then return eg.."m "..ef.."s"elseif ef>0 then return ef.."s"else return"0s"end end;function getMagnitudeInDirection(cq,ej)cq=vec3(cq)ej=vec3(ej):normalize()local b5=cq*ej;return b5.x+b5.y+b5.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local ek=AtlasOrdered[AutopilotTargetIndex].index;local el=aS[0][ek]if el.center then AutopilotTargetName=el.name;V=aY[0][ek]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=el;for _,b4 in pairs(aY[0])do if b4.name==CustomTarget.planetname then V=b4;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;AutopilotTargetCoords=vec3(V.center)_,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local em=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return em end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local velocity=core.getWorldVelocity()local bg=vec3(velocity):len()local en,eo=aZ.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,ep;if not TurnBurn then _,ep=GetAutopilotBrakeDistanceAndTime(bg)else _,ep=GetAutopilotTBBrakeDistanceAndTime(bg)end;local eq=0;local er=0;if AutopilotCruising or not Autopilot and bg>5 then er=aZ.computeTravelTime(bg,0,AutopilotDistance)elseif P+en<AutopilotDistance then eq=AutopilotDistance-(P+en)er=aZ.computeTravelTime(8333.0556,0,eq)else local es=(AutopilotDistance-P)/en;en=AutopilotDistance-P;eo=eo*es end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return er elseif AutopilotBraking then return ep elseif AutopilotCruising then return er+ep else return eo+Q+er end end;function GetAutopilotBrakeDistanceAndTime(bg)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bg,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bg,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bg)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bg,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local et=-1;local eu=-1;if vBooster then et=vBooster.distance()end;if hover then eu=hover.distance()end;if et~=-1 and eu~=-1 then if et<eu then return et else return eu end elseif et~=-1 then return et elseif eu~=-1 then return eu else return-1 end end;function AboveGroundLevel()local ev=-1;local ew=aa;if telemeter_1 then ev=telemeter_1.getDistance()end;if ew~=-1 and ev~=-1 then if ew<ev then return ew else return ev end elseif ew~=-1 then return ew else return ev end end;function tablelength(ex)local ey=0;for _ in pairs(ex)do ey=ey+1 end;return ey end;function BeginProfile(ez)ProfileTimeStart=system.getTime()end;function EndProfile(ez)local eA=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eA;ProfileCount=ProfileCount+1;if eA>ProfileTimeMax then ProfileTimeMax=eA end;if eA<ProfileTimeMin then ProfileTimeMin=eA end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eB=ProfileTimeSum;local eC=ProfileTimeSum/ProfileCount;local eD=ProfileTimeMin;local eE=ProfileTimeMax;local eF=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eB,eC,eD,eE,eF))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local eG=radar_1.getEntries()local eH=radar_1.getData()local eI=ConvertResolutionX(1770)local eJ=ConvertResolutionY(330)if#eG>0 then local eK=eH:find('identifiedConstructs":%[%]')if eK==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if eK~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],eI,eJ,#eG)local eL={}for b3,b4 in pairs(eG)do if radar_1.hasMatchingTransponder(b4)==1 then eL[#eL+1]=b4 end end;if#eL>0 then local bn=ConvertResolutionY(15)local bm=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bm,bn)for b3,b4 in pairs(eL)do bn=bn+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bm,bn,radar_1.getConstructName(b4))end end else local eM;eM=eH:find('worksInEnvironment":false')if eM then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],eI,eJ)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],eI,eJ)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bz,eN)if eN~="empty"then bz[#bz+1]=[[<text class="msg" x="50%%" y="310" >]]for eO in string.gmatch(eN,"([^\n]+)")do bz[#bz+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],eO)end;bz[#bz+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bb=system.getTime()local velocity=vec3(core.getWorldVelocity())local cL=vec3(velocity):len()local eP=bb-ag;if cL>1.38889 then cL=cL/1000;local eQ=cL*(bb-ag)TotalDistanceTravelled=TotalDistanceTravelled+eQ;W=W+eQ end;X=X+eP;TotalFlightTime=TotalFlightTime+eP;ag=bb end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for b3,b4 in pairs(aS[0])do if av==nil or b4.center.x<av then av=b4.center.x end;if aw==nil or b4.center.x>aw then aw=b4.center.x end;if ax==nil or b4.center.y<ax then ax=b4.center.y end;if ay==nil or b4.center.y>ay then ay=b4.center.y end end;aT=""local eR=1.1*(aw-av)/1920;local eS=1.4*(ay-ax)/1080;for b3,b4 in pairs(aS[0])do local bm=960+b4.center.x/eR;local bn=540+b4.center.y/eS;aT=aT..'<circle cx="'..bm..'" cy="'..bn..'" r="'..b4.radius/eR*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(b4.name,"Moon")and not string.match(b4.name,"Sanctuary")then aT=aT.."<text x='"..bm.."' y='"..bn+b4.radius/eR*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..b4.name.."</text>"end end;local cP=vec3(core.getConstructWorldPos())local bm=960+cP.x/eR;local bn=540+cP.y/eS;aT=aT..'<circle cx="'..bm..'" cy="'..bn..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bm.."' y='"..bn-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=eR;aV=eS;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local cP=vec3(core.getConstructWorldPos())local bm=960+cP.x/eR;local bn=540+cP.y/eS;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bm-80)/19.20,(bn-80)/10.80,aT)end end;function PlanetRef()local function eT(eU)return type(eU)=='number'end;local function eV(eU)return type(tonumber(eU))=='number'end;local function eW(eX)return type(eX)=='table'end;local function eY(eZ)return type(eZ)=='string'end;local function e_(b4)return eW(b4)and eT(b4.x and b4.y and b4.z)end;local function f0(f1)return eW(f1)and eT(f1.latitude and f1.longitude and f1.altitude and f1.bodyId and f1.systemId)end;local f2=math.pi/180;local f3=180/math.pi;local f4=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local f5='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local f6=utils.clamp;local function f7(f8,f9)if f8==0 then return math.abs(f9)<1e-09 end;if f9==0 then return math.abs(f8)<1e-09 end;return math.abs(f8-f9)<math.max(math.abs(f8),math.abs(f9))*f4 end;local function fa(eU)local b5=string.gsub(string.reverse(e('%.4f',eU)),'^0*%.?','')return b5==''and'0'or string.reverse(b5)end;local function fb(fc)if e_(fc)then return e('{x=%.3f,y=%.3f,z=%.3f}',fc.x,fc.y,fc.z)end;if eW(fc)and not getmetatable(fc)then local fd={}local fe=next(fc)if type(fe)=='nil'or fe==1 then fd=fc else for b3,b4 in pairs(fc)do local d4=fb(b4)if type(b3)=='number'then table.insert(fd,e('[%s]=%s',b3,d4))else table.insert(fd,e('%s=%s',b3,d4))end end end;return e('{%s}',table.concat(fd,','))end;if eY(fc)then return e("'%s'",fc:gsub("'",[[\']]))end;return tostring(fc)end;local ff={}ff.__index=ff;ff.__tostring=function(fc,fg)local fh={}for b3 in pairs(fc)do table.insert(fh,b3)end;table.sort(fh)local fd={}for _,b3 in ipairs(fh)do local d4=fb(fc[b3])if type(b3)=='number'then table.insert(fd,e('[%s]=%s',b3,d4))else table.insert(fd,e('%s=%s',b3,d4))end end;if fg then return e('%s%s',fg,table.concat(fd,',\n'..fg))end;return e('{%s}',table.concat(fd,','))end;ff.__eq=function(fi,fj)return fi.planetarySystemId==fj.planetarySystemId and fi.bodyId==fj.bodyId and f7(fi.radius,fj.radius)and f7(fi.center.x,fj.center.x)and f7(fi.center.y,fj.center.y)and f7(fi.center.z,fj.center.z)and f7(fi.GM,fj.GM)end;local function fk(fl,fm,fn,fo,fp)assert(eV(fl),'Argument 1 (planetarySystemId) must be a number:'..type(fl))assert(eV(fm),'Argument 2 (bodyId) must be a number:'..type(fm))assert(eV(fn),'Argument 3 (radius) must be a number:'..type(fn))assert(eW(fo),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fo))assert(eV(fp),'Argument 5 (GM) must be a number:'..type(fp))return setmetatable({planetarySystemId=tonumber(fl),bodyId=tonumber(fm),radius=tonumber(fn),center=vec3(fo),GM=tonumber(fp)},ff)end;local fq={}fq.__index=fq;fq.__tostring=function(fr)return e('::pos{%d,%d,%s,%s,%s}',fr.systemId,fr.bodyId,fa(fr.latitude*f3),fa(fr.longitude*f3),fa(fr.altitude))end;fq.__eq=function(fi,fj)return fi.bodyId==fj.bodyId and fi.systemId==fj.systemId and f7(fi.latitude,fj.latitude)and f7(fi.altitude,fj.altitude)and(f7(fi.longitude,fj.longitude)or f7(fi.latitude,math.pi/2)or f7(fi.latitude,-math.pi/2))end;local function fs(ft,fm,fu,fv,cB)local fl=ft;if eY(ft)and not fv and not cB and not fm and not fu then fl,fm,fu,fv,cB=string.match(ft,f5)assert(fl,'Argument 1 (position string) is malformed.')else assert(eV(fl),'Argument 1 (systemId) must be a number:'..type(fl))assert(eV(fm),'Argument 2 (bodyId) must be a number:'..type(fm))assert(eV(fu),'Argument 3 (latitude) must be in degrees:'..type(fu))assert(eV(fv),'Argument 4 (longitude) must be in degrees:'..type(fv))assert(eV(cB),'Argument 5 (altitude) must be in meters:'..type(cB))end;fl=tonumber(fl)fm=tonumber(fm)fu=tonumber(fu)fv=tonumber(fv)cB=tonumber(cB)if fm==0 then return setmetatable({latitude=fu,longitude=fv,altitude=cB,bodyId=fm,systemId=fl},fq)end;return setmetatable({latitude=f2*f6(fu,-90,90),longitude=f2*(fv%360),altitude=cB,bodyId=fm,systemId=fl},fq)end;local fw={}fw.__index=fw;fw.__tostring=function(fc,fg)local fx=fg and fg..'  'local fy={}local fh={}for b3 in pairs(fc)do table.insert(fh,b3)end;table.sort(fh)for _,fz in ipairs(fh)do bdy=fc[fz]local fA=ff.__tostring(bdy,fx)if fg then table.insert(fy,e('[%s]={\n%s\n%s}',fz,fA,fg))else table.insert(fy,e('  [%s]=%s',fz,fA))end end;if fg then return e('\n%s%s%s',fg,table.concat(fy,',\n'..fg),fg)end;return e('{\n%s\n}',table.concat(fy,',\n'))end;local function fB(fC)local aS={}local pid;for _,b4 in pairs(fC)do local bw=b4.planetarySystemId;if type(bw)~='number'then error('Invalid planetary system ID: '..tostring(bw))elseif pid and bw~=pid then error('Mismatch planetary system IDs: '..bw..' and '..pid)end;local fD=b4.bodyId;if type(fD)~='number'then error('Invalid body ID: '..tostring(fD))elseif aS[fD]then error('Duplicate body ID: '..tostring(fD))end;setmetatable(b4.center,getmetatable(vec3.unit_x))aS[fD]=setmetatable(b4,ff)pid=bw end;return setmetatable(aS,fw)end;aX={}local function fE(fC)return setmetatable({galaxyAtlas=fC or{}},aX)end;aX.__index=function(eX,i)if type(i)=='number'then local system=eX.galaxyAtlas[i]return fB(system)end;return rawget(aX,i)end;aX.__pairs=function(fc)return function(eX,b3)local fF,nv=next(eX,b3)return fF,nv and fB(nv)end,fc.galaxyAtlas,nil end;aX.__tostring=function(fc)local fG={}for _,fH in pairs(fc or{})do local fI=fH:getPlanetarySystemId()local fJ=fw.__tostring(fH,'    ')table.insert(fG,e('  [%s]={%s\n  }',fI,fJ))end;return e('{\n%s\n}\n',table.concat(fG,',\n'))end;aX.BodyParameters=fk;aX.MapPosition=fs;aX.PlanetarySystem=fB;function aX.createBodyParameters(fK,fm,fL,fM,fN,fO,fP)assert(eV(fK),'Argument 1 (planetarySystemId) must be a number:'..type(fK))assert(eV(fm),'Argument 2 (bodyId) must be a number:'..type(fm))assert(eV(fL),'Argument 3 (surfaceArea) must be a number:'..type(fL))assert(eW(fM),'Argument 4 (aPosition) must be an array or vec3:'..type(fM))assert(eW(fN),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(fN))assert(eV(fO),'Argument 6 (altitude) must be in meters:'..type(fO))assert(eV(fP),'Argument 7 (gravityAtPosition) must be number:'..type(fP))local fn=math.sqrt(fL/4/math.pi)local a3=fn+fO;local fQ=vec3(fM)+a3*vec3(fN)local fp=fP*a3*a3;return fk(fK,fm,fn,fQ,fp)end;aX.isMapPosition=f0;function aX:getPlanetarySystem(ft)if i==nil then i=0 end;if nv==nil then nv=0 end;local fK=ft;if f0(ft)then fK=ft.systemId end;if type(fK)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fw then system=fB(system)end;return system end end end;function fw:castIntersections(fR,ej,fS,fT)local fS=fS or function(fU)return 1.05*fU.radius end;local fV={}if fT then for _,i in ipairs(fT)do fV[i]=self[i]end else fT={}for b3,fU in pairs(self)do table.insert(fT,b3)fV[b3]=fU end end;local function fW(fX,fY)local fZ=fV[fX].center-fR;local f_=fV[fY].center-fR;return fZ:len()<f_:len()end;table.sort(fT,fW)local g0=ej:normalize()for i,bw in ipairs(fT)do local fU=fV[bw]local g1=fU.center-fR;local fn=fS(fU)local g2=g1:dot(g0)local g3=g2^2-(g1:len2()-fn^2)if g3>=0 then local g4=math.sqrt(g3)local g5=g2+g4;local g6=g2-g4;if g6>0 then return fU,g5,g6 elseif g5>0 then return fU,g5,nil end end end;return nil,nil,nil end;function fw:closestBody(g7)assert(type(g7)=='table','Invalid coordinates.')local g8,fU;local g9=vec3(g7)for _,ga in pairs(self)do local gb=(ga.center-g9):len2()if not fU or gb<g8 then fU=ga;g8=gb end end;return fU end;function fw:convertToBodyIdAndWorldCoordinates(ft)local gc=ft;if eY(ft)then gc=fs(ft)end;if gc.bodyId==0 then return 0,vec3(gc.latitude,gc.longitude,gc.altitude)end;local ga=self:getBodyParameters(gc)if ga then return gc.bodyId,ga:convertToWorldCoordinates(gc)end end;function fw:getBodyParameters(ft)local fm=ft;if f0(ft)then fm=ft.bodyId end;assert(eV(fm),'Argument 1 (bodyId) must be a number:'..type(fm))return self[fm]end;function fw:getPlanetarySystemId()local _,b4=next(self)return b4 and b4.planetarySystemId end;function ff:convertToMapPosition(fo)assert(eW(fo),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fo))local gd=vec3(fo)if self.bodyId==0 then return setmetatable({latitude=gd.x,longitude=gd.y,altitude=gd.z,bodyId=0,systemId=self.planetarySystemId},fq)end;local ge=gd-self.center;local a3=ge:len()local cB=a3-self.radius;local fu=0;local fv=0;if not f7(a3,0)then local gf=math.atan(ge.y,ge.x)fv=gf>=0 and gf or 2*math.pi+gf;fu=math.pi/2-math.acos(ge.z/a3)end;return setmetatable({latitude=fu,longitude=fv,altitude=cB,bodyId=self.bodyId,systemId=self.planetarySystemId},fq)end;function ff:convertToWorldCoordinates(ft)local gc=eY(ft)and fs(ft)or ft;if gc.bodyId==0 then return vec3(gc.latitude,gc.longitude,gc.altitude)end;assert(f0(gc),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gc.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gc.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local gg=math.cos(gc.latitude)return self.center+(self.radius+gc.altitude)*vec3(gg*math.cos(gc.longitude),gg*math.sin(gc.longitude),math.sin(gc.latitude))end;function ff:getAltitude(fo)return(vec3(fo)-self.center):len()-self.radius end;function ff:getDistance(fo)return(vec3(fo)-self.center):len()end;function ff:getGravity(fo)local gh=self.center-vec3(fo)local gi=gh:len2()return self.GM/gi*gh/math.sqrt(gi)end;return setmetatable(aX,{__call=function(_,...)return fE(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function eY(eZ)return type(eZ)=='string'end;local function eW(eX)return type(eX)=='table'end;local function f7(f8,f9)if f8==0 then return math.abs(f9)<1e-09 end;if f9==0 then return math.abs(f8)<1e-09 end;return math.abs(f8-f9)<math.max(math.abs(f8),math.abs(f9))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(cB)assert(self.body)local a3=cB+self.body.radius;if not f7(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(ft,velocity)assert(self.body)assert(eW(ft)or eY(ft))assert(eW(velocity))local cP=(eY(ft)or PlanetRef.isMapPosition(ft))and self.body:convertToWorldCoordinates(ft)or vec3(ft)local b4=vec3(velocity)local gj=cP-self.body.center;local f_=b4:len2()local gk=gj:len()local gl=self.body.GM;local gm=((f_-gl/gk)*gj-gj:dot(b4)*b4)/gl;local f8=gl/(2*gl/gk-f_)local gn=gm:len()local g0=gm:normalize()local go=f8*(1-gn)local gp=f8*(1+gn)local gq=go*g0+self.body.center;local gr=gn<=1 and-gp*g0+self.body.center or nil;local gs=math.sqrt(f8*gl*(1-gn*gn))local gt=gr and 2*math.pi*math.sqrt(f8^3/gl)local gu=math.acos(gm:dot(gj)/(gn*gk))if gj:dot(b4)<0 then gu=-(gu-2*math.pi)end;local gv=math.acos((math.cos(gu)+gn)/(1+gn*math.cos(gu)))local gw=gv;if gw<0 then gw=gw+2*math.pi end;local gx=gw-gn*math.sin(gw)local gy=0;local gz=0;local gA=0;if gt~=nil then gy=gx/(2*math.pi/gt)gz=gt-gy;gA=gz+gt/2;if gu-math.pi>0 then gz=gy;gA=gz+gt/2 end;if gA>gt then gA=gA-gt end end;return{periapsis={position=gq,speed=gs/go,circularOrbitSpeed=math.sqrt(gl/go),altitude=go-self.body.radius},apoapsis=gr and{position=gr,speed=gs/gp,circularOrbitSpeed=math.sqrt(gl/gp),altitude=gp-self.body.radius},currentVelocity=b4,currentPosition=cP,eccentricity=gn,period=gt,eccentricAnomaly=gv,meanAnomaly=gx,timeToPeriapsis=gz,timeToApoapsis=gA}end;local function gB(gC)local ga=PlanetRef.BodyParameters(gC.planetarySystemId,gC.bodyId,gC.radius,gC.center,gC.GM)return setmetatable({body=ga},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gB(...)end})end;function Kinematics()local aZ={}local gD=30000000/3600;local gE=gD*gD;local gF=100;local function gG(b4)return 1/math.sqrt(1-b4*b4/gE)end;function aZ.computeAccelerationTime(gH,gI,gJ)local gK=gD*math.asin(gH/gD)return(gD*math.asin(gJ/gD)-gK)/gI end;function aZ.computeDistanceAndTime(gH,gJ,gL,gM,gN,gO)gN=gN or 0;gO=gO or 0;local gP=gH<=gJ;local gQ=gM*(gP and 1 or-1)/gL;local gR=-gO/gL;local gS=gQ+gR;if gP and gS<=0 or not gP and gS>=0 then return-1,-1 end;local gT,gU=0,0;if gQ~=0 and gN>0 then local gK=math.asin(gH/gD)local gV=math.pi*(gQ/2+gR)local gW=gQ*gN;local gX=gD*math.pi;local b4=function(eX)local bV=(gV*eX-gW*math.sin(math.pi*eX/2/gN)+gX*gK)/gX;local gY=math.tan(bV)return gD*gY/math.sqrt(gY*gY+1)end;local gZ=gP and function(eZ)return eZ>=gJ end or function(eZ)return eZ<=gJ end;gU=2*gN;if gZ(b4(gU))then local g_=0;while math.abs(gU-g_)>0.5 do local eX=(gU+g_)/2;if gZ(b4(eX))then gU=eX else g_=eX end end end;local h0=gH;local h1=gU/gF;for h2=1,gF do local bg=b4(h2*h1)gT=gT+(bg+h0)*h1/2;h0=bg end;if gU<2*gN then return gT,gU end;gH=h0 end;local gK=gD*math.asin(gH/gD)local b6=(gD*math.asin(gJ/gD)-gK)/gS;local h3=gE*math.cos(gK/gD)/gS;local a3=h3-gE*math.cos((gS*b6+gK)/gD)/gS;return a3+gT,b6+gU end;function aZ.computeTravelTime(gH,gI,a3)if a3==0 then return 0 end;if gI>0 then local gK=gD*math.asin(gH/gD)local h3=gE*math.cos(gK/gD)/gI;return(gD*math.acos(gI*(h3-a3)/gE)-gK)/gI end;assert(gH>0,'Acceleration and initial speed are both zero.')return a3/gH end;function aZ.lorentz(b4)return gG(b4)end;return aZ end;function script.onStart()VERSION_NUMBER=4.914;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupChecks()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local h4=j()if door and(h4>0 or h4==0 and ae<10000)then for _,b4 in pairs(door)do b4.toggle()end end;if switch then for _,b4 in pairs(switch)do b4.toggle()end end;if forcefield and(h4>0 or h4==0 and ae<10000)then for _,b4 in pairs(forcefield)do b4.toggle()end end;if dbHud_1 then if not Y then for b3,b4 in pairs(b)do dbHud_1.setStringValue(b4,g(_G[b4]))end;for b3,b4 in pairs(a)do dbHud_1.setStringValue(b4,g(_G[b4]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(h5)if h5=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local h6=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if h6 then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif h5=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bz={}local cA=GetFlightStyle()DrawOdometer(bz,W,TotalDistanceTravelled,cA,X)CheckDamage(bz)a5=table.concat(bz,"")collectgarbage("collect")elseif h5=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local b5=json.decode(dbHud_1.getStringValue("SavedLocations"))if b5~=nil then _G["SavedLocations"]=b5;local by=-1;local bx;for b3,b4 in pairs(SavedLocations)do if b4.name and b4.name=="SatNav Location"then by=b3;break end end;if by~=-1 then bx=SavedLocations[by]by=-1;for b3,b4 in pairs(aS[0])do if b4.name and b4.name=="SatNav Location"then by=b3;break end end;if by>-1 then aS[0][by]=bx end;UpdateAtlasLocationsList()K=bx.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif h5=="msgTick"then local bz={}DisplayMessage(bz,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif h5=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif h5=="apTick"then local o=o;RateOfChange=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;D=0;H=0;C=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)aa=hoverDetectGround()local h7=system.getMouseDeltaX()local h8=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local h9=velMag>8334;if not h9 and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=h9;if ad and j()>0.09 then if not ai then if velMag>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if velMag<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local bz={}HUDPrologue(bz)if showHud then updateHud(bz)else DisplayOrbitScreen(bz)DrawWarnings(bz)end;HUDEpilogue(bz)bz[#bz+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bz,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bz)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY;SetButtonContains()DrawButtons(bz)if screen_1.getMouseState()==1 then CheckButtons()end;bz[#bz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+h7;a1=a1+h8 end;SetButtonContains()DrawButtons(bz)if not b0 and not b1 then local ha=table.concat(bz,"")bz={}bz[#bz+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%w%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bz[#bz+1]=aT;bz[#bz+1]=ha;bz[#bz+1]="</body>"b0=true;bz[#bz+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bz,"")system.setScreen(content)elseif b1 then local ha=table.concat(bz,"")bz={}bz[#bz+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bz[#bz+1]=aT;bz[#bz+1]=ha;bz[#bz+1]="</body>"end;if not b0 then bz[#bz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()a0=0;a1=0 end else a0=a0+h7;a1=a1+h8;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(h8,-100,100)+0.5)*2*y;D=(-utils.smoothstep(h7,-100,100)+0.5)*2*z else a0=0;a1=0 end;CheckButtons()if a3>DeadZone then DrawCursorLine(bz)end else SetButtonContains()DrawButtons(bz)end;bz[#bz+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bz[#bz+1]=[[</svg></body>]]content=table.concat(bz,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>w then local hb=AlignToWorldVector(vec3(velocity),0.01)if a7 then autoRoll=true;if hb then ProgradeIsOn=false;x=true;BeginReentry()a7=false;a9=true;autoRoll=autoRollPreference end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif velMag>w then AlignToWorldVector(-vec3(velocity))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and velMag*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(velMag)else P,Q=GetAutopilotTBBrakeDistanceAndTime(velMag)end;P=P;Q=Q;local hc=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local hd=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local he=getMagnitudeInDirection(hd,AutopilotShipUp)local hf=getMagnitudeInDirection(hd,AutopilotShipRight)local hg=-hf*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local hh=-he*AutopilotDistance*velMag*TrajectoryAlignmentStrength;hc=AutopilotTargetCoords+-hg*vec3(AutopilotShipRight)+-hh*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hc)-vec3(core.getConstructWorldPos())):len()local hi=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hi)..'", "unit":""}')local hj=true;local hk=(V.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hk)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hj=AlignToWorldVector((hc-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hj=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not hj or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hk-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hj then if not AutopilotRealigned then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif hj then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then autoRoll=true;local hl=0;local cP=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hm=cP-vec3(core.getConstructWorldPos())local hn=vec3(hm):project_on(vec3(core.getConstructWorldOrientationForward())):len()local ho=vec3(hm):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hn*hn+ho*ho)AlignToWorldVector(hm:normalize())local hp=40;local hq=a3<hp;local hr=100;local hs=utils.clamp((a3-hp)/2,10,hr)C=0;local hj=math.abs(D)<0.1;if hj and velMag<hs and not hq then BrakeIsOn=false;hl=-20 else BrakeIsOn=true;hl=0 end;local bC=vec3(core.getConstructWorldOrientationForward())local bD=vec3(core.getConstructWorldOrientationRight())local bE=vec3(core.getWorldVertical())local bF=getPitch(bE,bC,bD)local ht=1.0;if math.abs(hl-bF)>ht then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hl-bF)local hu=pitchPID:get()C=hu end end;local d8=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local cO=unit.getClosestPlanetInfluence()>0;local cB=ae;local hv=HoldAltitude-cB;local hw=500+velMag;local hl=(utils.smoothstep(hv,-hw,hw)-0.5)*2*MaxPitch;if not AltitudeHold then hl=0 end;if LockPitch~=nil then if cO then hl=LockPitch else LockPitch=nil end end;autoRoll=true;if Reentry then local hx=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hx then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hx)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hl=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hl=0;autoRoll=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;autoRoll=autoRollPreference end end;local hy=C;if velMag>w then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cs=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cs)local hz=cs:len()-cs:project_on(d8):len()local bh=LastMaxBrakeInAtmo;local d6=velocity.x*d8.x+velocity.y*d8.y+velocity.z*d8.z;local hA=velocity:len()-math.abs(d6)local hB=vec3(core.getWorldAirFrictionAcceleration())if bh~=nil then P,Q=aZ.computeDistanceAndTime(hA,0,n(),0,0,bh+(hB:len()-hB:project_on(d8):len())*n())else P,Q=aZ.computeDistanceAndTime(hA,0,n(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*n())end;StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if hz<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and hz>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=hz end;C=hy;local bC=vec3(core.getConstructWorldOrientationForward())local bD=vec3(core.getConstructWorldOrientationRight())local bE=vec3(core.getWorldVertical())local ev=-1;local bF=getPitch(bE,bC,bD)local ht=0.1;if BrakeLanding then hl=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local d6=velocity.x*d8.x+velocity.y*d8.y+velocity.z*d8.z;ev=aa;if ev>-1 then if math.abs(hl-bF)<ht then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-d8)<0.99 then BrakeIsOn=true elseif d6<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff or a8 then if hl<20 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif a8 and j()==0 and ae>50000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=5000 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,5000)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hl-bF)>ht then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hl-bF)local hu=pitchPID:get()C=C+hu end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;local hC=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)hC=math.max(hC,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hD=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hE=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hF=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hG=G;local hH=vec3(core.getWorldVertical())local hI=vec3(core.getConstructWorldOrientationUp())local hJ=vec3(core.getConstructWorldOrientationForward())local hK=vec3(core.getConstructWorldOrientationRight())local hL=vec3(core.getWorldVelocity())local hM=vec3(core.getWorldVelocity()):normalize()local hN=getRoll(hH,hJ,hK)local hO=math.abs(hN)local hP=utils.sign(hN)local j=j()local hQ=vec3(core.getWorldAngularVelocity())local hR=hD*pitchSpeedFactor*hK+hE*rollSpeedFactor*hJ+hF*yawSpeedFactor*hI;if hH:len()>0.01 and j>0.0 or ProgradeIsOn then local hS=1.0;if autoRoll==true and hO>hS and hE==0 then local hT=utils.clamp(0,hO-30,hO+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(hT-hN)local hU=rollPID:get()hR=hR+hU*hJ end end;if hH:len()>0.01 and j>0.0 then local hV=20.0;if turnAssist==true and hO>hV and hD==0 and hF==0 then local hW=turnAssistFactor*0.1;local hX=turnAssistFactor*0.025;local hY=(hO-hV)/(180-hV)*180;local hZ=0;if hY<90 then hZ=hY/90 elseif hY<180 then hZ=(180-hY)/90 end;hZ=hZ*hZ;local h_=-hP*hX*(1.0-hZ)local i0=hW*hZ;hR=hR+i0*hK+h_*hI end end;local i1=1;local i2=0;local i3=1;local i4=hC*(hR-hQ)local i5=vec3(core.getWorldAirFrictionAngularAcceleration())i4=i4-i5;Nav:setEngineTorqueCommand('torque',i4,i1,'airfoil','','',i3)local i6=-hG*(brakeSpeedFactor*hL+brakeFlatFactor*hM)Nav:setEngineForceCommand('brake',i6)local i7=''local i8=vec3()local i9=false;local ia='thrust analog longitudinal'local ib=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ib==axisCommandType.byThrottle then local ic=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ia,axisCommandId.longitudinal)Nav:setEngineForceCommand(ia,ic,i1)elseif ib==axisCommandType.byTargetSpeed then local ic=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)i7=i7 ..' , '..ia;i8=i8+ic;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then i9=true end end;local id='thrust analog lateral'local ie=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if ie==axisCommandType.byThrottle then local ig=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(id,axisCommandId.lateral)Nav:setEngineForceCommand(id,ig,i1)elseif ie==axisCommandType.byTargetSpeed then local ih=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)i7=i7 ..' , '..id;i8=i8+ih end;local ii='thrust analog vertical'local ij=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ij==axisCommandType.byThrottle then local ik=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ii,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(ii,ik,i1,'airfoil','ground','',i3)else Nav:setEngineForceCommand(ii,vec3(),i1)Nav:setEngineForceCommand('airfoil vertical',ik,i1,'airfoil','','',i3)Nav:setEngineForceCommand('ground vertical',ik,i1,'ground','','',i3)end elseif ij==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),i1)end;local il=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)i7=i7 ..' , '..ii;i8=i8+il end;if i8:len()>constants.epsilon then if G~=0 or i9 or math.abs(hM:dot(hJ))<0.95 then i7=i7 ..', brake'end;Nav:setEngineForceCommand(i7,i8,i2,'','','',i3)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bg=vec3(core.getVelocity()):len()local im=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local io=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bg*3.6>io*(1-im)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bg*3.6<io*(1-im)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local ip=unit.getThrottle()local hs=ip/100;if j==0 then hs=hs*MaxGameVelocity;if bg>=hs*(1-im)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bg<hs*(1-im)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hs=hs*ReentrySpeed/3.6;if bg>=hs*(1-im)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bg<hs*(1-im)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,b5=coroutine.resume(beginSetup)if b5 then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iq)if iq=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and velMag>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iq=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iq=="forward"then B=B-1 elseif iq=="backward"then B=B+1 elseif iq=="left"then E=E-1 elseif iq=="right"then E=E+1 elseif iq=="yawright"then F=F-1 elseif iq=="yawleft"then F=F+1 elseif iq=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iq=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iq=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iq=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iq=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iq=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iq=="option1"then IncrementAutopilotTargetIndex()v=false elseif iq=="option2"then DecrementAutopilotTargetIndex()v=false elseif iq=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iq=="option4"then ToggleAutopilot()v=false elseif iq=="option5"then ToggleLockPitch()v=false elseif iq=="option6"then ToggleAltitudeHold()v=false elseif iq=="option7"then wipeSaveVariables()v=false elseif iq=="option8"then ToggleFollowMode()v=false elseif iq=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iq=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iq=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iq=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iq=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iq=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iq=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iq=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iq=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iq)if iq=="forward"then B=0 elseif iq=="backward"then B=0 elseif iq=="left"then E=0 elseif iq=="right"then E=0 elseif iq=="yawright"then F=0 elseif iq=="yawleft"then F=0 elseif iq=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iq=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iq=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iq=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iq=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iq=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iq=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iq=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iq=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iq)if iq=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iq=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iq=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iq=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
