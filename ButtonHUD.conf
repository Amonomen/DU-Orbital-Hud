name: ButtonsHud - Dimencia and Archaegeo v4.73 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default.  Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Use centerX=700 and centerY=980 for lower left placement. 
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankOptimizationAtmo = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationSpace = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        fuelTankOptimizationRocket = 0 --export: For accurate estimates, set this to the fuel tank optimization level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.73;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;AntigravTargetAltitude=nil;CoreAltitude=core.getAltitude()ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;AntigravJustToggledOn=false;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=0;local S=k()local T=16;local U=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankOptimizationAtmo","fuelTankOptimizationSpace","fuelTankOptimizationRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","LandingGearGroundHeight"}AutoVariables={"EmergencyWarp","HasGear","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo","AntigravJustToggledOn"}if dbHud then local V=dbHud.hasKey;if not useTheseSettings then for W,X in pairs(SaveableVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end end;for W,X in pairs(AutoVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end;if A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;R=S-updateMass()rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for W in pairs(ElementsID)do local a0=h(ElementsID[W])if a0=="landing gear"then HasGear=true end;if a0=="dynamic core"then local a1=e(ElementsID[W])if a1>10000 then T=128 elseif a1>1000 then T=64 elseif a1>150 then T=32 end end;H=H+e(ElementsID[W])if a0=="atmospheric fuel-tank"or a0=="space fuel-tank"or a0=="rocket fuel-tank"then local a1=e(ElementsID[W])local a2=j(ElementsID[W])local a3=0;local a4=system.getTime()if a0=="atmospheric fuel-tank"then local a5=400;local a6=35.03;if a1>10000 then a5=51200;a6=5480 elseif a1>1300 then a5=6400;a6=988.67 elseif a1>150 then a5=1600;a6=182.67 end;a3=a2-a6;if fuelTankOptimizationAtmo>0 then a5=a5+a5*fuelTankOptimizationAtmo*0.05 end;if a3>a5 then a5=a3 end;E[#E+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="rocket fuel-tank"then local a5=320;local a6=173.42;if a1>65000 then a5=40000;a6=25740 elseif a1>6000 then a5=5120;a6=4720 elseif a1>700 then a5=640;a6=886.72 end;a3=a2-a6;if fuelTankOptimizationRocket>0 then a5=a5+a5*fuelTankOptimizationRocket*0.05 end;if a3>a5 then a5=a3 end;G[#G+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end;if a0=="space fuel-tank"then local a5=2400;local a6=182.67;if a1>10000 then a5=76800;a6=5480 elseif a1>1300 then a5=9600;a6=988.67 end;a3=a2-a6;if fuelTankOptimizationSpace>0 then a5=a5+a5*fuelTankOptimizationSpace*0.05 end;if a3>a5 then a5=a3 end;F[#F+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a5,a6,a3,a4}end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,X in pairs(door)do X.deactivate()end end;if forcefield then for _,X in pairs(forcefield)do X.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a7,a8)if a7==nil then a7=core.g()end;a7=round(a7,5)if a8~=nil and a8 or(D==nil or D~=a7)then local a9=c(unit.getData()).maxBrake;if a9~=nil then LastMaxBrake=a9 end;if f()>0 then LastMaxBrakeInAtmo=a9 end;D=a7 end end;function MakeButton(aa,ab,ac,ad,ae,af,ag,ah,ai)local aj={enableName=aa,disableName=ab,width=ac,height=ad,x=ae,y=af,toggleVar=ag,toggleFunction=ah,drawCondition=ai,hovered=false}table.insert(r,aj)return aj end;function UpdateAtlasLocationsList()AtlasOrdered={}for W,X in pairs(atlas[0])do table.insert(AtlasOrdered,{name=X.name,index=W})end;local function ak(al,am)return al.name<am.name end;table.sort(AtlasOrdered,ak)end;function AddLocationsToAtlas()for W,X in pairs(SavedLocations)do table.insert(atlas[0],X)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local a0=planet.name..". "..#SavedLocations;if radar_1 then local an,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if an~=nil and an~=""then a0=a0 .." "..radar_1.getConstructName(an)end end;local ao={position=position,name=a0,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=ao;table.insert(atlas[0],ao)UpdateAtlasLocationsList()MsgText="Location saved as "..a0 else MsgText="Databank must be installed to save locations"end end;function ClearCurrentPosition()local ap=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then ap=W end end;if ap>-1 then table.remove(atlas[0],ap)end;ap=-1;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then MsgText=X.name.." saved location cleared"ap=W;break end end;if ap~=-1 then table.remove(SavedLocations,ap)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(aq)aq[#aq+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(ar,as,ae,af,ac,ad)if ar>ae and ar<ae+ac and as>af and as<af+ad then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not GearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=CoreAltitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(aq)local at=0;p=""currentConstructMass=k()local au=H;local av=0;local aw=100;local ax=0;local ay=0;local az=0;local aA=""for W in pairs(ElementsID)do local a1=0;local aB=0;aB=e(ElementsID[W])a1=g(ElementsID[W])av=av+a1;if a1<aB then if a1==0 then ay=ay+1 else ax=ax+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[W]))local ae=position.x-T;local af=position.y-T;local aC=position.z-T;table.insert(m,core.spawnArrowSticker(ae,af,aC+1,"down"))table.insert(m,core.spawnArrowSticker(ae,af,aC+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ae+1,af,aC,"north"))table.insert(m,core.spawnArrowSticker(ae+1,af,aC,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ae-1,af,aC,"south"))table.insert(m,core.spawnArrowSticker(ae-1,af,aC,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ae,af-1,aC,"east"))table.insert(m,core.spawnArrowSticker(ae,af-1,aC,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ae,af+1,aC,"west"))table.insert(m,core.spawnArrowSticker(ae,af+1,aC,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[W])end elseif I and#m>0 and m[11]==ElementsID[W]then for aD in pairs(m)do core.deleteSticker(m[aD])end;m={}end end;at=a(av*100/au)if currentConstructMass<S then aw=math.ceil(100*(currentConstructMass-updateMass())/R)S=currentConstructMass end;if aw<100 or at<100 then aq[#aq+1]=[[<g class="pbright txt">]]if aw<100 then az=a(aw*2.55)aA=b("rgb(%d,%d,%d)",255-az,az,0)aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],aA,aw)end;az=a(at*2.55)aA=b("rgb(%d,%d,%d)",255-az,az,0)if at<100 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aA,at)if ay>0 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aA,ay,ax)elseif ax>0 then aq[#aq+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aA,ax)end end;aq[#aq+1]=[[<\g>]]end end;function DrawCursorLine(aq)local aE=a(utils.clamp(Distance/(u/4)*255,0,255))aq[#aq+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aE,a(PrimaryG+0.5)-aE,a(PrimaryB+0.5)-aE)end;function getPitch(aF,aG,am)local aH=aF:cross(am):normalize_inplace()local aI=math.acos(utils.clamp(aH:dot(-aG),-1,1))*constants.rad2deg;if aH:cross(-aG):dot(am)<0 then aI=-aI end;return aI end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 elseif A then if B then for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,d(nil))end;for W,X in pairs(AutoVariables)do if X~="SavedLocations"then dbHud.setStringValue(X,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe"B=true end end end;function CheckButtons()for _,X in pairs(r)do if X.hovered then X.toggleFunction()X.hovered=false end end end;function SetButtonContains()local ae=SimulatedX+u/2;local af=SimulatedY+v/2;for _,X in pairs(r)do X.hovered=Contains(ae,af,X.x,X.y,X.width,X.height)end end;function DrawButton(aq,aJ,hover,ae,af,aK,aL,aM,aN,aO,aP)if type(aO)=="function"then aO=aO()end;if type(aP)=="function"then aP=aP()end;aq[#aq+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ae,af,aK,aL)if aJ then aq[#aq+1]=b("%s'",aM)else aq[#aq+1]=aN end;if hover then aq[#aq+1]=" style='stroke:white; stroke-width:2'"else aq[#aq+1]=" style='stroke:black; stroke-width:1'"end;aq[#aq+1]="></rect>"aq[#aq+1]=b("<text x='%f' y='%f' font-size='24' fill='",ae+aK/2,af+aL/2+5)if aJ then aq[#aq+1]="black"else aq[#aq+1]="white"end;aq[#aq+1]="' text-anchor='middle' font-family='Montserrat'>"if aJ then aq[#aq+1]=b("%s</text>",aO)else aq[#aq+1]=b("%s</text>",aP)end end;function DrawButtons(aq)local aQ="rgb(50,50,50)'"local aR="rgb(210,200,200)"local aS=DrawButton;for _,X in pairs(r)do local ab=X.disableName;local aa=X.enableName;if type(ab)=="function"then ab=ab()end;if type(aa)=="function"then aa=aa()end;if not X.drawCondition or X.drawCondition()then aS(aq,X.toggleVar(),X.hovered,X.x,X.y,X.width,X.height,aR,aQ,ab,aa)end end end;function DrawTank(aq,Q,ae,aT,aU,aV,aW,aX)local aY=1;local aZ=2;local a_=3;local b0=4;local b1=5;local b2=6;local b3=""local b4=0;local b5=fuelY;local b6=fuelY+10;if l()==1 then b5=b5-50;b6=b6-50 end;aq[#aq+1]=[[<g class="pdim txtfuel">]]if aU=="ATMO"then b3="atmofueltank"elseif aU=="SPACE"then b3="spacefueltank"else b3="rocketfueltank"end;b4=_G[b3 .."_size"]if#aV>0 then for i=1,#aV do local a0=string.sub(aV[i][aZ],1,12)local b7=0;for aD=1,b4 do if aV[i][aZ]==json.decode(unit[b3 .."_"..aD].getData()).name then b7=aD;break end end;if Q or aW[i]==nil or aX[i]==nil then local b8=0;local b9=0;local ba=0;local bb=0;local a4=system.getTime()if b7~=0 then aX[i]=json.decode(unit[b3 .."_"..b7].getData()).percentage;aW[i]=json.decode(unit[b3 .."_"..b7].getData()).timeLeft;if aW[i]=="n/a"then aW[i]=0 end else ba=j(aV[i][aY])-aV[i][b0]b8=aV[i][a_]aX[i]=a(0.5+ba*100/b8)b9=aV[i][b1]bb=aV[i][b2]if b9<=ba then aW[i]=0 else aW[i]=a(0.5+ba/((b9-ba)/(a4-bb)))end;aV[i][b1]=ba;aV[i][b2]=a4 end end;if a0==aT then a0=b("%s %d",aU,i)end;if b7==0 then a0=a0 .." *"end;local bc;if aW[i]==0 then bc="n/a"else bc=FormatTimeString(aW[i])end;if aX[i]~=nil then local az=a(aX[i]*2.55)local aA=b("rgb(%d,%d,%d)",255-az,az,0)local bd=""if bc~="n/a"and aW[i]<120 or aX[i]<5 then if Q then bd=[[class="red"]]end end;aq[#aq+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ae,b5,bd,a0,ae,b6,aA,aX[i],bc)b5=b5+30;b6=b6+30 end end end;aq[#aq+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aI=-math.deg(math.atan(velocity.y,velocity.z))+180;aI=aI-90;if aI<0 then aI=360+aI end;if aI>180 then aI=-180+aI-180 end;return-aI end;function getRelativeYaw(velocity)velocity=vec3(velocity)local be=math.deg(math.atan(velocity.y,velocity.x))-90;if be<-180 then be=360+be end;return be end;function AlignToWorldVector(bf,bg)if bg==nil then bg=t end;bf=vec3(bf):normalize()local bh=vec3(core.getConstructWorldOrientationForward())-bf;local bi=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationRight())*s;local bj=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationUp())*s;YawInput2=YawInput2-(bi+(bi-n)*DampingMultiplier)PitchInput2=PitchInput2+bj+(bj-o)*DampingMultiplier;n=bi;o=bj;if math.abs(bi)<bg and math.abs(bj)<bg then return true end;return false end;function getAPEnableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if a0==nil then a0="None"end;return"Engage Autopilot: "..a0 end;function getAPDisableName()local a0=AutopilotTargetName;if a0==nil then a0=CustomTarget.name end;if a0==nil then a0="None"end;return"Disable Autopilot: "..a0 end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()AntigravTargetAltitude=nil;antigrav.hide()AntigravJustToggledOn=false else AntigravTargetAltitude=CoreAltitude;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()AntigravJustToggledOn=true;antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoroll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bk=50;local bl=260;local bm=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bl,bk,u/2-bl/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bl,bk,u/2-bl/2-50-bm.width,v/2-bk+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bl,bk,u/2-bl/2+bm.width+50,v/2-bk+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bn=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bn.height,bn.x+bn.width+30,bn.y,function()return false end,AddNewLocation)MakeButton("Clear Position","Clear Position",200,bn.height,bn.x-200-30,bn.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bk=60;bl=300;local ae=10;local af=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bl,bk,ae,af,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bl,bk,ae+bl+20,af,function()return AltitudeHold end,ToggleAltitudeHold)af=af+bk+20;MakeButton("Engage Autoland","Disable Autoland",bl,bk,ae,af,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bl,bk,ae+bl+20,af,function()return AutoTakeoff end,ToggleAutoTakeoff)af=af+bk+20;MakeButton("Show Orbit Display","Hide Orbit Display",bl,bk,ae,af,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bl,bk,ae+bl+20,af,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)af=af+bk+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bl,bk,ae,af,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bl,bk,ae+bl+20,af,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)af=af+bk+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bl,bk,ae,af,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bl,bk,ae+bl+20,af,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)af=af+bk+20;MakeButton("Enable AGG","Disable AGG",bl,bk,ae,af,function()return AntigravTargetAltitude~=nil end,ToggleAntigrav,function()return antigrav~=nil end)af=af+bk+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bl*2,bk,ae,af,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(aq)local bo=CoreAltitude;local velocity=core.getVelocity()local bp=vec3(velocity):len()local bq=vec3(core.getWorldVertical())local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local aI=getPitch(bq,br,bs)local bt=getRoll(bq,br,bs)local bu=bt;local bv=aI;local bw=f()local bx=a(unit.getThrottle())local by=bp*3.6;local bz=unit.getAxisCommandValue(0)local bA=GetFlightStyle()if bw==0 then if bp>5 then aI=getRelativePitch(velocity)bt=getRelativeYaw(velocity)else aI=0;bt=0 end;bottomText="YAW"end;aq[#aq+1]=LastOdometerOutput;aq[#aq+1]=p;aq[#aq+1]=RadarMessage;if U%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(aq,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(aq,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(aq,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;U=0 end;U=U+1;DrawVerticalSpeed(aq,bo,bw)if l()==0 then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(aq,bv,bu,bw,centerX,centerY,"ROLL")DrawPrograde(aq,bv,bu,bw,velocity,bp,centerX,centerY)DrawAltitudeDisplay(aq,bo,bw)else DrawArtificialHorizon(aq,aI,bt,bw,centerX,centerY,"YAW")DrawPrograde(aq,bv,bu,bw,velocity,bp,centerX,centerY)end end end;DrawThrottle(aq,bA,bx,bz)DrawSpeed(aq,by)DrawWarnings(aq)DisplayOrbitScreen(aq)if screen_2 then local bB=vec3(core.getConstructWorldPos())local ae=960+bB.x/MapXRatio;local af=450+bB.y/MapYRatio;screen_2.moveContent(YouAreHere,(ae-80)/19.2,(af-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(aq)local bC=rgb;local bD=Z;local bE=rgb;local bF=Z;if IsInFreeLook()and not brightHud then bC=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bD=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;aq[#aq+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:0.1;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:0.3;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bC,bC,bE,bE,bD,bD,bF,bF)end;function HUDEpilogue(aq)aq[#aq+1]="</svg>"end;function DrawSpeed(aq,by)local bG=altMeterY+40;local bH=altMeterX;aq[#aq+1]=[[<g class="pdim txt txtend">]]if l()==1 then bG=75 end;aq[#aq+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bH,bG,a(by))end;function DrawOdometer(aq,TotalDistanceTrip,TotalDistanceTravelled,bA,bI)local bJ=1240;local bK=55;local bL=65;local bw=f()local a7=core.g()local bM=0;local bN=0;refreshLastMaxBrake(a7)maxThrust=Nav:maxForceForward()C=k()local bO=vec3(core.getWorldAcceleration()):len()/9.80665;if a7>0.1 then bN=C*a7;bM=maxThrust/a7 end;aq[#aq+1]=[[<g class="pdim txt txtend">]]if l()==1 then bJ=1120;bK=55;bL=65 elseif bw>0 then aq[#aq+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bw)end;aq[#aq+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bJ,bK,bJ,bL,a7/9.80665,bJ,bK+20,bJ,bL+20,bO)aq[#aq+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 then aq[#aq+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bI),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bA)if a7>0.1 then aq[#aq+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bM/1000,bN/1000)else aq[#aq+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else aq[#aq+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bA)end;aq[#aq+1]="</g>"end;function DrawThrottle(aq,bA,bx,bz)local b5=centerY+65;local b6=centerY+75;if l()==1 then b5=55;b6=65 end;local bP="CRUISE"local unit="km/h"local bQ=bz;if bA=="TRAVEL"or bA=="AUTOPILOT"then bP="THROT"unit="%"bQ=bx;local bR="dim"if bx<0 then bR="red"end;aq[#aq+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bR,centerX-143,centerY-50,centerX-150,centerY-50,centerX-150,centerY+50,centerX-143,centerY+50,1-math.abs(bx),centerX-130,centerY+50,centerX-125,centerY+53,centerX-125,centerY+47)end;aq[#aq+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],centerX-150,b5,bP,centerX-150,b6,bQ,unit)end;function DrawVerticalSpeed(aq,bo,bw)if bo<200000 and bw==0 or bo and bw>0 then local velocity=vec3(core.getWorldVelocity())local bS=vec3(core.getWorldVertical())*-1;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local bU=0;if math.abs(bT)>1 then bU=45*math.log(math.abs(bT),10)if bT<0 then bU=-bU end end;aq[#aq+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bT),a(bU))end end;function DrawArtificialHorizon(aq,bv,bu,bw,centerX,centerY,bottomText)local bV=circleRad;if bV>0 then local bW=a(bv)local bX=0;local bY=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bu,centerX,centerY)aq[#aq+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bV-1,centerX,centerY)aq[#aq+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bW-30-bW%5+0.5),a(bW+30+bW%5+0.5),5 do if i%10==0 then bX=30 elseif i%5==0 then bX=20 end;local af=centerY+-i*5+bv*5;if bX==30 then bY=b([[%s M %d %f h %d]],bY,centerX-15,af,bX)else bY=b([[%s M %d %f h %d]],bY,centerX-10,af,bX)end end;aq[#aq+1]=bY..[["/>]]local bZ="PITCH"if bottomText=="YAW"then bZ="REL PITCH"end;if bv>90 and bw==0 then bv=90-(bv-90)elseif bv<-90 and bw==0 then bv=-90-(bv+90)end;aq[#aq+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)aq[#aq+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bV,centerX,centerY,centerX-bV,centerY+bV*bv/20,bV*9,bV*2,-1*bu,centerX,centerY)aq[#aq+1]="</g>"aq[#aq+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-circleRad-20,bZ,centerX,centerY-circleRad-10,bW)end end;function DrawAltitudeDisplay(aq,bo,bw)if bo<200000 and bw==0 or bo and bw>0 then local b_=altMeterX;local c0=altMeterY;local c1=78;local c2=19;table.insert(aq,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],b_-1,c0-4,c1+2,c2+6,b_+1,c0-1,c1-4,c2))local ap=0;local c3=1;local c4=0;local c5=bo<0;local c6=9;if c5 then c6=0 end;local bo=math.abs(bo)while ap<6 do local c7=11;local c8=16;local c9=9;local ca=14;local bd="altsm"if ap>2 then c8=c8+3;c7=c7+2;ca=ca+2;c9=c9-6;bd="altbig"end;if c5 then bd=bd.." red"end;local cb=bo/c3%10;local cc=a(cb)local cd=a((cc+1)%10)local ce=c4;if ap==0 then ce=cb-cc;if c5 then ce=1-ce end end;if c5 and(ap==0 or c4~=0)then local cf=cd;cd=cc;cc=cf end;local cg=c8*(ce-1)local ch=cg+c8;local ae=b_+c9+(6-ap)*c7;local af=c0+ca;table.insert(aq,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bd,ae,af+cg,cd,ae,af+ch,cc))ap=ap+1;c3=c3*10;if cc==c6 then c4=ce else c4=0 end end;table.insert(aq,[[</g></g>]])end end;function DrawPrograde(aq,bv,bu,bw,velocity,bp,centerX,centerY)if bw==0 and bp>5 then local bV=circleRad;local ci=20;local cj=20;local ck=getRelativePitch(velocity)local cl=getRelativeYaw(velocity)local cm=-cl/cj*bV;local cn=ck/ci*bV;local ae=centerX+cm;local af=centerY+cn;local co=math.sqrt(cm^2+cn^2)if co<bV then aq[#aq+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',ae,af)else local bU=math.atan(cn,cm)local cp=centerX+bV*math.cos(bU)local cq=centerY+bV*math.sin(bU)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="3" stroke="white" stroke-width="3" fill="white" />',cp,cq)end end end;function DrawWarnings(aq)aq[#aq+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)aq[#aq+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then aq[#aq+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]aq[#aq+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]aq[#aq+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cr=960;local cs=860;local ct=900;local cu=930;local cv=960;local cw=200;local cx=150;local cy=960;if l()==1 then cs=135;ct=155;cu=175;cw=115;cx=95 end;if BrakeIsOn then aq[#aq+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cr,cs)end;if GyroIsOn then aq[#aq+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cr,cy)end;if GearExtended then if HasGear then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cr,ct)else aq[#aq+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cr,ct)end;aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cr,cu,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cr,cv)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Target AGG Altitude: %s</text>]],cr,cw,getDistanceDisplayString2(AntigravTargetAltitude))elseif Autopilot and AutopilotTargetName~="None"then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cr,cw,AutopilotStatus)elseif FollowMode then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cr,cw)elseif AltitudeHold then if AutoTakeoff then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cr,cw,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then aq[#aq+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cr,cw+50)end else aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cr,cw,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cr,cw)end;if BrakeLanding then if StrongBrakes then aq[#aq+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cr,cw)else aq[#aq+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cr,cw)end end;if TurnBurn then aq[#aq+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cr,cx)end;if VectorToTarget then aq[#aq+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cr,cx,VectorStatus)end;aq[#aq+1]="</g>"end;function DisplayOrbitScreen(aq)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cz=75;local cA=0;local cB=250;local cC=4;cA=cA+cC;local cD=15;local ae=cz+cB+cz/2+cC;local af=cA+cB/2+5+cC;local cE,cF,cG,cH;cE=cB/4;cH=0;aq[#aq+1]=[[<g class="pbright txtorb txtmid">]]aq[#aq+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cB+cz*2,cB+cA,cC,cC)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cG=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cE*2)cF=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cG*(1-orbit.eccentricity)cH=cE-orbit.periapsis.altitude/cG-planet.radius/cG;local cI=""if orbit.periapsis.altitude<=0 then cI='redout'end;aq[#aq+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cI,cz+cB/2+cH+cC,cA+cB/2+cC,cE,cF)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cz+cB/2+cC,cA+cB/2+cC,planet.radius/cG)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then aq[#aq+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae-35,af-5,cz+cB/2+cE+cH,af-5)aq[#aq+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ae,af)af=af+cD;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.apoapsis.altitude))af=af+cD;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToApoapsis))af=af+cD;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.apoapsis.speed))end;af=cA+cB/2+5+cC;ae=cz-cz/2+10+cC;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then aq[#aq+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ae+35,af-5,cz+cB/2-cE+cH,af-5)aq[#aq+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ae,af)af=af+cD;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getDistanceDisplayString(orbit.periapsis.altitude))af=af+cD;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,FormatTimeString(orbit.timeToPeriapsis))af=af+cD;aq[#aq+1]=b([[<text x="%f" y="%f">%s</text>]],ae,af,getSpeedDisplayString(orbit.periapsis.speed))end;aq[#aq+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cz+cB/2+cC,20+cC,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cJ=orbit.timeToApoapsis/orbit.period*2*math.pi;local cK=cE*math.cos(cJ)local cL=cF*math.sin(cJ)aq[#aq+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cz+cB/2+cK+cH+cC,cA+cB/2+cL+cC)end;aq[#aq+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for W,X in pairs(atlas[0])do if w==nil or X.center.x<w then w=X.center.x end;if x==nil or X.center.x>x then x=X.center.x end;if y==nil or X.center.y<y then y=X.center.y end;if z==nil or X.center.y>z then z=X.center.y end end;GalaxyMapHTML=""local cM=1.1*(x-w)/1920;local cN=1.4*(z-y)/1080;for W,X in pairs(atlas[0])do local ae=960+X.center.x/cM;local af=540+X.center.y/cN;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="'..X.radius/cM*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(X.name,"Moon")and not string.match(X.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af+X.radius/cM*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..X.name.."</text>"end end;local bB=vec3(core.getConstructWorldPos())local ae=960+bB.x/cM;local af=540+bB.y/cN;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ae..'" cy="'..af..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ae.."' y='"..af-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cM;MapYRatio=cN;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bB=vec3(core.getConstructWorldPos())local ae=960+bB.x/cM;local af=540+bB.y/cN;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ae-80)/19.20,(af-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cO(cP)return type(cP)=='number'end;local function cQ(cP)return type(tonumber(cP))=='number'end;local function cR(cS)return type(cS)=='table'end;local function cT(cU)return type(cU)=='string'end;local function cV(X)return cR(X)and cO(X.x and X.y and X.z)end;local function cW(cX)return cR(cX)and cO(cX.latitude and cX.longitude and cX.altitude and cX.bodyId and cX.systemId)end;local cY=math.pi/180;local cZ=180/math.pi;local c_=1e-10;local d0=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d1='::pos{'..d0 ..','..d0 ..','..d0 ..','..d0 ..','..d0 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local d2=utils.clamp;local function d3(d4,d5)if d4==0 then return math.abs(d5)<1e-09 end;if d5==0 then return math.abs(d4)<1e-09 end;return math.abs(d4-d5)<math.max(math.abs(d4),math.abs(d5))*c_ end;local function d6(cP)local Y=string.gsub(string.reverse(b('%.4f',cP)),'^0*%.?','')return Y==''and'0'or string.reverse(Y)end;local function d7(d8)if cV(d8)then return b('{x=%.3f,y=%.3f,z=%.3f}',d8.x,d8.y,d8.z)end;if cR(d8)and not getmetatable(d8)then local d9={}local da=next(d8)if type(da)=='nil'or da==1 then d9=d8 else for W,X in pairs(d8)do local bQ=d7(X)if type(W)=='number'then table.insert(d9,b('[%s]=%s',W,bQ))else table.insert(d9,b('%s=%s',W,bQ))end end end;return b('{%s}',table.concat(d9,','))end;if cT(d8)then return b("'%s'",d8:gsub("'",[[\']]))end;return tostring(d8)end;local db={}db.__index=db;db.__tostring=function(d8,dc)local dd={}for W in pairs(d8)do table.insert(dd,W)end;table.sort(dd)local d9={}for _,W in ipairs(dd)do local bQ=d7(d8[W])if type(W)=='number'then table.insert(d9,b('[%s]=%s',W,bQ))else table.insert(d9,b('%s=%s',W,bQ))end end;if dc then return b('%s%s',dc,table.concat(d9,',\n'..dc))end;return b('{%s}',table.concat(d9,','))end;db.__eq=function(de,df)return de.planetarySystemId==df.planetarySystemId and de.bodyId==df.bodyId and d3(de.radius,df.radius)and d3(de.center.x,df.center.x)and d3(de.center.y,df.center.y)and d3(de.center.z,df.center.z)and d3(de.GM,df.GM)end;local function dg(dh,di,dj,dk,dl)assert(cQ(dh),'Argument 1 (planetarySystemId) must be a number:'..type(dh))assert(cQ(di),'Argument 2 (bodyId) must be a number:'..type(di))assert(cQ(dj),'Argument 3 (radius) must be a number:'..type(dj))assert(cR(dk),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dk))assert(cQ(dl),'Argument 5 (GM) must be a number:'..type(dl))return setmetatable({planetarySystemId=tonumber(dh),bodyId=tonumber(di),radius=tonumber(dj),center=vec3(dk),GM=tonumber(dl)},db)end;local dm={}dm.__index=dm;dm.__tostring=function(dn)return b('::pos{%d,%d,%s,%s,%s}',dn.systemId,dn.bodyId,d6(dn.latitude*cZ),d6(dn.longitude*cZ),d6(dn.altitude))end;dm.__eq=function(de,df)return de.bodyId==df.bodyId and de.systemId==df.systemId and d3(de.latitude,df.latitude)and d3(de.altitude,df.altitude)and(d3(de.longitude,df.longitude)or d3(de.latitude,math.pi/2)or d3(de.latitude,-math.pi/2))end;local function dp(dq,di,dr,ds,bo)local dh=dq;if cT(dq)and not ds and not bo and not di and not dr then dh,di,dr,ds,bo=string.match(dq,d1)assert(dh,'Argument 1 (position string) is malformed.')else assert(cQ(dh),'Argument 1 (systemId) must be a number:'..type(dh))assert(cQ(di),'Argument 2 (bodyId) must be a number:'..type(di))assert(cQ(dr),'Argument 3 (latitude) must be in degrees:'..type(dr))assert(cQ(ds),'Argument 4 (longitude) must be in degrees:'..type(ds))assert(cQ(bo),'Argument 5 (altitude) must be in meters:'..type(bo))end;dh=tonumber(dh)di=tonumber(di)dr=tonumber(dr)ds=tonumber(ds)bo=tonumber(bo)if di==0 then return setmetatable({latitude=dr,longitude=ds,altitude=bo,bodyId=di,systemId=dh},dm)end;return setmetatable({latitude=cY*d2(dr,-90,90),longitude=cY*(ds%360),altitude=bo,bodyId=di,systemId=dh},dm)end;local dt={}dt.__index=dt;dt.__tostring=function(d8,dc)local du=dc and dc..'  'local dv={}local dd={}for W in pairs(d8)do table.insert(dd,W)end;table.sort(dd)for _,dw in ipairs(dd)do bdy=d8[dw]local dx=db.__tostring(bdy,du)if dc then table.insert(dv,b('[%s]={\n%s\n%s}',dw,dx,dc))else table.insert(dv,b('  [%s]=%s',dw,dx))end end;if dc then return b('\n%s%s%s',dc,table.concat(dv,',\n'..dc),dc)end;return b('{\n%s\n}',table.concat(dv,',\n'))end;local function dy(dz)local atlas={}local pid;for _,X in pairs(dz)do local an=X.planetarySystemId;if type(an)~='number'then error('Invalid planetary system ID: '..tostring(an))elseif pid and an~=pid then error('Mismatch planetary system IDs: '..an..' and '..pid)end;local dA=X.bodyId;if type(dA)~='number'then error('Invalid body ID: '..tostring(dA))elseif atlas[dA]then error('Duplicate body ID: '..tostring(dA))end;setmetatable(X.center,getmetatable(vec3.unit_x))atlas[dA]=setmetatable(X,db)pid=an end;return setmetatable(atlas,dt)end;PlanetaryReference={}local function dB(dz)return setmetatable({galaxyAtlas=dz or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cS,i)if type(i)=='number'then local system=cS.galaxyAtlas[i]return dy(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d8)return function(cS,W)local dC,nv=next(cS,W)return dC,nv and dy(nv)end,d8.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d8)local dD={}for _,dE in pairs(d8 or{})do local dF=dE:getPlanetarySystemId()local dG=dt.__tostring(dE,'    ')table.insert(dD,b('  [%s]={%s\n  }',dF,dG))end;return b('{\n%s\n}\n',table.concat(dD,',\n'))end;PlanetaryReference.BodyParameters=dg;PlanetaryReference.MapPosition=dp;PlanetaryReference.PlanetarySystem=dy;function PlanetaryReference.createBodyParameters(dH,di,dI,dJ,dK,dL,dM)assert(cQ(dH),'Argument 1 (planetarySystemId) must be a number:'..type(dH))assert(cQ(di),'Argument 2 (bodyId) must be a number:'..type(di))assert(cQ(dI),'Argument 3 (surfaceArea) must be a number:'..type(dI))assert(cR(dJ),'Argument 4 (aPosition) must be an array or vec3:'..type(dJ))assert(cR(dK),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dK))assert(cQ(dL),'Argument 6 (altitude) must be in meters:'..type(dL))assert(cQ(dM),'Argument 7 (gravityAtPosition) must be number:'..type(dM))local dj=math.sqrt(dI/4/math.pi)local co=dj+dL;local dN=vec3(dJ)+co*vec3(dK)local dl=dM*co*co;return dg(dH,di,dj,dN,dl)end;PlanetaryReference.isMapPosition=cW;function PlanetaryReference:getPlanetarySystem(dq)if i==nil then i=0 end;if nv==nil then nv=0 end;local dH=dq;if cW(dq)then dH=dq.systemId end;if type(dH)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=dt then system=dy(system)end;return system end end end;function dt:castIntersections(dO,dP,dQ,dR)local dQ=dQ or function(dS)return 1.05*dS.radius end;local dT={}if dR then for _,i in ipairs(dR)do dT[i]=self[i]end else dR={}for W,dS in pairs(self)do table.insert(dR,W)dT[W]=dS end end;local function dU(dV,dW)local dX=dT[dV].center-dO;local dY=dT[dW].center-dO;return dX:len()<dY:len()end;table.sort(dR,dU)local dZ=dP:normalize()for i,an in ipairs(dR)do local dS=dT[an]local d_=dS.center-dO;local dj=dQ(dS)local e0=d_:dot(dZ)local e1=e0^2-(d_:len2()-dj^2)if e1>=0 then local e2=math.sqrt(e1)local e3=e0+e2;local e4=e0-e2;if e4>0 then return dS,e3,e4 elseif e3>0 then return dS,e3,nil end end end;return nil,nil,nil end;function dt:closestBody(e5)assert(type(e5)=='table','Invalid coordinates.')local e6,dS;local e7=vec3(e5)for _,e8 in pairs(self)do local e9=(e8.center-e7):len2()if not dS or e9<e6 then dS=e8;e6=e9 end end;return dS end;function dt:convertToBodyIdAndWorldCoordinates(dq)local ea=dq;if cT(dq)then ea=dp(dq)end;if ea.bodyId==0 then return 0,vec3(ea.latitude,ea.longitude,ea.altitude)end;local e8=self:getBodyParameters(ea)if e8 then return ea.bodyId,e8:convertToWorldCoordinates(ea)end end;function dt:getBodyParameters(dq)local di=dq;if cW(dq)then di=dq.bodyId end;assert(cQ(di),'Argument 1 (bodyId) must be a number:'..type(di))return self[di]end;function dt:getPlanetarySystemId()local _,X=next(self)return X and X.planetarySystemId end;function db:convertToMapPosition(dk)assert(cR(dk),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dk))local eb=vec3(dk)if self.bodyId==0 then return setmetatable({latitude=eb.x,longitude=eb.y,altitude=eb.z,bodyId=0,systemId=self.planetarySystemId},dm)end;local ec=eb-self.center;local co=ec:len()local bo=co-self.radius;local dr=0;local ds=0;if not d3(co,0)then local ed=math.atan(ec.y,ec.x)ds=ed>=0 and ed or 2*math.pi+ed;dr=math.pi/2-math.acos(ec.z/co)end;return setmetatable({latitude=dr,longitude=ds,altitude=bo,bodyId=self.bodyId,systemId=self.planetarySystemId},dm)end;function db:convertToWorldCoordinates(dq)local ea=cT(dq)and dp(dq)or dq;if ea.bodyId==0 then return vec3(ea.latitude,ea.longitude,ea.altitude)end;assert(cW(ea),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(ea.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(ea.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ee=math.cos(ea.latitude)return self.center+(self.radius+ea.altitude)*vec3(ee*math.cos(ea.longitude),ee*math.sin(ea.longitude),math.sin(ea.latitude))end;function db:getAltitude(dk)return(vec3(dk)-self.center):len()-self.radius end;function db:getDistance(dk)return(vec3(dk)-self.center):len()end;function db:getGravity(dk)local ef=self.center-vec3(dk)local eg=ef:len2()return self.GM/eg*ef/math.sqrt(eg)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dB(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cT(cU)return type(cU)=='string'end;local function cR(cS)return type(cS)=='table'end;local function d3(d4,d5)if d4==0 then return math.abs(d5)<1e-09 end;if d5==0 then return math.abs(d4)<1e-09 end;return math.abs(d4-d5)<math.max(math.abs(d4),math.abs(d5))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bo)assert(self.body)local co=bo+self.body.radius;if not d3(co,0)then local orbit=math.sqrt(self.body.GM/co)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dq,velocity)assert(self.body)assert(cR(dq)or cT(dq))assert(cR(velocity))local bB=(cT(dq)or PlanetRef.isMapPosition(dq))and self.body:convertToWorldCoordinates(dq)or vec3(dq)local X=vec3(velocity)local eh=bB-self.body.center;local dY=X:len2()local ei=eh:len()local ej=self.body.GM;local ek=((dY-ej/ei)*eh-eh:dot(X)*X)/ej;local d4=ej/(2*ej/ei-dY)local el=ek:len()local dZ=ek:normalize()local em=d4*(1-el)local en=d4*(1+el)local eo=em*dZ+self.body.center;local ep=el<=1 and-en*dZ+self.body.center or nil;local eq=math.sqrt(d4*ej*(1-el*el))local er=ep and 2*math.pi*math.sqrt(d4^3/ej)local es=math.acos(ek:dot(eh)/(el*ei))if eh:dot(X)<0 then es=-(es-2*math.pi)end;local et=math.acos((math.cos(es)+el)/(1+el*math.cos(es)))local eu=et;if eu<0 then eu=eu+2*math.pi end;local ev=eu-el*math.sin(eu)local ew=0;local ex=0;local ey=0;if er~=nil then ew=ev/(2*math.pi/er)ex=er-ew;ey=ex+er/2;if es-math.pi>0 then ex=ew;ey=ex+er/2 end;if ey>er then ey=ey-er end end;return{periapsis={position=eo,speed=eq/em,circularOrbitSpeed=math.sqrt(ej/em),altitude=em-self.body.radius},apoapsis=ep and{position=ep,speed=eq/en,circularOrbitSpeed=math.sqrt(ej/en),altitude=en-self.body.radius},currentVelocity=X,currentPosition=bB,eccentricity=el,period=er,eccentricAnomaly=et,meanAnomaly=ev,timeToPeriapsis=ex,timeToApoapsis=ey}end;local function ez(eA)local e8=PlanetRef.BodyParameters(eA.planetarySystemId,eA.bodyId,eA.radius,eA.center,eA.GM)return setmetatable({body=e8},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return ez(...)end})end;function Kinematics()local Kinematic={}local eB=30000000/3600;local eC=eB*eB;local eD=100;local function eE(X)return 1/math.sqrt(1-X*X/eC)end;function Kinematic.computeAccelerationTime(eF,eG,eH)local eI=eB*math.asin(eF/eB)return(eB*math.asin(eH/eB)-eI)/eG end;function Kinematic.computeDistanceAndTime(eF,eH,eJ,eK,eL,eM)eL=eL or 0;eM=eM or 0;local eN=eF<=eH;local eO=eK*(eN and 1 or-1)/eJ;local eP=-eM/eJ;local eQ=eO+eP;if eN and eQ<=0 or not eN and eQ>=0 then return-1,-1 end;local eR,eS=0,0;if eO~=0 and eL>0 then local eI=math.asin(eF/eB)local eT=math.pi*(eO/2+eP)local eU=eO*eL;local eV=eB*math.pi;local X=function(cS)local aK=(eT*cS-eU*math.sin(math.pi*cS/2/eL)+eV*eI)/eV;local eW=math.tan(aK)return eB*eW/math.sqrt(eW*eW+1)end;local eX=eN and function(cU)return cU>=eH end or function(cU)return cU<=eH end;eS=2*eL;if eX(X(eS))then local eY=0;while math.abs(eS-eY)>0.5 do local cS=(eS+eY)/2;if eX(X(cS))then eS=cS else eY=cS end end end;local eZ=eF;local e_=eS/eD;for f0=1,eD do local bp=X(f0*e_)eR=eR+(bp+eZ)*e_/2;eZ=bp end;if eS<2*eL then return eR,eS end;eF=eZ end;local eI=eB*math.asin(eF/eB)local f1=(eB*math.asin(eH/eB)-eI)/eQ;local f2=eC*math.cos(eI/eB)/eQ;local co=f2-eC*math.cos((eQ*f1+eI)/eB)/eQ;return co+eR,f1+eS end;function Kinematic.computeTravelTime(eF,eG,co)if co==0 then return 0 end;if eG>0 then local eI=eB*math.asin(eF/eB)local f2=eC*math.cos(eI/eB)/eG;return(eB*math.acos(eG*(f2-co)/eC)-eI)/eG end;assert(eF>0,'Acceleration and initial speed are both zero.')return co/eF end;function Kinematic.lorentz(X)return eE(X)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(co)local f3=co>100000;local Y=""if f3 then Y=round(co/1000/200,1).." SU"elseif co<1000 then Y=round(co,1).." M"else Y=round(co/1000,1).." KM"end;return Y end;function getDistanceDisplayString2(co)local f3=co>100000;local Y=""if f3 then Y=round(co/1000/200,2).." SU"elseif co<1000 then Y=round(co,2).." M"else Y=round(co/1000,2).." KM"end;return Y end;function getSpeedDisplayString(bp)return a(round(bp*3.6,0)+0.5).." km/h"end;function FormatTimeString(f4)local f5=a(f4/3600)local f6=a(f4/60%60)local f4=a(f4%60)if f4<0 or f5<0 or f6<0 then return"0s"end;if f5>0 then return f5 .."h "..f6 .."m "elseif f6>0 then return f6 .."m "..f4 .."s"else return f4 .."s"end end;function getMagnitudeInDirection(bf,dP)bf=vec3(bf)dP=vec3(dP):normalize()local Y=bf*dP;return Y.x+Y.y+Y.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f7=AtlasOrdered[AutopilotTargetIndex].index;local f8=atlas[0][f7]if f8.center then AutopilotTargetName=f8.name;AutopilotTargetPlanet=galaxyReference[0][f7]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=f8 end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local f9=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return f9 end;function GetAutopilotTravelTime()AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()local velocity=core.getWorldVelocity()local fa,fb=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local fc,fd;if not TurnBurn then fc,fd=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fc,fd=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fe;if not TurnBurn then _,fe=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,fe=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local ff=0;local fg=0;if fc+fa<AutopilotDistance then ff=AutopilotDistance-(fc+fa)fg=Kinematic.computeTravelTime(8333.0556,0,ff)else local fh=(AutopilotDistance-fc)/fa;fa=AutopilotDistance-fc;fb=fb*fh end;if AutopilotBraking then return fe elseif AutopilotCruising then return fg+fe else return fb+fd+fg end end;function GetAutopilotBrakeDistanceAndTime(bp)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(bp,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(bp,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bp)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(bp,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fi=Nav.axisCommandManager:getAxisCommandType(0)local bA="TRAVEL"if fi==1 then bA="CRUISE"end;if Autopilot then bA="AUTOPILOT"end;return bA end;function hoverDetectGround()local fj=-1;if vBooster then fj=vBooster.distance()elseif hover then fj=hover.distance()end;return fj end;function round(d0,fk)local fl=10^(fk or 0)return a(d0*fl+0.5)/fl end;function tablelength(fm)local fn=0;for _ in pairs(fm)do fn=fn+1 end;return fn end;function BeginProfile(fo)ProfileTimeStart=system.getTime()end;function EndProfile(fo)local fp=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fp;ProfileCount=ProfileCount+1;if fp>ProfileTimeMax then ProfileTimeMax=fp end;if fp<ProfileTimeMin then ProfileTimeMin=fp end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fq=ProfileTimeSum;local fr=ProfileTimeSum/ProfileCount;local fs=ProfileTimeMin;local ft=ProfileTimeMax;local fu=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fq,fr,fs,ft,fu))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fv=unit.getAtmosphereDensity()if door and(fv>0 or fv==0 and CoreAltitude<10000)then for _,X in pairs(door)do X.activate()end end;if forcefield and(fv>0 or fv==0 and CoreAltitude<10000)then for _,X in pairs(forcefield)do X.activate()end end;if dbHud then if not WipedDatabank then for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fw)if fw=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=AutopilotDistance;if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"MsgTimer=5;unit.setTimer("emergencyWarpTick",5)InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then warpdrive.show()showWarpWidget=true end end elseif fw=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fx;fx=radar_1.getData():find('identifiedConstructs":%[%]')if HasSpaceRadar and EmergencyWarp then local an,co=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if an~=nil and an~=""then if math.floor(co)<EmergencyWarpDistance and NotTriedEmergencyWarp then InEmergencyWarp=true;NotTriedEmergencyWarp=false end end end;if fx==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fx~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fy=radar_1.getEntries()RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fy)local fz={}for W,X in pairs(fy)do if radar_1.hasMatchingTransponder(X)==1 then fz[#fz+1]=X end end;if#fz>0 then local af=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,af)for W,X in pairs(fz)do af=af+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,af,radar_1.getConstructName(X))end end elseif radar_1 then local fA;fA=radar_1.getData():find('worksInEnvironment":false')if fA then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end;local aq={}local bA=GetFlightStyle()DrawOdometer(aq,TotalDistanceTrip,TotalDistanceTravelled,bA,FlightTime)checkDamage(aq)LastOdometerOutput=table.concat(aq,"")collectgarbage("collect")elseif fw=="reEmergencyWarp"then NotTriedEmergencyWarp=true;InEmergencyWarp=true;unit.stopTimer("reEmergencyWarp")elseif fw=="msgTick"then local aq={}DisplayMessage(aq,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fw=="emergencyWarpTick"then if EmergencyWarp then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end;unit.stopTimer("emergencyWarpTick")elseif fw=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fw=="apTick"then local l=Nav.control.isRemoteControlled;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fB=system.getMouseDeltaX()local fC=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fD=0.002;local fE=velMag>8334;if not fE and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fE;if antigrav and(antigrav.getState()==1 and not desiredBaseAltitude or AntigravJustToggledOn)then desiredBaseAltitude=antigrav.getBaseAltitude()if AntigravJustToggledOn then AntigravJustToggledOn=false end end;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local aq={}HUDPrologue(aq)if showHud then updateHud(aq)else DisplayOrbitScreen(aq)DrawWarnings(aq)end;HUDEpilogue(aq)aq[#aq+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(aq,MsgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(aq)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(aq)if screen_1.getMouseState()==1 then CheckButtons()end;aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fB;SimulatedY=SimulatedY+fC end;SetButtonContains()DrawButtons(aq)if not Animating and not Animated then local fF=table.concat(aq,"")aq={}aq[#aq+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aq[#aq+1]=GalaxyMapHTML;aq[#aq+1]=fF;aq[#aq+1]="</body>"Animating=true;aq[#aq+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(aq,"")system.setScreen(content)elseif Animated then local fF=table.concat(aq,"")aq={}aq[#aq+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"aq[#aq+1]=GalaxyMapHTML;aq[#aq+1]=fF;aq[#aq+1]="</body>"end;if not Animating then aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fB;SimulatedY=SimulatedY+fC;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="Mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fC,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fB,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(aq)end else SetButtonContains()DrawButtons(aq)end;aq[#aq+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;aq[#aq+1]=[[</svg></body>]]content=table.concat(aq,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local fc,fd;if not TurnBurn then fc,fd=GetAutopilotBrakeDistanceAndTime(velMag)else fc,fd=GetAutopilotTBBrakeDistanceAndTime(velMag)end;fc=fc;fd=fd;local fG=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fH=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fI=getMagnitudeInDirection(fH,AutopilotShipUp)local fJ=getMagnitudeInDirection(fH,AutopilotShipRight)local fK=-fJ*AutopilotDistance*velMag*fD;local fL=-fI*AutopilotDistance*velMag*fD;fG=AutopilotTargetCoords+-fK*vec3(AutopilotShipRight)+-fL*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fG)-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(AutopilotDistance)..'", "unit":""}')local fM=true;local fN=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fN)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fM=AlignToWorldVector((fG-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fM=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fM then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getVelocity()):len()>=MaxGameVelocity then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if AutopilotDistance<=fc then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(aq,"Autopilot completed, orbit established")BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end elseif AutopilotCruising then if AutopilotDistance<=fc then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end else if fM then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fM then AutopilotAccelerating=true;AutopilotStatus="Accelerating"Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)end end end end;if FollowMode then autoRoll=true;local fO=0;local bB=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fP=bB-vec3(core.getConstructWorldPos())local fQ=vec3(fP):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fR=vec3(fP):project_on(vec3(core.getConstructWorldOrientationRight())):len()local co=math.sqrt(fQ*fQ+fR*fR)AlignToWorldVector(fP:normalize())local fS=40;local fT=co<fS;local fU=100;local fV=utils.clamp((co-fS)/2,10,fU)PitchInput2=0;local fM=math.abs(YawInput2)<0.1;if fM and velMag<fV and not fT then BrakeIsOn=false;fO=-10 else BrakeIsOn=true;fO=0 end;local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getWorldVertical())local aI=getPitch(bq,br,bs)local fW=1.0;if math.abs(fO-aI)>fW then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fO-aI)local fX=pitchPID:get()PitchInput2=fX end end;local bS=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then local bo=CoreAltitude;local fY=HoldAltitude-bo;local fZ=500+velMag;local fO=(utils.smoothstep(fY,-fZ,fZ)-0.5)*2*MaxPitch;if not AltitudeHold then fO=0 end;autoRoll=true;if Reentry then if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=ReentrySpeed then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,ReentrySpeed)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then fO=-80;if unit.getAtmosphereDensity()>0.05 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;fO=0 end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false end end;local f_=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bh=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bh)local g0=bh:len()-bh:project_on(bS):len()local a9=json.decode(unit.getData()).maxBrake;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local g1=velocity:len()-math.abs(bT)local g2=vec3(core.getWorldAirFrictionAcceleration())if a9~=nil then LastMaxBrake=a9;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(g1,0,core.getConstructMass(),0,0,a9+(g2:len()-g2:project_on(bS):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(g1,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if g0<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and g0>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=g0 end;PitchInput2=f_;local br=vec3(core.getConstructWorldOrientationForward())local bs=vec3(core.getConstructWorldOrientationRight())local bq=vec3(core.getWorldVertical())local fj=-1;local aI=getPitch(bq,br,bs)local fW=0.1;if BrakeLanding then fO=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;fj=hoverDetectGround()if fj>-1 then if math.abs(fO-aI)<fW then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bS)<0.99 then BrakeIsOn=true elseif bT<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fO<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;if math.abs(fO-aI)>fW then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fO-aI)local fX=pitchPID:get()PitchInput2=PitchInput2+fX end end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 and antigrav.getState()==1 then if AntigravTargetAltitude==nil then local g3=CoreAltitude-antigrav.getBaseAltitude()if CoreAltitude>800 and g3<-200 then desiredBaseAltitude=math.max(CoreAltitude+100,1000)elseif g3>200 then desiredBaseAltitude=CoreAltitude-100 end else local g3=AntigravTargetAltitude-CoreAltitude;local velocity=vec3(core.getWorldVelocity())local bS=vec3(core.getWorldVertical())*-1;local bT=velocity.x*bS.x+velocity.y*bS.y+velocity.z*bS.z;local g4=290;local g5=-290;if unit.getClosestPlanetInfluence()>0.3 then g5=-190 end;g5=math.min(math.max(g5,-math.abs(g3)/20.0),-10)g4=math.max(math.min(g4,math.abs(g3)/20.0),10)if bT<g5 then desiredBaseAltitude=CoreAltitude+100 elseif bT>g4 then desiredBaseAltitude=math.max(CoreAltitude-100,1000)elseif math.abs(g3)>150 or math.abs(bT)>15 then if math.abs(bT)>10 then desiredBaseAltitude=CoreAltitude+math.max(math.min(g3-bT/10.0,100),-100)else desiredBaseAltitude=CoreAltitude+math.max(math.min(g3,100),-100)end else desiredBaseAltitude=AntigravTargetAltitude;if math.abs(bT)<10 and math.abs(g3)<30 then AntigravTargetAltitude=nil end end end end end end;function script.onFlush()local g6=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)g6=math.max(g6,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local g7=PitchInput+PitchInput2+system.getControlDeviceForwardInput()local g8=RollInput+RollInput2+system.getControlDeviceYawInput()local g9=YawInput+YawInput2-system.getControlDeviceLeftRightInput()local ga=BrakeInput;local gb=vec3(core.getWorldVertical())local gc=vec3(core.getConstructWorldOrientationUp())local gd=vec3(core.getConstructWorldOrientationForward())local ge=vec3(core.getConstructWorldOrientationRight())local gf=vec3(core.getWorldVelocity())local gg=vec3(core.getWorldVelocity()):normalize()local gh=getRoll(gb,gd,ge)local gi=math.abs(gh)local gj=utils.sign(gh)local f=unit.getAtmosphereDensity()local gk=vec3(core.getWorldAngularVelocity())local gl=g7*pitchSpeedFactor*ge+g8*rollSpeedFactor*gd+g9*yawSpeedFactor*gc;if gb:len()>0.01 and f>0.0 then local gm=1.0;if autoRoll==true and gi>gm and g8==0 then local gn=utils.clamp(0,gi-30,gi+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gn-gh)local go=rollPID:get()gl=gl+go*gd end;local gp=20.0;if turnAssist==true and gi>gp and g7==0 and g9==0 then local gq=turnAssistFactor*0.1;local gr=turnAssistFactor*0.025;local gs=(gi-gp)/(180-gp)*180;local gt=0;if gs<90 then gt=gs/90 elseif gs<180 then gt=(180-gs)/90 end;gt=gt*gt;local gu=-gj*gr*(1.0-gt)local gv=gq*gt;gl=gl+gv*ge+gu*gc end end;local gw=1;local gx=0;local gy=1;local gz=g6*(gl-gk)local gA=vec3(core.getWorldAirFrictionAngularAcceleration())gz=gz-gA;Nav:setEngineTorqueCommand('torque',gz,gw,'airfoil','','',gy)local gB=-ga*(brakeSpeedFactor*gf+brakeFlatFactor*gg)Nav:setEngineForceCommand('brake',gB)local gC=''local gD=vec3()local gE=false;local gF='thrust analog longitudinal'local gG=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gG==axisCommandType.byThrottle then local gH=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gF,axisCommandId.longitudinal)Nav:setEngineForceCommand(gF,gH,gw)elseif gG==axisCommandType.byTargetSpeed then local gH=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gC=gC..' , '..gF;gD=gD+gH;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gE=true end end;local gI='thrust analog lateral'local gJ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gJ==axisCommandType.byThrottle then local gK=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gI,axisCommandId.lateral)Nav:setEngineForceCommand(gI,gK,gw)elseif gJ==axisCommandType.byTargetSpeed then local gL=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gC=gC..' , '..gI;gD=gD+gL end;local gM='thrust analog vertical'local gN=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gN==axisCommandType.byThrottle then local gO=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gM,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gM,gO,gw,'airfoil','ground','',gy)else Nav:setEngineForceCommand(gM,vec3(),gw)end elseif gN==axisCommandType.byTargetSpeed then local gP=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gC=gC..' , '..gM;gD=gD+gP end;if gD:len()>constants.epsilon then if BrakeInput~=0 or gE or math.abs(gg:dot(gd))<0.95 then gC=gC..', brake'end;Nav:setEngineForceCommand(gC,gD,gx,'','','',gy)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local bp=vec3(core.getVelocity()):len()local gQ=unit.setEngineThrust;local gR=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local gS=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bp*3.6>gS*(1-gR)then gQ('rocket_engine',0)elseif IsBoosting then gQ('rocket_engine',1)end else local gT=unit.getThrottle()local fV=gT/100;if f==0 then fV=fV*MaxGameVelocity;if bp>=fV*(1-gR)then gQ('rocket_engine',0)elseif IsBoosting then gQ('rocket_engine',1)end else fV=fV*1050/3.6;if bp>=fV*(1-gR)then gQ('rocket_engine',0)elseif IsBoosting then gQ('rocket_engine',1)end end end end;if antigrav and antigrav.getState()==1 and desiredBaseAltitude~=antigrav.getBaseAltitude()then antigrav.setBaseAltitude(desiredBaseAltitude)end end;function script.onUpdate()if not SetupComplete then local _,Y=coroutine.resume(beginSetup)if Y then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(gU)if gU=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gU=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gU=="forward"then PitchInput=PitchInput-1 elseif gU=="backward"then PitchInput=PitchInput+1 elseif gU=="left"then RollInput=RollInput-1 elseif gU=="right"then RollInput=RollInput+1 elseif gU=="yawright"then YawInput=YawInput-1 elseif gU=="yawleft"then YawInput=YawInput+1 elseif gU=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gU=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gU=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gU=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gU=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gU=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gU=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif gU=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif gU=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif gU=="option4"then ToggleAutopilot()ToggleView=false elseif gU=="option5"then ToggleTurnBurn()ToggleView=false elseif gU=="option6"then ToggleAltitudeHold()ToggleView=false elseif gU=="option7"then wipeSaveVariables()ToggleView=false elseif gU=="option8"then ToggleFollowMode()ToggleView=false elseif gU=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif gU=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gU=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gU=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gU=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gU=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gU=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gU=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gU=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gU=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gU)if gU=="forward"then PitchInput=PitchInput+1 elseif gU=="backward"then PitchInput=PitchInput-1 elseif gU=="left"then RollInput=RollInput+1 elseif gU=="right"then RollInput=RollInput-1 elseif gU=="yawright"then YawInput=YawInput+1 elseif gU=="yawleft"then YawInput=YawInput-1 elseif gU=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gU=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gU=="up"then UpAmount=UpAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gU=="down"then UpAmount=UpAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gU=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gU=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gU=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gU=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gU=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gU)if gU=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05 else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gU=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100 end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gU=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gU=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(aq,gV)if gV~="empty"then aq[#aq+1]=[[<text class="msg" x="50%%" y="310" >]]for gW in string.gmatch(gV,"([^\n]+)")do aq[#aq+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gW)end;aq[#aq+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a4=system.getTime()local velocity=vec3(core.getWorldVelocity())local by=vec3(velocity):len()local gX=a4-LastTravelTime;if by>1.38889 then by=by/1000;local gY=by*(a4-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+gY;TotalDistanceTrip=TotalDistanceTrip+gY end;FlightTime=FlightTime+gX;TotalFlightTime=TotalFlightTime+gX;LastTravelTime=a4 end;function updateMass()local gZ=0;for W in pairs(ElementsID)do gZ=gZ+core.getElementMassById(ElementsID[W])end;return gZ end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
