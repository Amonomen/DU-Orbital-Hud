name: ButtonsHud - Dimencia and Archaegeo v4.94 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        ShouldCheckDamage = true --export: (Default: true) Whether or not damage checks are performed.  Disabled for performance on very large ships
        CalculateBrakeLandingSpeed = false --export: (Default: false) Whether BrakeLanding speed at non-waypoints should be calculated or use the entered value
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;LastApTickTime=system.getTime()TargetRoll=0;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","ExternalAGG","ShouldCheckDamage","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit","CalculateBrakeLandingSpeed"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=nil;local b1=false;local b2=false;local b3=autoRollPreference;local b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b5=vec3(core.getWorldVelocity())local b6=vec3(b5):len()local b7=math.cos(StallAngle*constants.deg2rad)local b8=LandingGearGroundHeight;local b9=system.getMouseDeltaX()local ba=system.getMouseDeltaY()local bb=false;local bc=false;function LoadVariables()if dbHud_1 then local bd=dbHud_1.hasKey;if not useTheseSettings then for be,bf in pairs(a)do if bd(bf)then local bg=f(dbHud_1.getStringValue(bf))if bg~=nil then c(bf.." "..dbHud_1.getStringValue(bf))_G[bf]=bg;az=true end end end end;coroutine.yield()for be,bf in pairs(b)do if bd(bf)then local bg=f(dbHud_1.getStringValue(bf))if bg~=nil then c(bf.." "..dbHud_1.getStringValue(bf))_G[bf]=bg;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local bh=system.getTime()if LastStartTime+180<bh then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b3=autoRollPreference end;LastStartTime=bh;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b7=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bi,bj)if bi>bj then bj=bi end;if ContainerOptimization>0 then bj=bj-bj*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bj=bj-bj*FuelTankOptimization*0.05 end;return bj end;function ProcessElements()local bk=fuelX~=0 and fuelY~=0;for be in pairs(af)do local type=l(af[be])if type=="Landing Gear"then A=true end;if type=="Dynamic Core Unit"then local bl=h(af[be])if bl>10000 then aQ=128 elseif bl>1000 then aQ=64 elseif bl>150 then aQ=32 end end;aG=aG+h(af[be])if bk and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bl=h(af[be])local bm=m(af[be])local bi=0;local bn=system.getTime()if type=="Atmospheric Fuel Tank"then local bj=400;local bo=35.03;if bl>10000 then bj=51200;bo=5480 elseif bl>1300 then bj=6400;bo=988.67 elseif bl>150 then bj=1600;bo=182.67 end;bi=bm-bo;if fuelTankHandlingAtmo>0 then bj=bj+bj*fuelTankHandlingAtmo*0.2 end;bj=CalculateFuelVolume(bi,bj)aD[#aD+1]={af[be],core.getElementNameById(af[be]),bj,bo,bi,bn}end;if type=="Rocket Fuel Tank"then local bj=320;local bo=173.42;if bl>65000 then bj=40000;bo=25740 elseif bl>6000 then bj=5120;bo=4720 elseif bl>700 then bj=640;bo=886.72 end;bi=bm-bo;if fuelTankHandlingRocket>0 then bj=bj+bj*fuelTankHandlingRocket*0.1 end;bj=CalculateFuelVolume(bi,bj)aF[#aF+1]={af[be],core.getElementNameById(af[be]),bj,bo,bi,bn}end;if type=="Space Fuel Tank"then local bj=2400;local bo=182.67;if bl>10000 then bj=76800;bo=5480 elseif bl>1300 then bj=9600;bo=988.67 end;bi=bm-bo;if fuelTankHandlingSpace>0 then bj=bj+bj*fuelTankHandlingSpace*0.2 end;bj=CalculateFuelVolume(bi,bj)aE[#aE+1]={af[be],core.getElementNameById(af[be]),bj,bo,bi,bn}end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,bf in pairs(door)do bf.toggle()end end;if switch then for _,bf in pairs(switch)do bf.toggle()end end;if forcefield then for _,bf in pairs(forcefield)do bf.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bp=AboveGroundLevel()if bp~=-1 or not ad and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not A then GearExtended=true end else BrakeIsOn=false end;if b8~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b8)if b8==0 and not A then GearExtended=true;BrakeIsOn=true end else b8=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if ad and bp~=-1 then a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]end;WasInAtmo=ad end;function ConvertResolutionX(bf)if ResolutionX==1920 then return bf else return round(ResolutionX*bf/1920,0)end end;function ConvertResolutionY(bf)if ResolutionY==1080 then return bf else return round(ResolutionY*bf/1080,0)end end;function RefreshLastMaxBrake(bq,br)if bq==nil then bq=core.g()end;bq=round(bq,5)local bs=j()if br~=nil and br or(aC==nil or aC~=bq)then local b5=core.getVelocity()local bt=vec3(b5):len()local bu=f(unit.getData()).maxBrake;if bu~=nil and bu>0 and ad then bu=bu/utils.clamp(bt/100,0.1,1)bu=bu/bs;if bs>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+bu)/2 else LastMaxBrakeInAtmo=bu end end end;if bu~=nil and bu>0 then LastMaxBrake=bu end;aC=bq end end;function MakeButton(bv,bw,bx,by,bz,bA,bB,bC,bD)local bE={enableName=bv,disableName=bw,width=bx,height=by,x=bz,y=bA,toggleVar=bB,toggleFunction=bC,drawCondition=bD,hovered=false}table.insert(aq,bE)return bE end;function UpdateAtlasLocationsList()AtlasOrdered={}for be,bf in pairs(aS[0])do table.insert(AtlasOrdered,{name=bf.name,index=be})end;local function bF(bG,bH)return bG.name<bH.name end;table.sort(AtlasOrdered,bF)end;function AddLocationsToAtlas()for be,bf in pairs(SavedLocations)do table.insert(aS[0],bf)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bI)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bJ='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bK,bL,bM,bN,bO=string.match(bI,bJ)if bK=="0"and bL=="0"then return vec3(tonumber(bM),tonumber(bN),tonumber(bO))end;bN=math.rad(bN)bM=math.rad(bM)local planet=aS[tonumber(bK)][tonumber(bL)]local bP=math.cos(bM)local bQ=vec3(bP*math.cos(bN),bP*math.sin(bN),math.sin(bM))return planet.center+(planet.radius+bO)*bQ end;function AddNewLocationByWaypoint(bR,planet,bI)if dbHud_1 then local bS={}local position=zeroConvertToWorldCoordinates(bI)if planet.name=="Space"then bS={position=position,name=bR,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bT=false;if planet.hasAtmosphere then bT=true else bT=false end;bS={position=position,name=bR,atmosphere=bT,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bS;table.insert(aS[0],bS)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bU=planet.name..". "..#SavedLocations;if radar_1 then local bV,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bV~=nil and bV~=""then bU=bU.." "..radar_1.getConstructName(bV)end end;local bS={}local bT=false;if planet.hasAtmosphere then bT=true end;bS={position=position,name=bU,atmosphere=bT,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bS;table.insert(aS[0],bS)UpdateAtlasLocationsList()K="Location saved as "..bU else K="Databank must be installed to save locations"end end;function UpdatePosition(bW)local bX=-1;local bS;for be,bf in pairs(SavedLocations)do if bf.name and bf.name==CustomTarget.name then bX=be;break end end;if bX~=-1 then local bY;if bW~=nil then bS={position=SavedLocations[bX].position,name=bW,atmosphere=SavedLocations[bX].atmosphere,planetname=SavedLocations[bX].planetname,gravity=SavedLocations[bX].gravity}else bS={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bX].name,atmosphere=j(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bX]=bS;bX=-1;for be,bf in pairs(aS[0])do if bf.name and bf.name==CustomTarget.name then bX=be end end;if bX>-1 then aS[0][bX]=bS end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bX=-1;for be,bf in pairs(aS[0])do if bf.name and bf.name==CustomTarget.name then bX=be end end;if bX>-1 then table.remove(aS[0],bX)end;bX=-1;for be,bf in pairs(SavedLocations)do if bf.name and bf.name==CustomTarget.name then K=bf.name.." saved location cleared"bX=be;break end end;if bX~=-1 then table.remove(SavedLocations,bX)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bZ)bZ[#bZ+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(b_,c0,bz,bA,bx,by)if b_>bz and b_<bz+bx and c0>bA and c0<bA+by then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local c3=vec3(core.getWorldVertical())local c4=getPitch(c3,c1,c2)LockPitch=c4;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b3=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b3=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b3=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b3=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b3=autoRollPreference end end;function CheckDamage(bZ)local c5=0;ao=""local c6=aG;local c7=0;local c8=0;local c9=0;local ca=0;local cb=""for be in pairs(af)do local bl=0;local cc=0;cc=h(af[be])bl=k(af[be])c7=c7+bl;if bl<cc then if bl==0 then c9=c9+1 else c8=c8+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[be]))local bz=position.x-aQ;local bA=position.y-aQ;local cd=position.z-aQ;table.insert(al,core.spawnArrowSticker(bz,bA,cd+1,"down"))table.insert(al,core.spawnArrowSticker(bz,bA,cd+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bz+1,bA,cd,"north"))table.insert(al,core.spawnArrowSticker(bz+1,bA,cd,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bz-1,bA,cd,"south"))table.insert(al,core.spawnArrowSticker(bz-1,bA,cd,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bz,bA-1,cd,"east"))table.insert(al,core.spawnArrowSticker(bz,bA-1,cd,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bz,bA+1,cd,"west"))table.insert(al,core.spawnArrowSticker(bz,bA+1,cd,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[be])end elseif aH and#al>0 and al[11]==af[be]then for ce in pairs(al)do core.deleteSticker(al[ce])end;al={}end end;c5=d(c7/c6*100)if c5<100 then bZ[#bZ+1]=[[<g class="pbright txt">]]ca=d(c5*2.55)cb=e("rgb(%d,%d,%d)",255-ca,ca,0)if c5<100 then bZ[#bZ+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],cb,c5)if c9>0 then bZ[#bZ+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],cb,c9,c8)elseif c8>0 then bZ[#bZ+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],cb,c8)end end;bZ[#bZ+1]=[[<\g>]]end end;function DrawCursorLine(bZ)local cf=d(utils.clamp(a3/(at/4)*255,0,255))bZ[#bZ+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+cf,d(PrimaryG+0.5)-cf,d(PrimaryB+0.5)-cf)end;function getPitch(cg,ch,bH)local ci=cg:cross(bH):normalize_inplace()local c4=math.acos(utils.clamp(ci:dot(-ch),-1,1))*constants.rad2deg;if ci:cross(-ch):dot(bH)<0 then c4=-c4 end;return c4 end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b3=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for be,bf in pairs(a)do dbHud_1.setStringValue(bf,g(nil))end;for be,bf in pairs(b)do if bf~="SavedLocations"then dbHud_1.setStringValue(bf,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bf in pairs(aq)do if bf.hovered then if not bf.drawCondition or bf.drawCondition()then bf.toggleFunction()end;bf.hovered=false end end end;function SetButtonContains()local bz=a0+at/2;local bA=a1+au/2;for _,bf in pairs(aq)do bf.hovered=Contains(bz,bA,bf.x,bf.y,bf.width,bf.height)end end;function DrawButton(bZ,cj,hover,bz,bA,ck,cl,cm,cn,co,cp)if type(co)=="function"then co=co()end;if type(cp)=="function"then cp=cp()end;bZ[#bZ+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bz,bA,ck,cl)if cj then bZ[#bZ+1]=e("%s'",cm)else bZ[#bZ+1]=cn end;if hover then bZ[#bZ+1]=" style='stroke:white; stroke-width:2'"else bZ[#bZ+1]=" style='stroke:black; stroke-width:1'"end;bZ[#bZ+1]="></rect>"bZ[#bZ+1]=e("<text x='%f' y='%f' font-size='24' fill='",bz+ck/2,bA+cl/2+5)if cj then bZ[#bZ+1]="black"else bZ[#bZ+1]="white"end;bZ[#bZ+1]="' text-anchor='middle' font-family='Montserrat'>"if cj then bZ[#bZ+1]=e("%s</text>",co)else bZ[#bZ+1]=e("%s</text>",cp)end end;function DrawButtons(bZ)local cq="rgb(50,50,50)'"local cr="rgb(210,200,200)"local cs=DrawButton;for _,bf in pairs(aq)do local bw=bf.disableName;local bv=bf.enableName;if type(bw)=="function"then bw=bw()end;if type(bv)=="function"then bv=bv()end;if not bf.drawCondition or bf.drawCondition()then cs(bZ,bf.toggleVar(),bf.hovered,bf.x,bf.y,bf.width,bf.height,cr,cq,bw,bv)end end end;function DrawTank(bZ,aP,bz,ct,cu,cv,cw,cx)local cy=1;local cz=2;local cA=3;local cB=4;local cC=5;local cD=6;local cE=""local cF=0;local cG=fuelY;local cH=fuelY+10;if o()==1 and not RemoteHud then cG=cG-50;cH=cH-50 end;bZ[#bZ+1]=[[<g class="pdim txtfuel">]]if cu=="ATMO"then cE="atmofueltank"elseif cu=="SPACE"then cE="spacefueltank"else cE="rocketfueltank"end;cF=_G[cE.."_size"]if#cv>0 then for i=1,#cv do local bU=string.sub(cv[i][cz],1,12)local cI=0;for ce=1,cF do if cv[i][cz]==f(unit[cE.."_"..ce].getData()).name then cI=ce;break end end;if aP or cw[i]==nil or cx[i]==nil then local cJ=0;local cK=0;local cL=0;local cM=0;local bn=system.getTime()if cI~=0 then cx[i]=f(unit[cE.."_"..cI].getData()).percentage;cw[i]=f(unit[cE.."_"..cI].getData()).timeLeft;if cw[i]=="n/a"then cw[i]=0 end else cL=m(cv[i][cy])-cv[i][cB]cJ=cv[i][cA]cx[i]=d(0.5+cL*100/cJ)cK=cv[i][cC]cM=cv[i][cD]if cK<=cL then cw[i]=0 else cw[i]=d(0.5+cL/((cK-cL)/(bn-cM)))end;cv[i][cC]=cL;cv[i][cD]=bn end end;if bU==ct then bU=e("%s %d",cu,i)end;if cI==0 then bU=bU.." *"end;local cN;if cw[i]==0 then cN="n/a"else cN=FormatTimeString(cw[i])end;if cx[i]~=nil then local ca=d(cx[i]*2.55)local cb=e("rgb(%d,%d,%d)",255-ca,ca,0)local cO=""if cN~="n/a"and cw[i]<120 or cx[i]<5 then if aP then cO=[[class="red"]]end end;bZ[#bZ+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bz,cG,cO,bU,bz,cH,cb,cx[i],cN)cG=cG+30;cH=cH+30 end end end;bZ[#bZ+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b5)b5=vec3(b5)local c4=-math.deg(math.atan(b5.y,b5.z))+180;c4=c4-90;if c4<0 then c4=360+c4 end;if c4>180 then c4=-180+c4-180 end;return-c4 end;function getRelativeYaw(b5)b5=vec3(b5)local cP=math.deg(math.atan(b5.y,b5.x))-90;if cP<-180 then cP=360+cP end;return cP end;function AlignToWorldVector(cQ,cR,cS)if not ad or not bc or aa~=-1 or b6<w then local cT=cS;if cT==nil then cT=DampingMultiplier end;if cR==nil then cR=as end;cQ=vec3(cQ):normalize()local cU=vec3(core.getConstructWorldOrientationForward())-cQ;local cV=-getMagnitudeInDirection(cU,core.getConstructWorldOrientationRight())*ar;local cW=-getMagnitudeInDirection(cU,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cV/2 end;if an==0 then an=cW/2 end;if math.abs(cV)<0.1 then D=D-cV*2 else D=D-(cV+(cV-am)*cT)end;if math.abs(cW)<0.1 then C=C+cW*2 else C=C+cW+(cW-an)*cT end;am=cV;an=cW;if math.abs(cV)<cR and math.abs(cW)<cR then return true end;return false elseif bc and aa==-1 then cQ=vec3(core.getWorldVelocity())local cT=cS;if cT==nil then cT=DampingMultiplier end;if cR==nil then cR=as end;cQ=vec3(cQ):normalize()local cU=vec3(core.getConstructWorldOrientationForward())-cQ;local cV=-getMagnitudeInDirection(cU,core.getConstructWorldOrientationRight())*ar;local cW=-getMagnitudeInDirection(cU,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cV/2 end;if an==0 then an=cW/2 end;if math.abs(cV)<0.1 then D=D-cV*5 else D=D-(cV+(cV-am)*cT)end;if math.abs(cW)<0.1 then C=C+cW*5 else C=C+cW+(cW-an)*cT end;am=cV;an=cW;if math.abs(cV)<cR and math.abs(cW)<cR then return true end;return false end end;function getAPEnableName()local bU=AutopilotTargetName;if bU==nil then bU=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bU==nil then bU="None"end;return"Engage Autopilot: "..bU end;function getAPDisableName()local bU=AutopilotTargetName;if bU==nil then bU=CustomTarget.name end;if bU==nil then bU="None"end;return"Disable Autopilot: "..bU end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b3=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.hasAtmosphere then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b3=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b3=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cX=50;local cY=260;local cZ=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cY,cX,at/2-cY/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cY,cX,at/2-cY/2-50-cZ.width,au/2-cX+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cY,cX,at/2-cY/2+cZ.width+50,au/2-cX+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local c_=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,c_.height,c_.x+c_.width+30,c_.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,c_.height,c_.x+c_.width+30,c_.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,c_.height,c_.x-200-30,c_.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cX=60;cY=300;local bz=10;local bA=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cY,cX,bz,bA,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cY,cX,bz+cY+20,bA,function()return AltitudeHold end,ToggleAltitudeHold)bA=bA+cX+20;MakeButton("Engage Autoland","Disable Autoland",cY,cX,bz,bA,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cY,cX,bz+cY+20,bA,function()return AutoTakeoff end,ToggleAutoTakeoff)bA=bA+cX+20;MakeButton("Show Orbit Display","Hide Orbit Display",cY,cX,bz,bA,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bA=bA+cX+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cY,cX,bz,bA,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cY,cX,bz+cY+20,bA,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bA=bA+cX+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cY,cX,bz,bA,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cY,cX,bz+cY+20,bA,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bA=bA+cX+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cY,cX,bz,bA,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bA=bA+cX+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cY*2,cX,bz,bA,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local d0=Nav.axisCommandManager:getAxisCommandType(0)local d1="TRAVEL"if d0==1 then d1="CRUISE"end;if Autopilot then d1="AUTOPILOT"end;return d1 end;function UpdateHud(bZ)local bO=ae;local b5=core.getVelocity()local bt=vec3(b5):len()local c3=vec3(core.getWorldVertical())local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local d2=vec3(core.getConstructWorldOrientationUp())local d3=getRoll(c3,c1,c2)local d4=d3/180*math.pi;local d5=math.cos(d4)local d6=math.sin(d4)local c4=getPitch(c3,c1,c2*d5+d2*d6)local d7=d3;local d8=c4;local d9=j()local da=d(unit.getThrottle())local db=bt*3.6;local dc=unit.getAxisCommandValue(0)local d1=GetFlightStyle()local dd="ROLL"local de=unit.getClosestPlanetInfluence()>0;if da==nil then da=0 end;if not de then if bt>5 then c4=getRelativePitch(b5)d3=getRelativeYaw(b5)else c4=0;d3=0 end;dd="YAW"end;bZ[#bZ+1]=a5;bZ[#bZ+1]=ao;bZ[#bZ+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bZ,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bZ,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bZ,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bZ,bO)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if de then DrawRollLines(bZ,centerX,centerY,d7,dd,de)DrawArtificialHorizon(bZ,d8,d7,centerX,centerY,de,d(getRelativeYaw(b5)),bt)else DrawRollLines(bZ,centerX,centerY,d3,dd,de)DrawArtificialHorizon(bZ,c4,d3,centerX,centerY,de,d(d3),bt)end;DrawAltitudeDisplay(bZ,bO,de)DrawPrograde(bZ,b5,bt,centerX,centerY)end end;DrawThrottle(bZ,d1,da,dc)DrawSpeed(bZ,db)DrawWarnings(bZ)DisplayOrbitScreen(bZ)if screen_2 then local bI=vec3(core.getConstructWorldPos())local bz=960+bI.x/aU;local bA=450+bI.y/aV;screen_2.moveContent(aW,(bz-80)/19.2,(bA-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bZ)local df=aj;local dg=ak;local dh=aj;local di=ak;if IsInFreeLook()and not brightHud then df=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]dg=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bZ[#bZ+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],df,df,dh,dh,dg,dg,di,di,ResolutionX,ResolutionY)end;function HUDEpilogue(bZ)bZ[#bZ+1]="</svg>"end;function DrawSpeed(bZ,db)local dj=throtPosY-10;local dk=throtPosX+10;bZ[#bZ+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dj=75 end;bZ[#bZ+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],dk,dj,d(db))end;function DrawOdometer(bZ,W,TotalDistanceTravelled,d1,X,d9)local dl=ConvertResolutionX(1240)local dm=ConvertResolutionY(55)local dn=dm+10;local d9=j()local bq=core.g()local dp=0;local dq=0;local dr=0;RefreshLastMaxBrake(bq)if ad then dr=LastMaxBrakeInAtmo else dr=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local ds=vec3(core.getWorldAcceleration()):len()/9.80665;if bq>0.1 then dq=aB*bq;dp=maxThrust/bq end;bZ[#bZ+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dl=ConvertResolutionX(1120)dm=ConvertResolutionY(55)dn=dm+10 elseif ad then local dt=ConvertResolutionX(770)bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dt,dm,dt,dn,d9)end;bZ[#bZ+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dl,dm,dl,dn,bq/9.80665,dl,dm+20,dl,dn+20,ds)bZ[#bZ+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bZ[#bZ+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dr/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),d1)if bq>0.1 then bZ[#bZ+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dp/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dq/1000)else bZ[#bZ+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bZ[#bZ+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),d1)end;bZ[#bZ+1]="</g>"end;function DrawThrottle(bZ,d1,da,dc)local cG=throtPosY+10;local cH=throtPosY+20;if o()==1 and not RemoteHud then cG=55;cH=65 end;local du="CRUISE"local unit="km/h"local dv=dc;if d1=="TRAVEL"or d1=="AUTOPILOT"then du="THROT"unit="%"dv=da;local dw="dim"if da<0 then dw="red"end;bZ[#bZ+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dw,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(da),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bZ[#bZ+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cG,du,throtPosX+10,cH,dv,unit)end;function DrawVerticalSpeed(bZ,bO)if bO<200000 and not ad or bO and ad then local dx=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dy=0;if math.abs(dx)>1 then dy=45*math.log(math.abs(dx),10)if dx<0 then dy=-dy end end;bZ[#bZ+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(dx),d(dy))end end;function getHeading(ch)local dz=-vec3(core.getWorldVertical())ch=ch-ch:project_on(dz)local dA=vec3(0,0,1)dA=dA-dA:project_on(dz)local dB=dA:cross(dz)local dy=dA:angle_between(ch)*constants.rad2deg;if ch:dot(dB)<0 then dy=360-dy end;return dy end;function DrawRollLines(bZ,centerX,centerY,d7,dd,de)local dC=circleRad;local dD=20;dD=d(dD)local dE=d(d7)if de then for i=-45,45,5 do local dF=i;bZ[#bZ+1]=e([[<g transform="rotate(%f,%d,%d)">]],dF,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bZ[#bZ+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dC+dD-len,centerX,centerY+dC+dD)end;bZ[#bZ+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dC+dD-35,dd,centerX,centerY+dC+dD-25,dE)bZ[#bZ+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d7,centerX,centerY)bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dC+dD-20,centerX+5,centerY+dC+dD-20,centerX,centerY+dC+dD-15)bZ[#bZ+1]="</g>"end;local cP=dE;if de then cP=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dG=20;local dH=d(cP)local dI=0;local dJ=centerY+dC+dD+20;local dK=centerX;if dd~="YAW"then dJ=ConvertResolutionY(130)dK=ConvertResolutionX(960)end;local dL=[[<path class="txttick line" d="]]for i=d(dH-(dG+10)-dH%5+0.5),d(dH+dG+10+dH%5+0.5),5 do local bz=dK+-i*5+cP*5;if i%10==0 then dI=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bZ[#bZ+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bz+5,dJ-12,p)elseif i%5==0 then dI=5 end;if dI==10 then dL=e([[%s M %f %f v %d]],dL,bz,dJ-5,dI)else dL=e([[%s M %f %f v %d]],dL,bz,dJ-2.5,dI)end end;bZ[#bZ+1]=dL..[["/>]]bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dK-5,dJ+10,dK+5,dJ+10,dK,dJ+5)if de then dd="HDG"end;bZ[#bZ+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dK,dJ+25,dH,dK,dJ+35,dd)end;function DrawArtificialHorizon(bZ,d8,d7,centerX,centerY,de,dM,bt)local dC=circleRad;local dN=d(dC*3/5)if dC>0 then local dO=d(d8)local len=0;local dL=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*d7,centerX,centerY)if not ad then dL=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bZ[#bZ+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dC-1,centerX,centerY)bZ[#bZ+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dO-30-dO%5+0.5),d(dO+30+dO%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bA=centerY+-i*5+d8*5;if len==30 then dL=e([[%s M %d %f h %d]],dL,centerX-dN-len,bA,len)if ad then bZ[#bZ+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d7,centerX,centerY,centerX-dN+10,bA,i)bZ[#bZ+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d7,centerX,centerY,centerX+dN-10,bA,i)if i==0 or i==180 or i==-180 then bZ[#bZ+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d7,centerX,centerY,centerX-dN+20,bA,dN*2-40)end else bZ[#bZ+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dN+10,bA,i)bZ[#bZ+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dN-10,bA,i)end;dL=e([[%s M %d %f h %d]],dL,centerX+dN,bA,len)else dL=e([[%s M %d %f h %d]],dL,centerX-dN-len,bA,len)dL=e([[%s M %d %f h %d]],dL,centerX+dN,bA,len)end end;bZ[#bZ+1]=dL..[["/>]]local dP="PITCH"if not de then dP="REL PITCH"end;if d8>90 and not ad then d8=90-(d8-90)elseif d8<-90 and not ad then d8=-90-(d8+90)end;if dC>200 then if ad then if bt>w then bZ[#bZ+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dM)end;bZ[#bZ+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d7,centerX,centerY)else bZ[#bZ+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dN+25,centerY-5,centerX-dN+20,centerY,centerX-dN+25,centerY+5,centerX-dN+50,centerY+4,dO)bZ[#bZ+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dN-25,centerY-5,centerX+dN-20,centerY,centerX+dN-25,centerY+5,centerX+dN-30,centerY+4,dO)bZ[#bZ+1]="</g>"end;local dQ=d(dC/3)bZ[#bZ+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dQ,centerY,dC-dQ)if not ad and de then bZ[#bZ+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d7,centerX,centerY,centerX-dN+10,centerY,dN*2-20)end;bZ[#bZ+1]="</g>"if dC<200 then if ad and bt>w then bZ[#bZ+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dC,dP,centerX,centerY-dC+10,dO,centerX,centerY-15,"Yaw",centerX,centerY+20,dM)else bZ[#bZ+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dC,dP,centerX,centerY-dC+15,dO)end end end end;function DrawAltitudeDisplay(bZ,bO,de)local dR=altMeterX;local dS=altMeterY;local dT=78;local dU=19;local dV=AboveGroundLevel()if dV~=-1 then table.insert(bZ,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dR+dT,dS+dU+20,dV))end;if de and(bO<200000 and not ad or bO and ad)then table.insert(bZ,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dR-1,dS-4,dT+2,dU+6,dR+1,dS-1,dT-4,dU))local bX=0;local dW=1;local dX=0;local dY=bO<0;local dZ=9;if dY then dZ=0 end;local bO=math.abs(bO)while bX<6 do local d_=11;local e0=16;local e1=9;local e2=14;local cO="altsm"if bX>2 then e0=e0+3;d_=d_+2;e2=e2+2;e1=e1-6;cO="altbig"end;if dY then cO=cO.." red"end;local e3=bO/dW%10;local e4=d(e3)local e5=d((e4+1)%10)local e6=dX;if bX==0 then e6=e3-e4;if dY then e6=1-e6 end end;if dY and(bX==0 or dX~=0)then local e7=e5;e5=e4;e4=e7 end;local e8=e0*(e6-1)local e9=e8+e0;local bz=dR+e1+(6-bX)*d_;local bA=dS+e2;table.insert(bZ,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cO,bz,bA+e8,e5,bz,bA+e9,e4))bX=bX+1;dW=dW*10;if e4==dZ then dX=e6 else dX=0 end end;table.insert(bZ,[[</g></g>]])end end;function DrawPrograde(bZ,b5,bt,centerX,centerY)if bt>5 and not ad or bt>w then local dC=circleRad;local ea=20;local eb=20;local ec=vec3(b5)local ed=getRelativePitch(ec)local ee=getRelativeYaw(ec)local ef=14;local eg=ef/2;local eh=-ee/eb*dC;local ei=ed/ea*dC;local bz=centerX+eh;local bA=centerY+ei;local a3=math.sqrt(eh^2+ei^2)local ej=[[<circle
                cx="]]..bz..[["
                cy="]]..bA..[["
                r="]]..eg/ef..[["
                style="fill:#d7fe00;stroke:none;fill-opacity:1"/>
             <circle
                cx="]]..bz..[["
                cy="]]..bA..[["
                r="]]..eg..[["
                style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
             <path
                d="M ]]..bz-ef..[[,]]..bA..[[ h ]]..eg..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bz+eg..[[,]]..bA..[[ h ]]..eg..[["
                style="stroke:#d7fe00;stroke-opacity:1" />
             <path
                d="M ]]..bz..[[,]]..bA-ef..[[ v ]]..eg..[["
                style="stroke:#d7fe00;stroke-opacity:1" />]]if a3<dC then bZ[#bZ+1]=ej else local dy=math.atan(ei,eh)local ek=4;local el=centerX+dC*math.cos(dy)local em=centerY+dC*math.sin(dy)bZ[#bZ+1]=e('<g transform="rotate(%f %f %f)"><rect x="%f" y="%f" width="%f" height="%f" stroke="#d7fe00" fill="#d7fe00" /><path d="M %f %f l %f %f l %f %f z" fill="#d7fe00" stroke="#d7fe00"></g>',dy*180/math.pi,el,em,el-ek,em-ek/2,ek*2,ek,el+ek,em-ek,ek,ek,-ek,ek)end;if not ad then ed=getRelativePitch(-ec)ee=getRelativeYaw(-ec)eh=-ee/eb*dC;ei=ed/ea*dC;bz=centerX+eh;bA=centerY+ei;a3=math.sqrt(eh^2+ei^2)if a3<dC then local en=[[<circle
                        cx="]]..bz..[["
                        cy="]]..bA..[["
                        r="]]..eg..[["
                        style="stroke:#d7fe00;stroke-opacity:1;fill:none" />
                     <path
                        d="M ]]..bz..[[,]]..bA-ef..[[ v ]]..eg..[["
                        style="stroke:#d7fe00;stroke-opacity:1" id="l"/>
                     <use
                        xlink:href="#l"
                        transform="rotate(120,]]..bz..[[,]]..bA..[[)" />
                     <use
                        xlink:href="#l"
                        transform="rotate(-120,]]..bz..[[,]]..bA..[[)" />
                     <path
                        d="M ]]..bz-eg..[[,]]..bA..[[ h ]]..ef..[["
                        style="stroke-width:0.5;stroke:#d7fe00;stroke-opacity:1"
                        transform="rotate(-45,]]..bz..[[,]]..bA..[[)" id="c"/>
                    <use
                        xlink:href="#c"
                        transform="rotate(-90,]]..bz..[[,]]..bA..[[)"/>]]bZ[#bZ+1]=en end end end end;function DrawWarnings(bZ)bZ[#bZ+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bZ[#bZ+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bZ[#bZ+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local eo=ConvertResolutionX(960)local ep=ConvertResolutionY(860)local eq=ConvertResolutionY(880)local er=ConvertResolutionY(900)local es=ConvertResolutionY(960)local et=ConvertResolutionY(200)local eu=ConvertResolutionY(150)local ev=ConvertResolutionY(960)if o()==1 and not RemoteHud then ep=ConvertResolutionY(135)eq=ConvertResolutionY(155)er=ConvertResolutionY(175)et=ConvertResolutionY(115)eu=ConvertResolutionY(95)end;if BrakeIsOn then bZ[#bZ+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],eo,ep)end;if ad and bc and hoverDetectGround()==-1 then bZ[#bZ+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],eo,et+50)end;if ah then bZ[#bZ+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],eo,ev)end;if GearExtended then if A then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],eo,eq)else bZ[#bZ+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],eo,eq)end;bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],eo,er,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],eo,es+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eo,et+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bZ[#bZ+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],eo,et+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],eo,et+20,AutopilotStatus)elseif LockPitch~=nil then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],eo,et+20,d(LockPitch))elseif I then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],eo,et+20)elseif Reentry then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],eo,et+20)end;if AltitudeHold then if AutoTakeoff then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],eo,et,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],eo,et+50)end else bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],eo,et,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bZ[#bZ+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],eo,et)else bZ[#bZ+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],eo,et)end end;if ProgradeIsOn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],eo,et)end;if RetrogradeIsOn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],eo,et)end;if TurnBurn then bZ[#bZ+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],eo,eu)end;if VectorToTarget then bZ[#bZ+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],eo,et+30,VectorStatus)end;bZ[#bZ+1]="</g>"end;function DisplayOrbitScreen(bZ)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local ew=OrbitMapX;local ex=OrbitMapY;local ey=OrbitMapSize;local ez=4;ex=ex+ez;local eA=15;local bz=ew+ey+ew/2+ez;local bA=ex+ey/2+5+ez;local eB,eC,eD,eE;eB=ey/4;eE=0;bZ[#bZ+1]=[[<g class="pbright txtorb txtmid">]]bZ[#bZ+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',ey+ew*2,ey+ex,ez,ez)if orbit.periapsis~=nil and orbit.apoapsis~=nil then eD=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(eB*2)eC=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/eD*(1-orbit.eccentricity)eE=eB-orbit.periapsis.altitude/eD-planet.radius/eD;local eF=""if orbit.periapsis.altitude<=0 then eF='redout'end;bZ[#bZ+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],eF,ew+ey/2+eE+ez,ex+ey/2+ez,eB,eC)bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',ew+ey/2+ez,ex+ey/2+ez,planet.radius/eD)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bZ[#bZ+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bz-35,bA-5,ew+ey/2+eB+eE,bA-5)bZ[#bZ+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bz,bA)bA=bA+eA;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bz,bA,getDistanceDisplayString(orbit.apoapsis.altitude))bA=bA+eA;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bz,bA,FormatTimeString(orbit.timeToApoapsis))bA=bA+eA;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bz,bA,getSpeedDisplayString(orbit.apoapsis.speed))end;bA=ex+ey/2+5+ez;bz=ew-ew/2+10+ez;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bZ[#bZ+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bz+35,bA-5,ew+ey/2-eB+eE,bA-5)bZ[#bZ+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bz,bA)bA=bA+eA;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bz,bA,getDistanceDisplayString(orbit.periapsis.altitude))bA=bA+eA;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bz,bA,FormatTimeString(orbit.timeToPeriapsis))bA=bA+eA;bZ[#bZ+1]=e([[<text x="%f" y="%f">%s</text>]],bz,bA,getSpeedDisplayString(orbit.periapsis.speed))end;bZ[#bZ+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],ew+ey/2+ez,20+ez,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local eG=orbit.timeToApoapsis/orbit.period*2*math.pi;local eH=eB*math.cos(eG)local eI=eC*math.sin(eG)bZ[#bZ+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',ew+ey/2+eH+eE+ez,ex+ey/2+eI+ez)end;bZ[#bZ+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local eJ=a3>100000;local bg=""if eJ then bg=round(a3/1000/200,1).." SU"elseif a3<1000 then bg=round(a3,1).." M"else bg=round(a3/1000,1).." KM"end;return bg end;function getDistanceDisplayString2(a3)local eJ=a3>100000;local bg=""if eJ then bg=round(a3/1000/200,2).." SU"elseif a3<1000 then bg=round(a3,2).." M"else bg=round(a3/1000,2).." KM"end;return bg end;function getSpeedDisplayString(bt)return d(round(bt*3.6,0)+0.5).." km/h"end;function FormatTimeString(eK)local eL=0;local eM=0;local eN=0;if eK<60 then eK=d(eK)elseif eK<3600 then eL=d(eK/60)eK=d(eK%60)elseif eK<86400 then eM=d(eK/3600)eL=d(eK%3600/60)else eN=d(eK/86400)eM=d(eK%86400/3600)end;if eN>0 then return eN.."d "..eM.."h "elseif eM>0 then return eM.."h "..eL.."m "elseif eL>0 then return eL.."m "..eK.."s"elseif eK>0 then return eK.."s"else return"0s"end end;function getMagnitudeInDirection(cQ,eO)cQ=vec3(cQ)eO=vec3(eO):normalize()local bg=cQ*eO;return bg.x+bg.y+bg.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eP=AtlasOrdered[AutopilotTargetIndex].index;local eQ=aS[0][eP]if eQ.center then AutopilotTargetName=eQ.name;V=aY[0][eP]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eQ;for _,bf in pairs(aY[0])do if bf.name==CustomTarget.planetname then V=bf;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=b0(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eR=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eR end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b5=core.getWorldVelocity()local bt=vec3(b5):len()local eS,eT=aZ.computeDistanceAndTime(vec3(b5):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eU;if not TurnBurn then _,eU=GetAutopilotBrakeDistanceAndTime(bt)else _,eU=GetAutopilotTBBrakeDistanceAndTime(bt)end;local eV=0;local eW=0;if AutopilotCruising or not Autopilot and bt>5 then eW=aZ.computeTravelTime(bt,0,AutopilotDistance)elseif P+eS<AutopilotDistance then eV=AutopilotDistance-(P+eS)eW=aZ.computeTravelTime(8333.0556,0,eV)else local eX=(AutopilotDistance-P)/eS;eS=AutopilotDistance-P;eT=eT*eX end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eW elseif AutopilotBraking then return eU elseif AutopilotCruising then return eW+eU else return eT+Q+eW end end;function GetAutopilotBrakeDistanceAndTime(bt)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bt,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bt,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bt)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bt,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eY=-1;local eZ=-1;if vBooster then eY=vBooster.distance()end;if hover then eZ=hover.distance()end;if eY~=-1 and eZ~=-1 then if eY<eZ then return eY else return eZ end elseif eY~=-1 then return eY elseif eZ~=-1 then return eZ else return-1 end end;function AboveGroundLevel()local e_=-1;local f0=hoverDetectGround()if telemeter_1 then e_=telemeter_1.getDistance()end;if f0~=-1 and e_~=-1 then if f0<e_ then return f0 else return e_ end elseif f0~=-1 then return f0 else return e_ end end;function tablelength(f1)local f2=0;for _ in pairs(f1)do f2=f2+1 end;return f2 end;function BeginProfile(f3)ProfileTimeStart=system.getTime()end;function EndProfile(f3)local f4=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+f4;ProfileCount=ProfileCount+1;if f4>ProfileTimeMax then ProfileTimeMax=f4 end;if f4<ProfileTimeMin then ProfileTimeMin=f4 end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local f5=ProfileTimeSum;local f6=ProfileTimeSum/ProfileCount;local f7=ProfileTimeMin;local f8=ProfileTimeMax;local f9=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",f5,f6,f7,f8,f9))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local fa=radar_1.getEntries()local fb=radar_1.getData()local fc=ConvertResolutionX(1770)local fd=ConvertResolutionY(330)if#fa>0 then local fe=fb:find('identifiedConstructs":%[%]')if fe==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if fe~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],fc,fd,#fa)local ff={}for be,bf in pairs(fa)do if radar_1.hasMatchingTransponder(bf)==1 then table.insert(ff,bf)end end;if#ff>0 then local bA=ConvertResolutionY(15)local bz=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bz,bA)for be,bf in pairs(ff)do bA=bA+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bz,bA,radar_1.getConstructName(bf))end end else local fg;fg=fb:find('worksInEnvironment":false')if fg then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],fc,fd)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],fc,fd)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bZ,fh)if fh~="empty"then bZ[#bZ+1]=[[<text class="msg" x="50%%" y="310" >]]for fi in string.gmatch(fh,"([^\n]+)")do bZ[#bZ+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],fi)end;bZ[#bZ+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bn=system.getTime()local b5=vec3(core.getWorldVelocity())local db=vec3(b5):len()local fj=bn-ag;if db>1.38889 then db=db/1000;local fk=db*(bn-ag)TotalDistanceTravelled=TotalDistanceTravelled+fk;W=W+fk end;X=X+fj;TotalFlightTime=TotalFlightTime+fj;ag=bn end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,hasAtmosphere=false,gravity=0},[2]={name="Alioth",description="Alioth is the planet selected by the arkship for landfall; it is a typical goldilocks planet where humanity may rebuild in the coming decades. The arkship geological survey reports mountainous regions alongside deep seas and lush forests. This is where it all starts.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9401,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=2,GM=157470826617,gravity=1.0082568597356114,fullAtmosphericDensityMaxAltitude=-10,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6272,numSatellites=2,positionFromSun=2,center={x=-8,y=-8,z=-126303},radius=126067.8984375,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=3410,surfaceArea=199718780928,surfaceAverageAltitude=200,surfaceMaxAltitude=1100,surfaceMinAltitude=-330,systemZone="High",territories=259472,type="Planet",waterLevel=0,planetarySystemId=0},[21]={name="Alioth Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=21,GM=2118960000,gravity=0.24006116402380084,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=457933,y=-1509011,z=115524},radius=30000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=11309733888,surfaceAverageAltitude=140,surfaceMaxAltitude=200,surfaceMinAltitude=10,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[22]={name="Alioth Moon 4",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=22,GM=2165833514,gravity=0.2427018259886451,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-1692694,y=729681,z=-411464},radius=30330,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=11559916544,surfaceAverageAltitude=-15,surfaceMaxAltitude=-5,surfaceMinAltitude=-50,systemZone=nil,territories=14522,type="",waterLevel=nil,planetarySystemId=0},[5]={name="Feli",description="Feli is easily identified by its massive and deep crater. Outside of the crater, the arkship geological survey reports a fairly bland and uniform planet, it also cannot explain the existence of the crater. Feli is particular for having an extremely small atmosphere, allowing life to develop in the deeper areas of its crater but limiting it drastically on the actual surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.5488,atmosphericEngineMaxAltitude=66725,biosphere="Barren",classification="Mesoplanet",bodyId=5,GM=16951680000,gravity=0.4801223280476017,fullAtmosphericDensityMaxAltitude=30,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=78500,numSatellites=1,positionFromSun=5,center={x=-43534464,y=22565536,z=-48934464},radius=41800,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=42800,surfaceArea=21956466688,surfaceAverageAltitude=18300,surfaceMaxAltitude=18500,surfaceMinAltitude=46,systemZone="Low",territories=27002,type="Planet",waterLevel=nil,planetarySystemId=0},[50]={name="Feli Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=50,GM=499917600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-43902841.78,y=22261034.7,z=-48862386},radius=14000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=800,surfaceMaxAltitude=900,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[120]={name="Ion",description="Ion is nothing more than an oversized ice cube frozen through and through. It is a largely inhospitable planet due to its extremely low temperatures. The arkship geological survey reports extremely rough mountainous terrain with little habitable land.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9522,atmosphericEngineMaxAltitude=10480,biosphere="Ice",classification="Hypopsychroplanet",bodyId=120,GM=7135606629,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=-30,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=17700,numSatellites=2,positionFromSun=12,center={x=2865536.7,y=-99034464,z=-934462.02},radius=44950,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=6410,surfaceArea=25390383104,surfaceAverageAltitude=500,surfaceMaxAltitude=1300,surfaceMinAltitude=250,systemZone="Average",territories=32672,type="Planet",waterLevel=nil,planetarySystemId=0},[121]={name="Ion Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=121,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2472916.8,y=-99133747,z=-1133582.8},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=100,surfaceMaxAltitude=200,surfaceMinAltitude=3,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[122]={name="Ion Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=122,GM=176580000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=2995424.5,y=-99275010,z=-1378480.7},radius=15000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=-1900,surfaceMaxAltitude=-1400,surfaceMinAltitude=-2100,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[9]={name="Jago",description="Jago is a water planet. The large majority of the planet&apos;s surface is covered by large oceans dotted by small areas of landmass across the planet. The arkship geological survey reports deep seas across the majority of the planet with sub 15 percent coverage of solid ground.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9835,atmosphericEngineMaxAltitude=9695,biosphere="Water",classification="Mesoplanet",bodyId=9,GM=18606274330,gravity=0.5041284298678057,fullAtmosphericDensityMaxAltitude=-90,habitability="Very High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10900,numSatellites=0,positionFromSun=9,center={x=-94134462,y=12765534,z=-3634464},radius=61590,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=5900,surfaceArea=47668367360,surfaceAverageAltitude=0,surfaceMaxAltitude=1200,surfaceMinAltitude=-500,systemZone="Very High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[100]={name="Lacobus",description="Lacobus is an ice planet that also features large bodies of water. The arkship geological survey reports deep oceans alongside a frozen and rough mountainous environment. Lacobus seems to feature regional geothermal activity allowing for the presence of water on the surface.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7571,atmosphericEngineMaxAltitude=11120,biosphere="Ice",classification="Psychroplanet",bodyId=100,GM=13975172474,gravity=0.45611622622739767,fullAtmosphericDensityMaxAltitude=-20,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=12510,numSatellites=3,positionFromSun=10,center={x=98865536,y=-13534464,z=-934461.99},radius=55650,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=6790,surfaceArea=38917074944,surfaceAverageAltitude=800,surfaceMaxAltitude=1660,surfaceMinAltitude=250,systemZone="Average",territories=50432,type="Planet",waterLevel=0,planetarySystemId=0},[102]={name="Lacobus Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=102,GM=444981600,gravity=0.14403669598391783,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99180968,y=-13783862,z=-926156.4},radius=18000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=4071504128,surfaceAverageAltitude=150,surfaceMaxAltitude=300,surfaceMinAltitude=10,systemZone=nil,territories=5072,type="",waterLevel=nil,planetarySystemId=0},[103]={name="Lacobus Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=103,GM=211503600,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=99250052,y=-13629215,z=-1059341.4},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=-1380,surfaceMaxAltitude=-1280,surfaceMinAltitude=-1880,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[101]={name="Lacobus Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=101,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=98905288.17,y=-13950921.1,z=-647589.53},radius=15000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=500,surfaceMaxAltitude=820,surfaceMinAltitude=3,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[1]={name="Madis",description="Madis is a barren wasteland of a rock; it sits closest to the sun and temperatures reach extreme highs during the day. The arkship geological survey reports long rocky valleys intermittently separated by small ravines.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8629,atmosphericEngineMaxAltitude=7165,biosphere="Barren",classification="hyperthermoplanet",bodyId=1,GM=6930729684,gravity=0.36009174603570127,fullAtmosphericDensityMaxAltitude=220,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8050,numSatellites=3,positionFromSun=1,center={x=17465536,y=22665536,z=-34464},radius=44300,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=4480,surfaceArea=24661377024,surfaceAverageAltitude=750,surfaceMaxAltitude=850,surfaceMinAltitude=670,systemZone="Low",territories=30722,type="Planet",waterLevel=nil,planetarySystemId=0},[10]={name="Madis Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=10,GM=78480000,gravity=0.08002039003323584,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17448118.224,y=22966846.286,z=143078.82},radius=10000,safeAreaEdgeAltitude=500000,size="XL",spaceEngineMinAltitude=0,surfaceArea=1256637056,surfaceAverageAltitude=210,surfaceMaxAltitude=420,surfaceMinAltitude=0,systemZone=nil,territories=1472,type="",waterLevel=nil,planetarySystemId=0},[11]={name="Madis Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=11,GM=237402000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17194626,y=22243633.88,z=-214962.81},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=-700,surfaceMaxAltitude=300,surfaceMinAltitude=-2900,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[12]={name="Madis Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=12,GM=265046609,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=17520614,y=22184730,z=-309989.99},radius=15000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[26]={name="Sanctuary",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9666,atmosphericEngineMaxAltitude=6935,biosphere="",classification="",bodyId=26,GM=68234043600,gravity=1.0000000427743831,fullAtmosphericDensityMaxAltitude=-30,habitability="",hasAtmosphere=true,isSanctuary=true,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=0,center={x=-1404835,y=562655,z=-285074},radius=83400,safeAreaEdgeAltitude=0,size="L",spaceEngineMinAltitude=4230,surfaceArea=87406149632,surfaceAverageAltitude=80,surfaceMaxAltitude=500,surfaceMinAltitude=-60,systemZone=nil,territories=111632,type="",waterLevel=0,planetarySystemId=0},[6]={name="Sicari",description="Sicari is a typical desert planet; it has survived for millenniums and will continue to endure. While not the most habitable of environments it remains a relatively untouched and livable planet of the Alioth sector. The arkship geological survey reports large flatlands alongside steep plateaus.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.897,atmosphericEngineMaxAltitude=7725,biosphere="Desert",classification="Mesoplanet",bodyId=6,GM=10502547741,gravity=0.4081039739797361,fullAtmosphericDensityMaxAltitude=-625,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=8770,numSatellites=0,positionFromSun=6,center={x=52765536,y=27165538,z=52065535},radius=51100,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=4480,surfaceArea=32813432832,surfaceAverageAltitude=130,surfaceMaxAltitude=220,surfaceMinAltitude=50,systemZone="Average",territories=41072,type="Planet",waterLevel=nil,planetarySystemId=0},[7]={name="Sinnen",description="Sinnen is a an empty and rocky hell. With no atmosphere to speak of it is one of the least hospitable planets in the sector. The arkship geological survey reports mostly flatlands alongside deep ravines which look to have once been riverbeds. This planet simply looks to have dried up and died, likely from solar winds.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9226,atmosphericEngineMaxAltitude=10335,biosphere="Desert",classification="Mesoplanet",bodyId=7,GM=13033380591,gravity=0.4401121421448438,fullAtmosphericDensityMaxAltitude=-120,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=11620,numSatellites=1,positionFromSun=7,center={x=58665538,y=29665535,z=58165535},radius=54950,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=6270,surfaceArea=37944188928,surfaceAverageAltitude=317,surfaceMaxAltitude=360,surfaceMinAltitude=23,systemZone="Average",territories=48002,type="Planet",waterLevel=nil,planetarySystemId=0},[70]={name="Sinnen Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=70,GM=396912600,gravity=0.1360346539426409,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=58969616,y=29797945,z=57969449},radius=17000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=3631681280,surfaceAverageAltitude=-2050,surfaceMaxAltitude=-1950,surfaceMinAltitude=-2150,systemZone=nil,territories=4322,type="",waterLevel=nil,planetarySystemId=0},[110]={name="Symeon",description="Symeon is an ice planet mysteriously split at the equator by a band of solid desert. Exactly how this phenomenon is possible is unclear but some sort of weather anomaly may be responsible. The arkship geological survey reports a fairly diverse mix of flat-lands alongside mountainous formations.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.9559,atmosphericEngineMaxAltitude=6920,biosphere="Ice, Desert",classification="Hybrid",bodyId=110,GM=9204742375,gravity=0.3920998898971822,fullAtmosphericDensityMaxAltitude=-30,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=7800,numSatellites=0,positionFromSun=11,center={x=14165536,y=-85634465,z=-934464.3},radius=49050,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=4230,surfaceArea=30233462784,surfaceAverageAltitude=39,surfaceMaxAltitude=450,surfaceMinAltitude=126,systemZone="High",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[4]={name="Talemai",description="Talemai is a planet in the final stages of an Ice Age. It seems likely that the planet was thrown into tumult by a cataclysmic volcanic event which resulted in its current state. The arkship geological survey reports large mountainous regions across the entire planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.8776,atmosphericEngineMaxAltitude=9685,biosphere="Barren",classification="Psychroplanet",bodyId=4,GM=14893847582,gravity=0.4641182439650478,fullAtmosphericDensityMaxAltitude=-78,habitability="Average",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=10890,numSatellites=3,positionFromSun=4,center={x=-13234464,y=55765536,z=465536},radius=57500,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=5890,surfaceArea=41547563008,surfaceAverageAltitude=580,surfaceMaxAltitude=610,surfaceMinAltitude=520,systemZone="Average",territories=52922,type="Planet",waterLevel=nil,planetarySystemId=0},[42]={name="Talemai Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=42,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13058408,y=55781856,z=740177.76},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=720,surfaceMaxAltitude=850,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0},[40]={name="Talemai Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=40,GM=141264000,gravity=0.09602446196397631,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-13503090,y=55594325,z=769838.64},radius=12000,safeAreaEdgeAltitude=500000,size="S",spaceEngineMinAltitude=0,surfaceArea=1809557376,surfaceAverageAltitude=250,surfaceMaxAltitude=450,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[41]={name="Talemai Moon 3",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=41,GM=106830900,gravity=0.08802242599860607,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=-12800515,y=55700259,z=325207.84},radius=11000,safeAreaEdgeAltitude=500000,size="XS",spaceEngineMinAltitude=0,surfaceArea=1520530944,surfaceAverageAltitude=190,surfaceMaxAltitude=400,surfaceMinAltitude=0,systemZone=nil,territories=1922,type="",waterLevel=nil,planetarySystemId=0},[8]={name="Teoma",description="[REDACTED] The arkship geological survey [REDACTED]. This planet should not be here.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.7834,atmosphericEngineMaxAltitude=5580,biosphere="Forest",classification="Mesoplanet",bodyId=8,GM=18477723600,gravity=0.48812434578525177,fullAtmosphericDensityMaxAltitude=15,habitability="High",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=6280,numSatellites=0,positionFromSun=8,center={x=80865538,y=54665536,z=-934463.94},radius=62000,safeAreaEdgeAltitude=500000,size="L",spaceEngineMinAltitude=3420,surfaceArea=48305131520,surfaceAverageAltitude=700,surfaceMaxAltitude=1100,surfaceMinAltitude=-200,systemZone="High",territories=60752,type="Planet",waterLevel=0,planetarySystemId=0},[3]={name="Thades",description="Thades is a scorched desert planet. Perhaps it was once teaming with life but now all that remains is ash and dust. The arkship geological survey reports a rocky mountainous planet bisected by a massive unnatural ravine; something happened to this planet.",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0.03552,atmosphericEngineMaxAltitude=32180,biosphere="Desert",classification="Thermoplanet",bodyId=3,GM=11776905000,gravity=0.49612641213015557,fullAtmosphericDensityMaxAltitude=150,habitability="Low",hasAtmosphere=true,isSanctuary=false,noAtmosphericDensityAltitude=32800,numSatellites=2,positionFromSun=3,center={x=29165536,y=10865536,z=65536},radius=49000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=21400,surfaceArea=30171856896,surfaceAverageAltitude=13640,surfaceMaxAltitude=13690,surfaceMinAltitude=370,systemZone="Low",territories=38882,type="Planet",waterLevel=nil,planetarySystemId=0},[30]={name="Thades Moon 1",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=30,GM=211564034,gravity=0.11202853997062348,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29214402,y=10907080.695,z=433858.2},radius=14000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2463008768,surfaceAverageAltitude=60,surfaceMaxAltitude=300,surfaceMinAltitude=0,systemZone=nil,territories=3002,type="",waterLevel=nil,planetarySystemId=0},[31]={name="Thades Moon 2",description="",antiGravMinAltitude=1000,atmosphericDensityAboveSurface=0,atmosphericEngineMaxAltitude=0,biosphere="",classification="",bodyId=31,GM=264870000,gravity=0.12003058201190042,fullAtmosphericDensityMaxAltitude=0,habitability="",hasAtmosphere=false,isSanctuary=false,noAtmosphericDensityAltitude=0,numSatellites=0,positionFromSun=0,center={x=29404193,y=10432768,z=19554.131},radius=15000,safeAreaEdgeAltitude=500000,size="M",spaceEngineMinAltitude=0,surfaceArea=2827433472,surfaceAverageAltitude=70,surfaceMaxAltitude=350,surfaceMinAltitude=0,systemZone=nil,territories=3632,type="",waterLevel=nil,planetarySystemId=0}}}end;function SetupAtlas()aS=Atlas()for be,bf in pairs(aS[0])do if av==nil or bf.center.x<av then av=bf.center.x end;if aw==nil or bf.center.x>aw then aw=bf.center.x end;if ax==nil or bf.center.y<ax then ax=bf.center.y end;if ay==nil or bf.center.y>ay then ay=bf.center.y end end;aT=""local fl=1.1*(aw-av)/1920;local fm=1.4*(ay-ax)/1080;for be,bf in pairs(aS[0])do local bz=960+bf.center.x/fl;local bA=540+bf.center.y/fm;aT=aT..'<circle cx="'..bz..'" cy="'..bA..'" r="'..bf.radius/fl*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bf.name,"Moon")and not string.match(bf.name,"Sanctuary")and not string.match(bf.name,"Space")then aT=aT.."<text x='"..bz.."' y='"..bA+bf.radius/fl*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bf.name.."</text>"end end;local bI=vec3(core.getConstructWorldPos())local bz=960+bI.x/fl;local bA=540+bI.y/fm;aT=aT..'<circle cx="'..bz..'" cy="'..bA..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bz.."' y='"..bA-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fl;aV=fm;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bI=vec3(core.getConstructWorldPos())local bz=960+bI.x/fl;local bA=540+bI.y/fm;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bz-80)/19.20,(bA-80)/10.80,aT)end end;function PlanetRef()local function fn(fo)return type(fo)=='number'end;local function fp(fo)return type(tonumber(fo))=='number'end;local function fq(fr)return type(fr)=='table'end;local function fs(ft)return type(ft)=='string'end;local function fu(bf)return fq(bf)and fn(bf.x and bf.y and bf.z)end;local function fv(fw)return fq(fw)and fn(fw.latitude and fw.longitude and fw.altitude and fw.bodyId and fw.systemId)end;local fx=math.pi/180;local fy=180/math.pi;local fz=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bJ='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fA=utils.clamp;local function fB(fC,fD)if fC==0 then return math.abs(fD)<1e-09 end;if fD==0 then return math.abs(fC)<1e-09 end;return math.abs(fC-fD)<math.max(math.abs(fC),math.abs(fD))*fz end;local function fE(fo)local bg=string.gsub(string.reverse(e('%.4f',fo)),'^0*%.?','')return bg==''and'0'or string.reverse(bg)end;local function fF(fG)if fu(fG)then return e('{x=%.3f,y=%.3f,z=%.3f}',fG.x,fG.y,fG.z)end;if fq(fG)and not getmetatable(fG)then local fH={}local fI=next(fG)if type(fI)=='nil'or fI==1 then fH=fG else for be,bf in pairs(fG)do local dv=fF(bf)if type(be)=='number'then table.insert(fH,e('[%s]=%s',be,dv))else table.insert(fH,e('%s=%s',be,dv))end end end;return e('{%s}',table.concat(fH,','))end;if fs(fG)then return e("'%s'",fG:gsub("'",[[\']]))end;return tostring(fG)end;local fJ={}fJ.__index=fJ;fJ.__tostring=function(fG,fK)local fL={}for be in pairs(fG)do table.insert(fL,be)end;table.sort(fL)local fH={}for _,be in ipairs(fL)do local dv=fF(fG[be])if type(be)=='number'then table.insert(fH,e('[%s]=%s',be,dv))else table.insert(fH,e('%s=%s',be,dv))end end;if fK then return e('%s%s',fK,table.concat(fH,',\n'..fK))end;return e('{%s}',table.concat(fH,','))end;fJ.__eq=function(fM,fN)return fM.planetarySystemId==fN.planetarySystemId and fM.bodyId==fN.bodyId and fB(fM.radius,fN.radius)and fB(fM.center.x,fN.center.x)and fB(fM.center.y,fN.center.y)and fB(fM.center.z,fN.center.z)and fB(fM.GM,fN.GM)end;local function fO(bK,bL,fP,fQ,fR)assert(fp(bK),'Argument 1 (planetarySystemId) must be a number:'..type(bK))assert(fp(bL),'Argument 2 (bodyId) must be a number:'..type(bL))assert(fp(fP),'Argument 3 (radius) must be a number:'..type(fP))assert(fq(fQ),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fQ))assert(fp(fR),'Argument 5 (GM) must be a number:'..type(fR))return setmetatable({planetarySystemId=tonumber(bK),bodyId=tonumber(bL),radius=tonumber(fP),center=vec3(fQ),GM=tonumber(fR)},fJ)end;local fS={}fS.__index=fS;fS.__tostring=function(fT)return e('::pos{%d,%d,%s,%s,%s}',fT.systemId,fT.bodyId,fE(fT.latitude*fy),fE(fT.longitude*fy),fE(fT.altitude))end;fS.__eq=function(fM,fN)return fM.bodyId==fN.bodyId and fM.systemId==fN.systemId and fB(fM.latitude,fN.latitude)and fB(fM.altitude,fN.altitude)and(fB(fM.longitude,fN.longitude)or fB(fM.latitude,math.pi/2)or fB(fM.latitude,-math.pi/2))end;local function fU(fV,bL,bM,bN,bO)local bK=fV;if fs(fV)and not bN and not bO and not bL and not bM then bK,bL,bM,bN,bO=string.match(fV,bJ)assert(bK,'Argument 1 (position string) is malformed.')else assert(fp(bK),'Argument 1 (systemId) must be a number:'..type(bK))assert(fp(bL),'Argument 2 (bodyId) must be a number:'..type(bL))assert(fp(bM),'Argument 3 (latitude) must be in degrees:'..type(bM))assert(fp(bN),'Argument 4 (longitude) must be in degrees:'..type(bN))assert(fp(bO),'Argument 5 (altitude) must be in meters:'..type(bO))end;bK=tonumber(bK)bL=tonumber(bL)bM=tonumber(bM)bN=tonumber(bN)bO=tonumber(bO)if bL==0 then return setmetatable({latitude=bM,longitude=bN,altitude=bO,bodyId=bL,systemId=bK},fS)end;return setmetatable({latitude=fx*fA(bM,-90,90),longitude=fx*(bN%360),altitude=bO,bodyId=bL,systemId=bK},fS)end;local fW={}fW.__index=fW;fW.__tostring=function(fG,fK)local fX=fK and fK..'  'local fY={}local fL={}for be in pairs(fG)do table.insert(fL,be)end;table.sort(fL)for _,fZ in ipairs(fL)do bdy=fG[fZ]local f_=fJ.__tostring(bdy,fX)if fK then table.insert(fY,e('[%s]={\n%s\n%s}',fZ,f_,fK))else table.insert(fY,e('  [%s]=%s',fZ,f_))end end;if fK then return e('\n%s%s%s',fK,table.concat(fY,',\n'..fK),fK)end;return e('{\n%s\n}',table.concat(fY,',\n'))end;local function g0(g1)local aS={}local pid;for _,bf in pairs(g1)do local bV=bf.planetarySystemId;if type(bV)~='number'then error('Invalid planetary system ID: '..tostring(bV))elseif pid and bV~=pid then error('Mismatch planetary system IDs: '..bV..' and '..pid)end;local g2=bf.bodyId;if type(g2)~='number'then error('Invalid body ID: '..tostring(g2))elseif aS[g2]then error('Duplicate body ID: '..tostring(g2))end;setmetatable(bf.center,getmetatable(vec3.unit_x))aS[g2]=setmetatable(bf,fJ)pid=bV end;return setmetatable(aS,fW)end;aX={}local function g3(g1)return setmetatable({galaxyAtlas=g1 or{}},aX)end;aX.__index=function(fr,i)if type(i)=='number'then local system=fr.galaxyAtlas[i]return g0(system)end;return rawget(aX,i)end;aX.__pairs=function(fG)return function(fr,be)local g4,nv=next(fr,be)return g4,nv and g0(nv)end,fG.galaxyAtlas,nil end;aX.__tostring=function(fG)local g5={}for _,g6 in pairs(fG or{})do local g7=g6:getPlanetarySystemId()local g8=fW.__tostring(g6,'    ')table.insert(g5,e('  [%s]={%s\n  }',g7,g8))end;return e('{\n%s\n}\n',table.concat(g5,',\n'))end;aX.BodyParameters=fO;aX.MapPosition=fU;aX.PlanetarySystem=g0;function aX.createBodyParameters(g9,bL,ga,gb,gc,gd,ge)assert(fp(g9),'Argument 1 (planetarySystemId) must be a number:'..type(g9))assert(fp(bL),'Argument 2 (bodyId) must be a number:'..type(bL))assert(fp(ga),'Argument 3 (surfaceArea) must be a number:'..type(ga))assert(fq(gb),'Argument 4 (aPosition) must be an array or vec3:'..type(gb))assert(fq(gc),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(gc))assert(fp(gd),'Argument 6 (altitude) must be in meters:'..type(gd))assert(fp(ge),'Argument 7 (gravityAtPosition) must be number:'..type(ge))local fP=math.sqrt(ga/4/math.pi)local a3=fP+gd;local gf=vec3(gb)+a3*vec3(gc)local fR=ge*a3*a3;return fO(g9,bL,fP,gf,fR)end;aX.isMapPosition=fv;function aX:getPlanetarySystem(fV)if i==nil then i=0 end;if nv==nil then nv=0 end;local g9=fV;if fv(fV)then g9=fV.systemId end;if type(g9)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fW then system=g0(system)end;return system end end end;function fW:castIntersections(gg,eO,gh,gi)local gh=gh or function(gj)return 1.05*gj.radius end;local gk={}if gi then for _,i in ipairs(gi)do gk[i]=self[i]end else gi={}for be,gj in pairs(self)do table.insert(gi,be)gk[be]=gj end end;local function gl(gm,gn)local go=gk[gm].center-gg;local gp=gk[gn].center-gg;return go:len()<gp:len()end;table.sort(gi,gl)local gq=eO:normalize()for i,bV in ipairs(gi)do local gj=gk[bV]local gr=gj.center-gg;local fP=gh(gj)local gs=gr:dot(gq)local gt=gs^2-(gr:len2()-fP^2)if gt>=0 then local gu=math.sqrt(gt)local gv=gs+gu;local gw=gs-gu;if gw>0 then return gj,gv,gw elseif gv>0 then return gj,gv,nil end end end;return nil,nil,nil end;function fW:closestBody(gx)assert(type(gx)=='table','Invalid coordinates.')local gy,gj;local gz=vec3(gx)for _,gA in pairs(self)do local gB=(gA.center-gz):len2()if(not gj or gB<gy)and gA.name~="Space"then gj=gA;gy=gB end end;return gj end;function fW:convertToBodyIdAndWorldCoordinates(fV)local gC=fV;if fs(fV)then gC=fU(fV)end;if gC.bodyId==0 then return 0,vec3(gC.latitude,gC.longitude,gC.altitude)end;local gA=self:getBodyParameters(gC)if gA then return gC.bodyId,gA:convertToWorldCoordinates(gC)end end;function fW:getBodyParameters(fV)local bL=fV;if fv(fV)then bL=fV.bodyId end;assert(fp(bL),'Argument 1 (bodyId) must be a number:'..type(bL))return self[bL]end;function fW:getPlanetarySystemId()local _,bf=next(self)return bf and bf.planetarySystemId end;function fJ:convertToMapPosition(fQ)assert(fq(fQ),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fQ))local gD=vec3(fQ)if self.bodyId==0 then return setmetatable({latitude=gD.x,longitude=gD.y,altitude=gD.z,bodyId=0,systemId=self.planetarySystemId},fS)end;local gE=gD-self.center;local a3=gE:len()local bO=a3-self.radius;local bM=0;local bN=0;if not fB(a3,0)then local gF=math.atan(gE.y,gE.x)bN=gF>=0 and gF or 2*math.pi+gF;bM=math.pi/2-math.acos(gE.z/a3)end;return setmetatable({latitude=bM,longitude=bN,altitude=bO,bodyId=self.bodyId,systemId=self.planetarySystemId},fS)end;function fJ:convertToWorldCoordinates(fV)local gC=fs(fV)and fU(fV)or fV;if gC.bodyId==0 then return vec3(gC.latitude,gC.longitude,gC.altitude)end;assert(fv(gC),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gC.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gC.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bP=math.cos(gC.latitude)return self.center+(self.radius+gC.altitude)*vec3(bP*math.cos(gC.longitude),bP*math.sin(gC.longitude),math.sin(gC.latitude))end;function fJ:getAltitude(fQ)return(vec3(fQ)-self.center):len()-self.radius end;function fJ:getDistance(fQ)return(vec3(fQ)-self.center):len()end;function fJ:getGravity(fQ)local gG=self.center-vec3(fQ)local gH=gG:len2()return self.GM/gH*gG/math.sqrt(gH)end;return setmetatable(aX,{__call=function(_,...)return g3(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fs(ft)return type(ft)=='string'end;local function fq(fr)return type(fr)=='table'end;local function fB(fC,fD)if fC==0 then return math.abs(fD)<1e-09 end;if fD==0 then return math.abs(fC)<1e-09 end;return math.abs(fC-fD)<math.max(math.abs(fC),math.abs(fD))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bO)assert(self.body)local a3=bO+self.body.radius;if not fB(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fV,b5)assert(self.body)assert(fq(fV)or fs(fV))assert(fq(b5))local bI=(fs(fV)or PlanetRef.isMapPosition(fV))and self.body:convertToWorldCoordinates(fV)or vec3(fV)local bf=vec3(b5)local gI=bI-self.body.center;local gp=bf:len2()local gJ=gI:len()local gK=self.body.GM;local gL=((gp-gK/gJ)*gI-gI:dot(bf)*bf)/gK;local fC=gK/(2*gK/gJ-gp)local gM=gL:len()local gq=gL:normalize()local gN=fC*(1-gM)local gO=fC*(1+gM)local gP=gN*gq+self.body.center;local gQ=gM<=1 and-gO*gq+self.body.center or nil;local gR=math.sqrt(fC*gK*(1-gM*gM))local gS=gQ and 2*math.pi*math.sqrt(fC^3/gK)local gT=math.acos(gL:dot(gI)/(gM*gJ))if gI:dot(bf)<0 then gT=-(gT-2*math.pi)end;local gU=math.acos((math.cos(gT)+gM)/(1+gM*math.cos(gT)))local gV=gU;if gV<0 then gV=gV+2*math.pi end;local gW=gV-gM*math.sin(gV)local gX=0;local gY=0;local gZ=0;if gS~=nil then gX=gW/(2*math.pi/gS)gY=gS-gX;gZ=gY+gS/2;if gT-math.pi>0 then gY=gX;gZ=gY+gS/2 end;if gZ>gS then gZ=gZ-gS end end;return{periapsis={position=gP,speed=gR/gN,circularOrbitSpeed=math.sqrt(gK/gN),altitude=gN-self.body.radius},apoapsis=gQ and{position=gQ,speed=gR/gO,circularOrbitSpeed=math.sqrt(gK/gO),altitude=gO-self.body.radius},currentVelocity=bf,currentPosition=bI,eccentricity=gM,period=gS,eccentricAnomaly=gU,meanAnomaly=gW,timeToPeriapsis=gY,timeToApoapsis=gZ}end;local function g_(h0)local gA=PlanetRef.BodyParameters(h0.planetarySystemId,h0.bodyId,h0.radius,h0.center,h0.GM)return setmetatable({body=gA},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return g_(...)end})end;function Kinematics()local aZ={}local h1=30000000/3600;local h2=h1*h1;local h3=100;local function h4(bf)return 1/math.sqrt(1-bf*bf/h2)end;function aZ.computeAccelerationTime(h5,h6,h7)local h8=h1*math.asin(h5/h1)return(h1*math.asin(h7/h1)-h8)/h6 end;function aZ.computeDistanceAndTime(h5,h7,h9,ha,hb,hc)hb=hb or 0;hc=hc or 0;local hd=h5<=h7;local he=ha*(hd and 1 or-1)/h9;local hf=-hc/h9;local hg=he+hf;if hd and hg<=0 or not hd and hg>=0 then return-1,-1 end;local hh,hi=0,0;if he~=0 and hb>0 then local h8=math.asin(h5/h1)local hj=math.pi*(he/2+hf)local hk=he*hb;local hl=h1*math.pi;local bf=function(fr)local ck=(hj*fr-hk*math.sin(math.pi*fr/2/hb)+hl*h8)/hl;local hm=math.tan(ck)return h1*hm/math.sqrt(hm*hm+1)end;local hn=hd and function(ft)return ft>=h7 end or function(ft)return ft<=h7 end;hi=2*hb;if hn(bf(hi))then local ho=0;while math.abs(hi-ho)>0.5 do local fr=(hi+ho)/2;if hn(bf(fr))then hi=fr else ho=fr end end end;local hp=h5;local hq=hi/h3;for hr=1,h3 do local bt=bf(hr*hq)hh=hh+(bt+hp)*hq/2;hp=bt end;if hi<2*hb then return hh,hi end;h5=hp end;local h8=h1*math.asin(h5/h1)local bh=(h1*math.asin(h7/h1)-h8)/hg;local hs=h2*math.cos(h8/h1)/hg;local a3=hs-h2*math.cos((hg*bh+h8)/h1)/hg;return a3+hh,bh+hi end;function aZ.computeTravelTime(h5,h6,a3)if a3==0 then return 0 end;if h6>0 then local h8=h1*math.asin(h5/h1)local hs=h2*math.cos(h8/h1)/h6;return(h1*math.acos(h6*(hs-a3)/h2)-h8)/h6 end;assert(h5>0,'Acceleration and initial speed are both zero.')return a3/h5 end;function aZ.lorentz(bf)return h4(bf)end;return aZ end;function script.onStart()VERSION_NUMBER=4.94;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})SetupChecks()LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()b0=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function SaveDataBank(ht)if dbHud_1 then if not Y then for be,bf in pairs(b)do dbHud_1.setStringValue(bf,g(_G[bf]))if ht and dbHud_2 then dbHud_2.setStringValue(bf,g(_G[bf]))end end;for be,bf in pairs(a)do dbHud_1.setStringValue(bf,g(_G[bf]))if ht and dbHud_2 then dbHud_2.setStringValue(bf,g(_G[bf]))end end;c("Saved Variables to Datacore")if ht and dbHud_2 then K="Databank copied.  Remove copy when ready."end end end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bT=j()if door and(bT>0 or bT==0 and ae<10000)then for _,bf in pairs(door)do bf.toggle()end end;if switch then for _,bf in pairs(switch)do bf.toggle()end end;if forcefield and(bT>0 or bT==0 and ae<10000)then for _,bf in pairs(forcefield)do bf.toggle()end end;SaveDataBank()if button then button.activate()end end;function script.onTick(hu)if hu=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hv=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hv then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hu=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bZ={}local d1=GetFlightStyle()DrawOdometer(bZ,W,TotalDistanceTravelled,d1,X)if ShouldCheckDamage then CheckDamage(bZ)end;a5=table.concat(bZ,"")collectgarbage("collect")elseif hu=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bg=json.decode(dbHud_1.getStringValue("SavedLocations"))if bg~=nil then _G["SavedLocations"]=bg;local bX=-1;local bS;for be,bf in pairs(SavedLocations)do if bf.name and bf.name=="SatNav Location"then bX=be;break end end;if bX~=-1 then bS=SavedLocations[bX]bX=-1;for be,bf in pairs(aS[0])do if bf.name and bf.name=="SatNav Location"then bX=be;break end end;if bX>-1 then aS[0][bX]=bS end;UpdateAtlasLocationsList()K=bS.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hu=="msgTick"then local bZ={}DisplayMessage(bZ,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hu=="animateTick"then b2=true;b1=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hu=="hudTick"then local bZ={}HUDPrologue(bZ)if showHud then UpdateHud(bZ)else DisplayOrbitScreen(bZ)DrawWarnings(bZ)end;HUDEpilogue(bZ)bZ[#bZ+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bZ,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bZ)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(bZ)if screen_1.getMouseState()==1 then CheckButtons()end;bZ[#bZ+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(bZ)if not b1 and not b2 then local hw=table.concat(bZ,"")bZ={}bZ[#bZ+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bZ[#bZ+1]=aT;bZ[#bZ+1]=hw;bZ[#bZ+1]="</body>"b1=true;bZ[#bZ+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bZ,"")system.setScreen(content)elseif b2 then local hw=table.concat(bZ,"")bZ={}bZ[#bZ+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bZ[#bZ+1]=aT;bZ[#bZ+1]=hw;bZ[#bZ+1]="</body>"end;if not b1 then bZ[#bZ+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(bZ)end else SetButtonContains()DrawButtons(bZ)end;bZ[#bZ+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bZ[#bZ+1]=[[</svg></body>]]content=table.concat(bZ,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hu=="apTick"then b4=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;local bh=system.getTime()local hx=bh-LastApTickTime;LastApTickTime=bh;local hy=core.getVelocity()local hz=getRelativeYaw(hy)local hA=getRelativePitch(hy)bc=ad and hz<-StallAngle or hz>StallAngle or hA<-StallAngle or hA>StallAngle;b9=system.getMouseDeltaX()ba=system.getMouseDeltaY()if InvertMouse and not J then ba=-ba end;D=0;H=0;C=0;b5=vec3(core.getWorldVelocity())b6=vec3(b5):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=b0(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b5)aa=hoverDetectGround()local c1=vec3(core.getConstructWorldOrientationForward())local c2=vec3(core.getConstructWorldOrientationRight())local c3=vec3(core.getWorldVertical())local c4=getPitch(c3,c1,c2)local bq=planet:getGravity(core.getConstructWorldPos()):len()*n()TargetRoll=0;local d3=getRoll(c3,c1,c2)local d4=math.abs(d3/180*math.pi)local d5=math.cos(d4)local d6=math.sin(d4)local hB=getPitch(c3,c1,c2*d5+vec3(core.getConstructWorldOrientationUp())*d6)a_=core.getMaxKinematicsParametersAlongAxis("ground",core.getConstructOrientationUp())[1]if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b1 then a0=a0+b9;a1=a1+ba end else a0=0;a1=0 end else a0=a0+b9;a1=a1+ba;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(ba,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b9,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hC=b6>8334;if b6>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hC then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hC and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hC;if ad and j()>0.09 then if not ai then if b6>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b6<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b6>w then local hD=AlignToWorldVector(vec3(b5),0.01)if a7 then b3=true;if b6<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b3=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b6>w then AlignToWorldVector(-vec3(b5))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b6*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b6)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b6)end;P=P;Q=Q;local hE=AutopilotTargetCoords;if orbit.apoapsis==nil and b6>300 and AutopilotAccelerating then local hF=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b5):normalize()local hG=getMagnitudeInDirection(hF,AutopilotShipUp)local hH=getMagnitudeInDirection(hF,AutopilotShipRight)local hI=-hH*AutopilotDistance*b6*TrajectoryAlignmentStrength;local hJ=-hG*AutopilotDistance*b6*TrajectoryAlignmentStrength;hE=AutopilotTargetCoords+-hI*vec3(AutopilotShipRight)+-hJ*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(hE)-vec3(core.getConstructWorldPos())):len()local hK=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hK)..'", "unit":""}')local hL=true;local hM=(V.center-(vec3(core.getConstructWorldPos())+vec3(b5):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hM)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hL=AlignToWorldVector((hE-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hL=AlignToWorldVector(-vec3(b5):normalize())end;if AutopilotAccelerating then if not hL or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b5)<0 and b6>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hM-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b6<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hL then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hL then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b3=true;local hN=0;local bI=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hO=bI-vec3(core.getConstructWorldPos())local hP=vec3(hO):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hQ=vec3(hO):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hP*hP+hQ*hQ)AlignToWorldVector(hO:normalize())local hR=40;local hS=a3<hR;local hT=100;local hU=utils.clamp((a3-hR)/2,10,hT)C=0;local hL=math.abs(D)<0.1;if hL and b6<hU and not hS then BrakeIsOn=false;hN=-20 else BrakeIsOn=true;hN=0 end;local hV=1.0;if math.abs(hN-c4)>hV then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hN-c4)local hW=pitchPID:get()C=hW end end;local dz=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local de=unit.getClosestPlanetInfluence()>0;local hX=HoldAltitude-ae;local hY=500+b6;local hN=(utils.smoothstep(hX,-hY,hY)-0.5)*2*MaxPitch*utils.clamp(b6/100,0.1,1)if not AltitudeHold then hN=0 end;if LockPitch~=nil then if de then hN=LockPitch else LockPitch=nil end end;b3=true;if Reentry then local hZ=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hZ then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hZ)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hN=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hN=0;b3=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b3=autoRollPreference end end;local h_=C;if b6>w and not a8 and not VectorToTarget and not BrakeLanding then AlignToWorldVector(vec3(b5))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 and not AutoTakeoff then local cU=CustomTarget.position-vec3(core.getConstructWorldPos())local i0=vec3(core.getConstructWorldOrientationUp())local i1=cU:project_on_plane(c3):normalize()local i2=b5:normalize():project_on_plane(c3):normalize()local i3=math.deg(math.acos(i1:dot(i2)))*-utils.sign(i1:dot(i2:perpendicular()))*2;local i4=math.rad(math.abs(d3))if b6>100 then TargetRoll=utils.clamp(i3,-90,90)local i5=i3;i3=utils.clamp(hz-i3,hz-StallAngle*0.85,hz+StallAngle*0.85)*math.cos(i4)+utils.clamp(hN-hB,-StallAngle*0.85,StallAngle*0.85)*math.sin(math.rad(d3))hN=utils.clamp(hN*math.cos(i4),-StallAngle*0.85,StallAngle*0.85)+utils.clamp(math.abs(i5),-StallAngle*0.85,StallAngle*0.85)*math.sin(i4)end;local i6=i3;if not bc then if yawPID==nil then yawPID=pid.new(8*0.01,0,8*0.1)end;yawPID:inject(i6)local i7=utils.clamp(yawPID:get(),-1,1)D=D+i7 elseif aa>-1 then AlignToWorldVector(cU)else AlignToWorldVector(b5)end;local i8=planet:getAltitude(CustomTarget.position)local i9=math.sqrt(cU:len()^2-(ae-i8)^2)local ia=LastMaxBrakeInAtmo;if ia then ia=ia*utils.clamp(b6/100,0.1,1)*j()else ia=LastMaxBrake end;local dx=b5.x*dz.x+b5.y*dz.y+b5.z*dz.z;local ib=b5:len()-math.abs(dx)local ic=vec3(core.getWorldAirFrictionAcceleration())local id=math.sqrt(ic:len()-ic:project_on(dz):len())*n()if b6>100 then P,Q=aZ.computeDistanceAndTime(b6,100,n(),0,0,ia+id)local ie,ig=aZ.computeDistanceAndTime(100,0,n(),0,0,ia/2)P=P+ie else P,Q=aZ.computeDistanceAndTime(b6,0,n(),0,0,ia/2)end;StrongBrakes=true;if i9<=P+b6*hx/2 then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==axisCommandType.byTargetSpeed then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if AltitudeHold then ToggleAltitudeHold()end;BrakeLanding=true;VectorToTarget=false elseif not AutoTakeoff then BrakeIsOn=false end end;C=h_;local e_=-1;local hV=0.1;if BrakeLanding then hN=0;local dx=b5.x*dz.x+b5.y*dz.y+b5.z*dz.z;local ih=false;local ii=30;if a_~=nil and a_>0 then local id=0;local d9=utils.clamp(j(),0.4,2)local ia=LastMaxBrakeInAtmo*utils.clamp(b6/100,0.1,1)*d9;local ij=a_*d9+ia+id-bq;local ik=ia+id-bq;local il=ia/2+id-bq;local im=b6-math.sqrt(math.abs(il/2)*20/(0.5*n()))*utils.sign(il)if im<0 then im=0 end;local io;if b6>100 then local ip,_=aZ.computeDistanceAndTime(b6,100,n(),0,0,ia)local iq,_=aZ.computeDistanceAndTime(100,0,n(),0,0,math.sqrt(ia))io=ip+iq else io=aZ.computeDistanceAndTime(b6,0,n(),0,0,math.sqrt(ia))end;if io<20 then BrakeIsOn=false else local ir=0;if im>100 then local is,_=aZ.computeDistanceAndTime(im,100,n(),0,0,ij)local it,_=aZ.computeDistanceAndTime(100,0,n(),0,0,a_*d9+math.sqrt(ia)+id-bq)ir=is+it else ir,_=aZ.computeDistanceAndTime(im,0,n(),0,0,a_*d9+math.sqrt(ia)+id-bq)end;ir=(ir+15+b6*hx)*1.1;local iu=CustomTarget~=nil and planet:getAltitude(CustomTarget.position)>0;if iu then local i8=planet:getAltitude(CustomTarget.position)local iv=ae-i8-100;local cU=CustomTarget.position-vec3(core.getConstructWorldPos())local iw=math.sqrt(cU:len()^2-(ae-i8)^2)if iw>100 then iu=false elseif iv<=ir or ir==-1 then BrakeIsOn=true else BrakeIsOn=false end;ih=true end;if not iu and CalculateBrakeLandingSpeed then if ir>=ii then BrakeIsOn=true else BrakeIsOn=false end;ih=true end end;if bb then ih=false end end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)e_=aa;if e_>-1 then b3=autoRollPreference;if b6<1 or b5:normalize():dot(c3)<0 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;bb=false;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end elseif StrongBrakes and b5:normalize():dot(-dz)<0.999 then BrakeIsOn=true elseif dx<-brakeLandingRate and not ih then BrakeIsOn=true elseif not ih then BrakeIsOn=false end end;if AutoTakeoff or a8 then if hN<15 and ae/HoldAltitude>0.75 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b6<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;local ix=hoverDetectGround()>-1;local iy=c4;if VectorToTarget and not ix and b6>100 then local i4=math.rad(math.abs(d3))iy=c4*math.cos(i4)+hA*math.sin(i4)end;local iz=utils.clamp(hN-iy,-StallAngle*0.85,StallAngle*0.85)if math.abs(iz)>hV and(not bc and(math.abs(d3)<5 or VectorToTarget)or BrakeLanding or ix)then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(iz)local hW=pitchPID:get()C=C+hW end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local iA=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local iB=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local iC=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local iD=G;local iE=vec3(core.getWorldVertical())local iF=vec3(core.getConstructWorldOrientationUp())local iG=vec3(core.getConstructWorldOrientationForward())local iH=vec3(core.getConstructWorldOrientationRight())local iI=vec3(core.getWorldVelocity())local iJ=vec3(core.getWorldVelocity()):normalize()local iK=getRoll(iE,iG,iH)local iL=math.abs(iK)local iM=utils.sign(iK)local j=j()local iN=vec3(core.getWorldAngularVelocity())local iO=iA*pitchSpeedFactor*iH+iB*rollSpeedFactor*iG+iC*yawSpeedFactor*iF;if iE:len()>0.01 and j>0.0 or ProgradeIsOn then local iP=1.0;if b3==true and math.abs(TargetRoll-iK)>iP and iB==0 then local iQ=TargetRoll;local iR=autoRollFactor;if rollPID==nil then rollPID=pid.new(iR*0.01,0,iR*0.1)end;rollPID:inject(iQ-iK)local iS=rollPID:get()iO=iO+iS*iG end end;if iE:len()>0.01 and j>0.0 then local iT=20.0;if turnAssist==true and iL>iT and iA==0 and iC==0 then local iU=turnAssistFactor*0.1;local iV=turnAssistFactor*0.025;local iW=(iL-iT)/(180-iT)*180;local iX=0;if iW<90 then iX=iW/90 elseif iW<180 then iX=(180-iW)/90 end;iX=iX*iX;local iY=-iM*iV*(1.0-iX)local iZ=iU*iX;iO=iO+iZ*iH+iY*iF end end;local i_=1;local j0=0;local j1=1;local j2=torqueFactor*(iO-iN)local j3=vec3(core.getWorldAirFrictionAngularAcceleration())j2=j2-j3;Nav:setEngineTorqueCommand('torque',j2,i_,'airfoil','','',j1)local j4=-iD*(brakeSpeedFactor*iI+brakeFlatFactor*iJ)Nav:setEngineForceCommand('brake',j4)local j5=''local j6=vec3()local j7=false;local j8='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then j8=j8 ..ExtraLongitudeTags end;local j9=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if j9==axisCommandType.byThrottle then local ja=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(j8,axisCommandId.longitudinal)Nav:setEngineForceCommand(j8,ja,i_)elseif j9==axisCommandType.byTargetSpeed then local ja=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)j5=j5 ..' , '..j8;j6=j6+ja;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then j7=true end end;local jb='thrust analog lateral 'if ExtraLateralTags~="none"then jb=jb..ExtraLateralTags end;local jc=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if jc==axisCommandType.byThrottle then local jd=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jb,axisCommandId.lateral)Nav:setEngineForceCommand(jb,jd,i_)elseif jc==axisCommandType.byTargetSpeed then local je=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)j5=j5 ..' , '..jb;j6=j6+je end;local jf='thrust analog vertical 'if ExtraVerticalTags~="none"then jf=jf..ExtraVerticalTags end;local jg=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if jg==axisCommandType.byThrottle then local jh=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(jf,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(jf,jh,i_,'airfoil','ground','',j1)else Nav:setEngineForceCommand(jf,vec3(),i_)Nav:setEngineForceCommand('airfoil vertical',jh,i_,'airfoil','','',j1)Nav:setEngineForceCommand('ground vertical',jh,i_,'ground','','',j1)end elseif jg==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),i_)end;local ji=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)j5=j5 ..' , '..jf;j6=j6+ji end;if j6:len()>constants.epsilon then if G~=0 or j7 or math.abs(iJ:dot(iG))<0.95 then j5=j5 ..', brake'end;Nav:setEngineForceCommand(j5,j6,j0,'','','',j1)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bt=vec3(core.getVelocity()):len()local jj=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local jk=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bt*3.6>jk*(1-jj)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bt*3.6<jk*(1-jj)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local jl=unit.getThrottle()local hU=jl/100;if j==0 then hU=hU*MaxGameVelocity;if bt>=hU*(1-jj)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bt<hU*(1-jj)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hU=hU*ReentrySpeed/3.6;if bt>=hU*(1-jj)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bt<hU*(1-jj)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bg=coroutine.resume(beginSetup)if bg then SetupComplete=true end else Nav:update()if not b1 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(jm)if jm=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b6>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;bb=true;b3=true;GearExtended=false else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end;if A and not BrakeLanding then Nav.control.extendLandingGears()end else if A then Nav.control.retractLandingGears()end;Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif jm=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif jm=="forward"then B=B-1 elseif jm=="backward"then B=B+1 elseif jm=="left"then E=E-1 elseif jm=="right"then E=E+1 elseif jm=="yawright"then F=F-1 elseif jm=="yawleft"then F=F+1 elseif jm=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif jm=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif jm=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif jm=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif jm=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif jm=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif jm=="option1"then IncrementAutopilotTargetIndex()v=false elseif jm=="option2"then DecrementAutopilotTargetIndex()v=false elseif jm=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif jm=="option4"then ToggleAutopilot()v=false elseif jm=="option5"then ToggleLockPitch()v=false elseif jm=="option6"then ToggleAltitudeHold()v=false elseif jm=="option7"then wipeSaveVariables()v=false elseif jm=="option8"then ToggleFollowMode()v=false elseif jm=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif jm=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b2=false;b1=false end elseif jm=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif jm=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif jm=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif jm=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif jm=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif jm=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif jm=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(jm)if jm=="forward"then B=0 elseif jm=="backward"then B=0 elseif jm=="left"then E=0 elseif jm=="right"then E=0 elseif jm=="yawright"then F=0 elseif jm=="yawleft"then F=0 elseif jm=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif jm=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif jm=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jm=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif jm=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jm=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif jm=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b2=false;b1=false end elseif jm=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif jm=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(jm)if jm=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif jm=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif jm=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif jm=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(jn)local i;local jo="/commands /setname /G /agg /addlocation /copydatabank"local jp,jq=nil,nil;local jr="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n".."/addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location\n".."/copydatabank - copies dbHud databank to a blank databank"i=string.find(jn," ")jp=jn;if i~=nil then jp=string.sub(jn,0,i-1)jq=string.sub(jn,i+1)elseif not string.find(jo,jp)then for fi in string.gmatch(jr,"([^\n]+)")do c(fi)end;return end;if jp=="/setname"then if jq==nil or jq==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(jq)else K="Select a saved target to rename first"end elseif jp=="/addlocation"then if jq==nil or jq==""or string.find(jq,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(jq,"::")local bR=string.sub(jq,1,i-2)local bI=string.sub(jq,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bJ='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bK,bL,bM,bN,bO=string.match(bI,bJ)local planet=aS[tonumber(bK)][tonumber(bL)]AddNewLocationByWaypoint(bR,planet,bI)K="Added "..bR.." to saved locations,\nplanet "..planet.name.." at "..bI;a2=5 elseif jp=="/agg"then if jq==nil or jq==""then K="Usage: /agg targetheight"return end;jq=tonumber(jq)if jq<1000 then jq=1000 end;AntigravTargetAltitude=jq;K="AGG Target Height set to "..jq elseif jp=="/G"then if jq==nil or jq==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if jq=="dump"then for be,bf in pairs(a)do if type(_G[bf])=="boolean"then if _G[bf]==true then c(bf.." true")else c(bf.." false")end elseif _G[bf]==nil then c(bf.." nil")else c(bf.." ".._G[bf])end end;return end;i=string.find(jq," ")local js=string.sub(jq,0,i-1)local jt=string.sub(jq,i+1)for be,bf in pairs(a)do if bf==js then K="Variable "..js.." changed to "..jt;local ju=type(_G[bf])if ju=="number"then jt=tonumber(jt)elseif ju=="boolean"then if string.lower(jt)=="true"then jt=true else jt=false end end;_G[bf]=jt;return end end;K="No such global variable: "..js elseif jp=="/copydatabank"then if dbHud_2 then SaveDataBank(true)else K="Databank required to copy databank"end end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
