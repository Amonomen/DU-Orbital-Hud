name: ButtonsHud - Dimencia and Archaegeo v4.79 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: Set to false for default free look behavior.
        BrakeToggleDefault = true --export: Whether your brake toggle is on/off by default. Can be adjusted in the button menu
        RemoteFreeze = false --export: Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: Whether you want full HUD while in remote mode
        userControlScheme = "Virtual Joystick" --export: Set to "Virtual Joystick", "Mouse", or "Keyboard"
        brightHud = false --export: Enable to prevent hud dimming when in freelook.
        PrimaryR = 130 --export: Primary HUD color
        PrimaryG = 224 --export: Primary HUD color
        PrimaryB = 255 --export: Primary HUD color
        centerX = 960 --export: X postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Default 960. Use centerX=700 and centerY=980 for lower left placement.
        centerY = 540 --export: Y postion of Artifical Horizon (KSP Navball), also determines placement of throttle. (use 1920x1080, it will scale) Default 540. Use centerX=700 and centerY=980 for lower left placement. 
        throtPosX = 1110 --export: X position of Throttle Indicator, default 1110 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 712  --export: X postion of Vertical Speed Meter.  Default 712 (use 1920x1080, it will scale)
        altMeterY = 520 --export: Y postion of Vertical Speed Meter.  Default 520 (use 1920x1080, it will scale)
        fuelX = 100 --export: X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        opacityTop = 0.1 --export: 0 to 1 for opacity of AH top half, default 0.1
        opacityBottom = 0.3 --export: 0 to 1 for opacity of AH bottom, default 0.3
        circleRad = 100 --export: The size of the artifical horizon circle, set to 0 to remove.
        DeadZone = 50 --export: Number of pixels of deadzone at the center of the screen
        showHud = true --export: Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        hideHudOnToggleWidgets = true --export: Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        speedChangeLarge = 5 --export: The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 20 --export: Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: Target re-entry speed once in atmosphere in m/s.  291 = 1050 km/hr, higher might cause reentry burn.
        ReentryAltitude = 2500 --export: Target alititude when using re-entry.
        EmergencyWarpDistance = 320000 --export: Set to distance as which an emergency warp will occur if radar target within that distance.  320000 is lock range for large radar on large ship no special skills.
        AutoTakeoffAltitude = 1000 --export: How high above your starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: Set to hover height reported - 1 when you use alt-spacebar to just lift off ground from landed postion.  4 is M size landing gear,
        MaxGameVelocity = 8333.00 --export: Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
        AutopilotInterplanetaryThrottle = 1.0 --export: How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export:1 For virtual joystick only
        MouseXSensitivity = 0.003 --export: For virtual joystick only
        autoRollPreference = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        TrajectoryAlignmentStrength = 0.002 --export: How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: For keyboard control
        yawSpeedFactor = 1 --export: For keyboard control
        rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        apTickRate = 0.0166667 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
        script={}function script.onStart()SetupComplete=false;beginSetup=coroutine.create(function()Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})VERSION_NUMBER=4.79;local a=math.floor;local b=string.format;local c=json.decode;local d=json.encode;local e=core.getElementMaxHitPointsById;local f=unit.getAtmosphereDensity;local g=core.getElementHitPointsById;local h=core.getElementTypeById;local j=core.getElementMassById;local k=core.getConstructMass;local l=Nav.control.isRemoteControlled;APThrottleSet=false;ToggleView=true;MinAutopilotSpeed=55;LastMaxBrake=0;LastMaxBrakeInAtmo=0;EmergencyWarp=false;ReentryMode=false;MousePitchFactor=1;MouseYawFactor=1;HasGear=false;PitchInput=0;PitchInput2=0;YawInput2=0;RollInput=0;YawInput=0;BrakeInput=0;RollInput2=0;RetrogradeIsOn=false;ProgradeIsOn=false;Reentry=false;FollowMode=false;TurnBurn=false;AutopilotAccelerating=false;AutopilotRealigned=false;HoldingCtrl=false;PrevViewLock=1;MsgText="empty"LastEccentricity=1;HoldAltitudeButtonModifier=5;AntiGravButtonModifier=5;IsBoosting=false;BrakeDistance,BrakeTime=0;MaxBrakeDistance,MaxBrakeTime=0;HasSpaceRadar=false;HasAtmoRadar=false;AutopilotTargetIndex=0;AutopilotTargetName="None"AutopilotTargetPlanet=nil;TotalDistanceTravelled=0.0;TotalDistanceTrip=0;InEmergencyWarp=false;NotTriedEmergencyWarp=true;FlightTime=0;WipedDatabank=false;LocationIndex=0;UpAmount=0;BrakeIsOn=false;Autopilot=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;HoldAltitude=1000;AutopilotBraking=false;AutopilotCruising=false;VectorToTarget=false;SimulatedX=0;SimulatedY=0;AutopilotStatus="Aligning"MsgTimer=3;TargetGroundAltitude=nil;GearExtended=nil;Distance=0;RadarMessage=""LastOdometerOutput=""Peris=0;CoreAltitude=core.getAltitude()AntigravTargetAltitude=CoreAltitude;ElementsID=core.getElementIdList()LastTravelTime=system.getTime()TotalFlightTime=0;HasGear=false;AutopilotPlanetGravity=0;DisplayOrbit=true;AutopilotEndSpeed=0;SavedLocations={}LandingGearGroundHeight=0;local m={}local n=0;local o=0;local p=""local q=true;local r={}local s=1;local t=0.001;local u=2560;local v=1440;local w=nil;local x=nil;local y=nil;local z=nil;local A=false;local B=false;local C=0;local D=nil;local E={}local F={}local G={}local H=0;local I=false;local J={}local K={}local L=a(1/apTickRate)*2;local M={}local N={}local O={}local P={}local Q=false;local R=0;local S=k()local T=16;local U=0;SaveableVariables={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","ReentryAltitude","EmergencyWarpDistance","centerX","centerY","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","opacityBottom","opacityTop","RemoteHud"}AutoVariables={"EmergencyWarp","brakeToggle","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","DisplayOrbit","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","GearExtended","TargetGroundAltitude","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LastMaxBrakeInAtmo","AntigravTargetAltitude"}if dbHud then local V=dbHud.hasKey;if not useTheseSettings then for W,X in pairs(SaveableVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end end;for W,X in pairs(AutoVariables)do if V(X)then local Y=c(dbHud.getStringValue(X))if Y~=nil then system.print(X.." "..dbHud.getStringValue(X))_G[X]=Y;A=true end end end;if A then MsgText="Loaded Saved Variables (see Lua Chat Tab for list)"elseif useTheseSettings then MsgText="Updated user preferences used.  Will be saved when you exit seat.  Toggle off useTheseSettings to use saved values"else MsgText="No Saved Variables Found - Stand up / leave remote to save settings"end else MsgText="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;brakeToggle=BrakeToggleDefault;autoRoll=autoRollPreference;R=S-updateMass()if antigrav then if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;rgb=[[rgb(]]..a(PrimaryR+0.5)..","..a(PrimaryG+0.5)..","..a(PrimaryB+0.5)..[[)]]local Z=[[rgb(]]..a(PrimaryR*0.9+0.5)..","..a(PrimaryG*0.9+0.5)..","..a(PrimaryB*0.9+0.5)..[[)]]coroutine.yield()for W in pairs(ElementsID)do local name=h(ElementsID[W])if name=="landing gear"then HasGear=true end;if name=="dynamic core"then local a0=e(ElementsID[W])if a0>10000 then T=128 elseif a0>1000 then T=64 elseif a0>150 then T=32 end end;H=H+e(ElementsID[W])if fuelX~=0 and fuelY~=0 then if name=="atmospheric fuel-tank"or name=="space fuel-tank"or name=="rocket fuel-tank"then local a0=e(ElementsID[W])local a1=j(ElementsID[W])local a2=0;local a3=system.getTime()if name=="atmospheric fuel-tank"then local a4=400;local a5=35.03;if a0>10000 then a4=51200;a5=5480 elseif a0>1300 then a4=6400;a5=988.67 elseif a0>150 then a4=1600;a5=182.67 end;a2=a1-a5;if fuelTankHandlingAtmo>0 then a4=a4+a4*fuelTankHandlingAtmo*0.2 end;if a2>a4 then a4=a2 end;E[#E+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a4,a5,a2,a3}end;if name=="rocket fuel-tank"then local a4=320;local a5=173.42;if a0>65000 then a4=40000;a5=25740 elseif a0>6000 then a4=5120;a5=4720 elseif a0>700 then a4=640;a5=886.72 end;a2=a1-a5;if fuelTankHandlingRocket>0 then a4=a4+a4*fuelTankHandlingRocket*0.2 end;if a2>a4 then a4=a2 end;G[#G+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a4,a5,a2,a3}end;if name=="space fuel-tank"then local a4=2400;local a5=182.67;if a0>10000 then a4=76800;a5=5480 elseif a0>1300 then a4=9600;a5=988.67 end;a2=a1-a5;if fuelTankHandlingSpace>0 then a4=a4+a4*fuelTankHandlingSpace*0.2 end;if a2>a4 then a4=a2 end;F[#F+1]={ElementsID[W],core.getElementNameById(ElementsID[W]),a4,a5,a2,a3}end end end end;if gyro~=nil then GyroIsOn=gyro.getState()==1 end;if userControlScheme~="Keyboard"then system.lockView(1)else system.lockView(0)end;if f()>0 then BrakeIsOn=true end;if radar_1 then if h(radar_1.getId())=="Space Radar"then HasSpaceRadar=true else HasAtmoRadar=true end end;if door then for _,X in pairs(door)do X.deactivate()end end;if forcefield then for _,X in pairs(forcefield)do X.deactivate()end end;_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)if antigrav~=nil then if antigrav.getState()==1 then antigrav.show()end end;if l()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if HasGear then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;if TargetGroundAltitude~=nil then Nav.axisCommandManager:setTargetGroundAltitude(TargetGroundAltitude)if TargetGroundAltitude==0 and not HasGear then GearExtended=true end else if GearExtended or not HasGear then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)GearExtended=true else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;if f()>0 and not dbHud and(GearExtended or not HasGear)then BrakeIsOn=true end;WasInAtmo=f()>0;unit.hide()function refreshLastMaxBrake(a6,a7)if a6==nil then a6=core.g()end;a6=round(a6,5)if a7~=nil and a7 or(D==nil or D~=a6)then local a8=c(unit.getData()).maxBrake;if a8~=nil then LastMaxBrake=a8 end;if f()>0 then LastMaxBrakeInAtmo=a8 end;D=a6 end end;function MakeButton(a9,aa,ab,ac,ad,ae,af,ag,ah)local ai={enableName=a9,disableName=aa,width=ab,height=ac,x=ad,y=ae,toggleVar=af,toggleFunction=ag,drawCondition=ah,hovered=false}table.insert(r,ai)return ai end;function UpdateAtlasLocationsList()AtlasOrdered={}for W,X in pairs(atlas[0])do table.insert(AtlasOrdered,{name=X.name,index=W})end;local function aj(ak,al)return ak.name<al.name end;table.sort(AtlasOrdered,aj)end;function AddLocationsToAtlas()for W,X in pairs(SavedLocations)do table.insert(atlas[0],X)end;UpdateAtlasLocationsList()end;function AddNewLocation()if dbHud then local position=vec3(core.getConstructWorldPos())local name=planet.name..". "..#SavedLocations;if radar_1 then local am,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if am~=nil and am~=""then name=name.." "..radar_1.getConstructName(am)end end;local an={position=position,name=name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[#SavedLocations+1]=an;table.insert(atlas[0],an)UpdateAtlasLocationsList()MsgText="Location saved as "..name else MsgText="Databank must be installed to save locations"end end;function UpdatePosition()local ao=-1;local an;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then ao=W;break end end;if ao~=-1 then an=SavedLocations[ao]an={position=position,name=name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}SavedLocations[ao]=an;ao=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then ao=W end end;if ao>-1 then atlas[0][ao]=an end;UpdateAtlasLocationsList()MsgText=CustomTarget.name.." position updated"end end;function ClearCurrentPosition()local ao=-1;for W,X in pairs(atlas[0])do if X.name and X.name==CustomTarget.name then ao=W end end;if ao>-1 then table.remove(atlas[0],ao)end;ao=-1;for W,X in pairs(SavedLocations)do if X.name and X.name==CustomTarget.name then MsgText=X.name.." saved location cleared"ao=W;break end end;if ao~=-1 then table.remove(SavedLocations,ao)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(ap)ap[#ap+1]=b([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and Peris==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if Peris==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;Peris=0 end end;function ToggleWidgets()if q then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;q=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;q=true end end;function SetupInterplanetaryPanel()InAtmo=f()>0;panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "Distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not InAtmo then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(aq,ar,ad,ae,ab,ac)if aq>ad and aq<ad+ab and ar>ae and ar<ae+ac then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget()VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=false;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;FollowMode=false;BrakeLanding=false;Reentry=false;autoRoll=true;if not GearExtended and not BrakeIsOn or f()==0 then AutoTakeoff=false;HoldAltitude=CoreAltitude;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=CoreAltitude+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end else autoRoll=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if l()==1 then FollowMode=not FollowMode;if FollowMode then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)else BrakeIsOn=true;autoRoll=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else MsgText="Follow Mode only works with Remote controller"FollowMode=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot then if CustomTarget~=nil then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="Insufficient Brake Force\nCoast landing will be inaccurate"end;if unit.getAtmosphereDensity()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget()end else if not VectorToTarget then ToggleVectorToTarget()end end end elseif unit.getAtmosphereDensity()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;FollowMode=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;APThrottleSet=false end else Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;APThrottleSet=false end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;FollowMode=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;autoRoll=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;autoRoll=autoRollPreference end end;function checkDamage(ap)local as=0;local at=vec3(velocity):len()p=""currentConstructMass=k()local au=H;local av=0;local aw=100;local ax=0;local ay=0;local az=0;local aA=""for W in pairs(ElementsID)do local a0=0;local aB=0;aB=e(ElementsID[W])a0=g(ElementsID[W])av=av+a0;if a0<aB then if a0==0 then ay=ay+1 else ax=ax+1 end;if I and#m==0 then position=vec3(core.getElementPositionById(ElementsID[W]))local ad=position.x-T;local ae=position.y-T;local aC=position.z-T;table.insert(m,core.spawnArrowSticker(ad,ae,aC+1,"down"))table.insert(m,core.spawnArrowSticker(ad,ae,aC+1,"down"))core.rotateSticker(m[2],0,0,90)table.insert(m,core.spawnArrowSticker(ad+1,ae,aC,"north"))table.insert(m,core.spawnArrowSticker(ad+1,ae,aC,"north"))core.rotateSticker(m[4],90,90,0)table.insert(m,core.spawnArrowSticker(ad-1,ae,aC,"south"))table.insert(m,core.spawnArrowSticker(ad-1,ae,aC,"south"))core.rotateSticker(m[6],90,-90,0)table.insert(m,core.spawnArrowSticker(ad,ae-1,aC,"east"))table.insert(m,core.spawnArrowSticker(ad,ae-1,aC,"east"))core.rotateSticker(m[8],90,0,90)table.insert(m,core.spawnArrowSticker(ad,ae+1,aC,"west"))table.insert(m,core.spawnArrowSticker(ad,ae+1,aC,"west"))core.rotateSticker(m[10],-90,0,90)table.insert(m,ElementsID[W])end elseif I and#m>0 and m[11]==ElementsID[W]then for aD in pairs(m)do core.deleteSticker(m[aD])end;m={}end end;as=a(av/au*100)if at<5 and currentConstructMass<S then aw=math.ceil((currentConstructMass-updateMass())/R*100)S=currentConstructMass end;if aw<100 or as<100 then ap[#ap+1]=[[<g class="pbright txt">]]if aw<100 then az=a(aw*2.55)aA=b("rgb(%d,%d,%d)",255-az,az,0)ap[#ap+1]=b([[<text class="txtbig txtmid" x=50%% y="1015" style="fill:%s">Structural Integrity: %i %%</text>]],aA,aw)end;az=a(as*2.55)aA=b("rgb(%d,%d,%d)",255-az,az,0)if as<100 then ap[#ap+1]=b([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],aA,as)if ay>0 then ap[#ap+1]=b([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],aA,ay,ax)elseif ax>0 then ap[#ap+1]=b([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],aA,ax)end end;ap[#ap+1]=[[<\g>]]end end;function DrawCursorLine(ap)local aE=a(utils.clamp(Distance/(u/4)*255,0,255))ap[#ap+1]=b("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",SimulatedX,SimulatedY,a(PrimaryR+0.5)+aE,a(PrimaryG+0.5)-aE,a(PrimaryB+0.5)-aE)end;function getPitch(aF,aG,al)local aH=aF:cross(al):normalize_inplace()local aI=math.acos(utils.clamp(aH:dot(-aG),-1,1))*constants.rad2deg;if aH:cross(-aG):dot(al)<0 then aI=-aI end;return aI end;function wipeSaveVariables()if not dbHud then MsgText="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"MsgTimer=5 elseif A then if B then for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,d(nil))end;for W,X in pairs(AutoVariables)do if X~="SavedLocations"then dbHud.setStringValue(X,d(nil))end end;MsgText="Databank wiped. New variables will save after re-enter seat and exit"MsgTimer=5;B=false;A=false;WipedDatabank=true else MsgText="Press ALT-7 again to confirm wipe"B=true end end end;function CheckButtons()for _,X in pairs(r)do if X.hovered then if not X.drawCondition or X.drawCondition()then X.toggleFunction()end;X.hovered=false end end end;function SetButtonContains()local ad=SimulatedX+u/2;local ae=SimulatedY+v/2;for _,X in pairs(r)do X.hovered=Contains(ad,ae,X.x,X.y,X.width,X.height)end end;function DrawButton(ap,aJ,hover,ad,ae,aK,aL,aM,aN,aO,aP)if type(aO)=="function"then aO=aO()end;if type(aP)=="function"then aP=aP()end;ap[#ap+1]=b("<rect x='%f' y='%f' width='%f' height='%f' fill='",ad,ae,aK,aL)if aJ then ap[#ap+1]=b("%s'",aM)else ap[#ap+1]=aN end;if hover then ap[#ap+1]=" style='stroke:white; stroke-width:2'"else ap[#ap+1]=" style='stroke:black; stroke-width:1'"end;ap[#ap+1]="></rect>"ap[#ap+1]=b("<text x='%f' y='%f' font-size='24' fill='",ad+aK/2,ae+aL/2+5)if aJ then ap[#ap+1]="black"else ap[#ap+1]="white"end;ap[#ap+1]="' text-anchor='middle' font-family='Montserrat'>"if aJ then ap[#ap+1]=b("%s</text>",aO)else ap[#ap+1]=b("%s</text>",aP)end end;function DrawButtons(ap)local aQ="rgb(50,50,50)'"local aR="rgb(210,200,200)"local aS=DrawButton;for _,X in pairs(r)do local aa=X.disableName;local a9=X.enableName;if type(aa)=="function"then aa=aa()end;if type(a9)=="function"then a9=a9()end;if not X.drawCondition or X.drawCondition()then aS(ap,X.toggleVar(),X.hovered,X.x,X.y,X.width,X.height,aR,aQ,aa,a9)end end end;function DrawTank(ap,Q,ad,aT,aU,aV,aW,aX)local aY=1;local aZ=2;local a_=3;local b0=4;local b1=5;local b2=6;local b3=""local b4=0;local b5=fuelY;local b6=fuelY+10;if l()==1 and not RemoteHud then b5=b5-50;b6=b6-50 end;ap[#ap+1]=[[<g class="pdim txtfuel">]]if aU=="ATMO"then b3="atmofueltank"elseif aU=="SPACE"then b3="spacefueltank"else b3="rocketfueltank"end;b4=_G[b3 .."_size"]if#aV>0 then for i=1,#aV do local name=string.sub(aV[i][aZ],1,12)local b7=0;for aD=1,b4 do if aV[i][aZ]==json.decode(unit[b3 .."_"..aD].getData()).name then b7=aD;break end end;if Q or aW[i]==nil or aX[i]==nil then local b8=0;local b9=0;local ba=0;local bb=0;local a3=system.getTime()if b7~=0 then aX[i]=json.decode(unit[b3 .."_"..b7].getData()).percentage;aW[i]=json.decode(unit[b3 .."_"..b7].getData()).timeLeft;if aW[i]=="n/a"then aW[i]=0 end else ba=j(aV[i][aY])-aV[i][b0]b8=aV[i][a_]aX[i]=a(0.5+ba*100/b8)b9=aV[i][b1]bb=aV[i][b2]if b9<=ba then aW[i]=0 else aW[i]=a(0.5+ba/((b9-ba)/(a3-bb)))end;aV[i][b1]=ba;aV[i][b2]=a3 end end;if name==aT then name=b("%s %d",aU,i)end;if b7==0 then name=name.." *"end;local bc;if aW[i]==0 then bc="n/a"else bc=FormatTimeString(aW[i])end;if aX[i]~=nil then local az=a(aX[i]*2.55)local aA=b("rgb(%d,%d,%d)",255-az,az,0)local bd=""if bc~="n/a"and aW[i]<120 or aX[i]<5 then if Q then bd=[[class="red"]]end end;ap[#ap+1]=b([[
                                    <text x=%d y="%d" %s>%s</text>
                                    <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                                ]],ad,b5,bd,name,ad,b6,aA,aX[i],bc)b5=b5+30;b6=b6+30 end end end;ap[#ap+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;system.showScreen(1)function getRelativePitch(velocity)velocity=vec3(velocity)local aI=-math.deg(math.atan(velocity.y,velocity.z))+180;aI=aI-90;if aI<0 then aI=360+aI end;if aI>180 then aI=-180+aI-180 end;return-aI end;function getRelativeYaw(velocity)velocity=vec3(velocity)local be=math.deg(math.atan(velocity.y,velocity.x))-90;if be<-180 then be=360+be end;return be end;function AlignToWorldVector(bf,bg)if bg==nil then bg=t end;bf=vec3(bf):normalize()local bh=vec3(core.getConstructWorldOrientationForward())-bf;local bi=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationRight())*s;local bj=-getMagnitudeInDirection(bh,core.getConstructWorldOrientationUp())*s;YawInput2=YawInput2-(bi+(bi-n)*DampingMultiplier)PitchInput2=PitchInput2+bj+(bj-o)*DampingMultiplier;n=bi;o=bj;if math.abs(bi)<bg and math.abs(bj)<bg then return true end;return false end;function getAPEnableName()local name=AutopilotTargetName;if name==nil then name=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if name==nil then name="None"end;return"Engage Autopilot: "..name end;function getAPDisableName()local name=AutopilotTargetName;if name==nil then name=CustomTarget.name end;if name==nil then name="None"end;return"Disable Autopilot: "..name end;function ToggleAntigrav()if antigrav then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=CoreAltitude end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then MsgText="Re-Entry cancelled"Reentry=false;autoRoll=autoRollPreference;AltitudeHold=false elseif unit.getAtmosphereDensity()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then MsgText="Re-Entry requirements not met: you must start out of atmosphere and within a planets gravity well over a planet with atmosphere"MsgTimer=5 elseif not ReentryMode then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrakeInAtmo;if not StrongBrakes then MsgText="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;autoroll=true;BrakeIsOn=false;MsgText="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;autoroll=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;MsgText="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;local bk=50;local bl=260;local bm=MakeButton("Enable Brake Toggle","Disable Brake Toggle",bl,bk,u/2-bl/2,v/2+350,function()return brakeToggle end,function()brakeToggle=not brakeToggle;if brakeToggle then MsgText="Brakes in Toggle Mode"else MsgText="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",bl,bk,u/2-bl/2-50-bm.width,v/2-bk+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",bl,bk,u/2-bl/2+bm.width+50,v/2-bk+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return unit.getAtmosphereDensity()==0 end)local bn=MakeButton(getAPEnableName,getAPDisableName,600,60,u/2-600/2,v/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,bn.height,bn.x+bn.width+30,bn.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,bn.height,bn.x+bn.width+30,bn.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,bn.height,bn.x-200-30,bn.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)bk=60;bl=300;local ad=10;local ae=v/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",bl,bk,ad,ae,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",bl,bk,ad+bl+20,ae,function()return AltitudeHold end,ToggleAltitudeHold)ae=ae+bk+20;MakeButton("Engage Autoland","Disable Autoland",bl,bk,ad,ae,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",bl,bk,ad+bl+20,ae,function()return AutoTakeoff end,ToggleAutoTakeoff)ae=ae+bk+20;MakeButton("Show Orbit Display","Hide Orbit Display",bl,bk,ad,ae,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then MsgText="Orbit Display Enabled"else MsgText="Orbit Display Disabled"end end)MakeButton("Enable Emergency Warp","Disable Emergency Warp",bl,bk,ad+bl+20,ae,function()return EmergencyWarp end,function()EmergencyWarp=not EmergencyWarp;if EmergencyWarp then MsgText="Emergency Warp Enabled"else MsgText="Emergency Warp Disabled"end end,function()return warpdrive~=nil end)ae=ae+bk+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",bl,bk,ad,ae,function()return Reentry end,function()ReentryMode=true;BeginReentry()end,function()return CoreAltitude>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",bl,bk,ad+bl+20,ae,function()return Reentry end,BeginReentry,function()return CoreAltitude>ReentryAltitude end)ae=ae+bk+20;MakeButton("Engage Follow Mode","Disable Follow Mode",bl,bk,ad,ae,function()return FollowMode end,ToggleFollowMode,function()return l()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",bl,bk,ad+bl+20,ae,function()return I end,function()I=not I;if I then MsgText="Repair Arrows Enabled"else MsgText="Repair Arrows Diabled"end end,function()return l()==1 end)ae=ae+bk+20;MakeButton("Enable AGG","Disable AGG",bl,bk,ad,ae,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)ae=ae+bk+20;MakeButton(function()return string.format("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return string.format("Control Scheme: %s",userControlScheme)end,bl*2,bk,ad,ae,function()return false end,function()if userControlScheme=="Keyboard"then userControlScheme="Mouse"elseif userControlScheme=="Mouse"then userControlScheme="Virtual Joystick"else userControlScheme="Keyboard"end end)coroutine.yield()function updateHud(ap)local bo=CoreAltitude;local velocity=core.getVelocity()local at=vec3(velocity):len()local bp=vec3(core.getWorldVertical())local bq=vec3(core.getConstructWorldOrientationForward())local br=vec3(core.getConstructWorldOrientationRight())local aI=getPitch(bp,bq,br)local bs=getRoll(bp,bq,br)local bt=bs;local bu=aI;local bv=f()local bw=a(unit.getThrottle())local bx=at*3.6;local by=unit.getAxisCommandValue(0)local bz=GetFlightStyle()if bv==0 then if at>5 then aI=getRelativePitch(velocity)bs=getRelativeYaw(velocity)else aI=0;bs=0 end;bottomText="YAW"end;ap[#ap+1]=LastOdometerOutput;ap[#ap+1]=p;ap[#ap+1]=RadarMessage;if U%L==0 then Q=true end;if fuelX~=0 and fuelY~=0 then DrawTank(ap,Q,fuelX,"Atmospheric ","ATMO",E,O,P)DrawTank(ap,Q,fuelX+100,"Space fuel t","SPACE",F,M,N)DrawTank(ap,Q,fuelX+200,"Rocket fuel ","ROCKET",G,J,K)end;if Q then Q=false;U=0 end;U=U+1;DrawVerticalSpeed(ap,bo,bv)if l()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if unit.getClosestPlanetInfluence()>0 then DrawArtificialHorizon(ap,bu,bt,bv,centerX,centerY,"ROLL")DrawPrograde(ap,bv,velocity,at,centerX,centerY)DrawAltitudeDisplay(ap,bo,bv)else DrawArtificialHorizon(ap,aI,bs,bv,centerX,centerY,"YAW")DrawPrograde(ap,bv,velocity,at,centerX,centerY)end end end;DrawThrottle(ap,bz,bw,by)DrawSpeed(ap,bx)DrawWarnings(ap)DisplayOrbitScreen(ap)if screen_2 then local bA=vec3(core.getConstructWorldPos())local ad=960+bA.x/MapXRatio;local ae=450+bA.y/MapYRatio;screen_2.moveContent(YouAreHere,(ad-80)/19.2,(ae-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="Keyboard"and l()==0 end;function HUDPrologue(ap)local bB=rgb;local bC=Z;local bD=rgb;local bE=Z;if IsInFreeLook()and not brightHud then bB=[[rgb(]]..a(PrimaryR*0.4+0.5)..","..a(PrimaryG*0.4+0.5)..","..a(PrimaryB*0.3+0.5)..[[)]]bC=[[rgb(]]..a(PrimaryR*0.3+0.5)..","..a(PrimaryG*0.3+0.5)..","..a(PrimaryB*0.2+0.5)..[[)]]end;ap[#ap+1]=b([[
                        <head>
                            <style>
                                body {margin: 0}
                                svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                                .txt {font-size:10px;font-weight:bold;}
                                .txttick {font-size:12px;font-weight:bold;}
                                .txtbig {font-size:14px;font-weight:bold;}
                                .altsm {font-size:16px;font-weight:normal;}
                                .altbig {font-size:21px;font-weight:normal;}
                                .line {stroke-width:2px;fill:none}
                                .linethick {stroke-width:3px;fill:none}
                                .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                                .warn {fill:orange;font-size:24px}
                                .crit {fill:darkred;font-size:28px}
                                .bright {fill:%s;stroke:%s}
                                .pbright {fill:%s;stroke:%s}
                                .dim {fill:%s;stroke:%s}
                                .pdim {fill:%s;stroke:%s}
                                .red {fill:red;stroke:red}
                                .redout {fill:none;stroke:red}
                                .op30 {opacity:0.3}
                                .op10 {opacity:0.1}
                                .txtstart {text-anchor:start}
                                .txtend {text-anchor:end}
                                .txtmid {text-anchor:middle}
                                .txtvspd {font-family:sans-serif;font-weight:normal}
                                .txtvspdval {font-size:20px}
                                .txtfuel {font-size:11px;font-weight:bold}
                                .txtorb {font-size:12px}
                                .txtorbbig {font-size:18px}
                                .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                                .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                                .cursor {stroke:white}
                                .ah {opacity:%f;fill:#0083cb;stroke:black;stroke-width:2px}
                                .ahg {opacity:%f;fill:#6b5835}
                            </style>
                        </head>
                        <body>
                            <svg height="100%%" width="100%%" viewBox="0 0 1920 1080">
                            ]],bB,bB,bD,bD,bC,bC,bE,bE,opacityTop,opacityBottom)end;function HUDEpilogue(ap)ap[#ap+1]="</svg>"end;function DrawSpeed(ap,bx)local bF=altMeterY+40;local bG=altMeterX;ap[#ap+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bF=75 end;ap[#ap+1]=b([[
                        <g class="pbright txtstart">
                            <text class="txtbig" x="%d" y="%d">%d km/h</text>
                        </g>
                    </g>]],bG,bF,a(bx))end;function DrawOdometer(ap,TotalDistanceTrip,TotalDistanceTravelled,bz,bH)local bI=1240;local bJ=55;local bK=65;local bv=f()local a6=core.g()local bL=0;local bM=0;refreshLastMaxBrake(a6)maxThrust=Nav:maxForceForward()C=k()local bN=vec3(core.getWorldAcceleration()):len()/9.80665;if a6>0.1 then bM=C*a6;bL=maxThrust/a6 end;ap[#ap+1]=[[<g class="pdim txt txtend">]]if l()==1 and not RemoteHud then bI=1120;bJ=55;bK=65 elseif bv>0 then ap[#ap+1]=b([[
                            <text x="770" y="55">ATMOSPHERE</text>
                            <text x="770" y="65">%.2f</text>
                        ]],bv)end;ap[#ap+1]=b([[
                        <g class="pbright txtend">
                        </g>
                        <text x="%d" y="%d">GRAVITY</text>
                        <text x="%d" y="%d">%.2f g</text>
                        <text x="%d" y="%d">ACCEL</text>
                        <text x="%d" y="%d">%.2f g</text>
                        ]],bI,bJ,bI,bK,a6/9.80665,bI,bJ+20,bI,bK+20,bN)ap[#ap+1]=[[<g class="pbright txt">
                            <path class="linethick" d="M 660 0 L 700 35 Q 960 55 1240 35 L 1280 0"/>]]if l()==0 or RemoteHud then ap[#ap+1]=b([[
                            <text class="txtstart" x="700" y="20" >Trip: %.2f km</text>
                            <text class="txtstart" x="700" y="30">Lifetime: %.2f Mm</text>
                            <text class="txtstart" x="830" y="20">Trip Time: %s</text>
                            <text class="txtstart" x="830" y="30">Total Time: %s</text>
                            <text class="txtstart" x="970" y="20">Mass: %.2f Tons</text>
                            <text class="txtend" x="1240" y="10">Max Brake: %.2f kN</text>
                            <text class="txtend" x="1240" y="30">Max Thrust: %.2f kN</text>
                            <text class="txtbig txtmid" x="960" y="130">%s</text>
                        ]],TotalDistanceTrip,TotalDistanceTravelled/1000,FormatTimeString(bH),FormatTimeString(TotalFlightTime),C/1000,LastMaxBrake/1000,maxThrust/1000,bz)if a6>0.1 then ap[#ap+1]=b([[
                                    <text class="txtstart" x="970" y="30">Max Mass: %.2f Tons</text>
                                    <text class="txtend" x="1240" y="20">Req Thrust: %.2f kN</text>
                            ]],bL/1000,bM/1000)else ap[#ap+1]=[[
                                <text class="txtstart" x="970" y="30" text-anchor="start">Max Mass: n/a</text>
                                <text class="txtend" x="1240" y="20" text-anchor="end">Req Thrust: n/a</text>
                            ]]end else ap[#ap+1]=b([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],bz)end;ap[#ap+1]="</g>"end;function DrawThrottle(ap,bz,bw,by)local b5=throtPosY+65;local b6=throtPosY+75;if l()==1 and not RemoteHud then b5=55;b6=65 end;local bO="CRUISE"local unit="km/h"local bP=by;if bz=="TRAVEL"or bz=="AUTOPILOT"then bO="THROT"unit="%"bP=bw;local bQ="dim"if bw<0 then bQ="red"end;ap[#ap+1]=b([[<g class="%s">
                            <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                            <g transform="translate(0 %d)">
                                <polygon points="%d,%d %d,%d %d,%d"/>
                            </g>]],bQ,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(bw),throtPosX-20,throtPosY+50,throtPosX-25,throtPosY+53,throtPosX-25,throtPosY+47)end;ap[#ap+1]=b([[
                        <g class="pbright txtstart">
                                <text x="%d" y="%d">%s</text>
                                <text x="%d" y="%d">%d %s</text>
                        </g>
                    </g>]],throtPosX,b5,bO,throtPosX,b6,bP,unit)end;function DrawVerticalSpeed(ap,bo,bv)if bo<200000 and bv==0 or bo and bv>0 then local velocity=vec3(core.getWorldVelocity())local bR=vec3(core.getWorldVertical())*-1;local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;local bT=0;if math.abs(bS)>1 then bT=45*math.log(math.abs(bS),10)if bS<0 then bT=-bT end end;ap[#ap+1]=b([[
                            <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                                    <text x="31" y="-41">1000</text>
                                    <text x="-10" y="-65">100</text>
                                    <text x="-54" y="-45">10</text>
                                    <text x="-73" y="3">O</text>
                                    <text x="-56" y="52">-10</text>
                                    <text x="-14" y="72">-100</text>
                                    <text x="29" y="50">-1000</text>
                                    <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                                <g class="linethick">
                                    <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                                    <circle r="90" />
                                </g>
                                <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                            </g>
                        ]],vSpdMeterX,vSpdMeterY,a(bS),a(bT))end end;function DrawArtificialHorizon(ap,bu,bt,bv,centerX,centerY,bottomText)local bU=circleRad;if bU>0 then local bV=a(bu)local bW=a(bt)local bX=0;local bY=b([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*bt,centerX,centerY)ap[#ap+1]=b([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],bU-1,centerX,centerY)ap[#ap+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=a(bV-30-bV%5+0.5),a(bV+30+bV%5+0.5),5 do if i%10==0 then bX=30 elseif i%5==0 then bX=20 end;local ae=centerY+-i*5+bu*5;if bX==30 then bY=b([[%s M %d %f h %d]],bY,centerX-15,ae,bX)else bY=b([[%s M %d %f h %d]],bY,centerX-10,ae,bX)end end;ap[#ap+1]=bY..[["/>]]local bZ="PITCH"if bottomText=="YAW"then bZ="REL PITCH"end;if bu>90 and bv==0 then bu=90-(bu-90)elseif bu<-90 and bv==0 then bu=-90-(bu+90)end;ap[#ap+1]=b([[<path d="m %d,%d 35,0 15,15 15,-15 35,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-50,centerY)ap[#ap+1]=b([[
                            <circle class="ah" r="%f" cx="%d" cy="%d"/>
                                
                                <rect class="ahg" x="%f" y="%f" height="%f" width="%f" transform="rotate(%f %d %d)"/>]],bU,centerX,centerY,centerX-bU,centerY+bU*bu/20,bU*9,bU*2,-1*bt,centerX,centerY)ap[#ap+1]="</g>"ap[#ap+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-bU-20,bZ,centerX,centerY-bU-10,bV)ap[#ap+1]=b([["
                        <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX-bU-20,centerY,bottomText,centerX-bU-20,centerY+10,bW)end end;function DrawAltitudeDisplay(ap,bo,bv)if bo<200000 and bv==0 or bo and bv>0 then local b_=altMeterX;local c0=altMeterY;local c1=78;local c2=19;table.insert(ap,b([[
                            <g class="pdim">                        
                                <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                                <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                                <g clip-path="url(#alt)">]],b_-1,c0-4,c1+2,c2+6,b_+1,c0-1,c1-4,c2))local ao=0;local c3=1;local c4=0;local c5=bo<0;local c6=9;if c5 then c6=0 end;local bo=math.abs(bo)while ao<6 do local c7=11;local c8=16;local c9=9;local ca=14;local bd="altsm"if ao>2 then c8=c8+3;c7=c7+2;ca=ca+2;c9=c9-6;bd="altbig"end;if c5 then bd=bd.." red"end;local cb=bo/c3%10;local cc=a(cb)local cd=a((cc+1)%10)local ce=c4;if ao==0 then ce=cb-cc;if c5 then ce=1-ce end end;if c5 and(ao==0 or c4~=0)then local cf=cd;cd=cc;cc=cf end;local cg=c8*(ce-1)local ch=cg+c8;local ad=b_+c9+(6-ao)*c7;local ae=c0+ca;table.insert(ap,b([[
                                <g class="%s">
                                <text x="%d" y="%f">%d</text>
                                <text x="%d" y="%f">%d</text>
                                </g>
                            ]],bd,ad,ae+cg,cd,ad,ae+ch,cc))ao=ao+1;c3=c3*10;if cc==c6 then c4=ce else c4=0 end end;table.insert(ap,[[</g></g>]])end end;function DrawPrograde(ap,bv,velocity,at,centerX,centerY)if at>5 and bv==0 or at>MinAutopilotSpeed then local bU=circleRad;local ci=20;local cj=20;local ck=vec3(velocity)local cl=getRelativePitch(ck)local cm=getRelativeYaw(ck)local cn=-cm/cj*bU;local co=cl/ci*bU;local ad=centerX+cn;local ae=centerY+co;local cp=math.sqrt(cn^2+co^2)if cp<bU then ap[#ap+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ad,ae)else local bT=math.atan(co,cn)local cq=centerX+bU*math.cos(bT)local cr=centerY+bU*math.sin(bT)ap[#ap+1]=b('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',cq,cr)end;cl=getRelativePitch(-ck)cm=getRelativeYaw(-ck)cn=-cm/cj*bU;co=cl/ci*bU;ad=centerX+cn;ae=centerY+co;cp=math.sqrt(cn^2+co^2)if bv==0 then if cp<bU then ap[#ap+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ad,ae)else local bT=math.atan(co,cn)local cq=centerX+bU*math.cos(bT)local cr=centerY+bU*math.sin(bT)ap[#ap+1]=b('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',cq,cr)end end end end;function DrawWarnings(ap)ap[#ap+1]=b([[<text class="hudver" x="1900" y="1070">DU Hud Version: %.3f</text>]],VERSION_NUMBER)ap[#ap+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then ap[#ap+1]=[[<text x="960" y="550">Warning: Invalid Control Scheme Detected</text>]]ap[#ap+1]=[[<text x="960" y="600">Keyboard Scheme must be selected</text>]]ap[#ap+1]=[[<text x="960" y="650">Set your preferred scheme in Lua Parameters instead</text>]]end;local cs=960;local ct=860;local cu=900;local cv=930;local cw=960;local cx=200;local cy=150;local cz=960;if l()==1 and not RemoteHud then ct=135;cu=155;cv=175;cx=115;cy=95 end;if BrakeIsOn then ap[#ap+1]=b([[<text x="%d" y="%d">Brake Engaged</text>]],cs,ct)end;if GyroIsOn then ap[#ap+1]=b([[<text x="%d" y="%d">Gyro Enabled</text>]],cs,cz)end;if GearExtended then if HasGear then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],cs,cu)else ap[#ap+1]=b([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],cs,cu)end;ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],cs,cv,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if EmergencyWarp then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">E-WARP ENGAGED</text>]],cs,cw)end;if IsBoosting then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],cs,cw+20)end;if antigrav and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(CoreAltitude-antigrav.getBaseAltitude())<501 then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cs,cx+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))else ap[#ap+1]=b([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],cs,cx+20,a(AntigravTargetAltitude),a(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],cs,cx,AutopilotStatus)elseif FollowMode then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],cs,cx)elseif AltitudeHold then if AutoTakeoff then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],cs,cx,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then ap[#ap+1]=b([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],cs,cx+50)end else ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],cs,cx,getDistanceDisplayString2(HoldAltitude))end elseif Reentry then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],cs,cx)end;if BrakeLanding then if StrongBrakes then ap[#ap+1]=b([[<text x="%d" y="%d">Brake-Landing</text>]],cs,cx)else ap[#ap+1]=b([[<text x="%d" y="%d">Coast-Landing</text>]],cs,cx)end end;if TurnBurn then ap[#ap+1]=b([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],cs,cy)end;if VectorToTarget then ap[#ap+1]=b([[<text class="warn" x="%d" y="%d">%s</text>]],cs,cy,VectorStatus)end;ap[#ap+1]="</g>"end;function DisplayOrbitScreen(ap)if orbit~=nil and unit.getAtmosphereDensity()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local cA=75;local cB=0;local cC=250;local cD=4;cB=cB+cD;local cE=15;local ad=cA+cC+cA/2+cD;local ae=cB+cC/2+5+cD;local cF,cG,cH,cI;cF=cC/4;cI=0;ap[#ap+1]=[[<g class="pbright txtorb txtmid">]]ap[#ap+1]=b('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',cC+cA*2,cC+cB,cD,cD)if orbit.periapsis~=nil and orbit.apoapsis~=nil then cH=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(cF*2)cG=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/cH*(1-orbit.eccentricity)cI=cF-orbit.periapsis.altitude/cH-planet.radius/cH;local cJ=""if orbit.periapsis.altitude<=0 then cJ='redout'end;ap[#ap+1]=b([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],cJ,cA+cC/2+cI+cD,cB+cC/2+cD,cF,cG)ap[#ap+1]=b('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',cA+cC/2+cD,cB+cC/2+cD,planet.radius/cH)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then ap[#ap+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ad-35,ae-5,cA+cC/2+cF+cI,ae-5)ap[#ap+1]=b([[<text x="%f" y="%f">Apoapsis</text>]],ad,ae)ae=ae+cE;ap[#ap+1]=b([[<text x="%f" y="%f">%s</text>]],ad,ae,getDistanceDisplayString(orbit.apoapsis.altitude))ae=ae+cE;ap[#ap+1]=b([[<text x="%f" y="%f">%s</text>]],ad,ae,FormatTimeString(orbit.timeToApoapsis))ae=ae+cE;ap[#ap+1]=b([[<text x="%f" y="%f">%s</text>]],ad,ae,getSpeedDisplayString(orbit.apoapsis.speed))end;ae=cB+cC/2+5+cD;ad=cA-cA/2+10+cD;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then ap[#ap+1]=b([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],ad+35,ae-5,cA+cC/2-cF+cI,ae-5)ap[#ap+1]=b([[<text x="%f" y="%f">Periapsis</text>]],ad,ae)ae=ae+cE;ap[#ap+1]=b([[<text x="%f" y="%f">%s</text>]],ad,ae,getDistanceDisplayString(orbit.periapsis.altitude))ae=ae+cE;ap[#ap+1]=b([[<text x="%f" y="%f">%s</text>]],ad,ae,FormatTimeString(orbit.timeToPeriapsis))ae=ae+cE;ap[#ap+1]=b([[<text x="%f" y="%f">%s</text>]],ad,ae,getSpeedDisplayString(orbit.periapsis.speed))end;ap[#ap+1]=b([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],cA+cC/2+cD,20+cD,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local cK=orbit.timeToApoapsis/orbit.period*2*math.pi;local cL=cF*math.cos(cK)local cM=cG*math.sin(cK)ap[#ap+1]=b('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',cA+cC/2+cL+cI+cD,cB+cC/2+cM+cD)end;ap[#ap+1]=[[</g>]]end end;function Atlas()return{[0]={[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;atlas=Atlas()for W,X in pairs(atlas[0])do if w==nil or X.center.x<w then w=X.center.x end;if x==nil or X.center.x>x then x=X.center.x end;if y==nil or X.center.y<y then y=X.center.y end;if z==nil or X.center.y>z then z=X.center.y end end;GalaxyMapHTML=""local cN=1.1*(x-w)/1920;local cO=1.4*(z-y)/1080;for W,X in pairs(atlas[0])do local ad=960+X.center.x/cN;local ae=540+X.center.y/cO;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ad..'" cy="'..ae..'" r="'..X.radius/cN*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(X.name,"Moon")and not string.match(X.name,"Sanctuary")then GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ad.."' y='"..ae+X.radius/cN*30+20 .."' font-size='28' fill="..rgb.." text-anchor='middle' font-family='Montserrat'>"..X.name.."</text>"end end;local bA=vec3(core.getConstructWorldPos())local ad=960+bA.x/cN;local ae=540+bA.y/cO;GalaxyMapHTML=GalaxyMapHTML..'<circle cx="'..ad..'" cy="'..ae..'" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='"..ad.."' y='"..ae-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"GalaxyMapHTML=GalaxyMapHTML..[[</svg>]]MapXRatio=cN;MapYRatio=cO;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..GalaxyMapHTML)local bA=vec3(core.getConstructWorldPos())local ad=960+bA.x/cN;local ae=540+bA.y/cO;GalaxyMapHTML='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'GalaxyMapHTML=GalaxyMapHTML.."<text x='80' y='105' font-size='18' fill="..rgb.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"YouAreHere=screen_2.addContent((ad-80)/19.20,(ae-80)/10.80,GalaxyMapHTML)end;function PlanetRef()local function cP(cQ)return type(cQ)=='number'end;local function cR(cQ)return type(tonumber(cQ))=='number'end;local function cS(cT)return type(cT)=='table'end;local function cU(cV)return type(cV)=='string'end;local function cW(X)return cS(X)and cP(X.x and X.y and X.z)end;local function cX(cY)return cS(cY)and cP(cY.latitude and cY.longitude and cY.altitude and cY.bodyId and cY.systemId)end;local cZ=math.pi/180;local c_=180/math.pi;local d0=1e-10;local d1=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local d2='::pos{'..d1 ..','..d1 ..','..d1 ..','..d1 ..','..d1 ..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local d3=utils.clamp;local function d4(d5,d6)if d5==0 then return math.abs(d6)<1e-09 end;if d6==0 then return math.abs(d5)<1e-09 end;return math.abs(d5-d6)<math.max(math.abs(d5),math.abs(d6))*d0 end;local function d7(cQ)local Y=string.gsub(string.reverse(b('%.4f',cQ)),'^0*%.?','')return Y==''and'0'or string.reverse(Y)end;local function d8(d9)if cW(d9)then return b('{x=%.3f,y=%.3f,z=%.3f}',d9.x,d9.y,d9.z)end;if cS(d9)and not getmetatable(d9)then local da={}local db=next(d9)if type(db)=='nil'or db==1 then da=d9 else for W,X in pairs(d9)do local bP=d8(X)if type(W)=='number'then table.insert(da,b('[%s]=%s',W,bP))else table.insert(da,b('%s=%s',W,bP))end end end;return b('{%s}',table.concat(da,','))end;if cU(d9)then return b("'%s'",d9:gsub("'",[[\']]))end;return tostring(d9)end;local dc={}dc.__index=dc;dc.__tostring=function(d9,dd)local de={}for W in pairs(d9)do table.insert(de,W)end;table.sort(de)local da={}for _,W in ipairs(de)do local bP=d8(d9[W])if type(W)=='number'then table.insert(da,b('[%s]=%s',W,bP))else table.insert(da,b('%s=%s',W,bP))end end;if dd then return b('%s%s',dd,table.concat(da,',\n'..dd))end;return b('{%s}',table.concat(da,','))end;dc.__eq=function(df,dg)return df.planetarySystemId==dg.planetarySystemId and df.bodyId==dg.bodyId and d4(df.radius,dg.radius)and d4(df.center.x,dg.center.x)and d4(df.center.y,dg.center.y)and d4(df.center.z,dg.center.z)and d4(df.GM,dg.GM)end;local function dh(di,dj,dk,dl,dm)assert(cR(di),'Argument 1 (planetarySystemId) must be a number:'..type(di))assert(cR(dj),'Argument 2 (bodyId) must be a number:'..type(dj))assert(cR(dk),'Argument 3 (radius) must be a number:'..type(dk))assert(cS(dl),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(dl))assert(cR(dm),'Argument 5 (GM) must be a number:'..type(dm))return setmetatable({planetarySystemId=tonumber(di),bodyId=tonumber(dj),radius=tonumber(dk),center=vec3(dl),GM=tonumber(dm)},dc)end;local dn={}dn.__index=dn;dn.__tostring=function(dp)return b('::pos{%d,%d,%s,%s,%s}',dp.systemId,dp.bodyId,d7(dp.latitude*c_),d7(dp.longitude*c_),d7(dp.altitude))end;dn.__eq=function(df,dg)return df.bodyId==dg.bodyId and df.systemId==dg.systemId and d4(df.latitude,dg.latitude)and d4(df.altitude,dg.altitude)and(d4(df.longitude,dg.longitude)or d4(df.latitude,math.pi/2)or d4(df.latitude,-math.pi/2))end;local function dq(dr,dj,ds,dt,bo)local di=dr;if cU(dr)and not dt and not bo and not dj and not ds then di,dj,ds,dt,bo=string.match(dr,d2)assert(di,'Argument 1 (position string) is malformed.')else assert(cR(di),'Argument 1 (systemId) must be a number:'..type(di))assert(cR(dj),'Argument 2 (bodyId) must be a number:'..type(dj))assert(cR(ds),'Argument 3 (latitude) must be in degrees:'..type(ds))assert(cR(dt),'Argument 4 (longitude) must be in degrees:'..type(dt))assert(cR(bo),'Argument 5 (altitude) must be in meters:'..type(bo))end;di=tonumber(di)dj=tonumber(dj)ds=tonumber(ds)dt=tonumber(dt)bo=tonumber(bo)if dj==0 then return setmetatable({latitude=ds,longitude=dt,altitude=bo,bodyId=dj,systemId=di},dn)end;return setmetatable({latitude=cZ*d3(ds,-90,90),longitude=cZ*(dt%360),altitude=bo,bodyId=dj,systemId=di},dn)end;local du={}du.__index=du;du.__tostring=function(d9,dd)local dv=dd and dd..'  'local dw={}local de={}for W in pairs(d9)do table.insert(de,W)end;table.sort(de)for _,dx in ipairs(de)do bdy=d9[dx]local dy=dc.__tostring(bdy,dv)if dd then table.insert(dw,b('[%s]={\n%s\n%s}',dx,dy,dd))else table.insert(dw,b('  [%s]=%s',dx,dy))end end;if dd then return b('\n%s%s%s',dd,table.concat(dw,',\n'..dd),dd)end;return b('{\n%s\n}',table.concat(dw,',\n'))end;local function dz(dA)local atlas={}local pid;for _,X in pairs(dA)do local am=X.planetarySystemId;if type(am)~='number'then error('Invalid planetary system ID: '..tostring(am))elseif pid and am~=pid then error('Mismatch planetary system IDs: '..am..' and '..pid)end;local dB=X.bodyId;if type(dB)~='number'then error('Invalid body ID: '..tostring(dB))elseif atlas[dB]then error('Duplicate body ID: '..tostring(dB))end;setmetatable(X.center,getmetatable(vec3.unit_x))atlas[dB]=setmetatable(X,dc)pid=am end;return setmetatable(atlas,du)end;PlanetaryReference={}local function dC(dA)return setmetatable({galaxyAtlas=dA or{}},PlanetaryReference)end;PlanetaryReference.__index=function(cT,i)if type(i)=='number'then local system=cT.galaxyAtlas[i]return dz(system)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(d9)return function(cT,W)local dD,nv=next(cT,W)return dD,nv and dz(nv)end,d9.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(d9)local dE={}for _,dF in pairs(d9 or{})do local dG=dF:getPlanetarySystemId()local dH=du.__tostring(dF,'    ')table.insert(dE,b('  [%s]={%s\n  }',dG,dH))end;return b('{\n%s\n}\n',table.concat(dE,',\n'))end;PlanetaryReference.BodyParameters=dh;PlanetaryReference.MapPosition=dq;PlanetaryReference.PlanetarySystem=dz;function PlanetaryReference.createBodyParameters(dI,dj,dJ,dK,dL,dM,dN)assert(cR(dI),'Argument 1 (planetarySystemId) must be a number:'..type(dI))assert(cR(dj),'Argument 2 (bodyId) must be a number:'..type(dj))assert(cR(dJ),'Argument 3 (surfaceArea) must be a number:'..type(dJ))assert(cS(dK),'Argument 4 (aPosition) must be an array or vec3:'..type(dK))assert(cS(dL),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(dL))assert(cR(dM),'Argument 6 (altitude) must be in meters:'..type(dM))assert(cR(dN),'Argument 7 (gravityAtPosition) must be number:'..type(dN))local dk=math.sqrt(dJ/4/math.pi)local cp=dk+dM;local dO=vec3(dK)+cp*vec3(dL)local dm=dN*cp*cp;return dh(dI,dj,dk,dO,dm)end;PlanetaryReference.isMapPosition=cX;function PlanetaryReference:getPlanetarySystem(dr)if i==nil then i=0 end;if nv==nil then nv=0 end;local dI=dr;if cX(dr)then dI=dr.systemId end;if type(dI)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=du then system=dz(system)end;return system end end end;function du:castIntersections(dP,dQ,dR,dS)local dR=dR or function(dT)return 1.05*dT.radius end;local dU={}if dS then for _,i in ipairs(dS)do dU[i]=self[i]end else dS={}for W,dT in pairs(self)do table.insert(dS,W)dU[W]=dT end end;local function dV(dW,dX)local dY=dU[dW].center-dP;local dZ=dU[dX].center-dP;return dY:len()<dZ:len()end;table.sort(dS,dV)local d_=dQ:normalize()for i,am in ipairs(dS)do local dT=dU[am]local e0=dT.center-dP;local dk=dR(dT)local e1=e0:dot(d_)local e2=e1^2-(e0:len2()-dk^2)if e2>=0 then local e3=math.sqrt(e2)local e4=e1+e3;local e5=e1-e3;if e5>0 then return dT,e4,e5 elseif e4>0 then return dT,e4,nil end end end;return nil,nil,nil end;function du:closestBody(e6)assert(type(e6)=='table','Invalid coordinates.')local e7,dT;local e8=vec3(e6)for _,e9 in pairs(self)do local ea=(e9.center-e8):len2()if not dT or ea<e7 then dT=e9;e7=ea end end;return dT end;function du:convertToBodyIdAndWorldCoordinates(dr)local eb=dr;if cU(dr)then eb=dq(dr)end;if eb.bodyId==0 then return 0,vec3(eb.latitude,eb.longitude,eb.altitude)end;local e9=self:getBodyParameters(eb)if e9 then return eb.bodyId,e9:convertToWorldCoordinates(eb)end end;function du:getBodyParameters(dr)local dj=dr;if cX(dr)then dj=dr.bodyId end;assert(cR(dj),'Argument 1 (bodyId) must be a number:'..type(dj))return self[dj]end;function du:getPlanetarySystemId()local _,X=next(self)return X and X.planetarySystemId end;function dc:convertToMapPosition(dl)assert(cS(dl),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(dl))local ec=vec3(dl)if self.bodyId==0 then return setmetatable({latitude=ec.x,longitude=ec.y,altitude=ec.z,bodyId=0,systemId=self.planetarySystemId},dn)end;local ed=ec-self.center;local cp=ed:len()local bo=cp-self.radius;local ds=0;local dt=0;if not d4(cp,0)then local ee=math.atan(ed.y,ed.x)dt=ee>=0 and ee or 2*math.pi+ee;ds=math.pi/2-math.acos(ed.z/cp)end;return setmetatable({latitude=ds,longitude=dt,altitude=bo,bodyId=self.bodyId,systemId=self.planetarySystemId},dn)end;function dc:convertToWorldCoordinates(dr)local eb=cU(dr)and dq(dr)or dr;if eb.bodyId==0 then return vec3(eb.latitude,eb.longitude,eb.altitude)end;assert(cX(eb),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(eb.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(eb.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local ef=math.cos(eb.latitude)return self.center+(self.radius+eb.altitude)*vec3(ef*math.cos(eb.longitude),ef*math.sin(eb.longitude),math.sin(eb.latitude))end;function dc:getAltitude(dl)return(vec3(dl)-self.center):len()-self.radius end;function dc:getDistance(dl)return(vec3(dl)-self.center):len()end;function dc:getGravity(dl)local eg=self.center-vec3(dl)local eh=eg:len2()return self.GM/eh*eg/math.sqrt(eh)end;return setmetatable(PlanetaryReference,{__call=function(_,...)return dC(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function cU(cV)return type(cV)=='string'end;local function cS(cT)return type(cT)=='table'end;local function d4(d5,d6)if d5==0 then return math.abs(d6)<1e-09 end;if d6==0 then return math.abs(d5)<1e-09 end;return math.abs(d5-d6)<math.max(math.abs(d5),math.abs(d6))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bo)assert(self.body)local cp=bo+self.body.radius;if not d4(cp,0)then local orbit=math.sqrt(self.body.GM/cp)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(dr,velocity)assert(self.body)assert(cS(dr)or cU(dr))assert(cS(velocity))local bA=(cU(dr)or PlanetRef.isMapPosition(dr))and self.body:convertToWorldCoordinates(dr)or vec3(dr)local X=vec3(velocity)local ei=bA-self.body.center;local dZ=X:len2()local ej=ei:len()local ek=self.body.GM;local el=((dZ-ek/ej)*ei-ei:dot(X)*X)/ek;local d5=ek/(2*ek/ej-dZ)local em=el:len()local d_=el:normalize()local en=d5*(1-em)local eo=d5*(1+em)local ep=en*d_+self.body.center;local eq=em<=1 and-eo*d_+self.body.center or nil;local er=math.sqrt(d5*ek*(1-em*em))local es=eq and 2*math.pi*math.sqrt(d5^3/ek)local et=math.acos(el:dot(ei)/(em*ej))if ei:dot(X)<0 then et=-(et-2*math.pi)end;local eu=math.acos((math.cos(et)+em)/(1+em*math.cos(et)))local ev=eu;if ev<0 then ev=ev+2*math.pi end;local ew=ev-em*math.sin(ev)local ex=0;local ey=0;local ez=0;if es~=nil then ex=ew/(2*math.pi/es)ey=es-ex;ez=ey+es/2;if et-math.pi>0 then ey=ex;ez=ey+es/2 end;if ez>es then ez=ez-es end end;return{periapsis={position=ep,speed=er/en,circularOrbitSpeed=math.sqrt(ek/en),altitude=en-self.body.radius},apoapsis=eq and{position=eq,speed=er/eo,circularOrbitSpeed=math.sqrt(ek/eo),altitude=eo-self.body.radius},currentVelocity=X,currentPosition=bA,eccentricity=em,period=es,eccentricAnomaly=eu,meanAnomaly=ew,timeToPeriapsis=ey,timeToApoapsis=ez}end;local function eA(eB)local e9=PlanetRef.BodyParameters(eB.planetarySystemId,eB.bodyId,eB.radius,eB.center,eB.GM)return setmetatable({body=e9},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return eA(...)end})end;function Kinematics()local Kinematic={}local eC=30000000/3600;local eD=eC*eC;local eE=100;local function eF(X)return 1/math.sqrt(1-X*X/eD)end;function Kinematic.computeAccelerationTime(eG,eH,eI)local eJ=eC*math.asin(eG/eC)return(eC*math.asin(eI/eC)-eJ)/eH end;function Kinematic.computeDistanceAndTime(eG,eI,eK,eL,eM,eN)eM=eM or 0;eN=eN or 0;local eO=eG<=eI;local eP=eL*(eO and 1 or-1)/eK;local eQ=-eN/eK;local eR=eP+eQ;if eO and eR<=0 or not eO and eR>=0 then return-1,-1 end;local eS,eT=0,0;if eP~=0 and eM>0 then local eJ=math.asin(eG/eC)local eU=math.pi*(eP/2+eQ)local eV=eP*eM;local eW=eC*math.pi;local X=function(cT)local aK=(eU*cT-eV*math.sin(math.pi*cT/2/eM)+eW*eJ)/eW;local eX=math.tan(aK)return eC*eX/math.sqrt(eX*eX+1)end;local eY=eO and function(cV)return cV>=eI end or function(cV)return cV<=eI end;eT=2*eM;if eY(X(eT))then local eZ=0;while math.abs(eT-eZ)>0.5 do local cT=(eT+eZ)/2;if eY(X(cT))then eT=cT else eZ=cT end end end;local e_=eG;local f0=eT/eE;for f1=1,eE do local at=X(f1*f0)eS=eS+(at+e_)*f0/2;e_=at end;if eT<2*eM then return eS,eT end;eG=e_ end;local eJ=eC*math.asin(eG/eC)local f2=(eC*math.asin(eI/eC)-eJ)/eR;local f3=eD*math.cos(eJ/eC)/eR;local cp=f3-eD*math.cos((eR*f2+eJ)/eC)/eR;return cp+eS,f2+eT end;function Kinematic.computeTravelTime(eG,eH,cp)if cp==0 then return 0 end;if eH>0 then local eJ=eC*math.asin(eG/eC)local f3=eD*math.cos(eJ/eC)/eH;return(eC*math.acos(eH*(f3-cp)/eD)-eJ)/eH end;assert(eG>0,'Acceleration and initial speed are both zero.')return cp/eG end;function Kinematic.lorentz(X)return eF(X)end;return Kinematic end;PlanetaryReference=PlanetRef()galaxyReference=PlanetaryReference(Atlas())Kinematic=Kinematics()Kep=Keplers()function getDistanceDisplayString(cp)local f4=cp>100000;local Y=""if f4 then Y=round(cp/1000/200,1).." SU"elseif cp<1000 then Y=round(cp,1).." M"else Y=round(cp/1000,1).." KM"end;return Y end;function getDistanceDisplayString2(cp)local f4=cp>100000;local Y=""if f4 then Y=round(cp/1000/200,2).." SU"elseif cp<1000 then Y=round(cp,2).." M"else Y=round(cp/1000,2).." KM"end;return Y end;function getSpeedDisplayString(at)return a(round(at*3.6,0)+0.5).." km/h"end;function FormatTimeString(f5)local f6=a(f5/86400)local f7=a(f5/3600)local f8=a(f5/60%60)local f5=a(f5%60)if f5<0 or f7<0 or f8<0 then return"0s"end;if f6>0 then return f6 .."d "..f7 .."h "elseif f7>0 then return f7 .."h "..f8 .."m "elseif f8>0 then return f8 .."m "..f5 .."s"else return f5 .."s"end end;function getMagnitudeInDirection(bf,dQ)bf=vec3(bf)dQ=vec3(dQ):normalize()local Y=bf*dQ;return Y.x+Y.y+Y.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"AutopilotTargetPlanet=nil;return true end;local f9=AtlasOrdered[AutopilotTargetIndex].index;local fa=atlas[0][f9]if fa.center then AutopilotTargetName=fa.name;AutopilotTargetPlanet=galaxyReference[0][f9]AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)_,AutopilotEndSpeed=Kep(AutopilotTargetPlanet):escapeAndOrbitalSpeed(AutopilotTargetOrbit)AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autoilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"if CustomTarget~=nil then if unit.getAtmosphereDensity()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)==1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)==1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil;return true else AutopilotTargetPlanet=nil;AutopilotTargetName=nil;CustomTarget=fa end;return false end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local fb=LastMaxBrake/AutopilotTargetPlanet:getGravity(AutopilotTargetPlanet.center+vec3(0,0,1)*AutopilotTargetPlanet.radius):len()return fb end;function GetAutopilotTravelTime()if not Autopilot then AutopilotDistance=(AutopilotTargetPlanet.center-vec3(core.getConstructWorldPos())):len()end;local velocity=core.getWorldVelocity()local fc,fd=Kinematic.computeDistanceAndTime(vec3(velocity):len(),MaxGameVelocity,k(),Nav:maxForceForward(),warmup,0)local fe,ff;if not TurnBurn then fe,ff=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else fe,ff=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,fg;if not TurnBurn then _,fg=GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())else _,fg=GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())end;local fh=0;local fi=0;if AutopilotCruising then fi=Kinematic.computeTravelTime(vec3(velocity):len(),0,AutopilotDistance)elseif fe+fc<AutopilotDistance then fh=AutopilotDistance-(fe+fc)fi=Kinematic.computeTravelTime(8333.0556,0,fh)else local fj=(AutopilotDistance-fe)/fc;fc=AutopilotDistance-fe;fd=fd*fj end;if AutopilotBraking then return fg elseif AutopilotCruising then return fi+fg else return fd+ff+fi end end;function GetAutopilotBrakeDistanceAndTime(at)if f()==0 then refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(at,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else if LastMaxBrake and LastMaxBrake>0 then return Kinematic.computeDistanceAndTime(at,AutopilotEndSpeed,k(),0,0,LastMaxBrake-AutopilotPlanetGravity*k())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(at)refreshLastMaxBrake()return Kinematic.computeDistanceAndTime(at,AutopilotEndSpeed,k(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*k())end;function GetFlightStyle()local fk=Nav.axisCommandManager:getAxisCommandType(0)local bz="TRAVEL"if fk==1 then bz="CRUISE"end;if Autopilot then bz="AUTOPILOT"end;return bz end;function hoverDetectGround()local fl=-1;if vBooster then fl=vBooster.distance()elseif hover then fl=hover.distance()end;return fl end;function round(d1,fm)local fn=10^(fm or 0)return a(d1*fn+0.5)/fn end;function tablelength(fo)local fp=0;for _ in pairs(fo)do fp=fp+1 end;return fp end;function BeginProfile(fq)ProfileTimeStart=system.getTime()end;function EndProfile(fq)local fr=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+fr;ProfileCount=ProfileCount+1;if fr>ProfileTimeMax then ProfileTimeMax=fr end;if fr<ProfileTimeMin then ProfileTimeMin=fr end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local fs=ProfileTimeSum;local ft=ProfileTimeSum/ProfileCount;local fu=ProfileTimeMin;local fv=ProfileTimeMax;local fw=ProfileCount;system.print(string.format("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",fs,ft,fu,fv,fw))end;Animating=false;Animated=false;AddLocationsToAtlas()UpdateAutopilotTarget()collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local fx=unit.getAtmosphereDensity()if door and(fx>0 or fx==0 and CoreAltitude<10000)then for _,X in pairs(door)do X.activate()end end;if forcefield and(fx>0 or fx==0 and CoreAltitude<10000)then for _,X in pairs(forcefield)do X.activate()end end;if dbHud then if not WipedDatabank then for W,X in pairs(AutoVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;for W,X in pairs(SaveableVariables)do dbHud.setStringValue(X,json.encode(_G[X]))end;system.print("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(fy)if fy=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()Distance=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()if not TurnBurn then BrakeDistance,BrakeTime=GetAutopilotBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else BrakeDistance,BrakeTime=GetAutopilotTBBrakeDistanceAndTime(velMag)MaxBrakeDistance,MaxBrakeTime=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake Distance", "value": "'..getDistanceDisplayString(BrakeDistance)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(BrakeTime)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake Distance", "value": "'..getDistanceDisplayString(MaxBrakeDistance)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(MaxBrakeTime)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..string.format("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if unit.getAtmosphereDensity()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if unit.getAtmosphereDensity()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end else system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..CustomTarget.name..'", "unit":""}')Distance=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(Distance)..'", "unit":""}')system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)system.removeDataFromWidget(widgetMaxMassText,widgetMaxMass)system.removeDataFromWidget(widgetTravelTimeText,widgetTravelTime)end else HideInterplanetaryPanel()end;if warpdrive~=nil then if InEmergencyWarp then if json.decode(warpdrive.getData()).buttonMsg~="CANNOT WARP"then MsgText="EMERGENCY WARP IN 5 SECONDS - PRESS ALT-J to CANCEL"MsgTimer=5;unit.setTimer("emergencyWarpTick",5)InEmergencyWarp=false else MsgText="Emergency Warp Condition Met - Cannot Warp, will retry in 1 second\n"..json.decode(warpdrive.getData()).errorMsg;msgTick=1;InEmergencyWarp=false;unit.setTimer("reEmergencyWarp",1)end end;if json.decode(warpdrive.getData()).destination~="Unknown"and json.decode(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif fy=="oneSecond"then refreshLastMaxBrake(nil,true)updateDistance()if radar_1 and#radar_1.getEntries()>0 then local fz;fz=radar_1.getData():find('identifiedConstructs":%[%]')if HasSpaceRadar and EmergencyWarp then local am,cp=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if am~=nil and am~=""then if math.floor(cp)<EmergencyWarpDistance and NotTriedEmergencyWarp and json.decode(warpdrive.getData()).errorMsg~="PLANET TOO CLOSE"then InEmergencyWarp=true;NotTriedEmergencyWarp=false end end end;if fz==nil and perisPanelID==nil then Peris=1;ToggleRadarPanel()end;if fz~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;local fA=radar_1.getEntries()RadarMessage=string.format([[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: %i contacts</text>]],#fA)local fB={}for W,X in pairs(fA)do if radar_1.hasMatchingTransponder(X)==1 then fB[#fB+1]=X end end;if#fB>0 then local ae=15;RadarMessage=string.format([[%s<text class="pbright txtbig txtmid" x="1370" y="%s">Friendlies In Range</text>]],RadarMessage,ae)for W,X in pairs(fB)do ae=ae+20;RadarMessage=string.format([[%s<text class="pdim txtmid" x="1370" y="%s">%s</text>]],RadarMessage,ae,radar_1.getConstructName(X))end end elseif radar_1 then local fC;fC=radar_1.getData():find('worksInEnvironment":false')if fC then RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: Jammed</text>]]else RadarMessage=[[<text class="pbright txtbig txtmid" x="1770" y="330">Radar: No Contacts</text>]]end;if radarPanelID~=nil then Peris=0;ToggleRadarPanel()end end;local ap={}local bz=GetFlightStyle()DrawOdometer(ap,TotalDistanceTrip,TotalDistanceTravelled,bz,FlightTime)checkDamage(ap)LastOdometerOutput=table.concat(ap,"")collectgarbage("collect")elseif fy=="reEmergencyWarp"then if EmergencyWarp then NotTriedEmergencyWarp=true;InEmergencyWarp=true end;unit.stopTimer("reEmergencyWarp")elseif fy=="msgTick"then local ap={}DisplayMessage(ap,"empty")MsgText="empty"unit.stopTimer("msgTick")MsgTimer=3 elseif fy=="emergencyWarpTick"then if EmergencyWarp then MsgText="EMERGENCY WARP ACTIVATED"MsgTimer=5;warpdrive.activateWarp()warpdrive.show()showWarpWidget=true;EmergencyWarp=false end;unit.stopTimer("emergencyWarpTick")elseif fy=="animateTick"then Animated=true;Animating=false;SimulatedX=0;SimulatedY=0;unit.stopTimer("animateTick")elseif fy=="apTick"then local l=Nav.control.isRemoteControlled;YawInput2=0;RollInput2=0;PitchInput2=0;LastApsDiff=-1;velocity=vec3(core.getWorldVelocity())velMag=vec3(velocity):len()sys=galaxyReference[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=Kep(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),velocity)local fD=system.getMouseDeltaX()local fE=system.getMouseDeltaY()TargetGroundAltitude=Nav:getTargetGroundAltitude()local fF=velMag>8334;if not fF and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=fF;if BrakeIsOn then BrakeInput=1 else BrakeInput=0 end;CoreAltitude=core.getAltitude()if CoreAltitude==0 then CoreAltitude=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;local ap={}HUDPrologue(ap)if showHud then updateHud(ap)else DisplayOrbitScreen(ap)DrawWarnings(ap)end;HUDEpilogue(ap)ap[#ap+1]=[[<svg width="100%" height="100%" style="position:absolute;top:0;left:0"  viewBox="0 0 2560 1440">]]if MsgText~="empty"then DisplayMessage(ap,MsgText)end;if l()==0 and userControlScheme=="Virtual Joystick"then DrawDeadZone(ap)end;if l()==1 and screen_1 and screen_1.getMouseY()~=-1 then SimulatedX=screen_1.getMouseX()*2560;SimulatedY=screen_1.getMouseY()*1440;SetButtonContains()DrawButtons(ap)if screen_1.getMouseState()==1 then CheckButtons()end;ap[#ap+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)elseif system.isViewLocked()==0 then if l()==1 and HoldingCtrl then if not Animating then SimulatedX=SimulatedX+fD;SimulatedY=SimulatedY+fE end;SetButtonContains()DrawButtons(ap)if not Animating and not Animated then local fG=table.concat(ap,"")ap={}ap[#ap+1]="<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%' height='100%' position='absolute' top='0' left='0'><rect width='100%' height='100%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ap[#ap+1]=GalaxyMapHTML;ap[#ap+1]=fG;ap[#ap+1]="</body>"Animating=true;ap[#ap+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(ap,"")system.setScreen(content)elseif Animated then local fG=table.concat(ap,"")ap={}ap[#ap+1]="<body style='background-color:rgb(6,5,26)'><svg width='50%' height='50%' style='position:absolute;top:30%;left:25%' viewbox='0 0 1920 1080'>"ap[#ap+1]=GalaxyMapHTML;ap[#ap+1]=fG;ap[#ap+1]="</body>"end;if not Animating then ap[#ap+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end else CheckButtons()SimulatedX=0;SimulatedY=0 end else SimulatedX=SimulatedX+fD;SimulatedY=SimulatedY+fE;Distance=math.sqrt(SimulatedX*SimulatedX+SimulatedY*SimulatedY)if not HoldingCtrl and l()==0 then if userControlScheme=="Virtual Joystick"then if SimulatedX>0 and SimulatedX>DeadZone then YawInput2=YawInput2-(SimulatedX-DeadZone)*MouseXSensitivity elseif SimulatedX<0 and SimulatedX<DeadZone*-1 then YawInput2=YawInput2-(SimulatedX+DeadZone)*MouseXSensitivity else YawInput2=0 end;if SimulatedY>0 and SimulatedY>DeadZone then PitchInput2=PitchInput2-(SimulatedY-DeadZone)*MouseYSensitivity elseif SimulatedY<0 and SimulatedY<DeadZone*-1 then PitchInput2=PitchInput2-(SimulatedY+DeadZone)*MouseYSensitivity else PitchInput2=0 end elseif userControlScheme=="Mouse"then SimulatedX=0;SimulatedY=0;PitchInput2=(-utils.smoothstep(fE,-100,100)+0.5)*2*MousePitchFactor;YawInput2=(-utils.smoothstep(fD,-100,100)+0.5)*2*MouseYawFactor else SimulatedX=0;SimulatedY=0 end;CheckButtons()if Distance>DeadZone then DrawCursorLine(ap)end else SetButtonContains()DrawButtons(ap)end;ap[#ap+1]=string.format([[<g transform="translate(1280 720)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],SimulatedX,SimulatedY)end;ap[#ap+1]=[[</svg></body>]]content=table.concat(ap,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end;if ProgradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end end;if RetrogradeIsOn then if velMag>MinAutopilotSpeed then AlignToWorldVector(-vec3(velocity))end end;if Autopilot and unit.getAtmosphereDensity()==0 then local fe,ff;if not TurnBurn then fe,ff=GetAutopilotBrakeDistanceAndTime(velMag)else fe,ff=GetAutopilotTBBrakeDistanceAndTime(velMag)end;fe=fe;ff=ff;local fH=AutopilotTargetCoords;if orbit.apoapsis==nil and velMag>300 and AutopilotAccelerating then local fI=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(velocity):normalize()local fJ=getMagnitudeInDirection(fI,AutopilotShipUp)local fK=getMagnitudeInDirection(fI,AutopilotShipRight)local fL=-fK*AutopilotDistance*velMag*TrajectoryAlignmentStrength;local fM=-fJ*AutopilotDistance*velMag*TrajectoryAlignmentStrength;fH=AutopilotTargetCoords+-fL*vec3(AutopilotShipRight)+-fM*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(fH)-vec3(core.getConstructWorldPos())):len()local fN=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "Distance", "value": "'..getDistanceDisplayString(fN)..'", "unit":""}')local fO=true;local fP=(AutopilotTargetPlanet.center-(vec3(core.getConstructWorldPos())+vec3(velocity):normalize()*AutopilotDistance)):len()-AutopilotTargetPlanet.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(fP)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then fO=AlignToWorldVector((fH-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then fO=AlignToWorldVector(-vec3(velocity):normalize())end;if AutopilotAccelerating then if not fO or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(velocity)<0 and velMag>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false elseif not APThrottleSet then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(fP-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and APThrottleSet then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end;if AutopilotDistance<=fe then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end elseif AutopilotBraking then BrakeIsOn=true;BrakeInput=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>LastEccentricity or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"DisplayMessage(ap,"Autopilot completed, orbit established")BrakeInput=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)APThrottleSet=false end end elseif AutopilotCruising then if AutopilotDistance<=fe then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if fO then if not AutopilotRealigned then AutopilotTargetCoords=vec3(AutopilotTargetPlanet.center)+(AutopilotTargetOrbit+AutopilotTargetPlanet.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotRealigned=true;AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()elseif fO then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not APThrottleSet then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)APThrottleSet=true;BrakeIsOn=false end end end end end;if FollowMode then autoRoll=true;local fQ=0;local bA=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local fR=bA-vec3(core.getConstructWorldPos())local fS=vec3(fR):project_on(vec3(core.getConstructWorldOrientationForward())):len()local fT=vec3(fR):project_on(vec3(core.getConstructWorldOrientationRight())):len()local cp=math.sqrt(fS*fS+fT*fT)AlignToWorldVector(fR:normalize())local fU=40;local fV=cp<fU;local fW=100;local fX=utils.clamp((cp-fU)/2,10,fW)PitchInput2=0;local fO=math.abs(YawInput2)<0.1;if fO and velMag<fX and not fV then BrakeIsOn=false;fQ=-10 else BrakeIsOn=true;fQ=0 end;local bq=vec3(core.getConstructWorldOrientationForward())local br=vec3(core.getConstructWorldOrientationRight())local bp=vec3(core.getWorldVertical())local aI=getPitch(bp,bq,br)local fY=1.0;if math.abs(fQ-aI)>fY then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(fQ-aI)local fZ=pitchPID:get()PitchInput2=fZ end end;local bR=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget then local bo=CoreAltitude;local f_=HoldAltitude-bo;local g0=500+velMag;local fQ=(utils.smoothstep(f_,-g0,g0)-0.5)*2*MaxPitch;if not AltitudeHold then fQ=0 end;autoRoll=true;if Reentry then local g1=ReentrySpeed;if CoreAltitude>15000 and not ReentryMode then g1=g1*math.floor(CoreAltitude/10000)end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=g1 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,g1)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not ReentryMode then fQ=-80;if unit.getAtmosphereDensity()>0.02 then MsgText="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;fQ=0 end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then ReentryMode=false;Reentry=false end end;local g2=PitchInput2;if velMag>MinAutopilotSpeed then AlignToWorldVector(vec3(velocity))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local bh=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(bh)local g3=bh:len()-bh:project_on(bR):len()local a8=json.decode(unit.getData()).maxBrake;local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;local g4=velocity:len()-math.abs(bS)local g5=vec3(core.getWorldAirFrictionAcceleration())if a8~=nil then LastMaxBrake=a8;BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(g4,0,core.getConstructMass(),0,0,a8+(g5:len()-g5:project_on(bR):len())*core.getConstructMass())else BrakeDistance,BrakeTime=Kinematic.computeDistanceAndTime(g4,0,core.getConstructMass(),0,0,LastMaxBrake+vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass())end;StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if g3<=BrakeDistance then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()VectorToTarget=true end;if StrongBrakes then BrakeIsOn=true else VectorToTarget=false;BrakeLanding=true end elseif not AutoTakeoff then BrakeIsOn=false end;if LastTargetDistance~=nil and g3>LastTargetDistance and not AltitudeHold and not AutoTakeoff then BrakeLanding=true;VectorToTarget=false end;LastTargetDistance=g3 end;PitchInput2=g2;local bq=vec3(core.getConstructWorldOrientationForward())local br=vec3(core.getConstructWorldOrientationRight())local bp=vec3(core.getWorldVertical())local fl=-1;local aI=getPitch(bp,bq,br)local fY=0.1;if BrakeLanding then fQ=0;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)local bS=velocity.x*bR.x+velocity.y*bR.y+velocity.z*bR.z;fl=hoverDetectGround()if fl>-1 then if math.abs(fQ-aI)<fY then autoRoll=autoRollPreference;if velMag<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)UpAmount=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and velocity:normalize():dot(-bR)<0.99 then BrakeIsOn=true elseif bS<-brakeLandingRate then BrakeIsOn=true else BrakeIsOn=false end end;if AutoTakeoff then if fQ<20 then AutoTakeoff=false;if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end end end;if math.abs(fQ-aI)>fY then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(fQ-aI)local fZ=pitchPID:get()PitchInput2=PitchInput2+fZ end end;LastEccentricity=orbit.eccentricity;if antigrav and CoreAltitude<200000 then if antigrav.getState()==1 then local g6=antigrav.getBaseAltitude()if AntigravTargetAltitude==nil then AntigravTargetAltitude=1000 end;local g7=unit.getThrottle()if Nav.axisCommandManager:getAxisCommandType(0)==1 then g7=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)end;local g8=math.abs(CoreAltitude-g6)if g7>-1 and g7<1 and g8>10 and g8<501 then if CoreAltitude>antigrav.getBaseAltitude()and AntigravTargetAltitude>CoreAltitude or CoreAltitude<antigrav.getBaseAltitude()and AntigravTargetAltitude<CoreAltitude then BrakeIsOn=true else BrakeIsOn=false end end;desiredBaseAltitude=AntigravTargetAltitude else if AntigravTargetAltitude==nil then desiredBaseAltitude=CoreAltitude else desiredBaseAltitude=AntigravTargetAltitude end end end end end;function script.onFlush()local g9=2;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)g9=math.max(g9,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local ga=utils.clamp(PitchInput+PitchInput2+system.getControlDeviceForwardInput(),-1,1)local gb=utils.clamp(RollInput+RollInput2+system.getControlDeviceYawInput(),-1,1)local gc=utils.clamp(YawInput+YawInput2-system.getControlDeviceLeftRightInput(),-1,1)local gd=BrakeInput;local ge=vec3(core.getWorldVertical())local gf=vec3(core.getConstructWorldOrientationUp())local gg=vec3(core.getConstructWorldOrientationForward())local gh=vec3(core.getConstructWorldOrientationRight())local gi=vec3(core.getWorldVelocity())local gj=vec3(core.getWorldVelocity()):normalize()local gk=getRoll(ge,gg,gh)local gl=math.abs(gk)local gm=utils.sign(gk)local f=unit.getAtmosphereDensity()local gn=vec3(core.getWorldAngularVelocity())local go=ga*pitchSpeedFactor*gh+gb*rollSpeedFactor*gg+gc*yawSpeedFactor*gf;if ge:len()>0.01 and f>0.0 then local gp=1.0;if autoRoll==true and gl>gp and gb==0 then local gq=utils.clamp(0,gl-30,gl+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(gq-gk)local gr=rollPID:get()go=go+gr*gg end;local gs=20.0;if turnAssist==true and gl>gs and ga==0 and gc==0 then local gt=turnAssistFactor*0.1;local gu=turnAssistFactor*0.025;local gv=(gl-gs)/(180-gs)*180;local gw=0;if gv<90 then gw=gv/90 elseif gv<180 then gw=(180-gv)/90 end;gw=gw*gw;local gx=-gm*gu*(1.0-gw)local gy=gt*gw;go=go+gy*gh+gx*gf end end;local gz=1;local gA=0;local gB=1;local gC=g9*(go-gn)local gD=vec3(core.getWorldAirFrictionAngularAcceleration())gC=gC-gD;Nav:setEngineTorqueCommand('torque',gC,gz,'airfoil','','',gB)local gE=-gd*(brakeSpeedFactor*gi+brakeFlatFactor*gj)Nav:setEngineForceCommand('brake',gE)local gF=''local gG=vec3()local gH=false;local gI='thrust analog longitudinal'local gJ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if gJ==axisCommandType.byThrottle then local gK=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gI,axisCommandId.longitudinal)Nav:setEngineForceCommand(gI,gK,gz)elseif gJ==axisCommandType.byTargetSpeed then local gK=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)gF=gF..' , '..gI;gG=gG+gK;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then gH=true end end;local gL='thrust analog lateral'local gM=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if gM==axisCommandType.byThrottle then local gN=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gL,axisCommandId.lateral)Nav:setEngineForceCommand(gL,gN,gz)elseif gM==axisCommandType.byTargetSpeed then local gO=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)gF=gF..' , '..gL;gG=gG+gO end;local gP='thrust analog vertical'local gQ=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if gQ==axisCommandType.byThrottle then local gR=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(gP,axisCommandId.vertical)if UpAmount~=0 or BrakeLanding then Nav:setEngineForceCommand(gP,gR,gz,'airfoil','ground','',gB)else Nav:setEngineForceCommand(gP,vec3(),gz)Nav:setEngineForceCommand('airfoil vertical',gR,gz,'airfoil','','',gB)Nav:setEngineForceCommand('ground vertical',gR,gz,'ground','','',gB)end elseif gQ==axisCommandType.byTargetSpeed then local gS=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)gF=gF..' , '..gP;gG=gG+gS end;if gG:len()>constants.epsilon then if BrakeInput~=0 or gH or math.abs(gj:dot(gg))<0.95 then gF=gF..', brake'end;Nav:setEngineForceCommand(gF,gG,gA,'','','',gB)end;Nav:setBoosterCommand('rocket_engine')if IsBoosting then local at=vec3(core.getVelocity()):len()local gT=unit.setEngineThrust;local gU=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local g7=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if at*3.6>g7*(1-gU)then gT('rocket_engine',0)elseif IsBoosting then gT('rocket_engine',1)end else local gV=unit.getThrottle()local fX=gV/100;if f==0 then fX=fX*MaxGameVelocity;if at>=fX*(1-gU)then gT('rocket_engine',0)elseif IsBoosting then gT('rocket_engine',1)end else fX=fX*1050/3.6;if at>=fX*(1-gU)then gT('rocket_engine',0)elseif IsBoosting then gT('rocket_engine',1)end end end end end;function script.onUpdate()if not SetupComplete then local _,Y=coroutine.resume(beginSetup)if Y then SetupComplete=true end else Nav:update()if not Animating and content~=LastContent then system.setScreen(content)end;LastContent=content end;if antigrav and desiredBaseAltitude~=nil and AntigravTargetAltitude~=desiredBaseAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)desiredBaseAltitude=AntigravTargetAltitude end end;function script.onActionStart(gW)if gW=="gear"then GearExtended=not GearExtended;if GearExtended then VectorToTarget=false;if(vBooster or hover)and(unit.getAtmosphereDensity()>0 or CoreAltitude<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*core.getConstructMass()<LastMaxBrake;if not StrongBrakes and velMag>MinAutopilotSpeed then MsgText="WARNING: Insufficient Brakes - Attempting landing anyway"end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;autoRoll=true;GearExtended=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)else Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif gW=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif gW=="forward"then PitchInput=PitchInput-1 elseif gW=="backward"then PitchInput=PitchInput+1 elseif gW=="left"then RollInput=RollInput-1 elseif gW=="right"then RollInput=RollInput+1 elseif gW=="yawright"then YawInput=YawInput-1 elseif gW=="yawleft"then YawInput=YawInput+1 elseif gW=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif gW=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif gW=="up"then UpAmount=UpAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif gW=="down"then UpAmount=UpAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif gW=="groundaltitudeup"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif gW=="groundaltitudedown"then OldButtonMod=HoldAltitudeButtonModifier;OldAntiMod=AntiGravButtonModifier;if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif gW=="option1"then IncrementAutopilotTargetIndex()ToggleView=false elseif gW=="option2"then DecrementAutopilotTargetIndex()ToggleView=false elseif gW=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;ToggleView=false;ToggleWidgets()elseif gW=="option4"then ToggleAutopilot()ToggleView=false elseif gW=="option5"then ToggleTurnBurn()ToggleView=false elseif gW=="option6"then ToggleAltitudeHold()ToggleView=false elseif gW=="option7"then wipeSaveVariables()ToggleView=false elseif gW=="option8"then ToggleFollowMode()ToggleView=false elseif gW=="option9"then if gyro~=nil then gyro.toggle()GyroIsOn=gyro.getState()==1 end;ToggleView=false elseif gW=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=true;Animated=false;Animating=false end elseif gW=="brake"then if brakeToggle then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif gW=="lalt"then if Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(1)end elseif gW=="booster"then IsBoosting=not IsBoosting;if IsBoosting then unit.setEngineThrust('rocket_engine',1)else unit.setEngineThrust('rocket_engine',0)end elseif gW=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif gW=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif gW=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif gW=="antigravity"then if antigrav~=nil then ToggleAntigrav()end elseif gW=="warp"then if warpdrive~=nil then if not InEmergencyWarp then if showWarpWidget then warpdrive.hide()showWarpWidget=false else warpdrive.show()showWarpWidget=true end;if json.decode(warpdrive.getData()).buttonMsg=="CANNOT WARP"then MsgText=json.decode(warpdrive.getData()).errorMsg else warpdrive.activateWarp()warpdrive.show()showWarpWidget=true end else unit.stopTimer("emergencyWarpTick")InEmergencyWarp=false;EmergencyWarp=false;MsgText="Emergency Warp Cancelled"end end end end;function script.onActionStop(gW)if gW=="forward"then PitchInput=PitchInput+1 elseif gW=="backward"then PitchInput=PitchInput-1 elseif gW=="left"then RollInput=RollInput+1 elseif gW=="right"then RollInput=RollInput-1 elseif gW=="yawright"then YawInput=YawInput+1 elseif gW=="yawleft"then YawInput=YawInput-1 elseif gW=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif gW=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif gW=="up"then UpAmount=UpAmount-1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gW=="down"then UpAmount=UpAmount+1;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif gW=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gW=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then AntiGravButtonModifier=OldAntiMod elseif AltitudeHold then HoldAltitudeButtonModifier=OldButtonMod end;ToggleView=false elseif gW=="lshift"then if system.isViewLocked()==1 then HoldingCtrl=false;SimulatedX=0;SimulatedY=0;system.lockView(PrevViewLock)elseif Nav.control.isRemoteControlled()==1 and ShiftShowsRemoteButtons then HoldingCtrl=false;Animated=false;Animating=false end elseif gW=="brake"then if not brakeToggle then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif gW=="lalt"then if Nav.control.isRemoteControlled()==0 and freeLookToggle then if ToggleView then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else ToggleView=true end elseif Nav.control.isRemoteControlled()==0 and not freeLookToggle and userControlScheme=="Keyboard"then system.lockView(0)end end end;function script.onActionLoop(gW)if gW=="groundaltitudeup"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude+AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif gW=="groundaltitudedown"then if antigrav and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then AntigravTargetAltitude=AntigravTargetAltitude-AntiGravButtonModifier;AntiGravButtonModifier=AntiGravButtonModifier*1.05;BrakeIsOn=false;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-HoldAltitudeButtonModifier;HoldAltitudeButtonModifier=HoldAltitudeButtonModifier*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif gW=="speedup"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif gW=="speeddown"then if not HoldingCtrl then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function DisplayMessage(ap,gX)if gX~="empty"then ap[#ap+1]=[[<text class="msg" x="50%%" y="310" >]]for gY in string.gmatch(gX,"([^\n]+)")do ap[#ap+1]=string.format([[<tspan x="50%%" dy="35">%s</tspan>]],gY)end;ap[#ap+1]=[[</text>]]end;if MsgTimer~=0 then unit.setTimer("msgTick",MsgTimer)MsgTimer=0 end end;function updateDistance()local a3=system.getTime()local velocity=vec3(core.getWorldVelocity())local bx=vec3(velocity):len()local gZ=a3-LastTravelTime;if bx>1.38889 then bx=bx/1000;local g_=bx*(a3-LastTravelTime)TotalDistanceTravelled=TotalDistanceTravelled+g_;TotalDistanceTrip=TotalDistanceTrip+g_ end;FlightTime=FlightTime+gZ;TotalFlightTime=TotalFlightTime+gZ;LastTravelTime=a3 end;function updateMass()local h0=0;for W in pairs(ElementsID)do h0=h0+core.getElementMassById(ElementsID[W])end;return h0 end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
