name: ButtonsHud - Dimencia and Archaegeo v4.93 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
    select: manual
  telemeter:
    class: TelemeterUnit
    select: manual
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  switch:
    class: ManualSwitchUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        useTheseSettings = false --export: (Default: false) Toggle on to use the below preferences.  Toggle off to use saved preferences.  Preferences will save regardless when exiting seat. 
        freeLookToggle = true --export: (Default: true) Set to false for vanilla DU free look behavior.
        BrakeToggleDefault = true --export: (Default: true) Whether your brake toggle is on/off by default. Can be adjusted in the button menu.  Of is vanilla DU brakes.
        RemoteFreeze = false --export: (Default: false) Whether or not to freeze you when using a remote controller.  Breaks some things, only freeze on surfboards
        RemoteHud = false --export: (Default: false) Whether you want full HUD while in remote mode, experimental, might not look right.
        brightHud = false --export: (Default: false) Enable to prevent hud dimming when in freelook.
        VanillaRockets = false --export: (Default: false) If on, rockets behave like vanilla
        InvertMouse = false --export: (Default: false) If true, then when controlling flight mouse Y axis is inverted (pushing up noses plane down)  Does not affect selecting buttons or camera.
        userControlScheme = "virtual joystick" --export: (Default: "virtual joystick") Set to "virtual joystick", "mouse", or "keyboard"
        ResolutionX = 1920 --export: (Default: 1920) Does not need to be set to same as game resolution.  You can set 1920 on a 2560 to get larger resolution
        ResolutionY = 1080 --export: (Default: 1080) Does not need to be set to same as game resolution.  You can set 1080 on a 1440 to get larger resolution
        PrimaryR = 130 --export: (Default: 130) Primary HUD color
        PrimaryG = 224 --export: (Default: 224) Primary HUD color
        PrimaryB = 255 --export: (Default: 255) Primary HUD color
        centerX = 960 --export: (Default: 960) X postion of Artifical Horizon (KSP Navball), Default 960. Use centerX=700 and centerY=880 for lower left placement.
        centerY = 540 --export: (Default: 540) Y postion of Artifical Horizon (KSP Navball), Default 540. Use centerX=700 and centerY=880 for lower left placement. 
        throtPosX = 1300 --export: (Default: 1300) X position of Throttle Indicator, default 1300 to put it to right of default AH centerX parameter.
        throtPosY = 540 --export: (Default: 540) Y position of Throttle indicator, default is 540 to place it centered on default AH centerY parameter.
        vSpdMeterX = 1525  --export: (Default: 1525) X postion of Vertical Speed Meter.  Default 1525 (use 1920x1080, it will scale)
        vSpdMeterY = 250 --export: (Default: 250) Y postion of Vertical Speed Meter.  Default 250 (use 1920x1080, it will scale)
        altMeterX = 550  --export: (Default: 550) X postion of Altimeter.  Default 550 (use 1920x1080, it will scale)
        altMeterY = 540 --export: (Default: 540) Y postion of Altimeter.  Default 500 (use 1920x1080, it will scale)
        fuelX = 100 --export: (Default: 100) X position of fuel tanks, default is 100 for left side, set both fuelX and fuelY to 0 to hide fuel
        fuelY = 350 --export: (Default: 350) Y position of fuel tanks, default 350 for left side, set both fuelX and fuelY to 0 to hide fuel
        circleRad = 400 --export: (Default: 400) The size of the artifical horizon circle, recommended minimum 100, maximum 400.  Looks different > 200. Set to 0 to remove.
        DeadZone = 50 --export: (Default: 50) Number of pixels of deadzone at the center of the screen
        DisplayOrbit = true --export: (Default: true) Show Orbit display when valid or not.  May be toggled with shift Buttons
        OrbitMapSize = 250 --export: (Default: 250) Size of the orbit map, make sure it is divisible by 4
        OrbitMapX = 75 --export: (Default: 75) X postion of Orbit Display Disabled
        OrbitMapY = 0 --export: (Default: 0)  Y position of Orbit Display
        showHud = true --export: (Default: true) Uncheck to hide the HUD and only use autopilot features via ALT+# keys.
        ShowOdometer = true --export: (Default: true) Uncheck to hide the odometer panel up top.
        hideHudOnToggleWidgets = true --export: (Default: true) Uncheck to keep showing HUD when you toggle on the widgets via ALT+3.
        ShiftShowsRemoteButtons = true --export: (Default: true) Whether or not pressing Shift in remote controller mode shows you the buttons (otherwise no access to them)
        StallAngle = 35 --export: (Default: 35) Determines how much Autopilot is allowed to make you yaw/pitch in atmosphere.  Also gives a stall warning when not autopilot.  (default 35, higher = more tolerance for yaw/pitch/roll)
        speedChangeLarge = 5 --export: (Default: 5) The speed change that occurs when you tap speed up/down, default is 5 (25% throttle change). 
        speedChangeSmall = 1 --export: (Default: 1) the speed change that occurs while you hold speed up/down, default is 1 (5% throttle change).
        brakeLandingRate = 30 --export: (Default: 30) Max loss of altitude speed in m/s when doing a brake landing, default 30.  This is to prevent "bouncing" as hover/boosters catch you.  Do not use negative number.
        MaxPitch = 30 --export: (Default: 30) Maximum allowed pitch during takeoff and altitude changes while in altitude hold.  Default is 20 deg.  You can set higher or lower depending on your ships capabilities.
        ReentrySpeed = 1050 --export: (Default: 1050) Target re-entry speed once in atmosphere in km/h. 
        AtmoSpeedLimit = 1050 --export: (Default: 1050) Speed limit in Atmosphere in km/h.  If you exceed this limit the ship will attempt to break till below this limit.
        SpaceSpeedLimit = 30000 --export: (Default: 30000) Space speed limit in KM/H.  If you hit this speed but are not in active autopilot, engines will turn off.
        ReentryAltitude = 2500 --export: (Default: 2500) Target alititude when using re-entry.
        AutoTakeoffAltitude = 1000 --export: (Default: 1000) How high above your ground starting position AutoTakeoff tries to put you
        TargetHoverHeight = 50 --export: (Default: 50) Hover height when retracting landing gear
        LandingGearGroundHeight = 0 --export: (Default: 0) Set to AGL-1 when on ground (or 0)
        MaxGameVelocity = 8333.00 --export: (Default: 8333.00) Max speed for your autopilot in m/s, do not go above 8333.055 (30000 km/hr), can be reduced to safe fuel, use 6944.4444 for 25000km/hr
        AutopilotTargetOrbit = 50000 --export: (Default: 50000) How far you want the orbit to be from the planet in m.  200,000 = 1SU (Default 50000)
        AutopilotInterplanetaryThrottle = 1.0 --export: (Default: 1.0) How much throttle, 0.0 to 1.0, you want it to use when in autopilot to another planet to reach MaxGameVelocity
        warmup = 32 --export: (Default: 32) How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
        MouseYSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        MouseXSensitivity = 0.003 --export: (Default: 0.003) For virtual joystick only
        autoRollPreference = false --export: (Default: false) [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        autoRollFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        rollSpeedFactor = 1.5 --export: (Default: 1.5) This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        turnAssist = true --export: (Default: true) [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        turnAssistFactor = 2 --export: (Default: 2) [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        TrajectoryAlignmentStrength = 0.002 --export: (Default: 0.002) How strongly AP tries to align your velocity vector to the target when not in orbit, recommend 0.002
        torqueFactor = 2 --export: (Default: 2) Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        pitchSpeedFactor = 0.8 --export: (Default: 0.8) For keyboard control
        yawSpeedFactor = 1 --export: (Default: 1) For keyboard control
        brakeSpeedFactor = 3 --export: (Default: 3) When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        brakeFlatFactor = 1 --export: (Default: 1) When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        DampingMultiplier = 40 --export: (Default: 40) How strongly autopilot dampens when nearing the correct orientation
        fuelTankHandlingAtmo = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingSpace = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        fuelTankHandlingRocket = 0 --export: (Default: 0) For accurate estimates, set this to the fuel tank handling level of the person who placed the element. Ignored for slotted tanks.
        ContainerOptimization = 0 --export: (Default: 0) For accurate estimates, set this to the Container Optimization level of the person who placed the tanks.  Ignored for slotted tanks.
        FuelTankOptimization = 0 --export: (Default: 0) For accurate unslotted fuel tank calculation, set this to the fuel tank optimization skill level of the person who placed the tank.  Ignored for slotted tanks.
        ExtraLongitudeTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "forward faster major"  These will be added to the engines that are control by longitude.
        ExtraLateralTags = "none" --export: (Default: "none") Enter any extra lateral tags you use inside '' seperated by space, i.e. "left right"  These will be added to the engines that are control by lateral.
        ExtraVerticalTags = "none" --export: (Default: "none") Enter any extra longitudinal tags you use inside '' seperated by space, i.e. "up down"  These will be added to the engines that are control by vertical.
        ExternalAGG = false --export: (Default: false) Toggle On if using an external AGG system.  If on will prevent this HUD from doing anything with AGG.
        UseSatNav = false --export: (Default: false) Toggle on if using Trog SatNav script.  This will provide SatNav support.
        apTickRate = 0.0166667 --export: (Default: 0.0166667) Set the Tick Rate for your autopilot features.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  
        hudTickRate = 0.0666667 --export: (Default: 0.0666667) Set the tick rate for your HUD. Default is 4 times slower than apTickRate
        Nav=Navigator.new(system,core,unit)script={}BrakeToggleStatus=BrakeToggleDefault;BrakeIsOn=false;RetrogradeIsOn=false;ProgradeIsOn=false;Autopilot=false;TurnBurn=false;AltitudeHold=false;BrakeLanding=false;AutoTakeoff=false;Reentry=false;HoldAltitude=1000;AutopilotAccelerating=false;AutopilotRealigned=false;AutopilotBraking=false;AutopilotCruising=false;AutopilotEndSpeed=0;AutopilotStatus="Aligning"AutopilotPlanetGravity=0;PrevViewLock=1;AutopilotTargetName="None"AutopilotTargetCoords=nil;AutopilotTargetIndex=0;GearExtended=nil;TotalDistanceTravelled=0.0;TotalFlightTime=0;SavedLocations={}VectorToTarget=false;LocationIndex=0;LastMaxBrake=0;LockPitch=nil;LastMaxBrakeInAtmo=0;AntigravTargetAltitude=core.getAltitude()LastStartTime=0;SpaceTarget=false;local a={"userControlScheme","AutopilotTargetOrbit","apTickRate","freeLookToggle","turnAssist","PrimaryR","PrimaryG","PrimaryB","warmup","DeadZone","circleRad","MouseXSensitivity","MouseYSensitivity","MaxGameVelocity","showHud","autoRollPreference","InvertMouse","pitchSpeedFactor","yawSpeedFactor","rollSpeedFactor","brakeSpeedFactor","brakeFlatFactor","autoRollFactor","turnAssistFactor","torqueFactor","AutoTakeoffAltitude","TargetHoverHeight","AutopilotInterplanetaryThrottle","hideHudOnToggleWidgets","DampingMultiplier","fuelTankHandlingAtmo","fuelTankHandlingSpace","fuelTankHandlingRocket","RemoteFreeze","hudTickRate","speedChangeLarge","speedChangeSmall","brightHud","brakeLandingRate","MaxPitch","ReentrySpeed","AtmoSpeedLimit","ReentryAltitude","centerX","centerY","SpaceSpeedLimit","vSpdMeterX","vSpdMeterY","altMeterX","altMeterY","fuelX","fuelY","LandingGearGroundHeight","TrajectoryAlignmentStrength","RemoteHud","StallAngle","ResolutionX","ResolutionY","UseSatNav","FuelTankOptimization","ContainerOptimization","ExtraLongitudeTags","ExtraLateralTags","ExtraVerticalTags","OrbitMapSize","OrbitMapX","OrbitMapY","DisplayOrbit"}local b={"SpaceTarget","BrakeToggleStatus","BrakeIsOn","RetrogradeIsOn","ProgradeIsOn","Autopilot","TurnBurn","AltitudeHold","BrakeLanding","Reentry","AutoTakeoff","HoldAltitude","AutopilotAccelerating","AutopilotBraking","AutopilotCruising","AutopilotRealigned","AutopilotEndSpeed","AutopilotStatus","AutopilotPlanetGravity","PrevViewLock","AutopilotTargetName","AutopilotTargetCoords","AutopilotTargetIndex","TotalDistanceTravelled","TotalFlightTime","SavedLocations","VectorToTarget","LocationIndex","LastMaxBrake","LockPitch","LastMaxBrakeInAtmo","AntigravTargetAltitude","LastStartTime"}local c=system.print;local d=math.floor;local e=string.format;local f=json.decode;local g=json.encode;local h=core.getElementMaxHitPointsById;local j=unit.getAtmosphereDensity;local k=core.getElementHitPointsById;local l=core.getElementTypeById;local m=core.getElementMassById;local n=core.getConstructMass;local o=Nav.control.isRemoteControlled;function round(p,q)local r=10^(q or 0)return d(p*r+0.5)/r end;local s=round(ResolutionX/2,0)local t=round(ResolutionY/2,0)local u=false;local v=true;local w=55;local x=false;local y=1;local z=1;local A=false;local B=0;local C=0;local D=0;local E=0;local F=0;local G=0;local H=0;local I=false;local J=false;local K="empty"local L=1;local M=5;local N=5;local O=false;local P,Q=0;local R,S=0;local T=false;local U=false;local V=nil;local W=0;local X=0;local Y=false;local Z=0;local a0=0;local a1=0;local a2=3;local a3=0;local a4=""local a5=""local a6=0;local a7=false;local a8=false;local a9=false;local aa=-1;local ab=false;local ac=""local ad=j()>0;local ae=core.getAltitude()local af=core.getElementIdList()local ag=system.getTime()local ah=nil;local ai=false;local aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]local ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]local al={}local am=0;local an=0;local ao=""local ap=true;local aq={}local ar=1;local as=0.001;local at=ResolutionX;local au=ResolutionY;local av=nil;local aw=nil;local ax=nil;local ay=nil;local az=false;local aA=false;local aB=0;local aC=nil;local aD={}local aE={}local aF={}local aG=0;local aH=false;local aI={}local aJ={}local aK=d(1/apTickRate)*2;local aL={}local aM={}local aN={}local aO={}local aP=false;local aQ=16;local aR=0;local aS=nil;local aT=""local aU=nil;local aV=nil;local aW=nil;local aX=nil;local aY=nil;local aZ=nil;local a_=nil;local b0=false;local b1=false;local b2=autoRollPreference;local b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())local b4=vec3(core.getWorldVelocity())local b5=vec3(b4):len()local b6=math.cos(StallAngle*constants.deg2rad)local b7=LandingGearGroundHeight;local b8=system.getMouseDeltaX()local b9=system.getMouseDeltaY()function LoadVariables()if dbHud_1 then local ba=dbHud_1.hasKey;if not useTheseSettings then for bb,bc in pairs(a)do if ba(bc)then local bd=f(dbHud_1.getStringValue(bc))if bd~=nil then c(bc.." "..dbHud_1.getStringValue(bc))_G[bc]=bd;az=true end end end end;coroutine.yield()for bb,bc in pairs(b)do if ba(bc)then local bd=f(dbHud_1.getStringValue(bc))if bd~=nil then c(bc.." "..dbHud_1.getStringValue(bc))_G[bc]=bd;az=true end end end;if useTheseSettings then K="Updated user preferences used.  Will be saved when you exit seat.\nToggle off useTheseSettings to use saved values"a2=5 elseif az then K="Loaded Saved Variables (see Lua Chat Tab for list)"else K="No Saved Variables Found - Stand up / leave remote to save settings"end else K="No databank found, install one anywhere and rerun the autoconfigure to save variables"end;local be=system.getTime()if LastStartTime+180<be then LastMaxBrakeInAtmo=0 end;if az then s=round(ResolutionX/2,0)t=round(ResolutionY/2,0)at=ResolutionX;au=ResolutionY;BrakeToggleStatus=BrakeToggleDefault;userControlScheme=string.lower(userControlScheme)b2=autoRollPreference end;LastStartTime=be;if string.find("keyboard virtual joystick mouse",userControlScheme)==nil then K="Invalid User Control Scheme selected.  Change userControlScheme in Lua Parameters to keyboard, mouse, or virtual joystick\nOr use shift and button in screen"a2=5 end;b6=math.cos(StallAngle*constants.deg2rad)if antigrav and not ExternalAGG then if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;antigrav.setBaseAltitude(AntigravTargetAltitude)end;aj=[[rgb(]]..d(PrimaryR+0.5)..","..d(PrimaryG+0.5)..","..d(PrimaryB+0.5)..[[)]]ak=[[rgb(]]..d(PrimaryR*0.9+0.5)..","..d(PrimaryG*0.9+0.5)..","..d(PrimaryB*0.9+0.5)..[[)]]end;function CalculateFuelVolume(bf,bg)if bf>bg then bg=bf end;if ContainerOptimization>0 then bg=bg-bg*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bg=bg-bg*FuelTankOptimization*0.05 end;return bg end;function ProcessElements()local bh=fuelX~=0 and fuelY~=0;for bb in pairs(af)do local type=l(af[bb])if type=="Landing Gear"then A=true end;if type=="Dynamic Core Unit"then local bi=h(af[bb])if bi>10000 then aQ=128 elseif bi>1000 then aQ=64 elseif bi>150 then aQ=32 end end;aG=aG+h(af[bb])if bh and(type=="Atmospheric Fuel Tank"or type=="Space Fuel Tank"or type=="Rocket Fuel Tank")then local bi=h(af[bb])local bj=m(af[bb])local bf=0;local bk=system.getTime()if type=="Atmospheric Fuel Tank"then local bg=400;local bl=35.03;if bi>10000 then bg=51200;bl=5480 elseif bi>1300 then bg=6400;bl=988.67 elseif bi>150 then bg=1600;bl=182.67 end;bf=bj-bl;if fuelTankHandlingAtmo>0 then bg=bg+bg*fuelTankHandlingAtmo*0.2 end;bg=CalculateFuelVolume(bf,bg)aD[#aD+1]={af[bb],core.getElementNameById(af[bb]),bg,bl,bf,bk}end;if type=="Rocket Fuel Tank"then local bg=320;local bl=173.42;if bi>65000 then bg=40000;bl=25740 elseif bi>6000 then bg=5120;bl=4720 elseif bi>700 then bg=640;bl=886.72 end;bf=bj-bl;if fuelTankHandlingRocket>0 then bg=bg+bg*fuelTankHandlingRocket*0.2 end;bg=CalculateFuelVolume(bf,bg)aF[#aF+1]={af[bb],core.getElementNameById(af[bb]),bg,bl,bf,bk}end;if type=="Space Fuel Tank"then local bg=2400;local bl=182.67;if bi>10000 then bg=76800;bl=5480 elseif bi>1300 then bg=9600;bl=988.67 end;bf=bj-bl;if fuelTankHandlingSpace>0 then bg=bg+bg*fuelTankHandlingSpace*0.2 end;bg=CalculateFuelVolume(bf,bg)aE[#aE+1]={af[bb],core.getElementNameById(af[bb]),bg,bl,bf,bk}end end end end;function SetupChecks()if gyro~=nil then ah=gyro.getState()==1 end;if userControlScheme~="keyboard"then system.lockView(1)else system.lockView(0)end;if radar_1 then if l(radar_1.getId())=="Space Radar"then T=true else U=true end end;if door then for _,bc in pairs(door)do bc.toggle()end end;if switch then for _,bc in pairs(switch)do bc.toggle()end end;if forcefield then for _,bc in pairs(forcefield)do bc.toggle()end end;if antigrav~=nil and not ExternalAGG then if antigrav.getState()==1 then antigrav.show()end end;if o()==1 and RemoteFreeze then system.freeze(1)else system.freeze(0)end;if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;local bm=AboveGroundLevel()if bm~=-1 or not ad and vec3(core.getVelocity()):len()<50 then BrakeIsOn=true;if not A then GearExtended=true end else BrakeIsOn=false end;if b7~=nil then Nav.axisCommandManager:setTargetGroundAltitude(b7)if b7==0 and not A then GearExtended=true;BrakeIsOn=true end else b7=Nav:getTargetGroundAltitude()if GearExtended then Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)else Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end end;MaxKinematicUp=core.getMaxKinematicsParametersAlongAxis("vertical",core.getConstructOrientationUp())[1]WasInAtmo=ad end;function ConvertResolutionX(bc)if ResolutionX==1920 then return bc else return round(ResolutionX*bc/1920,0)end end;function ConvertResolutionY(bc)if ResolutionY==1080 then return bc else return round(ResolutionY*bc/1080,0)end end;function RefreshLastMaxBrake(bn,bo)if bn==nil then bn=core.g()end;bn=round(bn,5)local bp=j()if bo~=nil and bo or(aC==nil or aC~=bn)then local b4=core.getVelocity()local bq=vec3(b4):len()local br=f(unit.getData()).maxBrake;if br~=nil and br>0 and ad then br=br/utils.clamp(bq/100,0.1,1)br=br/bp;if bp>0.10 then if LastMaxBrakeInAtmo then LastMaxBrakeInAtmo=(LastMaxBrakeInAtmo+br)/2 else LastMaxBrakeInAtmo=br end end end;if br~=nil and br>0 then LastMaxBrake=br end;aC=bn end end;function MakeButton(bs,bt,bu,bv,bw,bx,by,bz,bA)local bB={enableName=bs,disableName=bt,width=bu,height=bv,x=bw,y=bx,toggleVar=by,toggleFunction=bz,drawCondition=bA,hovered=false}table.insert(aq,bB)return bB end;function UpdateAtlasLocationsList()AtlasOrdered={}for bb,bc in pairs(aS[0])do table.insert(AtlasOrdered,{name=bc.name,index=bb})end;local function bC(bD,bE)return bD.name<bE.name end;table.sort(AtlasOrdered,bC)end;function AddLocationsToAtlas()for bb,bc in pairs(SavedLocations)do table.insert(aS[0],bc)end;UpdateAtlasLocationsList()end;function zeroConvertToWorldCoordinates(bF)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bG='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bH,bI,bJ,bK,bL=string.match(bF,bG)if bH=="0"and bI=="0"then return vec3(tonumber(bJ),tonumber(bK),tonumber(bL))end;bK=math.rad(bK)bJ=math.rad(bJ)local planet=aS[tonumber(bH)][tonumber(bI)]local bM=math.cos(bJ)local bN=vec3(bM*math.cos(bK),bM*math.sin(bK),math.sin(bJ))return planet.center+(planet.radius+bL)*bN end;function AddNewLocationByWaypoint(bO,planet,bF)if dbHud_1 then local bP={}local position=zeroConvertToWorldCoordinates(bF)if planet.name=="Space"then bP={position=position,name=bO,atmosphere=false,planetname=planet.name,gravity=planet.gravity}else local bQ=false;if planet.atmos then bQ=true else bQ=false end;bP={position=position,name=bO,atmosphere=bQ,planetname=planet.name,gravity=planet.gravity}end;SavedLocations[#SavedLocations+1]=bP;table.insert(aS[0],bP)UpdateAtlasLocationsList()else K="Databank must be installed to save locations"end end;function AddNewLocation()if dbHud_1 then local position=vec3(core.getConstructWorldPos())local bR=planet.name..". "..#SavedLocations;if radar_1 then local bS,_=radar_1.getData():match('"constructId":"([0-9]*)","distance":([%d%.]*)')if bS~=nil and bS~=""then bR=bR.." "..radar_1.getConstructName(bS)end end;local bP={}local bQ=false;if planet.atmos then bQ=true end;bP={position=position,name=bR,atmosphere=bQ,planetname=planet.name,gravity=planet.gravity}SavedLocations[#SavedLocations+1]=bP;table.insert(aS[0],bP)UpdateAtlasLocationsList()K="Location saved as "..bR else K="Databank must be installed to save locations"end end;function UpdatePosition(bT)local bU=-1;local bP;for bb,bc in pairs(SavedLocations)do if bc.name and bc.name==CustomTarget.name then bU=bb;break end end;if bU~=-1 then local bV;if bT~=nil then bP={position=SavedLocations[bU].position,name=bT,atmosphere=SavedLocations[bU].atmosphere,planetname=SavedLocations[bU].planetname,gravity=SavedLocations[bU].gravity}else bP={position=vec3(core.getConstructWorldPos()),name=SavedLocations[bU].name,atmosphere=unit.getAtmosphereDensity(),planetname=planet.name,gravity=unit.getClosestPlanetInfluence()}end;SavedLocations[bU]=bP;bU=-1;for bb,bc in pairs(aS[0])do if bc.name and bc.name==CustomTarget.name then bU=bb end end;if bU>-1 then aS[0][bU]=bP end;UpdateAtlasLocationsList()K=CustomTarget.name.." position updated"AutopilotTargetIndex=0;UpdateAutopilotTarget()else K="Name Not Found"end end;function ClearCurrentPosition()local bU=-1;for bb,bc in pairs(aS[0])do if bc.name and bc.name==CustomTarget.name then bU=bb end end;if bU>-1 then table.remove(aS[0],bU)end;bU=-1;for bb,bc in pairs(SavedLocations)do if bc.name and bc.name==CustomTarget.name then K=bc.name.." saved location cleared"bU=bb;break end end;if bU~=-1 then table.remove(SavedLocations,bU)end;DecrementAutopilotTargetIndex()UpdateAtlasLocationsList()end;function DrawDeadZone(bW)bW[#bW+1]=e([[<circle class="dim line" style="fill:none" cx="50%%" cy="50%%" r="%d"/>]],DeadZone)end;function ToggleRadarPanel()if radarPanelID~=nil and a6==0 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;if perisPanelID~=nil then system.destroyWidgetPanel(perisPanelID)perisPanelID=nil end else if a6==1 then system.destroyWidgetPanel(radarPanelID)radarPanelID=nil;_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")perisPanelID=_autoconf.panels[_autoconf.panels_size]end;placeRadar=true;if radarPanelID==nil and placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")radarPanelID=_autoconf.panels[_autoconf.panels_size]placeRadar=false end;a6=0 end end;function ToggleWidgets()if ap then unit.show()core.show()if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")fuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")spacefuelPanelID=_autoconf.panels[_autoconf.panels_size]end;if rocketfueltank_size>0 then _autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")rocketfuelPanelID=_autoconf.panels[_autoconf.panels_size]end;ap=false else unit.hide()core.hide()if fuelPanelID~=nil then system.destroyWidgetPanel(fuelPanelID)fuelPanelID=nil end;if spacefuelPanelID~=nil then system.destroyWidgetPanel(spacefuelPanelID)spacefuelPanelID=nil end;if rocketfuelPanelID~=nil then system.destroyWidgetPanel(rocketfuelPanelID)rocketfuelPanelID=nil end;ap=true end end;function SetupInterplanetaryPanel()panelInterplanetary=system.createWidgetPanel("Interplanetary Helper")interplanetaryHeader=system.createWidget(panelInterplanetary,"value")interplanetaryHeaderText=system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')system.addDataToWidget(interplanetaryHeaderText,interplanetaryHeader)widgetDistance=system.createWidget(panelInterplanetary,"value")widgetDistanceText=system.createData('{"label": "distance", "value": "N/A", "unit":""}')system.addDataToWidget(widgetDistanceText,widgetDistance)widgetTravelTime=system.createWidget(panelInterplanetary,"value")widgetTravelTimeText=system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)widgetMaxMass=system.createWidget(panelInterplanetary,"value")widgetMaxMassText=system.createData('{"label": "Maximum Mass", "value": "N/A", "unit":""}')system.addDataToWidget(widgetMaxMassText,widgetMaxMass)widgetCurBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetCurBrakeDistanceText=system.createData('{"label": "Cur Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;widgetCurBrakeTime=system.createWidget(panelInterplanetary,"value")widgetCurBrakeTimeText=system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;widgetMaxBrakeDistance=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeDistanceText=system.createData('{"label": "Max Brake distance", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;widgetMaxBrakeTime=system.createWidget(panelInterplanetary,"value")widgetMaxBrakeTimeText=system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;widgetTrajectoryAltitude=system.createWidget(panelInterplanetary,"value")widgetTrajectoryAltitudeText=system.createData('{"label": "Projected Altitude", "value": "N/A", "unit":""}')if not ad then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;function Contains(bX,bY,bw,bx,bu,bv)if bX>bw and bX<bw+bu and bY>bx and bY<bx+bv then return true else return false end end;function ToggleTurnBurn()TurnBurn=not TurnBurn end;function ToggleVectorToTarget(SpaceTarget)VectorToTarget=not VectorToTarget;if VectorToTarget then TurnBurn=false;if not AltitudeHold and not SpaceTarget then ToggleAltitudeHold()end end;VectorStatus="Proceeding to Waypoint"end;function ToggleAutoLanding()if BrakeLanding then BrakeLanding=false else StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrake;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting coast landing, beware obstacles"end;AltitudeHold=false;AutoTakeoff=false;LockPitch=nil;BrakeLanding=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end end;function ToggleAutoTakeoff()if AutoTakeoff then AutoTakeoff=false;if AltitudeHold then ToggleAltitudeHold()end else if not AltitudeHold then ToggleAltitudeHold()end;AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end end;function ToggleLockPitch()if LockPitch==nil then local bZ=vec3(core.getConstructWorldOrientationForward())local b_=vec3(core.getConstructWorldOrientationRight())local c0=vec3(core.getWorldVertical())local c1=getPitch(c0,bZ,b_)LockPitch=c1;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=false else LockPitch=nil end end;function ToggleAltitudeHold()AltitudeHold=not AltitudeHold;if AltitudeHold then Autopilot=false;ProgradeIsOn=false;RetrogradeIsOn=false;I=false;BrakeLanding=false;Reentry=false;b2=true;LockPitch=nil;if not GearExtended and not BrakeIsOn or not ad then AutoTakeoff=false;HoldAltitude=ae;if not a8 and Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end else AutoTakeoff=true;HoldAltitude=ae+AutoTakeoffAltitude;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(500)BrakeIsOn=true end;if a8 then HoldAltitude=100000 end else b2=autoRollPreference;AutoTakeoff=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;VectorToTarget=false end end;function ToggleFollowMode()if o()==1 then I=not I;if I then Autopilot=false;RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;AutoTakeoff=false;OldGearExtended=GearExtended;GearExtended=false;Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)else BrakeIsOn=true;b2=autoRollPreference;GearExtended=OldGearExtended;if GearExtended then Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end end else K="Follow Mode only works with Remote controller"I=false end end;function ToggleAutopilot()if AutopilotTargetIndex>0 and not Autopilot and not VectorToTarget and not a8 then if CustomTarget~=nil then LockPitch=nil;SpaceTarget=CustomTarget.planetname=="Space"if SpaceTarget then if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end elseif planet.name==CustomTarget.planetname then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="Insufficient Brake Force\nCoast landing will be inaccurate"end;if j()>0 then if not AltitudeHold then if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end else if not VectorToTarget then ToggleVectorToTarget(SpaceTarget)end end else if ae>100000 or ae==0 then Autopilot=true else a7=true end end else RetrogradeIsOn=false;ProgradeIsOn=false;if j()~=0 then a8=true;ToggleAltitudeHold()else Autopilot=true end end elseif j()==0 then Autopilot=true;RetrogradeIsOn=false;ProgradeIsOn=false;AutopilotRealigned=false;I=false;AltitudeHold=false;BrakeLanding=false;Reentry=false;AutoTakeoff=false;u=false;LockPitch=nil else a8=true;ToggleAltitudeHold()end else a8=false;Autopilot=false;AutopilotRealigned=false;VectorToTarget=false;u=false;AutoTakeoff=false;AltitudeHold=false;VectorToTarget=false;HoldAltitude=ae end end;function ProgradeToggle()ProgradeIsOn=not ProgradeIsOn;RetrogradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function RetrogradeToggle()RetrogradeIsOn=not RetrogradeIsOn;ProgradeIsOn=false;Autopilot=false;AltitudeHold=false;I=false;BrakeLanding=false;LockPitch=nil;Reentry=false;AutoTakeoff=false end;function BrakeToggle()BrakeIsOn=not BrakeIsOn;if BrakeLanding then BrakeLanding=false;b2=autoRollPreference end;if BrakeIsOn then AltitudeHold=false;VectorToTarget=false;AutoTakeoff=false;Reentry=false;ProgradeIsOn=false;BrakeLanding=false;AutoLanding=false;AltitudeHold=false;LockPitch=nil;b2=autoRollPreference end end;function CheckDamage(bW)local c2=0;ao=""local c3=aG;local c4=0;local c5=0;local c6=0;local c7=0;local c8=""for bb in pairs(af)do local bi=0;local c9=0;c9=h(af[bb])bi=k(af[bb])c4=c4+bi;if bi<c9 then if bi==0 then c6=c6+1 else c5=c5+1 end;if aH and#al==0 then position=vec3(core.getElementPositionById(af[bb]))local bw=position.x-aQ;local bx=position.y-aQ;local ca=position.z-aQ;table.insert(al,core.spawnArrowSticker(bw,bx,ca+1,"down"))table.insert(al,core.spawnArrowSticker(bw,bx,ca+1,"down"))core.rotateSticker(al[2],0,0,90)table.insert(al,core.spawnArrowSticker(bw+1,bx,ca,"north"))table.insert(al,core.spawnArrowSticker(bw+1,bx,ca,"north"))core.rotateSticker(al[4],90,90,0)table.insert(al,core.spawnArrowSticker(bw-1,bx,ca,"south"))table.insert(al,core.spawnArrowSticker(bw-1,bx,ca,"south"))core.rotateSticker(al[6],90,-90,0)table.insert(al,core.spawnArrowSticker(bw,bx-1,ca,"east"))table.insert(al,core.spawnArrowSticker(bw,bx-1,ca,"east"))core.rotateSticker(al[8],90,0,90)table.insert(al,core.spawnArrowSticker(bw,bx+1,ca,"west"))table.insert(al,core.spawnArrowSticker(bw,bx+1,ca,"west"))core.rotateSticker(al[10],-90,0,90)table.insert(al,af[bb])end elseif aH and#al>0 and al[11]==af[bb]then for cb in pairs(al)do core.deleteSticker(al[cb])end;al={}end end;c2=d(c4/c3*100)if c2<100 then bW[#bW+1]=[[<g class="pbright txt">]]c7=d(c2*2.55)c8=e("rgb(%d,%d,%d)",255-c7,c7,0)if c2<100 then bW[#bW+1]=e([[<text class="txtbig txtmid" x=50%% y="1035" style="fill:%s">Elemental Integrity: %i %%</text>]],c8,c2)if c6>0 then bW[#bW+1]=e([[<text class="txtbig txtmid" x=50%% y="1055" style="fill:%s">Disabled Modules: %i Damaged Modules: %i</text>]],c8,c6,c5)elseif c5>0 then bW[#bW+1]=e([[<text class="txtbig txtmid" x=50%% y="1055"style="fill:%s">Damaged Modules: %i</text>]],c8,c5)end end;bW[#bW+1]=[[<\g>]]end end;function DrawCursorLine(bW)local cc=d(utils.clamp(a3/(at/4)*255,0,255))bW[#bW+1]=e("<line x1='0' y1='0' x2='%fpx' y2='%fpx' style='stroke:rgb(%d,%d,%d);stroke-width:2;transform:translate(50%%, 50%%)' />",a0,a1,d(PrimaryR+0.5)+cc,d(PrimaryG+0.5)-cc,d(PrimaryB+0.5)-cc)end;function getPitch(cd,ce,bE)local cf=cd:cross(bE):normalize_inplace()local c1=math.acos(utils.clamp(cf:dot(-ce),-1,1))*constants.rad2deg;if cf:cross(-ce):dot(bE)<0 then c1=-c1 end;return c1 end;function clearAll()if ab then ab=false;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"RetrogradeIsOn=false;ProgradeIsOn=false;AltitudeHold=false;Reentry=false;BrakeLanding=false;BrakeIsOn=false;AutoTakeoff=false;I=false;u=false;a7=false;a8=false;x=false;b2=autoRollPreference;VectorToTarget=false;TurnBurn=false;ah=false;LockPitch=nil else ab=true end end;function wipeSaveVariables()if not dbHud_1 then K="No Databank Found, unable to wipe. \nYou must have a Databank attached to ship prior to running the HUD autoconfigure"a2=5 else if aA then for bb,bc in pairs(a)do dbHud_1.setStringValue(bc,g(nil))end;for bb,bc in pairs(b)do if bc~="SavedLocations"then dbHud_1.setStringValue(bc,g(nil))end end;K="Databank wiped. New variables will save after re-enter seat and exit"a2=5;aA=false;az=false;Y=true else K="Press ALT-7 again to confirm wipe of ALL data"aA=true end end end;function CheckButtons()for _,bc in pairs(aq)do if bc.hovered then if not bc.drawCondition or bc.drawCondition()then bc.toggleFunction()end;bc.hovered=false end end end;function SetButtonContains()local bw=a0+at/2;local bx=a1+au/2;for _,bc in pairs(aq)do bc.hovered=Contains(bw,bx,bc.x,bc.y,bc.width,bc.height)end end;function DrawButton(bW,cg,hover,bw,bx,ch,ci,cj,ck,cl,cm)if type(cl)=="function"then cl=cl()end;if type(cm)=="function"then cm=cm()end;bW[#bW+1]=e("<rect x='%f' y='%f' width='%f' height='%f' fill='",bw,bx,ch,ci)if cg then bW[#bW+1]=e("%s'",cj)else bW[#bW+1]=ck end;if hover then bW[#bW+1]=" style='stroke:white; stroke-width:2'"else bW[#bW+1]=" style='stroke:black; stroke-width:1'"end;bW[#bW+1]="></rect>"bW[#bW+1]=e("<text x='%f' y='%f' font-size='24' fill='",bw+ch/2,bx+ci/2+5)if cg then bW[#bW+1]="black"else bW[#bW+1]="white"end;bW[#bW+1]="' text-anchor='middle' font-family='Montserrat'>"if cg then bW[#bW+1]=e("%s</text>",cl)else bW[#bW+1]=e("%s</text>",cm)end end;function DrawButtons(bW)local cn="rgb(50,50,50)'"local co="rgb(210,200,200)"local cp=DrawButton;for _,bc in pairs(aq)do local bt=bc.disableName;local bs=bc.enableName;if type(bt)=="function"then bt=bt()end;if type(bs)=="function"then bs=bs()end;if not bc.drawCondition or bc.drawCondition()then cp(bW,bc.toggleVar(),bc.hovered,bc.x,bc.y,bc.width,bc.height,co,cn,bt,bs)end end end;function DrawTank(bW,aP,bw,cq,cr,cs,ct,cu)local cv=1;local cw=2;local cx=3;local cy=4;local cz=5;local cA=6;local cB=""local cC=0;local cD=fuelY;local cE=fuelY+10;if o()==1 and not RemoteHud then cD=cD-50;cE=cE-50 end;bW[#bW+1]=[[<g class="pdim txtfuel">]]if cr=="ATMO"then cB="atmofueltank"elseif cr=="SPACE"then cB="spacefueltank"else cB="rocketfueltank"end;cC=_G[cB.."_size"]if#cs>0 then for i=1,#cs do local bR=string.sub(cs[i][cw],1,12)local cF=0;for cb=1,cC do if cs[i][cw]==f(unit[cB.."_"..cb].getData()).name then cF=cb;break end end;if aP or ct[i]==nil or cu[i]==nil then local cG=0;local cH=0;local cI=0;local cJ=0;local bk=system.getTime()if cF~=0 then cu[i]=f(unit[cB.."_"..cF].getData()).percentage;ct[i]=f(unit[cB.."_"..cF].getData()).timeLeft;if ct[i]=="n/a"then ct[i]=0 end else cI=m(cs[i][cv])-cs[i][cy]cG=cs[i][cx]cu[i]=d(0.5+cI*100/cG)cH=cs[i][cz]cJ=cs[i][cA]if cH<=cI then ct[i]=0 else ct[i]=d(0.5+cI/((cH-cI)/(bk-cJ)))end;cs[i][cz]=cI;cs[i][cA]=bk end end;if bR==cq then bR=e("%s %d",cr,i)end;if cF==0 then bR=bR.." *"end;local cK;if ct[i]==0 then cK="n/a"else cK=FormatTimeString(ct[i])end;if cu[i]~=nil then local c7=d(cu[i]*2.55)local c8=e("rgb(%d,%d,%d)",255-c7,c7,0)local cL=""if cK~="n/a"and ct[i]<120 or cu[i]<5 then if aP then cL=[[class="red"]]end end;bW[#bW+1]=e([[
                            <text x=%d y="%d" %s>%s</text>
                            <text x=%d y="%d" style="fill:%s">%d%% %s</text>
                        ]],bw,cD,cL,bR,bw,cE,c8,cu[i],cK)cD=cD+30;cE=cE+30 end end end;bW[#bW+1]="</g>"end;function HideInterplanetaryPanel()system.destroyWidgetPanel(panelInterplanetary)panelInterplanetary=nil end;function getRelativePitch(b4)b4=vec3(b4)local c1=-math.deg(math.atan(b4.y,b4.z))+180;c1=c1-90;if c1<0 then c1=360+c1 end;if c1>180 then c1=-180+c1-180 end;return-c1 end;function getRelativeYaw(b4)b4=vec3(b4)local cM=math.deg(math.atan(b4.y,b4.x))-90;if cM<-180 then cM=360+cM end;return cM end;function AlignToWorldVector(cN,cO)if not ad or b3>b6+0.08 or aa~=-1 then if cO==nil then cO=as end;cN=vec3(cN):normalize()local cP=vec3(core.getConstructWorldOrientationForward())-cN;local cQ=-getMagnitudeInDirection(cP,core.getConstructWorldOrientationRight())*ar;local cR=-getMagnitudeInDirection(cP,core.getConstructWorldOrientationUp())*ar;if am==0 then am=cQ/2 end;if an==0 then an=cR/2 end;D=D-(cQ+(cQ-am)*DampingMultiplier)C=C+cR+(cR-an)*DampingMultiplier;am=cQ;an=cR;if math.abs(cQ)<cO and math.abs(cR)<cO then return true end;return false end end;function getAPEnableName()local bR=AutopilotTargetName;if bR==nil then bR=CustomTarget.name.." "..getDistanceDisplayString((vec3(core.getConstructWorldPos())-CustomTarget.position):len())end;if bR==nil then bR="None"end;return"Engage Autopilot: "..bR end;function getAPDisableName()local bR=AutopilotTargetName;if bR==nil then bR=CustomTarget.name end;if bR==nil then bR="None"end;return"Disable Autopilot: "..bR end;function ToggleAntigrav()if antigrav and not ExternalAGG then if antigrav.getState()==1 then antigrav.deactivate()antigrav.hide()else if AntigravTargetAltitude==nil then AntigravTargetAltitude=ae end;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;antigrav.activate()antigrav.show()end end end;function BeginReentry()if Reentry then K="Re-Entry cancelled"Reentry=false;b2=autoRollPreference;AltitudeHold=false elseif j()~=0 or unit.getClosestPlanetInfluence()<=0 or Reentry or not planet.atmos then K="Re-Entry requirements not met: you must start out of atmosphere\n and within a planets gravity well over a planet with atmosphere"a2=5 elseif not x then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes then K="WARNING: Insufficient Brakes for Parachute Re-Entry"else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;b2=true;BrakeIsOn=false;K="Beginning Parachute Re-Entry - Strap In.  Target speed: "..ReentrySpeed end else Reentry=true;if Nav.axisCommandManager:getAxisCommandType(0)~=controlMasterModeId.cruise then Nav.control.cancelCurrentControlMasterMode()end;AltitudeHold=true;b2=true;BrakeIsOn=false;HoldAltitude=ReentryAltitude;K="Beginning Re-entry.  Target speed: "..ReentrySpeed.." Target Altitude: "..ReentryAltitude end end;function SetupButtons()local cS=50;local cT=260;local cU=MakeButton("Enable Brake Toggle","Disable Brake Toggle",cT,cS,at/2-cT/2,au/2+350,function()return BrakeToggleStatus end,function()BrakeToggleStatus=not BrakeToggleStatus;if BrakeToggleStatus then K="Brakes in Toggle Mode"else K="Brakes in Default Mode"end end)MakeButton("Align Prograde","Disable Prograde",cT,cS,at/2-cT/2-50-cU.width,au/2-cS+380,function()return ProgradeIsOn end,ProgradeToggle)MakeButton("Align Retrograde","Disable Retrograde",cT,cS,at/2-cT/2+cU.width+50,au/2-cS+380,function()return RetrogradeIsOn end,RetrogradeToggle,function()return j()==0 end)local cV=MakeButton(getAPEnableName,getAPDisableName,600,60,at/2-600/2,au/2-60/2-400,function()return Autopilot end,ToggleAutopilot)MakeButton("Save Position","Save Position",200,cV.height,cV.x+cV.width+30,cV.y,function()return false end,AddNewLocation,function()return AutopilotTargetIndex==0 or CustomTarget==nil end)MakeButton("Update Position","Update Position",200,cV.height,cV.x+cV.width+30,cV.y,function()return false end,UpdatePosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)MakeButton("Clear Position","Clear Position",200,cV.height,cV.x-200-30,cV.y,function()return true end,ClearCurrentPosition,function()return AutopilotTargetIndex>0 and CustomTarget~=nil end)cS=60;cT=300;local bw=10;local bx=au/2-300;MakeButton("Enable Turn and Burn","Disable Turn and Burn",cT,cS,bw,bx,function()return TurnBurn end,ToggleTurnBurn)MakeButton("Engage Altitude Hold","Disable Altitude Hold",cT,cS,bw+cT+20,bx,function()return AltitudeHold end,ToggleAltitudeHold)bx=bx+cS+20;MakeButton("Engage Autoland","Disable Autoland",cT,cS,bw,bx,function()return AutoLanding end,ToggleAutoLanding)MakeButton("Engage Auto Takeoff","Disable Auto Takeoff",cT,cS,bw+cT+20,bx,function()return AutoTakeoff end,ToggleAutoTakeoff)bx=bx+cS+20;MakeButton("Show Orbit Display","Hide Orbit Display",cT,cS,bw,bx,function()return DisplayOrbit end,function()DisplayOrbit=not DisplayOrbit;if DisplayOrbit then K="Orbit Display Enabled"else K="Orbit Display Disabled"end end)bx=bx+cS+20;MakeButton("Glide Re-Entry","Cancel Glide Re-Entry",cT,cS,bw,bx,function()return Reentry end,function()x=true;BeginReentry()end,function()return ae>ReentryAltitude end)MakeButton("Parachute Re-Entry","Cancel Parachute Re-Entry",cT,cS,bw+cT+20,bx,function()return Reentry end,BeginReentry,function()return ae>ReentryAltitude end)bx=bx+cS+20;MakeButton("Engage Follow Mode","Disable Follow Mode",cT,cS,bw,bx,function()return I end,ToggleFollowMode,function()return o()==1 end)MakeButton("Enable Repair Arrows","Disable Repair Arrows",cT,cS,bw+cT+20,bx,function()return aH end,function()aH=not aH;if aH then K="Repair Arrows Enabled"else K="Repair Arrows Diabled"end end,function()return o()==1 end)bx=bx+cS+20;if not ExternalAGG then MakeButton("Enable AGG","Disable AGG",cT,cS,bw,bx,function()return antigrav.getState()==1 end,ToggleAntigrav,function()return antigrav~=nil end)end;bx=bx+cS+20;MakeButton(function()return e("Toggle Control Scheme - Current: %s",userControlScheme)end,function()return e("Control Scheme: %s",userControlScheme)end,cT*2,cS,bw,bx,function()return false end,function()if userControlScheme=="keyboard"then userControlScheme="mouse"elseif userControlScheme=="mouse"then userControlScheme="virtual joystick"else userControlScheme="keyboard"end end)end;function GetFlightStyle()local cW=Nav.axisCommandManager:getAxisCommandType(0)local cX="TRAVEL"if cW==1 then cX="CRUISE"end;if Autopilot then cX="AUTOPILOT"end;return cX end;function UpdateHud(bW)local bL=ae;local b4=core.getVelocity()local bq=vec3(b4):len()local c0=vec3(core.getWorldVertical())local bZ=vec3(core.getConstructWorldOrientationForward())local b_=vec3(core.getConstructWorldOrientationRight())local cY=vec3(core.getConstructWorldOrientationUp())local cZ=getRoll(c0,bZ,b_)local c_=cZ/180*math.pi;local d0=math.cos(c_)local d1=math.sin(c_)local c1=getPitch(c0,bZ,b_*d0+cY*d1)local d2=cZ;local d3=c1;local d4=j()local d5=d(unit.getThrottle())local d6=bq*3.6;local d7=unit.getAxisCommandValue(0)local cX=GetFlightStyle()local d8="ROLL"local d9=unit.getClosestPlanetInfluence()>0;if d5==nil then d5=0 end;if not d9 then if bq>5 then c1=getRelativePitch(b4)cZ=getRelativeYaw(b4)else c1=0;cZ=0 end;d8="YAW"end;bW[#bW+1]=a5;bW[#bW+1]=ao;bW[#bW+1]=a4;if aR%aK==0 then aP=true end;if fuelX~=0 and fuelY~=0 then DrawTank(bW,aP,fuelX,"Atmospheric ","ATMO",aD,aN,aO)DrawTank(bW,aP,fuelX+100,"Space fuel t","SPACE",aE,aL,aM)DrawTank(bW,aP,fuelX+200,"Rocket fuel ","ROCKET",aF,aI,aJ)end;if aP then aP=false;aR=0 end;aR=aR+1;DrawVerticalSpeed(bW,bL)if o()==0 or RemoteHud then if not IsInFreeLook()or brightHud then if d9 then DrawRollLines(bW,centerX,centerY,d2,d8,d9)DrawArtificialHorizon(bW,d3,d2,centerX,centerY,d9,d(getRelativeYaw(b4)),bq)else DrawRollLines(bW,centerX,centerY,cZ,d8,d9)DrawArtificialHorizon(bW,c1,cZ,centerX,centerY,d9,d(cZ),bq)end;DrawAltitudeDisplay(bW,bL,d9)DrawPrograde(bW,b4,bq,centerX,centerY)end end;DrawThrottle(bW,cX,d5,d7)DrawSpeed(bW,d6)DrawWarnings(bW)DisplayOrbitScreen(bW)if screen_2 then local bF=vec3(core.getConstructWorldPos())local bw=960+bF.x/aU;local bx=450+bF.y/aV;screen_2.moveContent(aW,(bw-80)/19.2,(bx-80)/10.8)end end;function IsInFreeLook()return system.isViewLocked()==0 and userControlScheme~="keyboard"and o()==0 end;function HUDPrologue(bW)local da=aj;local db=ak;local dc=aj;local dd=ak;if IsInFreeLook()and not brightHud then da=[[rgb(]]..d(PrimaryR*0.4+0.5)..","..d(PrimaryG*0.4+0.5)..","..d(PrimaryB*0.3+0.5)..[[)]]db=[[rgb(]]..d(PrimaryR*0.3+0.5)..","..d(PrimaryG*0.3+0.5)..","..d(PrimaryB*0.2+0.5)..[[)]]end;bW[#bW+1]=e([[
                <head>
                    <style>
                        body {margin: 0}
                        svg {position:absolute;top:0;left:0;font-family:Montserrat;} 
                        .txt {font-size:10px;font-weight:bold;}
                        .txttick {font-size:12px;font-weight:bold;}
                        .txtbig {font-size:14px;font-weight:bold;}
                        .altsm {font-size:16px;font-weight:normal;}
                        .altbig {font-size:21px;font-weight:normal;}
                        .line {stroke-width:2px;fill:none}
                        .linethick {stroke-width:3px;fill:none}
                        .warnings {font-size:26px;fill:red;text-anchor:middle;font-family:Bank}
                        .warn {fill:orange;font-size:24px}
                        .crit {fill:darkred;font-size:28px}
                        .bright {fill:%s;stroke:%s}
                        .pbright {fill:%s;stroke:%s}
                        .dim {fill:%s;stroke:%s}
                        .pdim {fill:%s;stroke:%s}
                        .red {fill:red;stroke:red}
                        .redout {fill:none;stroke:red}
                        .op30 {opacity:0.3}
                        .op10 {opacity:0.1}
                        .txtstart {text-anchor:start}
                        .txtend {text-anchor:end}
                        .txtmid {text-anchor:middle}
                        .txtvspd {font-family:sans-serif;font-weight:normal}
                        .txtvspdval {font-size:20px}
                        .txtfuel {font-size:11px;font-weight:bold}
                        .txtorb {font-size:12px}
                        .txtorbbig {font-size:18px}
                        .hudver {font-size:10px;font-weight:bold;fill:red;text-anchor:end;font-family:Bank}
                        .msg {font-size:40px;fill:red;text-anchor:middle;font-weight:normal}
                        .cursor {stroke:white}
                    </style>
                </head>
                <body>
                    <svg height="100%%" width="100%%" viewBox="0 0 %d %d">
                    ]],da,da,dc,dc,db,db,dd,dd,ResolutionX,ResolutionY)end;function HUDEpilogue(bW)bW[#bW+1]="</svg>"end;function DrawSpeed(bW,d6)local de=throtPosY-10;local df=throtPosX+10;bW[#bW+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then de=75 end;bW[#bW+1]=e([[
                <g class="pbright txtstart">
                    <text class="txtbig" x="%d" y="%d">%d km/h</text>
                </g>
            </g>]],df,de,d(d6))end;function DrawOdometer(bW,W,TotalDistanceTravelled,cX,X,d4)local dg=ConvertResolutionX(1240)local dh=ConvertResolutionY(55)local di=dh+10;local d4=j()local bn=core.g()local dj=0;local dk=0;local dl=0;RefreshLastMaxBrake(bn)if ad then dl=LastMaxBrakeInAtmo else dl=LastMaxBrake end;maxThrust=Nav:maxForceForward()aB=n()if not ShowOdometer then return end;local dm=vec3(core.getWorldAcceleration()):len()/9.80665;if bn>0.1 then dk=aB*bn;dj=maxThrust/bn end;bW[#bW+1]=[[<g class="pdim txt txtend">]]if o()==1 and not RemoteHud then dg=ConvertResolutionX(1120)dh=ConvertResolutionY(55)di=dh+10 elseif ad then local dn=ConvertResolutionX(770)bW[#bW+1]=e([[
                    <text x="%d" y="%d">ATMOSPHERE</text>
                    <text x="%d" y="%d">%.2f</text>
                ]],dn,dh,dn,di,d4)end;bW[#bW+1]=e([[
                <g class="pbright txtend">
                </g>
                <text x="%d" y="%d">GRAVITY</text>
                <text x="%d" y="%d">%.2f g</text>
                <text x="%d" y="%d">ACCEL</text>
                <text x="%d" y="%d">%.2f g</text>
                ]],dg,dh,dg,di,bn/9.80665,dg,dh+20,dg,di+20,dm)bW[#bW+1]=e([[
                <g class="pbright txt">
                <path class="linethick" d="M %d 0 L %d %d Q %d %d %d %d L %d 0"/>]],ConvertResolutionX(660),ConvertResolutionX(700),ConvertResolutionY(35),ConvertResolutionX(960),ConvertResolutionY(55),ConvertResolutionX(1240),ConvertResolutionY(35),ConvertResolutionX(1280))if o()==0 or RemoteHud then bW[#bW+1]=e([[
                    <text class="txtstart" x="%d" y="%d" >Trip: %.2f km</text>
                    <text class="txtstart" x="%d" y="%d">Lifetime: %.2f Mm</text>
                    <text class="txtstart" x="%d" y="%d">Trip Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Total Time: %s</text>
                    <text class="txtstart" x="%d" y="%d">Mass: %.2f Tons</text>
                    <text class="txtend" x="%d" y="%d">Max Brake: %.2f kN</text>
                    <text class="txtend" x="%d" y="%d">Max Thrust: %.2f kN</text>
                    <text class="txtbig txtmid" x="%d" y="%d">%s</text>]],ConvertResolutionX(700),ConvertResolutionY(20),W,ConvertResolutionX(700),ConvertResolutionY(30),TotalDistanceTravelled/1000,ConvertResolutionX(830),ConvertResolutionY(20),FormatTimeString(X),ConvertResolutionX(830),ConvertResolutionY(30),FormatTimeString(TotalFlightTime),ConvertResolutionX(970),ConvertResolutionY(20),aB/1000,ConvertResolutionX(1240),ConvertResolutionY(10),dl/1000,ConvertResolutionX(1240),ConvertResolutionY(30),maxThrust/1000,ConvertResolutionX(960),ConvertResolutionY(180),cX)if bn>0.1 then bW[#bW+1]=e([[
                            <text class="txtstart" x="%d" y="%d">Max Mass: %.2f Tons</text>
                            <text class="txtend" x="%d" y="%d">Req Thrust: %.2f kN</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),dj/1000,ConvertResolutionX(1240),ConvertResolutionY(20),dk/1000)else bW[#bW+1]=e([[
                        <text class="txtstart" x="%d" y="%d" text-anchor="start">Max Mass: n/a</text>
                        <text class="txtend" x="%d" y="%d" text-anchor="end">Req Thrust: n/a</text>
                    ]],ConvertResolutionX(970),ConvertResolutionY(30),ConvertResolutionX(1240),ConvertResolutionY(20))end else bW[#bW+1]=e([[<text class="txtbig txtmid" x="960" y="33">%s</text>]],ConvertResolutionX(960),ConvertResolutionY(33),cX)end;bW[#bW+1]="</g>"end;function DrawThrottle(bW,cX,d5,d7)local cD=throtPosY+10;local cE=throtPosY+20;if o()==1 and not RemoteHud then cD=55;cE=65 end;local dp="CRUISE"local unit="km/h"local dq=d7;if cX=="TRAVEL"or cX=="AUTOPILOT"then dp="THROT"unit="%"dq=d5;local dr="dim"if d5<0 then dr="red"end;bW[#bW+1]=e([[<g class="%s">
                    <path class="linethick" d="M %d %d L %d %d L %d %d L %d %d"/>
                    <g transform="translate(0 %d)">
                        <polygon points="%d,%d %d,%d %d,%d"/>
                    </g>]],dr,throtPosX-7,throtPosY-50,throtPosX,throtPosY-50,throtPosX,throtPosY+50,throtPosX-7,throtPosY+50,1-math.abs(d5),throtPosX-10,throtPosY+50,throtPosX-15,throtPosY+53,throtPosX-15,throtPosY+47)end;bW[#bW+1]=e([[
                <g class="pbright txtstart">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d %s</text>
                </g>
            </g>]],throtPosX+10,cD,dp,throtPosX+10,cE,dq,unit)end;function DrawVerticalSpeed(bW,bL)if bL<200000 and not ad or bL and ad then local ds=-vec3(core.getWorldVertical()):dot(vec3(core.getWorldVelocity()))local dt=0;if math.abs(ds)>1 then dt=45*math.log(math.abs(ds),10)if ds<0 then dt=-dt end end;bW[#bW+1]=e([[
                    <g class="pbright txt txtvspd" transform="translate(%d %d) scale(0.6)">
                            <text x="31" y="-41">1000</text>
                            <text x="-10" y="-65">100</text>
                            <text x="-54" y="-45">10</text>
                            <text x="-73" y="3">O</text>
                            <text x="-56" y="52">-10</text>
                            <text x="-14" y="72">-100</text>
                            <text x="29" y="50">-1000</text>
                            <text x="85" y="0" class="txtvspdval txtend">%d m/s</text>
                        <g class="linethick">
                            <path d="m-41 75 2.5-4.4m17 12 1.2-4.9m20 7.5v-10m-75-34 4.4-2.5m-12-17 4.9-1.2m17 40 7-7m-32-53h10m34-75 2.5 4.4m17-12 1.2 4.9m20-7.5v10m-75 34 4.4 2.5m-12 17 4.9 1.2m17-40 7 7m-32 53h10m116 75-2.5-4.4m-17 12-1.2-4.9m40-17-7-7m-12-128-2.5 4.4m-17-12-1.2 4.9m40 17-7 7"/>
                            <circle r="90" />
                        </g>
                        <path transform="rotate(%d)" d="m-0.094-7c-22 2.2-45 4.8-67 7 23 1.7 45 5.6 67 7 4.4-0.068 7.8-4.9 6.3-9.1-0.86-2.9-3.7-5-6.8-4.9z" />
                    </g>
                ]],vSpdMeterX,vSpdMeterY,d(ds),d(dt))end end;function getHeading(ce)local du=-vec3(core.getWorldVertical())ce=ce-ce:project_on(du)local dv=vec3(0,0,1)dv=dv-dv:project_on(du)local dw=dv:cross(du)local dt=dv:angle_between(ce)*constants.rad2deg;if ce:dot(dw)<0 then dt=360-dt end;return dt end;function DrawRollLines(bW,centerX,centerY,d2,d8,d9)local dx=circleRad;local dy=20;dy=d(dy)local dz=d(d2)if d9 then for i=-45,45,5 do local dA=i;bW[#bW+1]=e([[<g transform="rotate(%f,%d,%d)">]],dA,centerX,centerY)len=5;if i%15==0 then len=15 elseif i%10==0 then len=10 end;bW[#bW+1]=e([[<line x1=%d y1=%d x2=%d y2="%d"/></g>]],centerX,centerY+dx+dy-len,centerX,centerY+dx+dy)end;bW[#bW+1]=e([["
                    <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                    </g>
                    ]],centerX,centerY+dx+dy-35,d8,centerX,centerY+dx+dy-25,dz)bW[#bW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d2,centerX,centerY)bW[#bW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],centerX-5,centerY+dx+dy-20,centerX+5,centerY+dx+dy-20,centerX,centerY+dx+dy-15)bW[#bW+1]="</g>"end;local cM=dz;if d9 then cM=getHeading(vec3(core.getConstructWorldOrientationForward()))end;local dB=20;local dC=d(cM)local dD=0;local dE=centerY+dx+dy+20;local dF=centerX;if d8~="YAW"then dE=ConvertResolutionY(130)dF=ConvertResolutionX(960)end;local dG=[[<path class="txttick line" d="]]for i=d(dC-(dB+10)-dC%5+0.5),d(dC+dB+10+dC%5+0.5),5 do local bw=dF+-i*5+cM*5;if i%10==0 then dD=10;local p=i;if p==360 then p=0 elseif p>360 then p=p-360 elseif p<0 then p=p+360 end;bW[#bW+1]=e([[
                            <text x="%f" y="%f">%d</text>]],bw+5,dE-12,p)elseif i%5==0 then dD=5 end;if dD==10 then dG=e([[%s M %f %f v %d]],dG,bw,dE-5,dD)else dG=e([[%s M %f %f v %d]],dG,bw,dE-2.5,dD)end end;bW[#bW+1]=dG..[["/>]]bW[#bW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/>]],dF-5,dE+10,dF+5,dE+10,dF,dE+5)if d9 then d8="HDG"end;bW[#bW+1]=e([["
                <g class="pdim txt txtmid">
                <text x="%d" y="%d">%d deg</text>
                <text x="%d" y="%d">%s</text>
                </g>
                ]],dF,dE+25,dC,dF,dE+35,d8)end;function DrawArtificialHorizon(bW,d3,d2,centerX,centerY,d9,dH,bq)local dx=circleRad;local dI=d(dx*3/5)if dx>0 then local dJ=d(d3)local len=0;local dG=e([[<path transform="rotate(%f,%d,%d)" class="dim line" d="]],-1*d2,centerX,centerY)if not ad then dG=e([[<path transform="rotate(0,%d,%d)" class="dim line" d="]],centerX,centerY)end;bW[#bW+1]=e([[<clipPath id="cut"><circle r="%f" cx="%d" cy="%d"/></clipPath>]],dx-1,centerX,centerY)bW[#bW+1]=[[<g class="dim txttick" clip-path="url(#cut)">]]for i=d(dJ-30-dJ%5+0.5),d(dJ+30+dJ%5+0.5),5 do if i%10==0 then len=30 elseif i%5==0 then len=20 end;local bx=centerY+-i*5+d3*5;if len==30 then dG=e([[%s M %d %f h %d]],dG,centerX-dI-len,bx,len)if ad then bW[#bW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d2,centerX,centerY,centerX-dI+10,bx,i)bW[#bW+1]=e([[<g path transform="rotate(%f,%d,%d)" class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],-1*d2,centerX,centerY,centerX+dI-10,bx,i)if i==0 or i==180 or i==-180 then bW[#bW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d2,centerX,centerY,centerX-dI+20,bx,dI*2-40)end else bW[#bW+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX-dI+10,bx,i)bW[#bW+1]=e([[<g class="pdim txt txtmid"><text x="%d" y="%f">%d</text></g>]],centerX+dI-10,bx,i)end;dG=e([[%s M %d %f h %d]],dG,centerX+dI,bx,len)else dG=e([[%s M %d %f h %d]],dG,centerX-dI-len,bx,len)dG=e([[%s M %d %f h %d]],dG,centerX+dI,bx,len)end end;bW[#bW+1]=dG..[["/>]]local dK="PITCH"if not d9 then dK="REL PITCH"end;if d3>90 and not ad then d3=90-(d3-90)elseif d3<-90 and not ad then d3=-90-(d3+90)end;if dx>200 then if ad then if bq>w then bW[#bW+1]=e([["
                            <g class="pdim txt txtmid">
                            <text x="%d" y="%d">%s</text>
                            <text x="%d" y="%d">%d deg</text>
                            </g>
                            ]],centerX,centerY-15,"Yaw",centerX,centerY+20,dH)end;bW[#bW+1]=e([[<g transform="rotate(%f,%d,%d)">]],-d2,centerX,centerY)else bW[#bW+1]=e([[<g transform="rotate(0,%d,%d)">]],centerX,centerY)end;bW[#bW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX-dI+25,centerY-5,centerX-dI+20,centerY,centerX-dI+25,centerY+5,centerX-dI+50,centerY+4,dJ)bW[#bW+1]=e([[<<polygon points="%d,%d %d,%d %d,%d"/> class="pdim txtend"><text x="%d" y="%f">%d</text>]],centerX+dI-25,centerY-5,centerX+dI-20,centerY,centerX+dI-25,centerY+5,centerX+dI-30,centerY+4,dJ)bW[#bW+1]="</g>"end;local dL=d(dx/3)bW[#bW+1]=e([[<path d="m %d,%d %d,0" stroke-width="2" style="fill:none;stroke:#F5B800;" />]],centerX-dL,centerY,dx-dL)if not ad and d9 then bW[#bW+1]=e([[<path transform="rotate(%f,%d,%d)" d="m %d,%f %d,0" stroke-width="1" style="fill:none;stroke:#F5B800;" />]],-1*d2,centerX,centerY,centerX-dI+10,centerY,dI*2-20)end;bW[#bW+1]="</g>"if dx<200 then if ad and bq>w then bW[#bW+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dx,dK,centerX,centerY-dx+10,dJ,centerX,centerY-15,"Yaw",centerX,centerY+20,dH)else bW[#bW+1]=e([["
                        <g class="pdim txt txtmid">
                        <text x="%d" y="%d">%s</text>
                        <text x="%d" y="%d">%d deg</text>
                        </g>
                        ]],centerX,centerY-dx,dK,centerX,centerY-dx+15,dJ)end end end end;function DrawAltitudeDisplay(bW,bL,d9)local dM=altMeterX;local dN=altMeterY;local dO=78;local dP=19;local dQ=AboveGroundLevel()if dQ~=-1 then table.insert(bW,e([[
                <g class="pdim altsm txtend">
                <text x="%d" y="%d">AGL: %.1fm</text>
                </g>
                ]],dM+dO,dN+dP+20,dQ))end;if d9 and(bL<200000 and not ad or bL and ad)then table.insert(bW,e([[
                    <g class="pdim">                        
                        <rect class="line" x="%d" y="%d" width="%d" height="%d"/> 
                        <clipPath id="alt"><rect class="line" x="%d" y="%d" width="%d" height="%d"/></clipPath>
                        <g clip-path="url(#alt)">]],dM-1,dN-4,dO+2,dP+6,dM+1,dN-1,dO-4,dP))local bU=0;local dR=1;local dS=0;local dT=bL<0;local dU=9;if dT then dU=0 end;local bL=math.abs(bL)while bU<6 do local dV=11;local dW=16;local dX=9;local dY=14;local cL="altsm"if bU>2 then dW=dW+3;dV=dV+2;dY=dY+2;dX=dX-6;cL="altbig"end;if dT then cL=cL.." red"end;local dZ=bL/dR%10;local d_=d(dZ)local e0=d((d_+1)%10)local e1=dS;if bU==0 then e1=dZ-d_;if dT then e1=1-e1 end end;if dT and(bU==0 or dS~=0)then local e2=e0;e0=d_;d_=e2 end;local e3=dW*(e1-1)local e4=e3+dW;local bw=dM+dX+(6-bU)*dV;local bx=dN+dY;table.insert(bW,e([[
                        <g class="%s">
                        <text x="%d" y="%f">%d</text>
                        <text x="%d" y="%f">%d</text>
                        </g>
                    ]],cL,bw,bx+e3,e0,bw,bx+e4,d_))bU=bU+1;dR=dR*10;if d_==dU then dS=e1 else dS=0 end end;table.insert(bW,[[</g></g>]])end end;function DrawPrograde(bW,b4,bq,centerX,centerY)if bq>5 and not ad or bq>w then local dx=circleRad;local e5=20;local e6=20;local e7=vec3(b4)local e8=getRelativePitch(e7)local e9=getRelativeYaw(e7)local ea=-e9/e6*dx;local eb=e8/e5*dx;local bw=centerX+ea;local bx=centerY+eb;local a3=math.sqrt(ea^2+eb^2)if a3<dx then bW[#bW+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',bw,bx)else local dt=math.atan(eb,ea)local ec=centerX+dx*math.cos(dt)local ed=centerY+dx*math.sin(dt)bW[#bW+1]=e('<circle cx="%f" cy="%f" r="2" stroke="white" stroke-width="2" fill="white" />',ec,ed)end;e8=getRelativePitch(-e7)e9=getRelativeYaw(-e7)ea=-e9/e6*dx;eb=e8/e5*dx;bw=centerX+ea;bx=centerY+eb;a3=math.sqrt(ea^2+eb^2)if not ad then if a3<dx then bW[#bW+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',bw,bx)else local dt=math.atan(eb,ea)local ec=centerX+dx*math.cos(dt)local ed=centerY+dx*math.sin(dt)bW[#bW+1]=e('<circle cx="%f" cy="%f" r="2" stroke="red" stroke-width="2" fill="red" />',ec,ed)end end end end;function DrawWarnings(bW)bW[#bW+1]=e([[<text class="hudver" x="%d" y="%d">DU Hud Version: %.3f</text>]],ConvertResolutionX(1900),ConvertResolutionY(1070),VERSION_NUMBER)bW[#bW+1]=[[<g class="warnings">]]if unit.isMouseControlActivated()==1 then bW[#bW+1]=e([[
                    <text x="%d" y="%d">Warning: Invalid Control Scheme Detected</text>]],ConvertResolutionX(960),ConvertResolutionY(550))bW[#bW+1]=e([[
                    <text x="%d" y="%d">Keyboard Scheme must be selected</text>]],ConvertResolutionX(960),ConvertResolutionY(600))bW[#bW+1]=e([[
                    <text x="%d" y="%d">Set your preferred scheme in Lua Parameters instead</text>]],ConvertResolutionX(960),ConvertResolutionY(650))end;local ee=ConvertResolutionX(960)local ef=ConvertResolutionY(860)local eg=ConvertResolutionY(880)local eh=ConvertResolutionY(900)local ei=ConvertResolutionY(960)local ej=ConvertResolutionY(200)local ek=ConvertResolutionY(150)local el=ConvertResolutionY(960)if o()==1 and not RemoteHud then ef=ConvertResolutionY(135)eg=ConvertResolutionY(155)eh=ConvertResolutionY(175)ej=ConvertResolutionY(115)ek=ConvertResolutionY(95)end;if BrakeIsOn then bW[#bW+1]=e([[<text x="%d" y="%d">Brake Engaged</text>]],ee,ef)end;if ad and b3<b6 and b5>brakeLandingRate+5 then bW[#bW+1]=e([[<text x="%d" y="%d">** STALL WARNING **</text>]],ee,ej+50)end;if ah then bW[#bW+1]=e([[<text x="%d" y="%d">Gyro Enabled</text>]],ee,el)end;if GearExtended then if A then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Gear Extended</text>]],ee,eg)else bW[#bW+1]=e([[<text x="%d" y="%d">Landed (G: Takeoff)</text>]],ee,eg)end;bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Hover Height: %s</text>]],ee,eh,getDistanceDisplayString(Nav:getTargetGroundAltitude()))end;if O then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">ROCKET BOOST ENABLED</text>]],ee,ei+20)end;if antigrav and not ExternalAGG and antigrav.getState()==1 and AntigravTargetAltitude~=nil then if math.abs(ae-antigrav.getBaseAltitude())<501 then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],ee,ej+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))else bW[#bW+1]=e([[<text x="%d" y="%d">AGG On - Target Altitude: %d Singluarity Altitude: %d</text>]],ee,ej+20,d(AntigravTargetAltitude),d(antigrav.getBaseAltitude()))end elseif Autopilot and AutopilotTargetName~="None"then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Autopilot %s</text>]],ee,ej+20,AutopilotStatus)elseif LockPitch~=nil then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">LockedPitch: %d</text>]],ee,ej+20,d(LockPitch))elseif I then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Follow Mode Engaged</text>]],ee,ej+20)elseif Reentry then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Parachute Re-entry in Progress</text>]],ee,ej+20)end;if AltitudeHold then if AutoTakeoff then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Ascent to %s</text>]],ee,ej,getDistanceDisplayString(HoldAltitude))if BrakeIsOn then bW[#bW+1]=e([[<text class="crit" x="%d" y="%d">Throttle Up and Disengage Brake For Takeoff</text>]],ee,ej+50)end else bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">Altitude Hold: %s</text>]],ee,ej,getDistanceDisplayString2(HoldAltitude))end end;if BrakeLanding then if StrongBrakes then bW[#bW+1]=e([[<text x="%d" y="%d">Brake-Landing</text>]],ee,ej)else bW[#bW+1]=e([[<text x="%d" y="%d">Coast-Landing</text>]],ee,ej)end end;if ProgradeIsOn then bW[#bW+1]=e([[<text class="crit" x="%d" y="%d">Prograde Alignment</text>]],ee,ej)end;if RetrogradeIsOn then bW[#bW+1]=e([[<text class="crit" x="%d" y="%d">Retrograde Alignment</text>]],ee,ej)end;if TurnBurn then bW[#bW+1]=e([[<text class="crit" x="%d" y="%d">Turn & Burn Braking</text>]],ee,ek)end;if VectorToTarget then bW[#bW+1]=e([[<text class="warn" x="%d" y="%d">%s</text>]],ee,ej+30,VectorStatus)end;bW[#bW+1]="</g>"end;function DisplayOrbitScreen(bW)if orbit~=nil and j()<0.2 and planet~=nil and orbit.apoapsis~=nil and orbit.periapsis~=nil and orbit.period~=nil and orbit.apoapsis.speed>5 and DisplayOrbit then local em=OrbitMapX;local en=OrbitMapY;local eo=OrbitMapSize;local ep=4;en=en+ep;local eq=15;local bw=em+eo+em/2+ep;local bx=en+eo/2+5+ep;local er,es,et,eu;er=eo/4;eu=0;bW[#bW+1]=[[<g class="pbright txtorb txtmid">]]bW[#bW+1]=e('<rect width="%f" height="%d" rx="10" ry="10" x="%d" y="%d" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />',eo+em*2,eo+en,ep,ep)if orbit.periapsis~=nil and orbit.apoapsis~=nil then et=(orbit.apoapsis.altitude+orbit.periapsis.altitude+planet.radius*2)/(er*2)es=(planet.radius+orbit.periapsis.altitude+(orbit.apoapsis.altitude-orbit.periapsis.altitude)/2)/et*(1-orbit.eccentricity)eu=er-orbit.periapsis.altitude/et-planet.radius/et;local ev=""if orbit.periapsis.altitude<=0 then ev='redout'end;bW[#bW+1]=e([[<ellipse class="%s line" cx="%f" cy="%f" rx="%f" ry="%f"/>]],ev,em+eo/2+eu+ep,en+eo/2+ep,er,es)bW[#bW+1]=e('<circle cx="%f" cy="%f" r="%f" stroke="white" stroke-width="3" fill="blue" />',em+eo/2+ep,en+eo/2+ep,planet.radius/et)end;if orbit.apoapsis~=nil and orbit.apoapsis.speed<MaxGameVelocity and orbit.apoapsis.speed>1 then bW[#bW+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bw-35,bx-5,em+eo/2+er+eu,bx-5)bW[#bW+1]=e([[<text x="%f" y="%f">Apoapsis</text>]],bw,bx)bx=bx+eq;bW[#bW+1]=e([[<text x="%f" y="%f">%s</text>]],bw,bx,getDistanceDisplayString(orbit.apoapsis.altitude))bx=bx+eq;bW[#bW+1]=e([[<text x="%f" y="%f">%s</text>]],bw,bx,FormatTimeString(orbit.timeToApoapsis))bx=bx+eq;bW[#bW+1]=e([[<text x="%f" y="%f">%s</text>]],bw,bx,getSpeedDisplayString(orbit.apoapsis.speed))end;bx=en+eo/2+5+ep;bw=em-em/2+10+ep;if orbit.periapsis~=nil and orbit.periapsis.speed<MaxGameVelocity and orbit.periapsis.speed>1 then bW[#bW+1]=e([[<line class="pdim op30 linethick" x1="%f" y1="%f" x2="%f" y2="%f"/>]],bw+35,bx-5,em+eo/2-er+eu,bx-5)bW[#bW+1]=e([[<text x="%f" y="%f">Periapsis</text>]],bw,bx)bx=bx+eq;bW[#bW+1]=e([[<text x="%f" y="%f">%s</text>]],bw,bx,getDistanceDisplayString(orbit.periapsis.altitude))bx=bx+eq;bW[#bW+1]=e([[<text x="%f" y="%f">%s</text>]],bw,bx,FormatTimeString(orbit.timeToPeriapsis))bx=bx+eq;bW[#bW+1]=e([[<text x="%f" y="%f">%s</text>]],bw,bx,getSpeedDisplayString(orbit.periapsis.speed))end;bW[#bW+1]=e([[<text class="txtorbbig" x="%f" y="%d">%s</text>]],em+eo/2+ep,20+ep,planet.name)if orbit.period~=nil and orbit.periapsis~=nil and orbit.apoapsis~=nil and orbit.apoapsis.speed>1 then local ew=orbit.timeToApoapsis/orbit.period*2*math.pi;local ex=er*math.cos(ew)local ey=es*math.sin(ew)bW[#bW+1]=e('<circle cx="%f" cy="%f" r="5" stroke="white" stroke-width="3" fill="white" />',em+eo/2+ex+eu+ep,en+eo/2+ey+ep)end;bW[#bW+1]=[[</g>]]end end;function getDistanceDisplayString(a3)local ez=a3>100000;local bd=""if ez then bd=round(a3/1000/200,1).." SU"elseif a3<1000 then bd=round(a3,1).." M"else bd=round(a3/1000,1).." KM"end;return bd end;function getDistanceDisplayString2(a3)local ez=a3>100000;local bd=""if ez then bd=round(a3/1000/200,2).." SU"elseif a3<1000 then bd=round(a3,2).." M"else bd=round(a3/1000,2).." KM"end;return bd end;function getSpeedDisplayString(bq)return d(round(bq*3.6,0)+0.5).." km/h"end;function FormatTimeString(eA)local eB=0;local eC=0;local eD=0;if eA<60 then eA=d(eA)elseif eA<3600 then eB=d(eA/60)eA=d(eA%60)elseif eA<86400 then eC=d(eA/3600)eB=d(eA%3600/60)else eD=d(eA/86400)eC=d(eA%86400/3600)end;if eD>0 then return eD.."d "..eC.."h "elseif eC>0 then return eC.."h "..eB.."m "elseif eB>0 then return eB.."m "..eA.."s"elseif eA>0 then return eA.."s"else return"0s"end end;function getMagnitudeInDirection(cN,eE)cN=vec3(cN)eE=vec3(eE):normalize()local bd=cN*eE;return bd.x+bd.y+bd.z end;function UpdateAutopilotTarget()if AutopilotTargetIndex==0 then AutopilotTargetName="None"V=nil;return true end;local eF=AtlasOrdered[AutopilotTargetIndex].index;local eG=aS[0][eF]if eG.center then AutopilotTargetName=eG.name;V=aY[0][eF]if CustomTarget~=nil then if j()==0 then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)~=1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)~=1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)~=1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)~=1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)~=1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;CustomTarget=nil else CustomTarget=eG;for _,bc in pairs(aY[0])do if bc.name==CustomTarget.planetname then V=bc;AutopilotTargetName=CustomTarget.name;break end end;if system.updateData(widgetMaxMassText,widgetMaxMass)~=1 then system.addDataToWidget(widgetMaxMassText,widgetMaxMass)end;if system.updateData(widgetTravelTimeText,widgetTravelTime)~=1 then system.addDataToWidget(widgetTravelTimeText,widgetTravelTime)end end;if CustomTarget==nil then AutopilotTargetCoords=vec3(V.center)else AutopilotTargetCoords=CustomTarget.position end;if CustomTarget~=nil and CustomTarget.planetname=="Space"then AutopilotEndSpeed=0 else _,AutopilotEndSpeed=a_(V):escapeAndOrbitalSpeed(AutopilotTargetOrbit)end;AutopilotPlanetGravity=0;AutopilotAccelerating=false;AutopilotBraking=false;AutopilotCruising=false;Autopilot=false;AutopilotRealigned=false;AutopilotStatus="Aligning"return true end;function IncrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex+1;if AutopilotTargetIndex>#AtlasOrdered then AutopilotTargetIndex=0 end;UpdateAutopilotTarget()end;function DecrementAutopilotTargetIndex()AutopilotTargetIndex=AutopilotTargetIndex-1;if AutopilotTargetIndex<0 then AutopilotTargetIndex=#AtlasOrdered end;UpdateAutopilotTarget()end;function GetAutopilotMaxMass()local eH=LastMaxBrakeInAtmo/V:getGravity(V.center+vec3(0,0,1)*V.radius):len()return eH end;function GetAutopilotTravelTime()if not Autopilot then if CustomTarget==nil or CustomTarget.planetname~=planet.name then AutopilotDistance=(V.center-vec3(core.getConstructWorldPos())):len()else AutopilotDistance=(CustomTarget.position-vec3(core.getConstructWorldPos())):len()end end;local b4=core.getWorldVelocity()local bq=vec3(b4):len()local eI,eJ=aZ.computeDistanceAndTime(vec3(b4):len(),MaxGameVelocity,n(),Nav:maxForceForward(),warmup,0)local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;local _,eK;if not TurnBurn then _,eK=GetAutopilotBrakeDistanceAndTime(bq)else _,eK=GetAutopilotTBBrakeDistanceAndTime(bq)end;local eL=0;local eM=0;if AutopilotCruising or not Autopilot and bq>5 then eM=aZ.computeTravelTime(bq,0,AutopilotDistance)elseif P+eI<AutopilotDistance then eL=AutopilotDistance-(P+eI)eM=aZ.computeTravelTime(8333.0556,0,eL)else local eN=(AutopilotDistance-P)/eI;eI=AutopilotDistance-P;eJ=eJ*eN end;if CustomTarget~=nil and CustomTarget.planetname==planet.name and not Autopilot then return eM elseif AutopilotBraking then return eK elseif AutopilotCruising then return eM+eK else return eJ+Q+eM end end;function GetAutopilotBrakeDistanceAndTime(bq)if not ad then RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bq,AutopilotEndSpeed,n(),0,0,LastMaxBrake-AutopilotPlanetGravity*n())else if LastMaxBrakeInAtmo and LastMaxBrakeInAtmo>0 then return aZ.computeDistanceAndTime(bq,AutopilotEndSpeed,n(),0,0,LastMaxBrakeInAtmo-AutopilotPlanetGravity*n())else return 0,0 end end end;function GetAutopilotTBBrakeDistanceAndTime(bq)RefreshLastMaxBrake()return aZ.computeDistanceAndTime(bq,AutopilotEndSpeed,n(),Nav:maxForceForward(),warmup,LastMaxBrake-AutopilotPlanetGravity*n())end;function hoverDetectGround()local eO=-1;local eP=-1;if vBooster then eO=vBooster.distance()end;if hover then eP=hover.distance()end;if eO~=-1 and eP~=-1 then if eO<eP then return eO else return eP end elseif eO~=-1 then return eO elseif eP~=-1 then return eP else return-1 end end;function AboveGroundLevel()local eQ=-1;local eR=hoverDetectGround()if telemeter_1 then eQ=telemeter_1.getDistance()end;if eR~=-1 and eQ~=-1 then if eR<eQ then return eR else return eQ end elseif eR~=-1 then return eR else return eQ end end;function tablelength(eS)local eT=0;for _ in pairs(eS)do eT=eT+1 end;return eT end;function BeginProfile(eU)ProfileTimeStart=system.getTime()end;function EndProfile(eU)local eV=system.getTime()-ProfileTimeStart;ProfileTimeSum=ProfileTimeSum+eV;ProfileCount=ProfileCount+1;if eV>ProfileTimeMax then ProfileTimeMax=eV end;if eV<ProfileTimeMin then ProfileTimeMin=eV end end;function ResetProfiles()ProfileTimeMin=9999;ProfileTimeMax=0;ProfileCount=0;ProfileTimeSum=0 end;function ReportProfiling()local eW=ProfileTimeSum;local eX=ProfileTimeSum/ProfileCount;local eY=ProfileTimeMin;local eZ=ProfileTimeMax;local e_=ProfileCount;c(e("SUM: %.4f AVG: %.4f MIN: %.4f MAX: %.4f CNT: %d",eW,eX,eY,eZ,e_))end;function updateWeapons()if weapon then if WeaponPanelID==nil and(radarPanelID~=nil or GearExtended)then _autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)WeaponPanelID=_autoconf.panels[_autoconf.panels_size]elseif WeaponPanelID~=nil and radarPanelID==nil and not GearExtended then system.destroyWidgetPanel(WeaponPanelID)WeaponPanelID=nil end end end;function updateRadar()if radar_1 then local f0=radar_1.getEntries()local f1=radar_1.getData()local f2=ConvertResolutionX(1770)local f3=ConvertResolutionY(330)if#f0>0 then local f4=f1:find('identifiedConstructs":%[%]')if f4==nil and perisPanelID==nil then a6=1;ToggleRadarPanel()end;if f4~=nil and perisPanelID~=nil then ToggleRadarPanel()end;if radarPanelID==nil then ToggleRadarPanel()end;a4=e([[<text class="pbright txtbig txtmid" x="%d" y="%d">Radar: %i contacts</text>]],f2,f3,#f0)local f5={}for bb,bc in pairs(f0)do if radar_1.hasMatchingTransponder(bc)==1 then table.insert(f5,bc)end end;if#f5>0 then local bx=ConvertResolutionY(15)local bw=ConvertResolutionX(1370)a4=e([[%s<text class="pbright txtbig txtmid" x="%d" y="%d">Friendlies In Range</text>]],a4,bw,bx)for bb,bc in pairs(f5)do bx=bx+20;a4=e([[%s<text class="pdim txtmid" x="%d" y="%d">%s</text>]],a4,bw,bx,radar_1.getConstructName(bc))end end else local f6;f6=f1:find('worksInEnvironment":false')if f6 then a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: Jammed</text>]],f2,f3)else a4=e([[
                            <text class="pbright txtbig txtmid" x="%d" y="%d">Radar: No Contacts</text>]],f2,f3)end;if radarPanelID~=nil then a6=0;ToggleRadarPanel()end end end end;function DisplayMessage(bW,f7)if f7~="empty"then bW[#bW+1]=[[<text class="msg" x="50%%" y="310" >]]for f8 in string.gmatch(f7,"([^\n]+)")do bW[#bW+1]=e([[<tspan x="50%%" dy="35">%s</tspan>]],f8)end;bW[#bW+1]=[[</text>]]end;if a2~=0 then unit.setTimer("msgTick",a2)a2=0 end end;function updateDistance()local bk=system.getTime()local b4=vec3(core.getWorldVelocity())local d6=vec3(b4):len()local f9=bk-ag;if d6>1.38889 then d6=d6/1000;local fa=d6*(bk-ag)TotalDistanceTravelled=TotalDistanceTravelled+fa;W=W+fa end;X=X+f9;TotalFlightTime=TotalFlightTime+f9;ag=bk end;function Atlas()return{[0]={[0]={GM=0,bodyId=0,center={x=0,y=0,z=0},name='Space',planetarySystemId=0,radius=0,atmos=false,gravity=0},[1]={GM=6930729684,bodyId=1,center={x=17465536.000,y=22665536.000,z=-34464.000},name='Madis',planetarySystemId=0,radius=44300,atmos=true,gravity=0.36},[2]={GM=157470826617,bodyId=2,center={x=-8.000,y=-8.000,z=-126303.000},name='Alioth',planetarySystemId=0,radius=126068,atmos=true,gravity=1.01},[3]={GM=11776905000,bodyId=3,center={x=29165536.000,y=10865536.000,z=65536.000},name='Thades',planetarySystemId=0,radius=49000,atmos=true,gravity=0.50},[4]={GM=14893847582,bodyId=4,center={x=-13234464.000,y=55765536.000,z=465536.000},name='Talemai',planetarySystemId=0,radius=57450,atmos=true,gravity=0.46},[5]={GM=16951680000,bodyId=5,center={x=-43534464.000,y=22565536.000,z=-48934464.000},name='Feli',planetarySystemId=0,radius=60000,atmos=true,gravity=0.48},[6]={GM=10502547741,bodyId=6,center={x=52765536.000,y=27165538.000,z=52065535.000},name='Sicari',planetarySystemId=0,radius=51100,atmos=true,gravity=0.41},[7]={GM=13033380591,bodyId=7,center={x=58665538.000,y=29665535.000,z=58165535.000},name='Sinnen',planetarySystemId=0,radius=54950,atmos=true,gravity=0.44},[8]={GM=18477723600,bodyId=8,center={x=80865538.000,y=54665536.000,z=-934463.940},name='Teoma',planetarySystemId=0,radius=62000,atmos=true,gravity=0.49},[9]={GM=18606274330,bodyId=9,center={x=-94134462.000,y=12765534.000,z=-3634464.000},name='Jago',planetarySystemId=0,radius=61590,atmos=true,gravity=0.50},[10]={GM=78480000,bodyId=10,center={x=17448118.224,y=22966846.286,z=143078.820},name='Madis Moon 1',planetarySystemId=0,radius=10000,atmos=false,gravity=0.08},[11]={GM=237402000,bodyId=11,center={x=17194626.000,y=22243633.880,z=-214962.810},name='Madis Moon 2',planetarySystemId=0,radius=11000,atmos=false,gravity=0.10},[12]={GM=265046609,bodyId=12,center={x=17520614.000,y=22184730.000,z=-309989.990},name='Madis Moon 3',planetarySystemId=0,radius=15005,atmos=false,gravity=0.12},[21]={GM=2118960000,bodyId=21,center={x=457933.000,y=-1509011.000,z=115524.000},name='Alioth Moon 1',planetarySystemId=0,radius=30000,atmos=false,gravity=0.24},[22]={GM=2165833514,bodyId=22,center={x=-1692694.000,y=729681.000,z=-411464.000},name='Alioth Moon 4',planetarySystemId=0,radius=30330,atmos=false,gravity=0.24},[26]={GM=68234043600,bodyId=26,center={x=-1404835.000,y=562655.000,z=-285074.000},name='Sanctuary',planetarySystemId=0,radius=83400,atmos=true,gravity=1.00},[30]={GM=211564034,bodyId=30,center={x=29214402.000,y=10907080.695,z=433858.200},name='Thades Moon 1',planetarySystemId=0,radius=14002,atmos=false,gravity=0.11},[31]={GM=264870000,bodyId=31,center={x=29404193.000,y=10432768.000,z=19554.131},name='Thades Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[40]={GM=141264000,bodyId=40,center={x=-13503090.000,y=55594325.000,z=769838.640},name='Talemai Moon 2',planetarySystemId=0,radius=12000,atmos=false,gravity=0.10},[41]={GM=106830900,bodyId=41,center={x=-12800515.000,y=55700259.000,z=325207.840},name='Talemai Moon 3',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[42]={GM=264870000,bodyId=42,center={x=-13058408.000,y=55781856.000,z=740177.760},name='Talemai Moon 1',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[50]={GM=499917600,bodyId=50,center={x=-43902841.780,y=22261034.700,z=-48862386.000},name='Feli Moon 1',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[70]={GM=396912600,bodyId=70,center={x=58969616.000,y=29797945.000,z=57969449.000},name='Sinnen Moon 1',planetarySystemId=0,radius=17000,atmos=false,gravity=0.14},[100]={GM=13975172474,bodyId=100,center={x=98865536.000,y=-13534464.000,z=-934461.990},name='Lacobus',planetarySystemId=0,radius=55650,atmos=true,gravity=0.46},[101]={GM=264870000,bodyId=101,center={x=98905288.170,y=-13950921.100,z=-647589.530},name='Lacobus Moon 3',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12},[102]={GM=444981600,bodyId=102,center={x=99180968.000,y=-13783862.000,z=-926156.400},name='Lacobus Moon 1',planetarySystemId=0,radius=18000,atmos=false,gravity=0.14},[103]={GM=211503600,bodyId=103,center={x=99250052.000,y=-13629215.000,z=-1059341.400},name='Lacobus Moon 2',planetarySystemId=0,radius=14000,atmos=false,gravity=0.11},[110]={GM=9204742375,bodyId=110,center={x=14165536.000,y=-85634465.000,z=-934464.300},name='Symeon',planetarySystemId=0,radius=49050,atmos=true,gravity=0.39},[120]={GM=7135606629,bodyId=120,center={x=2865536.700,y=-99034464.000,z=-934462.020},name='Ion',planetarySystemId=0,radius=44950,atmos=true,gravity=0.36},[121]={GM=106830900,bodyId=121,center={x=2472916.800,y=-99133747.000,z=-1133582.800},name='Ion Moon 1',planetarySystemId=0,radius=11000,atmos=false,gravity=0.09},[122]={GM=176580000,bodyId=122,center={x=2995424.500,y=-99275010.000,z=-1378480.700},name='Ion Moon 2',planetarySystemId=0,radius=15000,atmos=false,gravity=0.12}}}end;function SetupAtlas()aS=Atlas()for bb,bc in pairs(aS[0])do if av==nil or bc.center.x<av then av=bc.center.x end;if aw==nil or bc.center.x>aw then aw=bc.center.x end;if ax==nil or bc.center.y<ax then ax=bc.center.y end;if ay==nil or bc.center.y>ay then ay=bc.center.y end end;aT=""local fb=1.1*(aw-av)/1920;local fc=1.4*(ay-ax)/1080;for bb,bc in pairs(aS[0])do local bw=960+bc.center.x/fb;local bx=540+bc.center.y/fc;aT=aT..'<circle cx="'..bw..'" cy="'..bx..'" r="'..bc.radius/fb*30 ..'" stroke="white" stroke-width="3" fill="blue" />'if not string.match(bc.name,"Moon")and not string.match(bc.name,"Sanctuary")and not string.match(bc.name,"Space")then aT=aT.."<text x='"..bw.."' y='"..bx+bc.radius/fb*30+20 .."' font-size='28' fill="..aj.." text-anchor='middle' font-family='Montserrat'>"..bc.name.."</text>"end end;local bF=vec3(core.getConstructWorldPos())local bw=960+bF.x/fb;local bx=540+bF.y/fc;aT=aT..'<circle cx="'..bw..'" cy="'..bx..'" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='"..bw.."' y='"..bx-50 .."' font-size='36' fill='darkred' text-anchor='middle' font-family='Bank' font-weight='bold'>You Are Here</text>"aT=aT..[[</svg>]]aU=fb;aV=fc;if screen_2 then screen_2.setHTML('<svg width="100%" height="100%" viewBox="0 0 1920 1080">'..aT)local bF=vec3(core.getConstructWorldPos())local bw=960+bF.x/fb;local bx=540+bF.y/fc;aT='<svg><circle cx="80" cy="80" r="5" stroke="white" stroke-width="3" fill="red"/>'aT=aT.."<text x='80' y='105' font-size='18' fill="..aj.." text-anchor='middle' font-family='Montserrat''>You Are Here</text></svg>"aW=screen_2.addContent((bw-80)/19.20,(bx-80)/10.80,aT)end end;function PlanetRef()local function fd(fe)return type(fe)=='number'end;local function ff(fe)return type(tonumber(fe))=='number'end;local function fg(fh)return type(fh)=='table'end;local function fi(fj)return type(fj)=='string'end;local function fk(bc)return fg(bc)and fd(bc.x and bc.y and bc.z)end;local function fl(fm)return fg(fm)and fd(fm.latitude and fm.longitude and fm.altitude and fm.bodyId and fm.systemId)end;local fn=math.pi/180;local fo=180/math.pi;local fp=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bG='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local fq=utils.clamp;local function fr(fs,ft)if fs==0 then return math.abs(ft)<1e-09 end;if ft==0 then return math.abs(fs)<1e-09 end;return math.abs(fs-ft)<math.max(math.abs(fs),math.abs(ft))*fp end;local function fu(fe)local bd=string.gsub(string.reverse(e('%.4f',fe)),'^0*%.?','')return bd==''and'0'or string.reverse(bd)end;local function fv(fw)if fk(fw)then return e('{x=%.3f,y=%.3f,z=%.3f}',fw.x,fw.y,fw.z)end;if fg(fw)and not getmetatable(fw)then local fx={}local fy=next(fw)if type(fy)=='nil'or fy==1 then fx=fw else for bb,bc in pairs(fw)do local dq=fv(bc)if type(bb)=='number'then table.insert(fx,e('[%s]=%s',bb,dq))else table.insert(fx,e('%s=%s',bb,dq))end end end;return e('{%s}',table.concat(fx,','))end;if fi(fw)then return e("'%s'",fw:gsub("'",[[\']]))end;return tostring(fw)end;local fz={}fz.__index=fz;fz.__tostring=function(fw,fA)local fB={}for bb in pairs(fw)do table.insert(fB,bb)end;table.sort(fB)local fx={}for _,bb in ipairs(fB)do local dq=fv(fw[bb])if type(bb)=='number'then table.insert(fx,e('[%s]=%s',bb,dq))else table.insert(fx,e('%s=%s',bb,dq))end end;if fA then return e('%s%s',fA,table.concat(fx,',\n'..fA))end;return e('{%s}',table.concat(fx,','))end;fz.__eq=function(fC,fD)return fC.planetarySystemId==fD.planetarySystemId and fC.bodyId==fD.bodyId and fr(fC.radius,fD.radius)and fr(fC.center.x,fD.center.x)and fr(fC.center.y,fD.center.y)and fr(fC.center.z,fD.center.z)and fr(fC.GM,fD.GM)end;local function fE(bH,bI,fF,fG,fH)assert(ff(bH),'Argument 1 (planetarySystemId) must be a number:'..type(bH))assert(ff(bI),'Argument 2 (bodyId) must be a number:'..type(bI))assert(ff(fF),'Argument 3 (radius) must be a number:'..type(fF))assert(fg(fG),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(fG))assert(ff(fH),'Argument 5 (GM) must be a number:'..type(fH))return setmetatable({planetarySystemId=tonumber(bH),bodyId=tonumber(bI),radius=tonumber(fF),center=vec3(fG),GM=tonumber(fH)},fz)end;local fI={}fI.__index=fI;fI.__tostring=function(fJ)return e('::pos{%d,%d,%s,%s,%s}',fJ.systemId,fJ.bodyId,fu(fJ.latitude*fo),fu(fJ.longitude*fo),fu(fJ.altitude))end;fI.__eq=function(fC,fD)return fC.bodyId==fD.bodyId and fC.systemId==fD.systemId and fr(fC.latitude,fD.latitude)and fr(fC.altitude,fD.altitude)and(fr(fC.longitude,fD.longitude)or fr(fC.latitude,math.pi/2)or fr(fC.latitude,-math.pi/2))end;local function fK(fL,bI,bJ,bK,bL)local bH=fL;if fi(fL)and not bK and not bL and not bI and not bJ then bH,bI,bJ,bK,bL=string.match(fL,bG)assert(bH,'Argument 1 (position string) is malformed.')else assert(ff(bH),'Argument 1 (systemId) must be a number:'..type(bH))assert(ff(bI),'Argument 2 (bodyId) must be a number:'..type(bI))assert(ff(bJ),'Argument 3 (latitude) must be in degrees:'..type(bJ))assert(ff(bK),'Argument 4 (longitude) must be in degrees:'..type(bK))assert(ff(bL),'Argument 5 (altitude) must be in meters:'..type(bL))end;bH=tonumber(bH)bI=tonumber(bI)bJ=tonumber(bJ)bK=tonumber(bK)bL=tonumber(bL)if bI==0 then return setmetatable({latitude=bJ,longitude=bK,altitude=bL,bodyId=bI,systemId=bH},fI)end;return setmetatable({latitude=fn*fq(bJ,-90,90),longitude=fn*(bK%360),altitude=bL,bodyId=bI,systemId=bH},fI)end;local fM={}fM.__index=fM;fM.__tostring=function(fw,fA)local fN=fA and fA..'  'local fO={}local fB={}for bb in pairs(fw)do table.insert(fB,bb)end;table.sort(fB)for _,fP in ipairs(fB)do bdy=fw[fP]local fQ=fz.__tostring(bdy,fN)if fA then table.insert(fO,e('[%s]={\n%s\n%s}',fP,fQ,fA))else table.insert(fO,e('  [%s]=%s',fP,fQ))end end;if fA then return e('\n%s%s%s',fA,table.concat(fO,',\n'..fA),fA)end;return e('{\n%s\n}',table.concat(fO,',\n'))end;local function fR(fS)local aS={}local pid;for _,bc in pairs(fS)do local bS=bc.planetarySystemId;if type(bS)~='number'then error('Invalid planetary system ID: '..tostring(bS))elseif pid and bS~=pid then error('Mismatch planetary system IDs: '..bS..' and '..pid)end;local fT=bc.bodyId;if type(fT)~='number'then error('Invalid body ID: '..tostring(fT))elseif aS[fT]then error('Duplicate body ID: '..tostring(fT))end;setmetatable(bc.center,getmetatable(vec3.unit_x))aS[fT]=setmetatable(bc,fz)pid=bS end;return setmetatable(aS,fM)end;aX={}local function fU(fS)return setmetatable({galaxyAtlas=fS or{}},aX)end;aX.__index=function(fh,i)if type(i)=='number'then local system=fh.galaxyAtlas[i]return fR(system)end;return rawget(aX,i)end;aX.__pairs=function(fw)return function(fh,bb)local fV,nv=next(fh,bb)return fV,nv and fR(nv)end,fw.galaxyAtlas,nil end;aX.__tostring=function(fw)local fW={}for _,fX in pairs(fw or{})do local fY=fX:getPlanetarySystemId()local fZ=fM.__tostring(fX,'    ')table.insert(fW,e('  [%s]={%s\n  }',fY,fZ))end;return e('{\n%s\n}\n',table.concat(fW,',\n'))end;aX.BodyParameters=fE;aX.MapPosition=fK;aX.PlanetarySystem=fR;function aX.createBodyParameters(f_,bI,g0,g1,g2,g3,g4)assert(ff(f_),'Argument 1 (planetarySystemId) must be a number:'..type(f_))assert(ff(bI),'Argument 2 (bodyId) must be a number:'..type(bI))assert(ff(g0),'Argument 3 (surfaceArea) must be a number:'..type(g0))assert(fg(g1),'Argument 4 (aPosition) must be an array or vec3:'..type(g1))assert(fg(g2),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(g2))assert(ff(g3),'Argument 6 (altitude) must be in meters:'..type(g3))assert(ff(g4),'Argument 7 (gravityAtPosition) must be number:'..type(g4))local fF=math.sqrt(g0/4/math.pi)local a3=fF+g3;local g5=vec3(g1)+a3*vec3(g2)local fH=g4*a3*a3;return fE(f_,bI,fF,g5,fH)end;aX.isMapPosition=fl;function aX:getPlanetarySystem(fL)if i==nil then i=0 end;if nv==nil then nv=0 end;local f_=fL;if fl(fL)then f_=fL.systemId end;if type(f_)=='number'then local system=self.galaxyAtlas[i]if system then if getmetatable(nv)~=fM then system=fR(system)end;return system end end end;function fM:castIntersections(g6,eE,g7,g8)local g7=g7 or function(g9)return 1.05*g9.radius end;local ga={}if g8 then for _,i in ipairs(g8)do ga[i]=self[i]end else g8={}for bb,g9 in pairs(self)do table.insert(g8,bb)ga[bb]=g9 end end;local function gb(gc,gd)local ge=ga[gc].center-g6;local gf=ga[gd].center-g6;return ge:len()<gf:len()end;table.sort(g8,gb)local gg=eE:normalize()for i,bS in ipairs(g8)do local g9=ga[bS]local gh=g9.center-g6;local fF=g7(g9)local gi=gh:dot(gg)local gj=gi^2-(gh:len2()-fF^2)if gj>=0 then local gk=math.sqrt(gj)local gl=gi+gk;local gm=gi-gk;if gm>0 then return g9,gl,gm elseif gl>0 then return g9,gl,nil end end end;return nil,nil,nil end;function fM:closestBody(gn)assert(type(gn)=='table','Invalid coordinates.')local go,g9;local gp=vec3(gn)for _,gq in pairs(self)do local gr=(gq.center-gp):len2()if(not g9 or gr<go)and gq.name~="Space"then g9=gq;go=gr end end;return g9 end;function fM:convertToBodyIdAndWorldCoordinates(fL)local gs=fL;if fi(fL)then gs=fK(fL)end;if gs.bodyId==0 then return 0,vec3(gs.latitude,gs.longitude,gs.altitude)end;local gq=self:getBodyParameters(gs)if gq then return gs.bodyId,gq:convertToWorldCoordinates(gs)end end;function fM:getBodyParameters(fL)local bI=fL;if fl(fL)then bI=fL.bodyId end;assert(ff(bI),'Argument 1 (bodyId) must be a number:'..type(bI))return self[bI]end;function fM:getPlanetarySystemId()local _,bc=next(self)return bc and bc.planetarySystemId end;function fz:convertToMapPosition(fG)assert(fg(fG),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(fG))local gt=vec3(fG)if self.bodyId==0 then return setmetatable({latitude=gt.x,longitude=gt.y,altitude=gt.z,bodyId=0,systemId=self.planetarySystemId},fI)end;local gu=gt-self.center;local a3=gu:len()local bL=a3-self.radius;local bJ=0;local bK=0;if not fr(a3,0)then local gv=math.atan(gu.y,gu.x)bK=gv>=0 and gv or 2*math.pi+gv;bJ=math.pi/2-math.acos(gu.z/a3)end;return setmetatable({latitude=bJ,longitude=bK,altitude=bL,bodyId=self.bodyId,systemId=self.planetarySystemId},fI)end;function fz:convertToWorldCoordinates(fL)local gs=fi(fL)and fK(fL)or fL;if gs.bodyId==0 then return vec3(gs.latitude,gs.longitude,gs.altitude)end;assert(fl(gs),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(gs.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(gs.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local bM=math.cos(gs.latitude)return self.center+(self.radius+gs.altitude)*vec3(bM*math.cos(gs.longitude),bM*math.sin(gs.longitude),math.sin(gs.latitude))end;function fz:getAltitude(fG)return(vec3(fG)-self.center):len()-self.radius end;function fz:getDistance(fG)return(vec3(fG)-self.center):len()end;function fz:getGravity(fG)local gw=self.center-vec3(fG)local gx=gw:len2()return self.GM/gx*gw/math.sqrt(gx)end;return setmetatable(aX,{__call=function(_,...)return fU(...)end})end;function Keplers()local vec3=require('cpml.vec3')local PlanetRef=PlanetRef()local function fi(fj)return type(fj)=='string'end;local function fg(fh)return type(fh)=='table'end;local function fr(fs,ft)if fs==0 then return math.abs(ft)<1e-09 end;if ft==0 then return math.abs(fs)<1e-09 end;return math.abs(fs-ft)<math.max(math.abs(fs),math.abs(ft))*constants.epsilon end;Kepler={}Kepler.__index=Kepler;function Kepler:escapeAndOrbitalSpeed(bL)assert(self.body)local a3=bL+self.body.radius;if not fr(a3,0)then local orbit=math.sqrt(self.body.GM/a3)return math.sqrt(2)*orbit,orbit end;return nil,nil end;function Kepler:orbitalParameters(fL,b4)assert(self.body)assert(fg(fL)or fi(fL))assert(fg(b4))local bF=(fi(fL)or PlanetRef.isMapPosition(fL))and self.body:convertToWorldCoordinates(fL)or vec3(fL)local bc=vec3(b4)local gy=bF-self.body.center;local gf=bc:len2()local gz=gy:len()local gA=self.body.GM;local gB=((gf-gA/gz)*gy-gy:dot(bc)*bc)/gA;local fs=gA/(2*gA/gz-gf)local gC=gB:len()local gg=gB:normalize()local gD=fs*(1-gC)local gE=fs*(1+gC)local gF=gD*gg+self.body.center;local gG=gC<=1 and-gE*gg+self.body.center or nil;local gH=math.sqrt(fs*gA*(1-gC*gC))local gI=gG and 2*math.pi*math.sqrt(fs^3/gA)local gJ=math.acos(gB:dot(gy)/(gC*gz))if gy:dot(bc)<0 then gJ=-(gJ-2*math.pi)end;local gK=math.acos((math.cos(gJ)+gC)/(1+gC*math.cos(gJ)))local gL=gK;if gL<0 then gL=gL+2*math.pi end;local gM=gL-gC*math.sin(gL)local gN=0;local gO=0;local gP=0;if gI~=nil then gN=gM/(2*math.pi/gI)gO=gI-gN;gP=gO+gI/2;if gJ-math.pi>0 then gO=gN;gP=gO+gI/2 end;if gP>gI then gP=gP-gI end end;return{periapsis={position=gF,speed=gH/gD,circularOrbitSpeed=math.sqrt(gA/gD),altitude=gD-self.body.radius},apoapsis=gG and{position=gG,speed=gH/gE,circularOrbitSpeed=math.sqrt(gA/gE),altitude=gE-self.body.radius},currentVelocity=bc,currentPosition=bF,eccentricity=gC,period=gI,eccentricAnomaly=gK,meanAnomaly=gM,timeToPeriapsis=gO,timeToApoapsis=gP}end;local function gQ(gR)local gq=PlanetRef.BodyParameters(gR.planetarySystemId,gR.bodyId,gR.radius,gR.center,gR.GM)return setmetatable({body=gq},Kepler)end;return setmetatable(Kepler,{__call=function(_,...)return gQ(...)end})end;function Kinematics()local aZ={}local gS=30000000/3600;local gT=gS*gS;local gU=100;local function gV(bc)return 1/math.sqrt(1-bc*bc/gT)end;function aZ.computeAccelerationTime(gW,gX,gY)local gZ=gS*math.asin(gW/gS)return(gS*math.asin(gY/gS)-gZ)/gX end;function aZ.computeDistanceAndTime(gW,gY,g_,h0,h1,h2)h1=h1 or 0;h2=h2 or 0;local h3=gW<=gY;local h4=h0*(h3 and 1 or-1)/g_;local h5=-h2/g_;local h6=h4+h5;if h3 and h6<=0 or not h3 and h6>=0 then return-1,-1 end;local h7,h8=0,0;if h4~=0 and h1>0 then local gZ=math.asin(gW/gS)local h9=math.pi*(h4/2+h5)local ha=h4*h1;local hb=gS*math.pi;local bc=function(fh)local ch=(h9*fh-ha*math.sin(math.pi*fh/2/h1)+hb*gZ)/hb;local hc=math.tan(ch)return gS*hc/math.sqrt(hc*hc+1)end;local hd=h3 and function(fj)return fj>=gY end or function(fj)return fj<=gY end;h8=2*h1;if hd(bc(h8))then local he=0;while math.abs(h8-he)>0.5 do local fh=(h8+he)/2;if hd(bc(fh))then h8=fh else he=fh end end end;local hf=gW;local hg=h8/gU;for hh=1,gU do local bq=bc(hh*hg)h7=h7+(bq+hf)*hg/2;hf=bq end;if h8<2*h1 then return h7,h8 end;gW=hf end;local gZ=gS*math.asin(gW/gS)local be=(gS*math.asin(gY/gS)-gZ)/h6;local hi=gT*math.cos(gZ/gS)/h6;local a3=hi-gT*math.cos((h6*be+gZ)/gS)/h6;return a3+h7,be+h8 end;function aZ.computeTravelTime(gW,gX,a3)if a3==0 then return 0 end;if gX>0 then local gZ=gS*math.asin(gW/gS)local hi=gT*math.cos(gZ/gS)/gX;return(gS*math.acos(gX*(hi-a3)/gT)-gZ)/gX end;assert(gW>0,'Acceleration and initial speed are both zero.')return a3/gW end;function aZ.lorentz(bc)return gV(bc)end;return aZ end;function script.onStart()VERSION_NUMBER=4.93;SetupComplete=false;beginSetup=coroutine.create(function()Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})SetupChecks()LoadVariables()coroutine.yield()ProcessElements()coroutine.yield()SetupButtons()coroutine.yield()SetupAtlas()aX=PlanetRef()aY=aX(Atlas())aZ=Kinematics()a_=Keplers()AddLocationsToAtlas()UpdateAtlasLocationsList()UpdateAutopilotTarget()coroutine.yield()unit.hide()system.showScreen(1)collectgarbage("collect")unit.setTimer("apTick",apTickRate)unit.setTimer("hudTick",hudTickRate)unit.setTimer("oneSecond",1)unit.setTimer("tenthSecond",1/10)if UseSatNav then unit.setTimer("fiveSecond",5)end end)end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil and not ExternalAGG then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;core.hide()Nav.control.switchOffHeadlights()local bQ=j()if door and(bQ>0 or bQ==0 and ae<10000)then for _,bc in pairs(door)do bc.toggle()end end;if switch then for _,bc in pairs(switch)do bc.toggle()end end;if forcefield and(bQ>0 or bQ==0 and ae<10000)then for _,bc in pairs(forcefield)do bc.toggle()end end;if dbHud_1 then if not Y then for bb,bc in pairs(b)do dbHud_1.setStringValue(bc,g(_G[bc]))end;for bb,bc in pairs(a)do dbHud_1.setStringValue(bc,g(_G[bc]))end;c("Saved Variables to Datacore")end end;if button then button.activate()end end;function script.onTick(hj)if hj=="tenthSecond"then if AutopilotTargetName~="None"then if panelInterplanetary==nil then SetupInterplanetaryPanel()end;if AutopilotTargetName~=nil then local hk=CustomTarget~=nil;planetMaxMass=GetAutopilotMaxMass()system.updateData(interplanetaryHeaderText,'{"label": "Target", "value": "'..AutopilotTargetName..'", "unit":""}')travelTime=GetAutopilotTravelTime()if hk then a3=(vec3(core.getConstructWorldPos())-CustomTarget.position):len()else a3=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()end;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)R,S=GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)R,S=GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)end;system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(a3)..'", "unit":""}')system.updateData(widgetTravelTimeText,'{"label": "Travel Time", "value": "'..FormatTimeString(travelTime)..'", "unit":""}')system.updateData(widgetCurBrakeDistanceText,'{"label": "Cur Brake distance", "value": "'..getDistanceDisplayString(P)..'", "unit":""}')system.updateData(widgetCurBrakeTimeText,'{"label": "Cur Brake Time", "value": "'..FormatTimeString(Q)..'", "unit":""}')system.updateData(widgetMaxBrakeDistanceText,'{"label": "Max Brake distance", "value": "'..getDistanceDisplayString(R)..'", "unit":""}')system.updateData(widgetMaxBrakeTimeText,'{"label": "Max Brake Time", "value": "'..FormatTimeString(S)..'", "unit":""}')system.updateData(widgetMaxMassText,'{"label": "Maximum Mass", "value": "'..e("%.2f tons",planetMaxMass/1000)..'", "unit":""}')if j()>0 and not WasInAtmo then system.removeDataFromWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)system.removeDataFromWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)system.removeDataFromWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)system.removeDataFromWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)system.removeDataFromWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)WasInAtmo=true end;if j()==0 and WasInAtmo then if system.updateData(widgetMaxBrakeTimeText,widgetMaxBrakeTime)==1 then system.addDataToWidget(widgetMaxBrakeTimeText,widgetMaxBrakeTime)end;if system.updateData(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)==1 then system.addDataToWidget(widgetMaxBrakeDistanceText,widgetMaxBrakeDistance)end;if system.updateData(widgetCurBrakeTimeText,widgetCurBrakeTime)==1 then system.addDataToWidget(widgetCurBrakeTimeText,widgetCurBrakeTime)end;if system.updateData(widgetCurBrakeDistanceText,widgetCurBrakeDistance)==1 then system.addDataToWidget(widgetCurBrakeDistanceText,widgetCurBrakeDistance)end;if system.updateData(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)==1 then system.addDataToWidget(widgetTrajectoryAltitudeText,widgetTrajectoryAltitude)end;WasInAtmo=false end end else HideInterplanetaryPanel()end;if warpdrive~=nil then if f(warpdrive.getData()).destination~="Unknown"and f(warpdrive.getData()).distance>400000 then warpdrive.show()showWarpWidget=true else warpdrive.hide()showWarpWidget=false end end elseif hj=="oneSecond"then ab=false;RefreshLastMaxBrake(nil,true)updateDistance()updateRadar()updateWeapons()local bW={}local cX=GetFlightStyle()DrawOdometer(bW,W,TotalDistanceTravelled,cX,X)CheckDamage(bW)a5=table.concat(bW,"")collectgarbage("collect")elseif hj=="fiveSecond"then ac=dbHud_1.getStringValue("SPBAutopilotTargetName")if ac~=nil and ac~=""and ac~="SatNavNotChanged"then local bd=json.decode(dbHud_1.getStringValue("SavedLocations"))if bd~=nil then _G["SavedLocations"]=bd;local bU=-1;local bP;for bb,bc in pairs(SavedLocations)do if bc.name and bc.name=="SatNav Location"then bU=bb;break end end;if bU~=-1 then bP=SavedLocations[bU]bU=-1;for bb,bc in pairs(aS[0])do if bc.name and bc.name=="SatNav Location"then bU=bb;break end end;if bU>-1 then aS[0][bU]=bP end;UpdateAtlasLocationsList()K=bP.name.." position updated"end end;for i=1,#AtlasOrdered do if AtlasOrdered[i].name==ac then AutopilotTargetIndex=i;system.print("Index = "..AutopilotTargetIndex.." "..AtlasOrdered[i].name)UpdateAutopilotTarget()dbHud_1.setStringValue("SPBAutopilotTargetName","SatNavNotChanged")break end end end elseif hj=="msgTick"then local bW={}DisplayMessage(bW,"empty")K="empty"unit.stopTimer("msgTick")a2=3 elseif hj=="animateTick"then b1=true;b0=false;a0=0;a1=0;unit.stopTimer("animateTick")elseif hj=="hudTick"then local bW={}HUDPrologue(bW)if showHud then UpdateHud(bW)else DisplayOrbitScreen(bW)DrawWarnings(bW)end;HUDEpilogue(bW)bW[#bW+1]=e([[<svg width="100%%" height="100%%" style="position:absolute;top:0;left:0"  viewBox="0 0 %d %d">]],ResolutionX,ResolutionY)if K~="empty"then DisplayMessage(bW,K)end;if o()==0 and userControlScheme=="virtual joystick"then DrawDeadZone(bW)end;if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then SetButtonContains()DrawButtons(bW)if screen_1.getMouseState()==1 then CheckButtons()end;bW[#bW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)elseif system.isViewLocked()==0 then if o()==1 and J then SetButtonContains()DrawButtons(bW)if not b0 and not b1 then local hl=table.concat(bW,"")bW={}bW[#bW+1]=e("<style>@keyframes test { from { opacity: 0; } to { opacity: 1; } }  body { animation-name: test; animation-duration: 0.5s; }</style><body><svg width='100%%' height='100%%' position='absolute' top='0' left='0'><rect width='100%%' height='100%%' x='0' y='0' position='absolute' style='fill:rgb(6,5,26);'/></svg><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bW[#bW+1]=aT;bW[#bW+1]=hl;bW[#bW+1]="</body>"b0=true;bW[#bW+1]=[[</svg></body>]]unit.setTimer("animateTick",0.5)local content=table.concat(bW,"")system.setScreen(content)elseif b1 then local hl=table.concat(bW,"")bW={}bW[#bW+1]=e("<body style='background-color:rgb(6,5,26)'><svg width='50%%' height='50%%' style='position:absolute;top:30%%;left:25%%' viewbox='0 0 %d %d'>",ResolutionX,ResolutionY)bW[#bW+1]=aT;bW[#bW+1]=hl;bW[#bW+1]="</body>"end;if not b0 then bW[#bW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end else CheckButtons()end else if not J and o()==0 then CheckButtons()if a3>DeadZone then DrawCursorLine(bW)end else SetButtonContains()DrawButtons(bW)end;bW[#bW+1]=e([[<g transform="translate(%d %d)"><circle class="cursor" cx="%fpx" cy="%fpx" r="5"/></g>]],s,t,a0,a1)end;bW[#bW+1]=[[</svg></body>]]content=table.concat(bW,"")if not DidLogOutput then system.logInfo(LastContent)DidLogOutput=true end elseif hj=="apTick"then b3=vec3(core.getConstructWorldOrientationForward()):dot(vec3(core.getWorldVelocity()):normalize())ad=j()>0;b8=system.getMouseDeltaX()b9=system.getMouseDeltaY()if InvertMouse and not J then b9=-b9 end;D=0;H=0;C=0;b4=vec3(core.getWorldVelocity())b5=vec3(b4):len()sys=aY[0]planet=sys:closestBody(core.getConstructWorldPos())kepPlanet=a_(planet)orbit=kepPlanet:orbitalParameters(core.getConstructWorldPos(),b4)aa=hoverDetectGround()if o()==1 and screen_1 and screen_1.getMouseY()~=-1 then a0=screen_1.getMouseX()*ResolutionX;a1=screen_1.getMouseY()*ResolutionY elseif system.isViewLocked()==0 then if o()==1 and J then if not b0 then a0=a0+b8;a1=a1+b9 end else a0=0;a1=0 end else a0=a0+b8;a1=a1+b9;a3=math.sqrt(a0*a0+a1*a1)if not J and o()==0 then if userControlScheme=="virtual joystick"then if a0>0 and a0>DeadZone then D=D-(a0-DeadZone)*MouseXSensitivity elseif a0<0 and a0<DeadZone*-1 then D=D-(a0+DeadZone)*MouseXSensitivity else D=0 end;if a1>0 and a1>DeadZone then C=C-(a1-DeadZone)*MouseYSensitivity elseif a1<0 and a1<DeadZone*-1 then C=C-(a1+DeadZone)*MouseYSensitivity else C=0 end elseif userControlScheme=="mouse"then a0=0;a1=0;C=(-utils.smoothstep(b9,-100,100)+0.5)*2*y;D=(-utils.smoothstep(b8,-100,100)+0.5)*2*z else a0=0;a1=0 end end end;local hm=b5>8334;if b5>SpaceSpeedLimit/3.6 and not ad and not Autopilot and not hm then K="Space Speed Engine Shutoff reached"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if not hm and LastIsWarping then if not BrakeIsOn then BrakeToggle()end;if Autopilot then ToggleAutopilot()end end;LastIsWarping=hm;if ad and j()>0.09 then if not ai then if b5>AtmoSpeedLimit/3.6 then BrakeIsOn=true;ai=true end else if b5<AtmoSpeedLimit/3.6 then BrakeIsOn=false;ai=false end end end;if BrakeIsOn then G=1 else G=0 end;ae=core.getAltitude()if ae==0 then ae=(vec3(core.getConstructWorldPos())-planet.center):len()-planet.radius end;if ProgradeIsOn then if b5>w then local hn=AlignToWorldVector(vec3(b4),0.01)if a7 then b2=true;if b5<ReentrySpeed/3.6 then BrakeIsOn=false;ProgradeIsOn=false;x=true;a7=false;a9=true;Autopilot=false;b2=autoRollPreference;BeginReentry()else BrakeIsOn=true end end end end;if RetrogradeIsOn then if ad then RetrogradeIsOn=false elseif b5>w then AlignToWorldVector(-vec3(b4))end end;if not ProgradeIsOn and a7 then if j()==0 then x=true;BeginReentry()a7=false;a9=true else a7=false;ToggleAutopilot()end end;if a9 and ae<ReentryAltitude+100 and b5*3.6>ReentrySpeed-100 then ToggleAutopilot()a9=false end;if Autopilot and j()==0 and not a7 then local P,Q;if not TurnBurn then P,Q=GetAutopilotBrakeDistanceAndTime(b5)else P,Q=GetAutopilotTBBrakeDistanceAndTime(b5)end;P=P;Q=Q;local ho=AutopilotTargetCoords;if orbit.apoapsis==nil and b5>300 and AutopilotAccelerating then local hp=(vec3(AutopilotTargetCoords)-vec3(core.getConstructWorldPos())):normalize()-vec3(b4):normalize()local hq=getMagnitudeInDirection(hp,AutopilotShipUp)local hr=getMagnitudeInDirection(hp,AutopilotShipRight)local hs=-hr*AutopilotDistance*b5*TrajectoryAlignmentStrength;local ht=-hq*AutopilotDistance*b5*TrajectoryAlignmentStrength;ho=AutopilotTargetCoords+-hs*vec3(AutopilotShipRight)+-ht*vec3(AutopilotShipUp)end;AutopilotDistance=(vec3(ho)-vec3(core.getConstructWorldPos())):len()local hu=(AutopilotTargetCoords-vec3(core.getConstructWorldPos())):len()system.updateData(widgetDistanceText,'{"label": "distance", "value": "'..getDistanceDisplayString(hu)..'", "unit":""}')local hv=true;local hw=(V.center-(vec3(core.getConstructWorldPos())+vec3(b4):normalize()*AutopilotDistance)):len()-V.radius;system.updateData(widgetTrajectoryAltitudeText,'{"label": "Projected Altitude", "value": "'..getDistanceDisplayString(hw)..'", "unit":""}')if not AutopilotCruising and not AutopilotBraking then hv=AlignToWorldVector((ho-vec3(core.getConstructWorldPos())):normalize())elseif TurnBurn then hv=AlignToWorldVector(-vec3(b4):normalize())end;if AutopilotAccelerating then if not hv or BrakeIsOn then AutopilotStatus="Adjusting Trajectory"else AutopilotStatus="Accelerating"end;if vec3(core.getConstructWorldOrientationForward()):dot(b4)<0 and b5>300 then BrakeIsOn=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false elseif not u then BrakeIsOn=false;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true end;if vec3(core.getVelocity()):len()>=MaxGameVelocity and math.abs(hw-AutopilotTargetOrbit)<1000 or unit.getThrottle()==0 and u then AutopilotAccelerating=false;AutopilotStatus="Cruising"AutopilotCruising=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end;if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false end elseif AutopilotBraking then BrakeIsOn=true;G=1;if TurnBurn then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,100)end;if CustomTarget~=nil and CustomTarget.planetname=="Space"and b5<50 then K="Autopilot complete, arrived at space location"AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"elseif(CustomTarget==nil or CustomTarget~=nil and CustomTarget.planetname~="Space")and orbit.periapsis~=nil and orbit.eccentricity<1 then AutopilotStatus="Circularizing"if orbit.eccentricity>L or orbit.apoapsis.altitude<AutopilotTargetOrbit and orbit.periapsis.altitude<AutopilotTargetOrbit then BrakeIsOn=false;AutopilotBraking=false;Autopilot=false;AutopilotStatus="Aligning"K="Autopilot completed, orbit established"G=0;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)u=false;if CustomTarget~=nil and CustomTarget.planetname~="Space"then ProgradeIsOn=true;a7=true end end end elseif AutopilotCruising then if AutopilotDistance<=P then AutopilotAccelerating=false;AutopilotStatus="Braking"AutopilotBraking=true end;if unit.getThrottle()>0 then AutopilotAccelerating=true;AutopilotStatus="Accelerating"AutopilotCruising=false end else if hv then if not AutopilotRealigned and CustomTarget==nil or not AutopilotRealigned and CustomTarget~=nil and CustomTarget.planetname~="Space"then if not a7 then AutopilotTargetCoords=vec3(V.center)+(AutopilotTargetOrbit+V.radius)*vec3(core.getConstructWorldOrientationRight())AutopilotShipUp=core.getConstructWorldOrientationUp()AutopilotShipRight=core.getConstructWorldOrientationRight()end;AutopilotRealigned=true elseif hv then AutopilotAccelerating=true;AutopilotStatus="Accelerating"if not u then Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,AutopilotInterplanetaryThrottle)u=true;BrakeIsOn=false end end end end end;if I then b2=true;local hx=0;local bF=vec3(core.getConstructWorldPos())+vec3(unit.getMasterPlayerRelativePosition())local hy=bF-vec3(core.getConstructWorldPos())local hz=vec3(hy):project_on(vec3(core.getConstructWorldOrientationForward())):len()local hA=vec3(hy):project_on(vec3(core.getConstructWorldOrientationRight())):len()local a3=math.sqrt(hz*hz+hA*hA)AlignToWorldVector(hy:normalize())local hB=40;local hC=a3<hB;local hD=100;local hE=utils.clamp((a3-hB)/2,10,hD)C=0;local hv=math.abs(D)<0.1;if hv and b5<hE and not hC then BrakeIsOn=false;hx=-20 else BrakeIsOn=true;hx=0 end;local bZ=vec3(core.getConstructWorldOrientationForward())local b_=vec3(core.getConstructWorldOrientationRight())local c0=vec3(core.getWorldVertical())local c1=getPitch(c0,bZ,b_)local hF=1.0;if math.abs(hx-c1)>hF then if pitchPID==nil then pitchPID=pid.new(2*0.01,0,2*0.1)end;pitchPID:inject(hx-c1)local hG=pitchPID:get()C=hG end end;local du=vec3(core.getWorldVertical())*-1;if AltitudeHold or BrakeLanding or Reentry or VectorToTarget or LockPitch~=nil then local d9=unit.getClosestPlanetInfluence()>0;local hH=HoldAltitude-ae;local hI=500+b5;local hx=(utils.smoothstep(hH,-hI,hI)-0.5)*2*MaxPitch;if not AltitudeHold then hx=0 end;if LockPitch~=nil then if d9 then hx=LockPitch else LockPitch=nil end end;b2=true;if Reentry then local hJ=ReentrySpeed;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=hJ then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,hJ)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end;if not x then hx=-80;if j()>0.02 then K="PARACHUTE DEPLOYED"Reentry=false;BrakeLanding=true;hx=0;b2=autoRollPreference end elseif Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==ReentrySpeed then x=false;Reentry=false;b2=autoRollPreference end end;local hK=C;if b5>w and not a8 then AlignToWorldVector(vec3(b4))end;if VectorToTarget and CustomTarget~=nil and AutopilotTargetIndex>0 then local cP=CustomTarget.position-vec3(core.getConstructWorldPos())AlignToWorldVector(cP)local hL=planet:getAltitude(CustomTarget.position)local hM=math.sqrt(cP:len()^2-(ae-hL)^2)local hN=LastMaxBrakeInAtmo;if hN then hN=hN*utils.clamp(b5/100,0.1,1)*unit.getAtmosphereDensity()else hN=LastMaxBrake end;local ds=b4.x*du.x+b4.y*du.y+b4.z*du.z;local hO=b4:len()-math.abs(ds)local hP=vec3(core.getWorldAirFrictionAcceleration())local hQ=math.sqrt(hP:len()-hP:project_on(du):len())*n()if hO>100 then P,Q=aZ.computeDistanceAndTime(hO,100,n(),0,0,hN+hQ)local hR,_=aZ.computeDistanceAndTime(100,0,n(),0,0,hN/2)P=P+hR else P,Q=aZ.computeDistanceAndTime(hO,0,n(),0,0,hN/2)end;StrongBrakes=true;if hM<=P then VectorStatus="Finalizing Approach"if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;if AltitudeHold then ToggleAltitudeHold()end;BrakeLanding=true;VectorToTarget=false elseif not AutoTakeoff then BrakeIsOn=false end end;C=hK;local bZ=vec3(core.getConstructWorldOrientationForward())local b_=vec3(core.getConstructWorldOrientationRight())local c0=vec3(core.getWorldVertical())local eQ=-1;local c1=getPitch(c0,bZ,b_)local hF=0.1;if BrakeLanding then hx=0;local ds=b4.x*du.x+b4.y*du.y+b4.z*du.z;local hS=false;local hT=0;if MaxKinematicUp~=nil and MaxKinematicUp>0 then if vbooster and vbooster.getMaxDistance then if vbooster.getMaxDistance()>hT then hT=vbooster.getMaxDistance()end end;if hover and hover.getMaxDistance then if hover.getMaxDistance()>hT then hT=hover.getMaxDistance()end end;if telemeter_1 then if telemeter_1.getMaxDistance()>hT then hT=telemeter_1.getMaxDistance()end end;if hT==0 then hT=30 end;local bn=planet.gravity*9.8*core.getConstructMass()local hQ=vec3(core.getWorldAirFrictionAcceleration()):len()*core.getConstructMass()local hN=LastMaxBrakeInAtmo*utils.clamp(ds/100,0.1,1)*unit.getAtmosphereDensity()local hU=MaxKinematicUp*unit.getAtmosphereDensity()+hN+hQ-bn;local hV,_=aZ.computeDistanceAndTime(math.abs(ds),0,core.getConstructMass(),0,0,hU)if hV>=hT then BrakeIsOn=true else BrakeIsOn=false end;hS=true end;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setTargetGroundAltitude(500)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)eQ=aa;if eQ>-1 then if math.abs(hx-c1)<hF then b2=autoRollPreference;if b5<1 then BrakeLanding=false;AltitudeHold=false;GearExtended=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)Z=0;BrakeIsOn=true else BrakeIsOn=true end end elseif StrongBrakes and b4:normalize():dot(-du)<0.999 then BrakeIsOn=true elseif ds<-brakeLandingRate and not hS then BrakeIsOn=true elseif not hS then BrakeIsOn=false end end;if AutoTakeoff or a8 then if hx<15 then AutoTakeoff=false;if not a8 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end elseif a8 and b5<w then Autopilot=true;a8=false;AltitudeHold=false;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)elseif a8 then if Nav.axisCommandManager:getAxisCommandType(0)~=0 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)BrakeIsOn=true end elseif a8 and j()==0 and ae>75000 then if Nav.axisCommandManager:getAxisCommandType(0)==0 then Nav.control.cancelCurrentControlMasterMode()end;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)~=1500 then Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.longitudinal,1500)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.vertical,0)Nav.axisCommandManager:setTargetSpeedCommand(axisCommandId.lateral,0)end end end;if math.abs(hx-c1)>hF then if pitchPID==nil then pitchPID=pid.new(8*0.01,0,8*0.1)end;pitchPID:inject(hx-c1)local hG=pitchPID:get()C=C+hG end end;L=orbit.eccentricity;if antigrav and not ExternalAGG and ae<200000 then if AntigravTargetAltitude==nil or AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;if desiredBaseAltitude~=AntigravTargetAltitude then desiredBaseAltitude=AntigravTargetAltitude;antigrav.setBaseAltitude(desiredBaseAltitude)end end end end;function script.onFlush()if antigrav and not ExternalAGG then if antigrav.getState()==0 and antigrav.getBaseAltitude()~=AntigravTargetAltitude then antigrav.setBaseAltitude(AntigravTargetAltitude)end end;pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local hW=utils.clamp(B+C+system.getControlDeviceForwardInput(),-1,1)local hX=utils.clamp(E+H+system.getControlDeviceYawInput(),-1,1)local hY=utils.clamp(F+D-system.getControlDeviceLeftRightInput(),-1,1)local hZ=G;local h_=vec3(core.getWorldVertical())local i0=vec3(core.getConstructWorldOrientationUp())local i1=vec3(core.getConstructWorldOrientationForward())local i2=vec3(core.getConstructWorldOrientationRight())local i3=vec3(core.getWorldVelocity())local i4=vec3(core.getWorldVelocity()):normalize()local i5=getRoll(h_,i1,i2)local i6=math.abs(i5)local i7=utils.sign(i5)local j=j()local i8=vec3(core.getWorldAngularVelocity())local i9=hW*pitchSpeedFactor*i2+hX*rollSpeedFactor*i1+hY*yawSpeedFactor*i0;if h_:len()>0.01 and j>0.0 or ProgradeIsOn then local ia=1.0;if b2==true and i6>ia and hX==0 then local ib=utils.clamp(0,i6-30,i6+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(ib-i5)local ic=rollPID:get()i9=i9+ic*i1 end end;if h_:len()>0.01 and j>0.0 then local id=20.0;if turnAssist==true and i6>id and hW==0 and hY==0 then local ie=turnAssistFactor*0.1;local ig=turnAssistFactor*0.025;local ih=(i6-id)/(180-id)*180;local ii=0;if ih<90 then ii=ih/90 elseif ih<180 then ii=(180-ih)/90 end;ii=ii*ii;local ij=-i7*ig*(1.0-ii)local ik=ie*ii;i9=i9+ik*i2+ij*i0 end end;local il=1;local im=0;local io=1;local ip=torqueFactor*(i9-i8)local iq=vec3(core.getWorldAirFrictionAngularAcceleration())ip=ip-iq;Nav:setEngineTorqueCommand('torque',ip,il,'airfoil','','',io)local ir=-hZ*(brakeSpeedFactor*i3+brakeFlatFactor*i4)Nav:setEngineForceCommand('brake',ir)local is=''local it=vec3()local iu=false;local iv='thrust analog longitudinal 'if ExtraLongitudeTags~="none"then iv=iv..ExtraLongitudeTags end;local iw=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if iw==axisCommandType.byThrottle then local ix=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iv,axisCommandId.longitudinal)Nav:setEngineForceCommand(iv,ix,il)elseif iw==axisCommandType.byTargetSpeed then local ix=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)is=is..' , '..iv;it=it+ix;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then iu=true end end;local iy='thrust analog lateral 'if ExtraLateralTags~="none"then iy=iy..ExtraLateralTags end;local iz=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if iz==axisCommandType.byThrottle then local iA=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iy,axisCommandId.lateral)Nav:setEngineForceCommand(iy,iA,il)elseif iz==axisCommandType.byTargetSpeed then local iB=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)is=is..' , '..iy;it=it+iB end;local iC='thrust analog vertical 'if ExtraVerticalTags~="none"then iC=iC..ExtraVerticalTags end;local iD=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if iD==axisCommandType.byThrottle then local iE=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(iC,axisCommandId.vertical)if Z~=0 or BrakeLanding and BrakeIsOn then Nav:setEngineForceCommand(iC,iE,il,'airfoil','ground','',io)else Nav:setEngineForceCommand(iC,vec3(),il)Nav:setEngineForceCommand('airfoil vertical',iE,il,'airfoil','','',io)Nav:setEngineForceCommand('ground vertical',iE,il,'ground','','',io)end elseif iD==axisCommandType.byTargetSpeed then if Z==0 then Nav:setEngineForceCommand('hover',vec3(),il)end;local iF=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)is=is..' , '..iC;it=it+iF end;if it:len()>constants.epsilon then if G~=0 or iu or math.abs(i4:dot(i1))<0.95 then is=is..', brake'end;Nav:setEngineForceCommand(is,it,im,'','','',io)end;Nav:setBoosterCommand('rocket_engine')if O and not VanillaRockets then local bq=vec3(core.getVelocity()):len()local iG=0.15;if Nav.axisCommandManager:getAxisCommandType(0)==1 then local iH=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if bq*3.6>iH*(1-iG)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bq*3.6<iH*(1-iG)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else local iI=unit.getThrottle()local hE=iI/100;if j==0 then hE=hE*MaxGameVelocity;if bq>=hE*(1-iG)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bq<hE*(1-iG)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end else hE=hE*ReentrySpeed/3.6;if bq>=hE*(1-iG)and IsRocketOn then IsRocketOn=false;Nav:toggleBoosters()elseif bq<hE*(1-iG)and not IsRocketOn then IsRocketOn=true;Nav:toggleBoosters()end end end end end;function script.onUpdate()if not SetupComplete then local _,bd=coroutine.resume(beginSetup)if bd then SetupComplete=true end else Nav:update()if not b0 and content~=LastContent then system.setScreen(content)end;LastContent=content end end;function script.onActionStart(iJ)if iJ=="gear"then if A then GearExtended=Nav.control.isAnyLandingGearExtended()==1;if GearExtended then Nav.control.retractLandingGears()GearExtended=false else Nav.control.extendLandingGears()GearExtended=true end else GearExtended=not GearExtended end;if GearExtended then VectorToTarget=false;LockPitch=nil;if Nav.axisCommandManager:getAxisCommandType(0)==1 then Nav.control.cancelCurrentControlMasterMode()end;Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)if(vBooster or hover)and aa==-1 and(j()>0 or ae<ReentryAltitude)then StrongBrakes=planet.gravity*9.80665*n()<LastMaxBrakeInAtmo;if not StrongBrakes and b5>w then K="WARNING: Insufficient Brakes - Attempting landing anyway"end;Reentry=false;AutoTakeoff=false;AltitudeHold=false;BrakeLanding=true;b2=true else BrakeIsOn=true;Nav.control.extendLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(LandingGearGroundHeight)end else Nav.control.retractLandingGears()Nav.axisCommandManager:setTargetGroundAltitude(TargetHoverHeight)end elseif iJ=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif iJ=="forward"then B=B-1 elseif iJ=="backward"then B=B+1 elseif iJ=="left"then E=E-1 elseif iJ=="right"then E=E+1 elseif iJ=="yawright"then F=F-1 elseif iJ=="yawleft"then F=F+1 elseif iJ=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif iJ=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif iJ=="up"then Z=Z+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif iJ=="down"then Z=Z-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif iJ=="groundaltitudeup"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end else AntigravTargetAltitude=desiredBaseAltitude+100 end elseif AltitudeHold then HoldAltitude=HoldAltitude+M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)end elseif iJ=="groundaltitudedown"then OldButtonMod=M;OldAntiMod=N;if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end else AntigravTargetAltitude=desiredBaseAltitude end elseif AltitudeHold then HoldAltitude=HoldAltitude-M else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)end elseif iJ=="option1"then IncrementAutopilotTargetIndex()v=false elseif iJ=="option2"then DecrementAutopilotTargetIndex()v=false elseif iJ=="option3"then if hideHudOnToggleWidgets then if showHud then showHud=false else showHud=true end end;v=false;ToggleWidgets()elseif iJ=="option4"then ToggleAutopilot()v=false elseif iJ=="option5"then ToggleLockPitch()v=false elseif iJ=="option6"then ToggleAltitudeHold()v=false elseif iJ=="option7"then wipeSaveVariables()v=false elseif iJ=="option8"then ToggleFollowMode()v=false elseif iJ=="option9"then if gyro~=nil then gyro.toggle()ah=gyro.getState()==1 end;v=false elseif iJ=="lshift"then if system.isViewLocked()==1 then J=true;PrevViewLock=system.isViewLocked()system.lockView(1)elseif o()==1 and ShiftShowsRemoteButtons then J=true;b1=false;b0=false end elseif iJ=="brake"then if BrakeToggleStatus then BrakeToggle()elseif not BrakeIsOn then BrakeToggle()else BrakeIsOn=true end elseif iJ=="lalt"then if o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(1)end elseif iJ=="booster"then if VanillaRockets then Nav:toggleBoosters()elseif not O then if not IsRocketOn then Nav:toggleBoosters()IsRocketOn=true end;O=true else if IsRocketOn then Nav:toggleBoosters()IsRocketOn=false end;O=false end elseif iJ=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)clearAll()elseif iJ=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,speedChangeLarge)else IncrementAutopilotTargetIndex()end elseif iJ=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-speedChangeLarge)else DecrementAutopilotTargetIndex()end elseif iJ=="antigravity"and not ExternalAGG then if antigrav~=nil then ToggleAntigrav()end end end;function script.onActionStop(iJ)if iJ=="forward"then B=0 elseif iJ=="backward"then B=0 elseif iJ=="left"then E=0 elseif iJ=="right"then E=0 elseif iJ=="yawright"then F=0 elseif iJ=="yawleft"then F=0 elseif iJ=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif iJ=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif iJ=="up"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iJ=="down"then Z=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand('hover',vec3(),1)elseif iJ=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iJ=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then N=OldAntiMod end;if AltitudeHold then M=OldButtonMod end;v=false elseif iJ=="lshift"then if system.isViewLocked()==1 then J=false;a0=0;a1=0;system.lockView(PrevViewLock)elseif o()==1 and ShiftShowsRemoteButtons then J=false;b1=false;b0=false end elseif iJ=="brake"then if not BrakeToggleStatus then if BrakeIsOn then BrakeToggle()else BrakeIsOn=false end end elseif iJ=="lalt"then if o()==0 and freeLookToggle then if v then if system.isViewLocked()==1 then system.lockView(0)else system.lockView(1)end else v=true end elseif o()==0 and not freeLookToggle and userControlScheme=="keyboard"then system.lockView(0)end end end;function script.onActionLoop(iJ)if iJ=="groundaltitudeup"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude+N;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude+N end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude+100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude+M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)end elseif iJ=="groundaltitudedown"then if antigrav and not ExternalAGG and antigrav.getState()==1 then if AntigravTargetAltitude~=nil then if AltitudeHold and AntigravTargetAltitude<HoldAltitude+10 and AntigravTargetAltitude>HoldAltitude-10 then AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end;HoldAltitude=AntigravTargetAltitude else AntigravTargetAltitude=AntigravTargetAltitude-N;if AntigravTargetAltitude<1000 then AntigravTargetAltitude=1000 end end;N=N*1.05;BrakeIsOn=false else AntigravTargetAltitude=desiredBaseAltitude-100;BrakeIsOn=false end elseif AltitudeHold then HoldAltitude=HoldAltitude-M;M=M*1.05 else Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)end elseif iJ=="speedup"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,speedChangeSmall)end elseif iJ=="speeddown"then if not J then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-speedChangeSmall)end end end;function script.onInputText(iK)local i;local iL="/commands /setname /G /agg /addlocation"local iM,iN;local iO="Command List:\n/commands \n/setname <newname> - Updates current selected saved position name\n/G VariableName newValue - Updates global variable to new value\n".."/G dump - shows all updatable variables with /G\n/agg <targetheight> - Manually set agg target height\n/".."addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572} - adds a saved location by waypoint, not as accurate as making one at location"i=string.find(iK," ")if i~=nil then iM=string.sub(iK,0,i-1)iN=string.sub(iK,i+1)elseif i==nil or not string.find(iL,iM)then for f8 in string.gmatch(iO,"([^\n]+)")do c(f8)end;return end;if iM=="/setname"then if iN==nil or iN==""then K="Usage: /setname Newname"return end;if AutopilotTargetIndex>0 and CustomTarget~=nil then UpdatePosition(iN)else K="Select a saved target to rename first"end elseif iM=="/addlocation"then if iN==nil or iN==""or string.find(iN,"::")==nil then K="Usage: /addlocation savename ::pos{0,2,46.4596,-155.1799,22.6572}"return end;i=string.find(iN,"::")local bO=string.sub(iN,1,i-2)local bF=string.sub(iN,i)local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local bG='::pos{'..p..','..p..','..p..','..p..','..p..'}'local bH,bI,bJ,bK,bL=string.match(bF,bG)local planet=aS[tonumber(bH)][tonumber(bI)]AddNewLocationByWaypoint(bO,planet,bF)K="Added "..bO.." to saved locations,\nplanet "..planet.name.." at "..bF;a2=5 elseif iM=="/agg"then if iN==nil or iN==""then K="Usage: /agg targetheight"return end;iN=tonumber(iN)if iN<1000 then iN=1000 end;AntigravTargetAltitude=iN;K="AGG Target Height set to "..iN elseif iM=="/G"then if iN==nil or iN==""then K="Usage: /G VariableName variablevalue\n/G dump - shows all variables"return end;if iN=="dump"then for bb,bc in pairs(a)do if type(_G[bc])=="boolean"then if _G[bc]==true then c(bc.." true")else c(bc.." false")end elseif _G[bc]==nil then c(bc.." nil")else c(bc.." ".._G[bc])end end;return end;i=string.find(iN," ")local iP=string.sub(iN,0,i-1)local iQ=string.sub(iN,i+1)for bb,bc in pairs(a)do if bc==iP then K="Variable "..iP.." changed to "..iQ;local iR=type(_G[bc])if iR=="number"then iQ=tonumber(iQ)elseif iR=="boolean"then if string.lower(iQ)=="true"then iQ=true else iQ=false end end;_G[bc]=iQ;return end end;K="No such global variable: "..iP end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    inputText(text):
      lua: |
        if not __wrap_lua__stopped and script.onInputText then
          local ok, message = xpcall(script.onInputText,__wrap_lua__traceback,text,system)
          if not ok then __wrap_lua__error(message) end
        end
