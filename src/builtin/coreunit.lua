CoreUnit = require('src.builtin.element')

-- Returns the mass of the construct in kilograms
function CoreUnit.getConstructMass()
end

-- Returns the inertial mass of the construct, calculated as 1/3 of the trace of the inertial tensor

function CoreUnit.getConstructIMass()
end

-- Returns the constructs cross sectional surface in the current direction of movement

function CoreUnit.getConstructCrossSection()
end

-- Returns the construct max kinematics parameters in both atmo and space range, in newtons.
-- Kinematics parameters designate here the maximal positive and negative base force that the
-- construct is capable of producing along the chosen axis vector, as defined by the core unit or gyro.
-- In practice, this gives you an estimate of the maximum thrust your ship is capable of producing in
-- space or in atmosphere, as well as the max reverse thrust. These are theoretical estimates and
-- correspond with the addition of the maxThrustBase along the corresponding axis. It might not reflect
-- the accurate current max thrust capacity of yours hip, which depends on various local
-- conditions (atmospheric density, orientation, obstruction, engine damage, etc). This is typically used in
-- conjunction with the control unit throttle to setup the desired forward acceleration.
function CoreUnit.getMaxKinematicsParametersAlongAxis(taglist, CRefAxis)
end

-- Returns the world position of the construct
function CoreUnit.getConstructWorldPos()
end

-- Returns the construct unique ID
function CoreUnit.getConstructId()
end
-- Returns the acceleration torque generated by air resistance.
function CoreUnit.getWorldAirFrictionAngularAcceleration()
end
-- Returns the acceleration generated by air resistance
function CoreUnit.getWorldAirFrictionAcceleration()
end
-- Spawns a number sticker in the 3D world, with coordinates relative to the construct.
function CoreUnit.spawnNumberSticker(nb, x, y, z, orientation)
end
-- Spawns an arrow sticker in the 3D world, with coordinates relative to the construct.
function CoreUnit.spawnArrowSticker(x, y, z, orientation)
end
-- Delete the referenced sticker.
function CoreUnit.deleteSticker(index)
end
-- Move the referenced sticker.
function CoreUnit.moveSticker(index, x, y, z)
end
-- Rotate the referenced sticker.
function CoreUnit.rotateSticker(index, angleX, angleY, angleZ)
end
-- List of all the UIDs of the elements of this construct
function CoreUnit.getElementIdList()
end
-- Name of the element, identified by its UID
function CoreUnit.getElementNameById(localId)
end

-- Type of the element, identified by its UID 
function CoreUnit.getElementTypeById(localId)
end

-- Current level of hit points of the element, identified by its UID 
function CoreUnit.getElementHitPointsById(localIdr)
end

-- Max level of hit points of the element, identified by its UID 
function CoreUnit.getElementMaxHitPointsById(localId)
end

-- Mass of the element, identified by its UID 
function CoreUnit.getElementMassById(localId)
end

-- Altitude above sea level, with respect to the closest planet (0 in space)
function CoreUnit.getAltitude()
end

-- local gravity intensity
function CoreUnit.g()
end

-- local gravity vector in world coordinates
function CoreUnit.getWorldGravity()
end

-- Vertical unit vector along gravity, in world coordinates (0 in space)
function CoreUnit.getWorldVertical()
end

-- The constructs angular velocity, in world coordinates
function CoreUnit.getAngularVelocity()
end

-- The constructs angular acceleration, in construct local coordinates
function CoreUnit.getWorldAngularVelocity()
end

-- The constructs angular acceleration, in construct local coordinates
function CoreUnit.getAngularAcceleration()
end

-- The constructs angular acceleration, in world coordinates
function CoreUnit.getWorldAngularAcceleration()
end

-- The constructs linear velocity, in construct local coordinates
function CoreUnit.getVelocity()
end

-- The constructs linear velocity, in world coordinates
function CoreUnit.getWorldVelocity()
end

-- The constructs linear acceleration, in world coordinates
function CoreUnit.getWorldAcceleration()
end

-- The constructs linear acceleration, in construct local coordinates
function CoreUnit.getAcceleration()
end

-- The constucts current orientation up vector, in construct local coordinates
function CoreUnit.getConstructOrientationUp()
end

-- The constructs current orientation right vector, in construct local coordinates
function CoreUnit.getConstructOrientationRight()
end

-- The constructs current orientation forward vector, in construct local coordinates
function CoreUnit.getConstructOrientationForward()
end

-- The constructs current orientation up vector, in world coordinates
function CoreUnit.getConstructWorldOrientationUp()
end

-- The constructs current orientation right vector, in world coordinates
function CoreUnit.getConstructWorldOrientationRight()
end

-- The constructs current orientation forward vector, in world coordinates
function CoreUnit.getConstructWorldOrientationForward()
end

return CoreUnit
